//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/minip/source/repos/Keysharp_clone/Keysharp.Core/Scripting/Parser/Antlr/PreprocessorParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PreprocessorParser : PreprocessorParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DerefStart=1, DerefEnd=2, StartFunctionStatement=3, SingleLineBlockComment=4, 
		RegularExpressionLiteral=5, HotstringTrigger=6, RemapKey=7, HotkeyTrigger=8, 
		OpenBracket=9, CloseBracket=10, OpenParen=11, CloseParen=12, OpenBrace=13, 
		CloseBrace=14, SemiColon=15, Comma=16, Assign=17, QuestionMark=18, QuestionMarkDot=19, 
		Colon=20, DoubleColon=21, Ellipsis=22, Dot=23, ConcatDot=24, PlusPlus=25, 
		MinusMinus=26, Plus=27, Minus=28, BitNot=29, Not=30, Multiply=31, Divide=32, 
		IntegerDivide=33, Modulus=34, Power=35, NullCoalesce=36, Hashtag=37, RightShiftArithmetic=38, 
		LeftShiftArithmetic=39, RightShiftLogical=40, LessThan=41, MoreThan=42, 
		LessThanEquals=43, GreaterThanEquals=44, Equals_=45, NotEquals=46, IdentityEquals=47, 
		IdentityNotEquals=48, RegExMatch=49, BitAnd=50, BitXOr=51, BitOr=52, And=53, 
		Or=54, MultiplyAssign=55, DivideAssign=56, ModulusAssign=57, PlusAssign=58, 
		MinusAssign=59, LeftShiftArithmeticAssign=60, RightShiftArithmeticAssign=61, 
		RightShiftLogicalAssign=62, IntegerDivideAssign=63, ConcatenateAssign=64, 
		BitAndAssign=65, BitXorAssign=66, BitOrAssign=67, PowerAssign=68, NullishCoalescingAssign=69, 
		Arrow=70, NullLiteral=71, Unset=72, True=73, False=74, DecimalLiteral=75, 
		HexIntegerLiteral=76, OctalIntegerLiteral=77, OctalIntegerLiteral2=78, 
		BinaryIntegerLiteral=79, BigHexIntegerLiteral=80, BigOctalIntegerLiteral=81, 
		BigBinaryIntegerLiteral=82, BigDecimalIntegerLiteral=83, Break=84, Do=85, 
		Instanceof=86, Switch=87, Case=88, Default=89, Else=90, Catch=91, Finally=92, 
		Return=93, Continue=94, For=95, While=96, LoopParse=97, LoopReg=98, LoopRead=99, 
		LoopFiles=100, Loop=101, Until=102, This=103, If=104, Throw=105, Delete=106, 
		In=107, Try=108, Yield=109, Is=110, Contains=111, VerbalAnd=112, VerbalNot=113, 
		VerbalOr=114, Goto=115, Get=116, Set=117, Class=118, Enum=119, Extends=120, 
		Super=121, Base=122, Export=123, Import=124, From=125, As=126, Async=127, 
		Await=128, Static=129, Global=130, Local=131, Include=132, IncludeAgain=133, 
		HotIf=134, HotIfTimeout=135, ClipboardTimeout=136, DllLoad=137, ErrorStdOut=138, 
		InputLevel=139, MaxThreads=140, MaxThreadsBuffer=141, MaxThreadsPerHotkey=142, 
		NoTrayIcon=143, Requires=144, SingleInstance=145, SuspendExempt=146, UseHook=147, 
		Warn=148, WinActivateForce=149, HotstringOptions=150, AssemblyTitle=151, 
		AssemblyDescription=152, AssemblyConfiguration=153, AssemblyCompany=154, 
		AssemblyProduct=155, AssemblyCopyright=156, AssemblyTrademark=157, AssemblyVersion=158, 
		Identifier=159, StringLiteral=160, EOL=161, WS=162, UnexpectedCharacter=163, 
		HotstringWhitespaces=164, HotstringExpansion=165, HotstringUnexpectedCharacter=166, 
		DirectiveWhitespaces=167, DirectiveContent=168, DirectiveUnexpectedCharacter=169, 
		PreprocessorDirectiveWS=170, Digits=171, Define=172, Undef=173, ElIf=174, 
		EndIf=175, Line=176, Error=177, Warning=178, Region=179, EndRegion=180, 
		Pragma=181, Nullable=182, DirectiveHidden=183, ConditionalSymbol=184, 
		DirectiveSingleLineComment=185, DirectiveNewline=186, Text=187;
	public const int
		RULE_preprocessor_directive = 0, RULE_directive_new_line_or_sharp = 1, 
		RULE_preprocessor_expression = 2;
	public static readonly string[] ruleNames = {
		"preprocessor_directive", "directive_new_line_or_sharp", "preprocessor_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'['", "']'", "'('", 
		"')'", "'{'", "'}'", "';'", "','", "':='", "'?'", "'?.'", "':'", "'::'", 
		"'...'", "'.'", null, "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", 
		"'/'", "'//'", "'%'", "'**'", "'??'", null, "'>>'", "'<<'", "'>>>'", "'<'", 
		"'>'", "'<='", "'>='", "'='", "'!='", "'=='", "'!=='", "'~='", "'&'", 
		"'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'<<='", "'>>='", "'>>>='", "'//='", "'.='", "'&='", "'^='", "'|='", "'**='", 
		"'??='", "'=>'", "'null'", "'unset'", "'true'", "'false'", null, null, 
		null, null, null, null, null, null, null, "'break'", "'do'", "'instanceof'", 
		"'switch'", "'case'", "'default'", "'else'", "'catch'", "'finally'", "'return'", 
		"'continue'", "'for'", "'while'", null, null, null, null, null, "'until'", 
		"'this'", "'if'", "'throw'", "'delete'", "'in'", "'try'", "'yield'", "'is'", 
		"'contains'", "'and'", "'not'", "'or'", "'goto'", "'get'", "'set'", "'class'", 
		"'enum'", "'extends'", "'super'", "'base'", "'export'", "'import'", "'from'", 
		"'as'", "'async'", "'await'", "'static'", "'global'", "'local'", "'#include'", 
		"'#includeagain'", "'#hotif'", "'#hotiftimeout'", "'#clipboardtimeout'", 
		"'#dllload'", "'#errorstdout'", "'#inputlevel'", "'#maxthreads'", "'#maxthreadsbuffer'", 
		"'#maxthreadsperhotkey'", "'#notrayicon'", "'#requires'", "'#singleinstance'", 
		"'#suspendexempt'", "'#usehook'", "'#warn'", "'#winactivateforce'", null, 
		"'#assemblytitle'", "'#assemblydescription'", "'#assemblyconfiguration'", 
		"'#assemblycompany'", "'#assemblyproduct'", "'#assemblycopyright'", "'#assemblytrademark'", 
		"'#assemblyversion'", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'define'", "'undef'", "'elif'", "'endif'", 
		"'line'", null, null, null, null, null, null, "'hidden'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DerefStart", "DerefEnd", "StartFunctionStatement", "SingleLineBlockComment", 
		"RegularExpressionLiteral", "HotstringTrigger", "RemapKey", "HotkeyTrigger", 
		"OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "QuestionMarkDot", 
		"Colon", "DoubleColon", "Ellipsis", "Dot", "ConcatDot", "PlusPlus", "MinusMinus", 
		"Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", "IntegerDivide", 
		"Modulus", "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", 
		"LeftShiftArithmetic", "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", 
		"GreaterThanEquals", "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
		"RegExMatch", "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
		"DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", 
		"RightShiftArithmeticAssign", "RightShiftLogicalAssign", "IntegerDivideAssign", 
		"ConcatenateAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", "PowerAssign", 
		"NullishCoalescingAssign", "Arrow", "NullLiteral", "Unset", "True", "False", 
		"DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", 
		"BinaryIntegerLiteral", "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
		"BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", "Break", "Do", 
		"Instanceof", "Switch", "Case", "Default", "Else", "Catch", "Finally", 
		"Return", "Continue", "For", "While", "LoopParse", "LoopReg", "LoopRead", 
		"LoopFiles", "Loop", "Until", "This", "If", "Throw", "Delete", "In", "Try", 
		"Yield", "Is", "Contains", "VerbalAnd", "VerbalNot", "VerbalOr", "Goto", 
		"Get", "Set", "Class", "Enum", "Extends", "Super", "Base", "Export", "Import", 
		"From", "As", "Async", "Await", "Static", "Global", "Local", "Include", 
		"IncludeAgain", "HotIf", "HotIfTimeout", "ClipboardTimeout", "DllLoad", 
		"ErrorStdOut", "InputLevel", "MaxThreads", "MaxThreadsBuffer", "MaxThreadsPerHotkey", 
		"NoTrayIcon", "Requires", "SingleInstance", "SuspendExempt", "UseHook", 
		"Warn", "WinActivateForce", "HotstringOptions", "AssemblyTitle", "AssemblyDescription", 
		"AssemblyConfiguration", "AssemblyCompany", "AssemblyProduct", "AssemblyCopyright", 
		"AssemblyTrademark", "AssemblyVersion", "Identifier", "StringLiteral", 
		"EOL", "WS", "UnexpectedCharacter", "HotstringWhitespaces", "HotstringExpansion", 
		"HotstringUnexpectedCharacter", "DirectiveWhitespaces", "DirectiveContent", 
		"DirectiveUnexpectedCharacter", "PreprocessorDirectiveWS", "Digits", "Define", 
		"Undef", "ElIf", "EndIf", "Line", "Error", "Warning", "Region", "EndRegion", 
		"Pragma", "Nullable", "DirectiveHidden", "ConditionalSymbol", "DirectiveSingleLineComment", 
		"DirectiveNewline", "Text"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PreprocessorParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PreprocessorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PreprocessorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PreprocessorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Preprocessor_directiveContext : ParserRuleContext {
		public Boolean value;
		public Preprocessor_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_directive; } }
	 
		public Preprocessor_directiveContext() { }
		public virtual void CopyFrom(Preprocessor_directiveContext context) {
			base.CopyFrom(context);
			this.value = context.value;
		}
	}
	public partial class PreprocessorSingleInstanceContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SingleInstance() { return GetToken(PreprocessorParser.SingleInstance, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Text() { return GetToken(PreprocessorParser.Text, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		public PreprocessorSingleInstanceContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorSingleInstance(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorDiagnosticContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Error() { return GetToken(PreprocessorParser.Error, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Text() { return GetToken(PreprocessorParser.Text, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Warning() { return GetToken(PreprocessorParser.Warning, 0); }
		public PreprocessorDiagnosticContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDiagnostic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorNullableContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Nullable() { return GetToken(PreprocessorParser.Nullable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Text() { return GetToken(PreprocessorParser.Text, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		public PreprocessorNullableContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorNullable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorRegionContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Region() { return GetToken(PreprocessorParser.Region, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Text() { return GetToken(PreprocessorParser.Text, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndRegion() { return GetToken(PreprocessorParser.EndRegion, 0); }
		public PreprocessorRegionContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorRegion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorDeclarationContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Define() { return GetToken(PreprocessorParser.Define, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConditionalSymbol() { return GetToken(PreprocessorParser.ConditionalSymbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Undef() { return GetToken(PreprocessorParser.Undef, 0); }
		public PreprocessorDeclarationContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorConditionalContext : Preprocessor_directiveContext {
		public Preprocessor_expressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(PreprocessorParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression() {
			return GetRuleContext<Preprocessor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ElIf() { return GetToken(PreprocessorParser.ElIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(PreprocessorParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndIf() { return GetToken(PreprocessorParser.EndIf, 0); }
		public PreprocessorConditionalContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorConditional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorPragmaContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pragma() { return GetToken(PreprocessorParser.Pragma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Text() { return GetToken(PreprocessorParser.Text, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		public PreprocessorPragmaContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorPragma(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorLineContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Line() { return GetToken(PreprocessorParser.Line, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Digits() { return GetToken(PreprocessorParser.Digits, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(PreprocessorParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveHidden() { return GetToken(PreprocessorParser.DirectiveHidden, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(PreprocessorParser.StringLiteral, 0); }
		public PreprocessorLineContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_directiveContext preprocessor_directive() {
		Preprocessor_directiveContext _localctx = new Preprocessor_directiveContext(Context, State);
		EnterRule(_localctx, 0, RULE_preprocessor_directive);
		int _la;
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Define:
				_localctx = new PreprocessorDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6;
				Match(Define);
				State = 7;
				Match(ConditionalSymbol);
				State = 8;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveDefine(); 
				}
				break;
			case Undef:
				_localctx = new PreprocessorDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 11;
				Match(Undef);
				State = 12;
				Match(ConditionalSymbol);
				State = 13;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveUndef(); 
				}
				break;
			case If:
				_localctx = new PreprocessorConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 16;
				Match(If);
				State = 17;
				((PreprocessorConditionalContext)_localctx).expr = preprocessor_expression(0);
				State = 18;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveIf(); 
				}
				break;
			case ElIf:
				_localctx = new PreprocessorConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 21;
				Match(ElIf);
				State = 22;
				((PreprocessorConditionalContext)_localctx).expr = preprocessor_expression(0);
				State = 23;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveElif(); 
				}
				break;
			case Else:
				_localctx = new PreprocessorConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 26;
				Match(Else);
				State = 27;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveElse(); 
				}
				break;
			case EndIf:
				_localctx = new PreprocessorConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 30;
				Match(EndIf);
				State = 31;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveEndif(); 
				}
				break;
			case Line:
				_localctx = new PreprocessorLineContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 34;
				Match(Line);
				State = 41;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Digits:
					{
					State = 35;
					Match(Digits);
					State = 37;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==StringLiteral) {
						{
						State = 36;
						Match(StringLiteral);
						}
					}

					}
					break;
				case Default:
					{
					State = 39;
					Match(Default);
					}
					break;
				case DirectiveHidden:
					{
					State = 40;
					Match(DirectiveHidden);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 43;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveLine(); 
				}
				break;
			case Error:
				_localctx = new PreprocessorDiagnosticContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 46;
				Match(Error);
				State = 47;
				Match(Text);
				State = 48;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveError(); 
				}
				break;
			case Warning:
				_localctx = new PreprocessorDiagnosticContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 51;
				Match(Warning);
				State = 52;
				Match(Text);
				State = 53;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveWarning(); 
				}
				break;
			case Region:
				_localctx = new PreprocessorRegionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 56;
				Match(Region);
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Text) {
					{
					State = 57;
					Match(Text);
					}
				}

				State = 60;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveRegion(); 
				}
				break;
			case EndRegion:
				_localctx = new PreprocessorRegionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 63;
				Match(EndRegion);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Text) {
					{
					State = 64;
					Match(Text);
					}
				}

				State = 67;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveEndregion(); 
				}
				break;
			case Pragma:
				_localctx = new PreprocessorPragmaContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 70;
				Match(Pragma);
				State = 71;
				Match(Text);
				State = 72;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectivePragma(); 
				}
				break;
			case Nullable:
				_localctx = new PreprocessorNullableContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 75;
				Match(Nullable);
				State = 76;
				Match(Text);
				State = 77;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveNullable(); 
				}
				break;
			case SingleInstance:
				_localctx = new PreprocessorSingleInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 80;
				Match(SingleInstance);
				State = 81;
				Match(Text);
				State = 82;
				directive_new_line_or_sharp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Directive_new_line_or_sharpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveNewline() { return GetToken(PreprocessorParser.DirectiveNewline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PreprocessorParser.Eof, 0); }
		public Directive_new_line_or_sharpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive_new_line_or_sharp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective_new_line_or_sharp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
		Directive_new_line_or_sharpContext _localctx = new Directive_new_line_or_sharpContext(Context, State);
		EnterRule(_localctx, 2, RULE_directive_new_line_or_sharp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==DirectiveNewline) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Preprocessor_expressionContext : ParserRuleContext {
		public String value;
		public Preprocessor_expressionContext expr1;
		public Preprocessor_expressionContext expr;
		public Preprocessor_expressionContext expr2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(PreprocessorParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(PreprocessorParser.False, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConditionalSymbol() { return GetToken(PreprocessorParser.ConditionalSymbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(PreprocessorParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(PreprocessorParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext[] preprocessor_expression() {
			return GetRuleContexts<Preprocessor_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression(int i) {
			return GetRuleContext<Preprocessor_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(PreprocessorParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(PreprocessorParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(PreprocessorParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(PreprocessorParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(PreprocessorParser.Or, 0); }
		public Preprocessor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_expressionContext preprocessor_expression() {
		return preprocessor_expression(0);
	}

	private Preprocessor_expressionContext preprocessor_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Preprocessor_expressionContext _localctx = new Preprocessor_expressionContext(Context, _parentState);
		Preprocessor_expressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_preprocessor_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
				{
				State = 88;
				Match(True);
				 this.OnPreprocessorExpressionTrue(); 
				}
				break;
			case False:
				{
				State = 90;
				Match(False);
				 this.OnPreprocessorExpressionFalse(); 
				}
				break;
			case ConditionalSymbol:
				{
				State = 92;
				Match(ConditionalSymbol);
				 this.OnPreprocessorExpressionConditionalSymbol(); 
				}
				break;
			case OpenParen:
				{
				State = 94;
				Match(OpenParen);
				State = 95;
				_localctx.expr = preprocessor_expression(0);
				State = 96;
				Match(CloseParen);
				 this.OnPreprocessorExpressionConditionalOpenParens(); 
				}
				break;
			case Hashtag:
				{
				State = 99;
				Match(Hashtag);
				State = 100;
				_localctx.expr = preprocessor_expression(5);
				 this.OnPreprocessorExpressionConditionalBang(); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 127;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 125;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new Preprocessor_expressionContext(_parentctx, _parentState);
						_localctx.expr1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessor_expression);
						State = 105;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 106;
						Match(IdentityEquals);
						State = 107;
						_localctx.expr2 = preprocessor_expression(5);
						 this.OnPreprocessorExpressionConditionalEq(); 
						}
						break;
					case 2:
						{
						_localctx = new Preprocessor_expressionContext(_parentctx, _parentState);
						_localctx.expr1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessor_expression);
						State = 110;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 111;
						Match(NotEquals);
						State = 112;
						_localctx.expr2 = preprocessor_expression(4);
						 this.OnPreprocessorExpressionConditionalNe(); 
						}
						break;
					case 3:
						{
						_localctx = new Preprocessor_expressionContext(_parentctx, _parentState);
						_localctx.expr1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessor_expression);
						State = 115;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 116;
						Match(And);
						State = 117;
						_localctx.expr2 = preprocessor_expression(3);
						 this.OnPreprocessorExpressionConditionalAnd(); 
						}
						break;
					case 4:
						{
						_localctx = new Preprocessor_expressionContext(_parentctx, _parentState);
						_localctx.expr1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessor_expression);
						State = 120;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 121;
						Match(Or);
						State = 122;
						_localctx.expr2 = preprocessor_expression(2);
						 this.OnPreprocessorExpressionConditionalOr(); 
						}
						break;
					}
					} 
				}
				State = 129;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return preprocessor_expression_sempred((Preprocessor_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool preprocessor_expression_sempred(Preprocessor_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,187,131,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,3,0,38,8,0,1,0,1,0,3,0,42,8,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,59,8,0,1,0,1,0,1,0,1,0,1,0,
		3,0,66,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,3,0,84,8,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,3,2,104,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,126,8,2,10,2,12,2,129,9,2,1,
		2,0,1,4,3,0,2,4,0,1,1,1,186,186,153,0,83,1,0,0,0,2,85,1,0,0,0,4,103,1,
		0,0,0,6,7,5,172,0,0,7,8,5,184,0,0,8,9,3,2,1,0,9,10,6,0,-1,0,10,84,1,0,
		0,0,11,12,5,173,0,0,12,13,5,184,0,0,13,14,3,2,1,0,14,15,6,0,-1,0,15,84,
		1,0,0,0,16,17,5,104,0,0,17,18,3,4,2,0,18,19,3,2,1,0,19,20,6,0,-1,0,20,
		84,1,0,0,0,21,22,5,174,0,0,22,23,3,4,2,0,23,24,3,2,1,0,24,25,6,0,-1,0,
		25,84,1,0,0,0,26,27,5,90,0,0,27,28,3,2,1,0,28,29,6,0,-1,0,29,84,1,0,0,
		0,30,31,5,175,0,0,31,32,3,2,1,0,32,33,6,0,-1,0,33,84,1,0,0,0,34,41,5,176,
		0,0,35,37,5,171,0,0,36,38,5,160,0,0,37,36,1,0,0,0,37,38,1,0,0,0,38,42,
		1,0,0,0,39,42,5,89,0,0,40,42,5,183,0,0,41,35,1,0,0,0,41,39,1,0,0,0,41,
		40,1,0,0,0,42,43,1,0,0,0,43,44,3,2,1,0,44,45,6,0,-1,0,45,84,1,0,0,0,46,
		47,5,177,0,0,47,48,5,187,0,0,48,49,3,2,1,0,49,50,6,0,-1,0,50,84,1,0,0,
		0,51,52,5,178,0,0,52,53,5,187,0,0,53,54,3,2,1,0,54,55,6,0,-1,0,55,84,1,
		0,0,0,56,58,5,179,0,0,57,59,5,187,0,0,58,57,1,0,0,0,58,59,1,0,0,0,59,60,
		1,0,0,0,60,61,3,2,1,0,61,62,6,0,-1,0,62,84,1,0,0,0,63,65,5,180,0,0,64,
		66,5,187,0,0,65,64,1,0,0,0,65,66,1,0,0,0,66,67,1,0,0,0,67,68,3,2,1,0,68,
		69,6,0,-1,0,69,84,1,0,0,0,70,71,5,181,0,0,71,72,5,187,0,0,72,73,3,2,1,
		0,73,74,6,0,-1,0,74,84,1,0,0,0,75,76,5,182,0,0,76,77,5,187,0,0,77,78,3,
		2,1,0,78,79,6,0,-1,0,79,84,1,0,0,0,80,81,5,145,0,0,81,82,5,187,0,0,82,
		84,3,2,1,0,83,6,1,0,0,0,83,11,1,0,0,0,83,16,1,0,0,0,83,21,1,0,0,0,83,26,
		1,0,0,0,83,30,1,0,0,0,83,34,1,0,0,0,83,46,1,0,0,0,83,51,1,0,0,0,83,56,
		1,0,0,0,83,63,1,0,0,0,83,70,1,0,0,0,83,75,1,0,0,0,83,80,1,0,0,0,84,1,1,
		0,0,0,85,86,7,0,0,0,86,3,1,0,0,0,87,88,6,2,-1,0,88,89,5,73,0,0,89,104,
		6,2,-1,0,90,91,5,74,0,0,91,104,6,2,-1,0,92,93,5,184,0,0,93,104,6,2,-1,
		0,94,95,5,11,0,0,95,96,3,4,2,0,96,97,5,12,0,0,97,98,6,2,-1,0,98,104,1,
		0,0,0,99,100,5,37,0,0,100,101,3,4,2,5,101,102,6,2,-1,0,102,104,1,0,0,0,
		103,87,1,0,0,0,103,90,1,0,0,0,103,92,1,0,0,0,103,94,1,0,0,0,103,99,1,0,
		0,0,104,127,1,0,0,0,105,106,10,4,0,0,106,107,5,47,0,0,107,108,3,4,2,5,
		108,109,6,2,-1,0,109,126,1,0,0,0,110,111,10,3,0,0,111,112,5,46,0,0,112,
		113,3,4,2,4,113,114,6,2,-1,0,114,126,1,0,0,0,115,116,10,2,0,0,116,117,
		5,53,0,0,117,118,3,4,2,3,118,119,6,2,-1,0,119,126,1,0,0,0,120,121,10,1,
		0,0,121,122,5,54,0,0,122,123,3,4,2,2,123,124,6,2,-1,0,124,126,1,0,0,0,
		125,105,1,0,0,0,125,110,1,0,0,0,125,115,1,0,0,0,125,120,1,0,0,0,126,129,
		1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,5,1,0,0,0,129,127,1,0,0,0,
		8,37,41,58,65,83,103,125,127
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
