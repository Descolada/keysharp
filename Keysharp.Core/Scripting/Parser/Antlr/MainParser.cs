//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/minip/source/repos/Keysharp_clone/Keysharp.Core/Scripting/Parser/Antlr/MainParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MainParser : MainParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DerefStart=1, DerefEnd=2, OpenParenNoWS=3, DerefContinuation=4, IdentifierContinuation=5, 
		OpenBracketWithWS=6, MultiLineComment=7, SingleLineComment=8, RegularExpressionLiteral=9, 
		HotstringTrigger=10, RemapKey=11, HotkeyTrigger=12, OpenBracket=13, CloseBracket=14, 
		OpenParen=15, CloseParen=16, OpenBrace=17, CloseBrace=18, SemiColon=19, 
		Comma=20, Assign=21, QuestionMark=22, QuestionMarkDot=23, Colon=24, DoubleColon=25, 
		Ellipsis=26, DotConcat=27, Dot=28, PlusPlus=29, MinusMinus=30, Plus=31, 
		Minus=32, BitNot=33, Not=34, Multiply=35, Divide=36, IntegerDivide=37, 
		Modulus=38, Power=39, NullCoalesce=40, Hashtag=41, RightShiftArithmetic=42, 
		LeftShiftArithmetic=43, RightShiftLogical=44, LessThan=45, MoreThan=46, 
		LessThanEquals=47, GreaterThanEquals=48, Equals_=49, NotEquals=50, IdentityEquals=51, 
		IdentityNotEquals=52, RegExMatch=53, BitAnd=54, BitXOr=55, BitOr=56, And=57, 
		Or=58, MultiplyAssign=59, DivideAssign=60, ModulusAssign=61, PlusAssign=62, 
		MinusAssign=63, LeftShiftArithmeticAssign=64, RightShiftArithmeticAssign=65, 
		RightShiftLogicalAssign=66, IntegerDivideAssign=67, ConcatenateAssign=68, 
		BitAndAssign=69, BitXorAssign=70, BitOrAssign=71, PowerAssign=72, NullishCoalescingAssign=73, 
		Arrow=74, NullLiteral=75, Unset=76, BooleanLiteral=77, DecimalLiteral=78, 
		HexIntegerLiteral=79, OctalIntegerLiteral=80, OctalIntegerLiteral2=81, 
		BinaryIntegerLiteral=82, BigHexIntegerLiteral=83, BigOctalIntegerLiteral=84, 
		BigBinaryIntegerLiteral=85, BigDecimalIntegerLiteral=86, Break=87, Do=88, 
		Instanceof=89, Switch=90, Case=91, Default=92, Else=93, Catch=94, Finally=95, 
		Return=96, Continue=97, For=98, While=99, Loop=100, Until=101, Files=102, 
		Read=103, Reg=104, Parse=105, This=106, If=107, Throw=108, Delete=109, 
		In=110, Try=111, Yield=112, Is=113, Contains=114, VerbalAnd=115, VerbalNot=116, 
		VerbalOr=117, Goto=118, Class=119, Enum=120, Extends=121, Super=122, Base=123, 
		Export=124, Import=125, From=126, As=127, Async=128, Await=129, Static=130, 
		Global=131, Local=132, Include=133, IncludeAgain=134, HotIf=135, HotIfTimeout=136, 
		ClipboardTimeout=137, DllLoad=138, ErrorStdOut=139, InputLevel=140, MaxThreads=141, 
		MaxThreadsBuffer=142, MaxThreadsPerHotkey=143, NoTrayIcon=144, Requires=145, 
		SingleInstance=146, SuspendExempt=147, UseHook=148, Warn=149, WinActivateForce=150, 
		HotstringOptions=151, AssemblyTitle=152, AssemblyDescription=153, AssemblyConfiguration=154, 
		AssemblyCompany=155, AssemblyProduct=156, AssemblyCopyright=157, AssemblyTrademark=158, 
		AssemblyVersion=159, Identifier=160, MultilineStringLiteral=161, StringLiteral=162, 
		WhiteSpaces=163, IgnoreEOL=164, EOL=165, UnexpectedCharacter=166, HotstringWhitespaces=167, 
		HotstringExpansion=168, HotstringUnexpectedCharacter=169, DirectiveWhitespaces=170, 
		DirectiveContent=171, DirectiveUnexpectedCharacter=172;
	public const int
		RULE_program = 0, RULE_sourceElements = 1, RULE_sourceElement = 2, RULE_generalDirective = 3, 
		RULE_positionalDirective = 4, RULE_remap = 5, RULE_hotstring = 6, RULE_hotkey = 7, 
		RULE_statement = 8, RULE_block = 9, RULE_statementList = 10, RULE_variableStatement = 11, 
		RULE_importStatement = 12, RULE_importFromBlock = 13, RULE_importModuleItems = 14, 
		RULE_importAliasName = 15, RULE_moduleExportName = 16, RULE_importedBinding = 17, 
		RULE_importDefault = 18, RULE_importNamespace = 19, RULE_importFrom = 20, 
		RULE_aliasName = 21, RULE_exportStatement = 22, RULE_exportFromBlock = 23, 
		RULE_exportModuleItems = 24, RULE_exportAliasName = 25, RULE_declaration = 26, 
		RULE_variableDeclarationList = 27, RULE_variableDeclaration = 28, RULE_functionStatement = 29, 
		RULE_expressionStatement = 30, RULE_ifStatement = 31, RULE_iterationStatement = 32, 
		RULE_forInParameters = 33, RULE_continueStatement = 34, RULE_breakStatement = 35, 
		RULE_returnStatement = 36, RULE_yieldStatement = 37, RULE_switchStatement = 38, 
		RULE_caseBlock = 39, RULE_caseClauses = 40, RULE_caseClause = 41, RULE_defaultClause = 42, 
		RULE_labelledStatement = 43, RULE_gotoStatement = 44, RULE_throwStatement = 45, 
		RULE_tryStatement = 46, RULE_catchProduction = 47, RULE_catchAssignable = 48, 
		RULE_elseProduction = 49, RULE_finallyProduction = 50, RULE_functionDeclaration = 51, 
		RULE_classDeclaration = 52, RULE_classTail = 53, RULE_classElement = 54, 
		RULE_methodDefinition = 55, RULE_propertyDefinition = 56, RULE_classPropertyName = 57, 
		RULE_propertyGetterDefinition = 58, RULE_propertySetterDefinition = 59, 
		RULE_fieldDefinition = 60, RULE_formalParameterList = 61, RULE_formalParameterArg = 62, 
		RULE_lastFormalParameterArg = 63, RULE_functionBody = 64, RULE_arrayLiteral = 65, 
		RULE_arrayElementList = 66, RULE_arrayElement = 67, RULE_mapLiteral = 68, 
		RULE_mapElementList = 69, RULE_mapElement = 70, RULE_propertyAssignment = 71, 
		RULE_dynamicPropertyName = 72, RULE_propertyName = 73, RULE_derefContinuation = 74, 
		RULE_dereference = 75, RULE_arguments = 76, RULE_argument = 77, RULE_expressionSequence = 78, 
		RULE_singleExpressionConcatenation = 79, RULE_functionCallArguments = 80, 
		RULE_memberIndexArguments = 81, RULE_singleExpression = 82, RULE_variableAssignment = 83, 
		RULE_dynamicIdentifier = 84, RULE_initializer = 85, RULE_assignable = 86, 
		RULE_objectLiteral = 87, RULE_lambdaFunction = 88, RULE_lambdaFunctionBody = 89, 
		RULE_assignmentOperator = 90, RULE_literal = 91, RULE_boolean = 92, RULE_numericLiteral = 93, 
		RULE_bigintLiteral = 94, RULE_getter = 95, RULE_setter = 96, RULE_identifierName = 97, 
		RULE_identifier = 98, RULE_reservedWord = 99, RULE_openParen = 100, RULE_keyword = 101, 
		RULE_eos = 102;
	public static readonly string[] ruleNames = {
		"program", "sourceElements", "sourceElement", "generalDirective", "positionalDirective", 
		"remap", "hotstring", "hotkey", "statement", "block", "statementList", 
		"variableStatement", "importStatement", "importFromBlock", "importModuleItems", 
		"importAliasName", "moduleExportName", "importedBinding", "importDefault", 
		"importNamespace", "importFrom", "aliasName", "exportStatement", "exportFromBlock", 
		"exportModuleItems", "exportAliasName", "declaration", "variableDeclarationList", 
		"variableDeclaration", "functionStatement", "expressionStatement", "ifStatement", 
		"iterationStatement", "forInParameters", "continueStatement", "breakStatement", 
		"returnStatement", "yieldStatement", "switchStatement", "caseBlock", "caseClauses", 
		"caseClause", "defaultClause", "labelledStatement", "gotoStatement", "throwStatement", 
		"tryStatement", "catchProduction", "catchAssignable", "elseProduction", 
		"finallyProduction", "functionDeclaration", "classDeclaration", "classTail", 
		"classElement", "methodDefinition", "propertyDefinition", "classPropertyName", 
		"propertyGetterDefinition", "propertySetterDefinition", "fieldDefinition", 
		"formalParameterList", "formalParameterArg", "lastFormalParameterArg", 
		"functionBody", "arrayLiteral", "arrayElementList", "arrayElement", "mapLiteral", 
		"mapElementList", "mapElement", "propertyAssignment", "dynamicPropertyName", 
		"propertyName", "derefContinuation", "dereference", "arguments", "argument", 
		"expressionSequence", "singleExpressionConcatenation", "functionCallArguments", 
		"memberIndexArguments", "singleExpression", "variableAssignment", "dynamicIdentifier", 
		"initializer", "assignable", "objectLiteral", "lambdaFunction", "lambdaFunctionBody", 
		"assignmentOperator", "literal", "boolean", "numericLiteral", "bigintLiteral", 
		"getter", "setter", "identifierName", "identifier", "reservedWord", "openParen", 
		"keyword", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "','", "':='", 
		"'?'", "'?.'", "':'", "'::'", "'...'", null, "'.'", "'++'", "'--'", "'+'", 
		"'-'", "'~'", "'!'", "'*'", "'/'", "'//'", "'%'", "'**'", "'??'", "'#'", 
		"'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='", "'='", "'!='", 
		"'=='", "'!=='", "'~='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'*='", 
		"'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", "'//='", "'.='", 
		"'&='", "'^='", "'|='", "'**='", "'??='", "'=>'", "'null'", "'unset'", 
		null, null, null, null, null, null, null, null, null, null, "'break'", 
		"'do'", "'instanceof'", "'switch'", "'case'", "'default'", "'else'", "'catch'", 
		"'finally'", "'return'", "'continue'", "'for'", "'while'", "'loop'", "'until'", 
		"'files'", "'read'", "'reg'", "'parse'", "'this'", "'if'", "'throw'", 
		"'delete'", "'in'", "'try'", "'yield'", "'is'", "'contains'", "'and'", 
		"'not'", "'or'", "'goto'", "'class'", "'enum'", "'extends'", "'super'", 
		"'base'", "'export'", "'import'", "'from'", "'as'", "'async'", "'await'", 
		"'static'", "'global'", "'local'", "'#include'", "'#includeagain'", "'#hotif'", 
		"'#hotiftimeout'", "'#clipboardtimeout'", "'#dllload'", "'#errorstdout'", 
		"'#inputlevel'", "'#maxthreads'", "'#maxthreadsbuffer'", "'#maxthreadsperhotkey'", 
		"'#notrayicon'", "'#requires'", "'#singleinstance'", "'#suspendexempt'", 
		"'#usehook'", "'#warn'", "'#winactivateforce'", null, "'#assemblytitle'", 
		"'#assemblydescription'", "'#assemblyconfiguration'", "'#assemblycompany'", 
		"'#assemblyproduct'", "'#assemblycopyright'", "'#assemblytrademark'", 
		"'#assemblyversion'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DerefStart", "DerefEnd", "OpenParenNoWS", "DerefContinuation", 
		"IdentifierContinuation", "OpenBracketWithWS", "MultiLineComment", "SingleLineComment", 
		"RegularExpressionLiteral", "HotstringTrigger", "RemapKey", "HotkeyTrigger", 
		"OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "QuestionMarkDot", 
		"Colon", "DoubleColon", "Ellipsis", "DotConcat", "Dot", "PlusPlus", "MinusMinus", 
		"Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", "IntegerDivide", 
		"Modulus", "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", 
		"LeftShiftArithmetic", "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", 
		"GreaterThanEquals", "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
		"RegExMatch", "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
		"DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", 
		"RightShiftArithmeticAssign", "RightShiftLogicalAssign", "IntegerDivideAssign", 
		"ConcatenateAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", "PowerAssign", 
		"NullishCoalescingAssign", "Arrow", "NullLiteral", "Unset", "BooleanLiteral", 
		"DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", 
		"BinaryIntegerLiteral", "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
		"BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", "Break", "Do", 
		"Instanceof", "Switch", "Case", "Default", "Else", "Catch", "Finally", 
		"Return", "Continue", "For", "While", "Loop", "Until", "Files", "Read", 
		"Reg", "Parse", "This", "If", "Throw", "Delete", "In", "Try", "Yield", 
		"Is", "Contains", "VerbalAnd", "VerbalNot", "VerbalOr", "Goto", "Class", 
		"Enum", "Extends", "Super", "Base", "Export", "Import", "From", "As", 
		"Async", "Await", "Static", "Global", "Local", "Include", "IncludeAgain", 
		"HotIf", "HotIfTimeout", "ClipboardTimeout", "DllLoad", "ErrorStdOut", 
		"InputLevel", "MaxThreads", "MaxThreadsBuffer", "MaxThreadsPerHotkey", 
		"NoTrayIcon", "Requires", "SingleInstance", "SuspendExempt", "UseHook", 
		"Warn", "WinActivateForce", "HotstringOptions", "AssemblyTitle", "AssemblyDescription", 
		"AssemblyConfiguration", "AssemblyCompany", "AssemblyProduct", "AssemblyCopyright", 
		"AssemblyTrademark", "AssemblyVersion", "Identifier", "MultilineStringLiteral", 
		"StringLiteral", "WhiteSpaces", "IgnoreEOL", "EOL", "UnexpectedCharacter", 
		"HotstringWhitespaces", "HotstringExpansion", "HotstringUnexpectedCharacter", 
		"DirectiveWhitespaces", "DirectiveContent", "DirectiveUnexpectedCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MainParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MainParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MainParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MainParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MainParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			sourceElements();
			State = 207;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 209;
					sourceElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 212;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralDirectiveContext generalDirective() {
			return GetRuleContext<GeneralDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionalDirectiveContext positionalDirective() {
			return GetRuleContext<PositionalDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemapContext remap() {
			return GetRuleContext<RemapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotstringContext hotstring() {
			return GetRuleContext<HotstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotkeyContext hotkey() {
			return GetRuleContext<HotkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sourceElement);
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				functionDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 216;
				generalDirective();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 217;
				positionalDirective();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 218;
				remap();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 219;
				hotstring();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 220;
				hotkey();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 221;
				statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 222;
				Match(EOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralDirectiveContext : ParserRuleContext {
		public GeneralDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalDirective; } }
	 
		public GeneralDirectiveContext() { }
		public virtual void CopyFrom(GeneralDirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssemblyDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveContent() { return GetToken(MainParser.DirectiveContent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyTitle() { return GetToken(MainParser.AssemblyTitle, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyDescription() { return GetToken(MainParser.AssemblyDescription, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyConfiguration() { return GetToken(MainParser.AssemblyConfiguration, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyCompany() { return GetToken(MainParser.AssemblyCompany, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyProduct() { return GetToken(MainParser.AssemblyProduct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyCopyright() { return GetToken(MainParser.AssemblyCopyright, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyTrademark() { return GetToken(MainParser.AssemblyTrademark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyVersion() { return GetToken(MainParser.AssemblyVersion, 0); }
		public AssemblyDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClipboardTimeoutDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ClipboardTimeout() { return GetToken(MainParser.ClipboardTimeout, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClipboardTimeoutDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClipboardTimeoutDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxThreadsBufferDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MaxThreadsBuffer() { return GetToken(MainParser.MaxThreadsBuffer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public MaxThreadsBufferDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxThreadsBufferDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleInstanceDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SingleInstance() { return GetToken(MainParser.SingleInstance, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveContent() { return GetToken(MainParser.DirectiveContent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public SingleInstanceDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleInstanceDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ErrorStdOutDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ErrorStdOut() { return GetToken(MainParser.ErrorStdOut, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveContent() { return GetToken(MainParser.DirectiveContent, 0); }
		public ErrorStdOutDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStdOutDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoTrayIconDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NoTrayIcon() { return GetToken(MainParser.NoTrayIcon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public NoTrayIconDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoTrayIconDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RequiresDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Requires() { return GetToken(MainParser.Requires, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveContent() { return GetToken(MainParser.DirectiveContent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public RequiresDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiresDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WinActivateForceDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WinActivateForce() { return GetToken(MainParser.WinActivateForce, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public WinActivateForceDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWinActivateForceDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DllLoadDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DllLoad() { return GetToken(MainParser.DllLoad, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveContent() { return GetToken(MainParser.DirectiveContent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DllLoadDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDllLoadDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HotIfTimeoutDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotIfTimeout() { return GetToken(MainParser.HotIfTimeout, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public HotIfTimeoutDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotIfTimeoutDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxThreadsPerHotkeyDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MaxThreadsPerHotkey() { return GetToken(MainParser.MaxThreadsPerHotkey, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public MaxThreadsPerHotkeyDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxThreadsPerHotkeyDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncludeDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Include() { return GetToken(MainParser.Include, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveContent() { return GetToken(MainParser.DirectiveContent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IncludeDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxThreadsDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MaxThreads() { return GetToken(MainParser.MaxThreads, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public MaxThreadsDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxThreadsDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncludeAgainDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IncludeAgain() { return GetToken(MainParser.IncludeAgain, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveContent() { return GetToken(MainParser.DirectiveContent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IncludeAgainDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeAgainDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralDirectiveContext generalDirective() {
		GeneralDirectiveContext _localctx = new GeneralDirectiveContext(Context, State);
		EnterRule(_localctx, 6, RULE_generalDirective);
		int _la;
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ClipboardTimeout:
				_localctx = new ClipboardTimeoutDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				Match(ClipboardTimeout);
				State = 226;
				numericLiteral();
				State = 227;
				eos();
				}
				break;
			case DllLoad:
				_localctx = new DllLoadDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 229;
				Match(DllLoad);
				State = 230;
				Match(DirectiveContent);
				State = 231;
				eos();
				}
				break;
			case ErrorStdOut:
				_localctx = new ErrorStdOutDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 232;
				Match(ErrorStdOut);
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DirectiveContent) {
					{
					State = 233;
					Match(DirectiveContent);
					}
				}

				State = 236;
				eos();
				}
				break;
			case HotIfTimeout:
				_localctx = new HotIfTimeoutDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 237;
				Match(HotIfTimeout);
				State = 238;
				numericLiteral();
				State = 239;
				eos();
				}
				break;
			case Include:
				_localctx = new IncludeDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 241;
				Match(Include);
				State = 242;
				Match(DirectiveContent);
				State = 243;
				eos();
				}
				break;
			case IncludeAgain:
				_localctx = new IncludeAgainDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 244;
				Match(IncludeAgain);
				State = 245;
				Match(DirectiveContent);
				State = 246;
				eos();
				}
				break;
			case MaxThreads:
				_localctx = new MaxThreadsDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 247;
				Match(MaxThreads);
				State = 248;
				numericLiteral();
				State = 249;
				eos();
				}
				break;
			case MaxThreadsBuffer:
				_localctx = new MaxThreadsBufferDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 251;
				Match(MaxThreadsBuffer);
				State = 254;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
					{
					State = 252;
					numericLiteral();
					}
					break;
				case BooleanLiteral:
					{
					State = 253;
					boolean();
					}
					break;
				case Eof:
				case EOL:
					break;
				default:
					break;
				}
				State = 256;
				eos();
				}
				break;
			case MaxThreadsPerHotkey:
				_localctx = new MaxThreadsPerHotkeyDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 257;
				Match(MaxThreadsPerHotkey);
				State = 258;
				numericLiteral();
				State = 259;
				eos();
				}
				break;
			case NoTrayIcon:
				_localctx = new NoTrayIconDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 261;
				Match(NoTrayIcon);
				State = 262;
				eos();
				}
				break;
			case Requires:
				_localctx = new RequiresDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 263;
				Match(Requires);
				State = 264;
				Match(DirectiveContent);
				State = 265;
				eos();
				}
				break;
			case SingleInstance:
				_localctx = new SingleInstanceDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 266;
				Match(SingleInstance);
				State = 267;
				Match(DirectiveContent);
				State = 268;
				eos();
				}
				break;
			case WinActivateForce:
				_localctx = new WinActivateForceDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 269;
				Match(WinActivateForce);
				State = 270;
				eos();
				}
				break;
			case AssemblyTitle:
			case AssemblyDescription:
			case AssemblyConfiguration:
			case AssemblyCompany:
			case AssemblyProduct:
			case AssemblyCopyright:
			case AssemblyTrademark:
			case AssemblyVersion:
				_localctx = new AssemblyDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 271;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & 255L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 272;
				Match(DirectiveContent);
				State = 273;
				eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionalDirectiveContext : ParserRuleContext {
		public PositionalDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionalDirective; } }
	 
		public PositionalDirectiveContext() { }
		public virtual void CopyFrom(PositionalDirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HotstringDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringOptions() { return GetToken(MainParser.HotstringOptions, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public HotstringDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstringDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InputLevelDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InputLevel() { return GetToken(MainParser.InputLevel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public InputLevelDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputLevelDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuspendExemptDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SuspendExempt() { return GetToken(MainParser.SuspendExempt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public SuspendExemptDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuspendExemptDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UseHookDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UseHook() { return GetToken(MainParser.UseHook, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public UseHookDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseHookDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HotIfDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotIf() { return GetToken(MainParser.HotIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public HotIfDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotIfDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionalDirectiveContext positionalDirective() {
		PositionalDirectiveContext _localctx = new PositionalDirectiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_positionalDirective);
		int _la;
		try {
			State = 300;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HotIf:
				_localctx = new HotIfDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 276;
				Match(HotIf);
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014466692252234L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 281465628848553983L) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & 7L) != 0)) {
					{
					State = 277;
					singleExpression(0);
					}
				}

				State = 280;
				eos();
				}
				break;
			case HotstringOptions:
				_localctx = new HotstringDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 281;
				Match(HotstringOptions);
				State = 282;
				eos();
				}
				break;
			case InputLevel:
				_localctx = new InputLevelDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 283;
				Match(InputLevel);
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 31L) != 0)) {
					{
					State = 284;
					numericLiteral();
					}
				}

				State = 287;
				eos();
				}
				break;
			case UseHook:
				_localctx = new UseHookDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 288;
				Match(UseHook);
				State = 291;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
					{
					State = 289;
					numericLiteral();
					}
					break;
				case BooleanLiteral:
					{
					State = 290;
					boolean();
					}
					break;
				case Eof:
				case EOL:
					break;
				default:
					break;
				}
				State = 293;
				eos();
				}
				break;
			case SuspendExempt:
				_localctx = new SuspendExemptDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 294;
				Match(SuspendExempt);
				State = 297;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
					{
					State = 295;
					numericLiteral();
					}
					break;
				case BooleanLiteral:
					{
					State = 296;
					boolean();
					}
					break;
				case Eof:
				case EOL:
					break;
				default:
					break;
				}
				State = 299;
				eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotkeyTrigger() { return GetToken(MainParser.HotkeyTrigger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RemapKey() { return GetToken(MainParser.RemapKey, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public RemapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remap; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemapContext remap() {
		RemapContext _localctx = new RemapContext(Context, State);
		EnterRule(_localctx, 10, RULE_remap);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			Match(HotkeyTrigger);
			State = 303;
			Match(RemapKey);
			State = 304;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotstringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HotstringTrigger() { return GetTokens(MainParser.HotstringTrigger); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringTrigger(int i) {
			return GetToken(MainParser.HotstringTrigger, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringExpansion() { return GetToken(MainParser.HotstringExpansion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public HotstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotstring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotstringContext hotstring() {
		HotstringContext _localctx = new HotstringContext(Context, State);
		EnterRule(_localctx, 12, RULE_hotstring);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(HotstringTrigger);
			State = 311;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 307;
					Match(EOL);
					State = 308;
					Match(HotstringTrigger);
					}
					} 
				}
				State = 313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 314;
				Match(HotstringExpansion);
				State = 315;
				eos();
				}
				break;
			case 2:
				{
				State = 316;
				functionDeclaration();
				State = 317;
				eos();
				}
				break;
			case 3:
				{
				State = 319;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotkeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HotkeyTrigger() { return GetTokens(MainParser.HotkeyTrigger); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotkeyTrigger(int i) {
			return GetToken(MainParser.HotkeyTrigger, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public HotkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotkey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotkey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotkeyContext hotkey() {
		HotkeyContext _localctx = new HotkeyContext(Context, State);
		EnterRule(_localctx, 14, RULE_hotkey);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			Match(HotkeyTrigger);
			State = 327;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 323;
					Match(EOL);
					State = 324;
					Match(HotkeyTrigger);
					}
					} 
				}
				State = 329;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 330;
				Match(EOL);
				}
				break;
			}
			State = 337;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 333;
				functionDeclaration();
				State = 334;
				eos();
				}
				break;
			case 2:
				{
				State = 336;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStatementContext functionStatement() {
			return GetRuleContext<FunctionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelledStatementContext labelledStatement() {
			return GetRuleContext<LabelledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		int _la;
		try {
			State = 384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 339;
				block();
				State = 341;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 340;
					eos();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343;
				classDeclaration();
				State = 344;
				eos();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 346;
				functionStatement();
				State = 347;
				eos();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 349;
				variableStatement();
				State = 350;
				eos();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 352;
				expressionStatement();
				State = 353;
				eos();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 355;
				ifStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 356;
					labelledStatement();
					State = 357;
					Match(EOL);
					}
				}

				State = 361;
				iterationStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 362;
				continueStatement();
				State = 363;
				eos();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 365;
				breakStatement();
				State = 366;
				eos();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 368;
				returnStatement();
				State = 369;
				eos();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 371;
				labelledStatement();
				State = 372;
				eos();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 374;
				gotoStatement();
				State = 375;
				eos();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 377;
				switchStatement();
				State = 378;
				eos();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 380;
				throwStatement();
				State = 381;
				eos();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 383;
				tryStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 386;
				Match(EOL);
				}
			}

			State = 389;
			Match(OpenBrace);
			State = 391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 390;
				statementList();
				}
				break;
			}
			State = 394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 393;
				Match(EOL);
				}
			}

			State = 396;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 20, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 398;
					statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 401;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(MainParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(MainParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public VariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStatementContext variableStatement() {
		VariableStatementContext _localctx = new VariableStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_variableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenBracketWithWS || _la==OpenBrace || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 68648475066367L) != 0) || _la==Identifier) {
				{
				State = 404;
				variableDeclarationList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(MainParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromBlockContext importFromBlock() {
			return GetRuleContext<ImportFromBlockContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			Match(Import);
			State = 408;
			importFromBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportModuleItemsContext importModuleItems() {
			return GetRuleContext<ImportModuleItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDefaultContext importDefault() {
			return GetRuleContext<ImportDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ImportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromBlockContext importFromBlock() {
		ImportFromBlockContext _localctx = new ImportFromBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_importFromBlock);
		try {
			State = 420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
			case Multiply:
			case NullLiteral:
			case Unset:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Export:
			case Import:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 411;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 410;
					importDefault();
					}
					break;
				}
				State = 415;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Multiply:
				case NullLiteral:
				case Unset:
				case BooleanLiteral:
				case Break:
				case Do:
				case Instanceof:
				case Switch:
				case Case:
				case Default:
				case Else:
				case Catch:
				case Finally:
				case Return:
				case Continue:
				case For:
				case While:
				case Loop:
				case Until:
				case This:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case Yield:
				case Is:
				case VerbalAnd:
				case VerbalNot:
				case VerbalOr:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Export:
				case Import:
				case Async:
				case Await:
				case Static:
				case Global:
				case Local:
				case Identifier:
					{
					State = 413;
					importNamespace();
					}
					break;
				case OpenBrace:
					{
					State = 414;
					importModuleItems();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 417;
				importFrom();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 419;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasNameContext[] importAliasName() {
			return GetRuleContexts<ImportAliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasNameContext importAliasName(int i) {
			return GetRuleContext<ImportAliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public ImportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importModuleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportModuleItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportModuleItemsContext importModuleItems() {
		ImportModuleItemsContext _localctx = new ImportModuleItemsContext(Context, State);
		EnterRule(_localctx, 28, RULE_importModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(OpenBrace);
			State = 428;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 423;
					importAliasName();
					State = 424;
					Match(Comma);
					}
					} 
				}
				State = 430;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			State = 435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 281184153871839239L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 431;
				importAliasName();
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 432;
					Match(Comma);
					}
				}

				}
			}

			State = 437;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext moduleExportName() {
			return GetRuleContext<ModuleExportNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportedBindingContext importedBinding() {
			return GetRuleContext<ImportedBindingContext>(0);
		}
		public ImportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasNameContext importAliasName() {
		ImportAliasNameContext _localctx = new ImportAliasNameContext(Context, State);
		EnterRule(_localctx, 30, RULE_importAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			moduleExportName();
			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 440;
				Match(As);
				State = 441;
				importedBinding();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleExportNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ModuleExportNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleExportName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleExportName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleExportNameContext moduleExportName() {
		ModuleExportNameContext _localctx = new ModuleExportNameContext(Context, State);
		EnterRule(_localctx, 32, RULE_moduleExportName);
		try {
			State = 446;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case Unset:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Export:
			case Import:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 444;
				identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 445;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportedBindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		public ImportedBindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importedBinding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportedBinding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportedBindingContext importedBinding() {
		ImportedBindingContext _localctx = new ImportedBindingContext(Context, State);
		EnterRule(_localctx, 34, RULE_importedBinding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 281474976841729L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext aliasName() {
			return GetRuleContext<AliasNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		public ImportDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefaultContext importDefault() {
		ImportDefaultContext _localctx = new ImportDefaultContext(Context, State);
		EnterRule(_localctx, 36, RULE_importDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			aliasName();
			State = 451;
			Match(Comma);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public ImportNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportNamespaceContext importNamespace() {
		ImportNamespaceContext _localctx = new ImportNamespaceContext(Context, State);
		EnterRule(_localctx, 38, RULE_importNamespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
				{
				State = 453;
				Match(Multiply);
				}
				break;
			case NullLiteral:
			case Unset:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Export:
			case Import:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				{
				State = 454;
				identifierName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 457;
				Match(As);
				State = 458;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(MainParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ImportFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromContext importFrom() {
		ImportFromContext _localctx = new ImportFromContext(Context, State);
		EnterRule(_localctx, 40, RULE_importFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			Match(From);
			State = 462;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public AliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasNameContext aliasName() {
		AliasNameContext _localctx = new AliasNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_aliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			identifierName();
			State = 467;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 465;
				Match(As);
				State = 466;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
	 
		public ExportStatementContext() { }
		public virtual void CopyFrom(ExportStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExportDefaultDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ExportDefaultDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDefaultDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExportDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExportFromBlockContext exportFromBlock() {
			return GetRuleContext<ExportFromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		public ExportDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_exportStatement);
		try {
			State = 480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new ExportDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 469;
				Match(Export);
				State = 471;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 470;
					Match(Default);
					}
					break;
				}
				State = 475;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 473;
					exportFromBlock();
					}
					break;
				case 2:
					{
					State = 474;
					declaration();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ExportDefaultDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 477;
				Match(Export);
				State = 478;
				Match(Default);
				State = 479;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportModuleItemsContext exportModuleItems() {
			return GetRuleContext<ExportModuleItemsContext>(0);
		}
		public ExportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportFromBlockContext exportFromBlock() {
		ExportFromBlockContext _localctx = new ExportFromBlockContext(Context, State);
		EnterRule(_localctx, 46, RULE_exportFromBlock);
		int _la;
		try {
			State = 489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
			case NullLiteral:
			case Unset:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Export:
			case Import:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 482;
				importNamespace();
				State = 483;
				importFrom();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 485;
				exportModuleItems();
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==From) {
					{
					State = 486;
					importFrom();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExportAliasNameContext[] exportAliasName() {
			return GetRuleContexts<ExportAliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportAliasNameContext exportAliasName(int i) {
			return GetRuleContext<ExportAliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public ExportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportModuleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportModuleItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportModuleItemsContext exportModuleItems() {
		ExportModuleItemsContext _localctx = new ExportModuleItemsContext(Context, State);
		EnterRule(_localctx, 48, RULE_exportModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			Match(OpenBrace);
			State = 497;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 492;
					exportAliasName();
					State = 493;
					Match(Comma);
					}
					} 
				}
				State = 499;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 281184153871839239L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 500;
				exportAliasName();
				State = 502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 501;
					Match(Comma);
					}
				}

				}
			}

			State = 506;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportAliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext[] moduleExportName() {
			return GetRuleContexts<ModuleExportNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext moduleExportName(int i) {
			return GetRuleContext<ModuleExportNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public ExportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportAliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportAliasNameContext exportAliasName() {
		ExportAliasNameContext _localctx = new ExportAliasNameContext(Context, State);
		EnterRule(_localctx, 50, RULE_exportAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			moduleExportName();
			State = 511;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 509;
				Match(As);
				State = 510;
				moduleExportName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_declaration);
		try {
			State = 515;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Class:
				EnterOuterAlt(_localctx, 1);
				{
				State = 513;
				classDeclaration();
				}
				break;
			case Default:
			case Yield:
			case Async:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 514;
				functionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 54, RULE_variableDeclarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			variableDeclaration();
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 518;
				Match(Comma);
				State = 519;
				variableDeclaration();
				}
				}
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			assignable();
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & 9006924376834049L) != 0)) {
				{
				State = 526;
				assignmentOperator();
				State = 527;
				singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStatementContext functionStatement() {
		FunctionStatementContext _localctx = new FunctionStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_functionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			if (!(this.isNextWS())) throw new FailedPredicateException(this, "this.isNextWS()");
			State = 532;
			identifier();
			State = 534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014466693300810L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 281465628848553983L) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & 7L) != 0)) {
				{
				State = 533;
				arguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			expressionSequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MainParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			Match(If);
			State = 539;
			singleExpression(0);
			State = 541;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 540;
				Match(EOL);
				}
				break;
			}
			State = 543;
			statement();
			State = 552;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EOL) {
					{
					State = 544;
					Match(EOL);
					}
				}

				State = 547;
				Match(Else);
				State = 549;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 548;
					Match(EOL);
					}
					break;
				}
				State = 551;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopReadStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Read() { return GetToken(MainParser.Read, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		public LoopReadStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopParseStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Parse() { return GetToken(MainParser.Parse, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		public LoopParseStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopParseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopFilesStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Files() { return GetToken(MainParser.Files, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		public LoopFilesStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopFilesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopRegStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Reg() { return GetToken(MainParser.Reg, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		public LoopRegStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopRegStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		public LoopStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MainParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MainParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForInParametersContext forInParameters() {
			return GetRuleContext<ForInParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_iterationStatement);
		try {
			int _alt;
			State = 681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				_localctx = new LoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 554;
				Match(Loop);
				State = 556;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 555;
					singleExpression(0);
					}
					break;
				}
				State = 559;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 558;
					Match(EOL);
					}
					break;
				}
				State = 561;
				statement();
				State = 566;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
				case 1:
					{
					State = 562;
					Match(Until);
					State = 563;
					singleExpression(0);
					State = 564;
					Match(EOL);
					}
					break;
				}
				State = 570;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 568;
					Match(Else);
					State = 569;
					statement();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new LoopFilesStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 572;
				Match(Loop);
				State = 573;
				Match(Files);
				State = 574;
				singleExpression(0);
				State = 577;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 575;
					Match(Comma);
					State = 576;
					singleExpression(0);
					}
					break;
				}
				State = 579;
				statement();
				State = 584;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 580;
					Match(Until);
					State = 581;
					singleExpression(0);
					State = 582;
					Match(EOL);
					}
					break;
				}
				State = 588;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 586;
					Match(Else);
					State = 587;
					statement();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new LoopReadStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 590;
				Match(Loop);
				State = 591;
				Match(Read);
				State = 592;
				singleExpression(0);
				State = 595;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 593;
					Match(Comma);
					State = 594;
					singleExpression(0);
					}
					break;
				}
				State = 597;
				statement();
				State = 602;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 598;
					Match(Until);
					State = 599;
					singleExpression(0);
					State = 600;
					Match(EOL);
					}
					break;
				}
				State = 606;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 604;
					Match(Else);
					State = 605;
					statement();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new LoopRegStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 608;
				Match(Loop);
				State = 609;
				Match(Reg);
				State = 610;
				singleExpression(0);
				State = 613;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					State = 611;
					Match(Comma);
					State = 612;
					singleExpression(0);
					}
					break;
				}
				State = 615;
				statement();
				State = 620;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 616;
					Match(Until);
					State = 617;
					singleExpression(0);
					State = 618;
					Match(EOL);
					}
					break;
				}
				State = 624;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 622;
					Match(Else);
					State = 623;
					statement();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new LoopParseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 626;
				Match(Loop);
				State = 627;
				Match(Parse);
				State = 628;
				singleExpression(0);
				State = 635;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 629;
						Match(Comma);
						State = 631;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
						case 1:
							{
							State = 630;
							singleExpression(0);
							}
							break;
						}
						}
						} 
					}
					State = 637;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
				}
				State = 638;
				statement();
				State = 643;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
				case 1:
					{
					State = 639;
					Match(Until);
					State = 640;
					singleExpression(0);
					State = 641;
					Match(EOL);
					}
					break;
				}
				State = 647;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
				case 1:
					{
					State = 645;
					Match(Else);
					State = 646;
					statement();
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 649;
				Match(While);
				State = 650;
				singleExpression(0);
				State = 652;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 651;
					Match(EOL);
					}
					break;
				}
				State = 654;
				statement();
				State = 659;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 655;
					Match(Until);
					State = 656;
					singleExpression(0);
					State = 657;
					Match(EOL);
					}
					break;
				}
				State = 663;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 661;
					Match(Else);
					State = 662;
					statement();
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 665;
				Match(For);
				State = 666;
				forInParameters();
				State = 668;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 667;
					Match(EOL);
					}
					break;
				}
				State = 670;
				statement();
				State = 675;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
				case 1:
					{
					State = 671;
					Match(Until);
					State = 672;
					singleExpression(0);
					State = 673;
					Match(EOL);
					}
					break;
				}
				State = 679;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 677;
					Match(Else);
					State = 678;
					statement();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext[] assignable() {
			return GetRuleContexts<AssignableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable(int i) {
			return GetRuleContext<AssignableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenParenContext openParen() {
			return GetRuleContext<OpenParenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ForInParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInParametersContext forInParameters() {
		ForInParametersContext _localctx = new ForInParametersContext(Context, State);
		EnterRule(_localctx, 66, RULE_forInParameters);
		int _la;
		try {
			State = 714;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracketWithWS:
			case OpenBrace:
			case Comma:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Export:
			case Import:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 684;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 683;
					assignable();
					}
					break;
				}
				State = 692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 686;
					Match(Comma);
					State = 688;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
					case 1:
						{
						State = 687;
						assignable();
						}
						break;
					}
					}
					}
					State = 694;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 695;
				Match(In);
				State = 696;
				singleExpression(0);
				}
				break;
			case OpenParenNoWS:
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 697;
				openParen();
				State = 699;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
				case 1:
					{
					State = 698;
					assignable();
					}
					break;
				}
				State = 707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 701;
					Match(Comma);
					State = 703;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
					case 1:
						{
						State = 702;
						assignable();
						}
						break;
					}
					}
					}
					State = 709;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 710;
				Match(In);
				State = 711;
				singleExpression(0);
				State = 712;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(MainParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenParenContext openParen() {
			return GetRuleContext<OpenParenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_continueStatement);
		int _la;
		try {
			State = 727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 716;
				Match(Continue);
				State = 718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 281184153871839487L) != 0) || _la==Identifier || _la==StringLiteral) {
					{
					State = 717;
					propertyName();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 720;
				Match(Continue);
				State = 725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenParenNoWS || _la==OpenParen) {
					{
					State = 721;
					openParen();
					State = 722;
					propertyName();
					State = 723;
					Match(CloseParen);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MainParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenParenContext openParen() {
			return GetRuleContext<OpenParenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_breakStatement);
		int _la;
		try {
			State = 740;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 729;
				Match(Break);
				State = 731;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 281184153871839487L) != 0) || _la==Identifier || _la==StringLiteral) {
					{
					State = 730;
					propertyName();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 733;
				Match(Break);
				State = 738;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenParenNoWS || _la==OpenParen) {
					{
					State = 734;
					openParen();
					State = 735;
					propertyName();
					State = 736;
					Match(CloseParen);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MainParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			Match(Return);
			State = 744;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014466692252234L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 281465628848553983L) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & 7L) != 0)) {
				{
				State = 743;
				singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_yieldStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 746;
			Match(Yield);
			State = 749;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 747;
				if (!(this.notEOL())) throw new FailedPredicateException(this, "this.notEOL()");
				State = 748;
				singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(MainParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			Match(Switch);
			State = 753;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 752;
				singleExpression(0);
				}
				break;
			}
			State = 757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 755;
				Match(Comma);
				State = 756;
				literal();
				}
			}

			State = 760;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 759;
				Match(EOL);
				}
			}

			State = 762;
			caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext[] caseClauses() {
			return GetRuleContexts<CaseClausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext caseClauses(int i) {
			return GetRuleContext<CaseClausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 78, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 764;
			Match(OpenBrace);
			State = 766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Case) {
				{
				State = 765;
				caseClauses();
				}
			}

			State = 778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				{
				State = 769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EOL) {
					{
					State = 768;
					Match(EOL);
					}
				}

				State = 771;
				defaultClause();
				State = 773;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
				case 1:
					{
					State = 772;
					Match(EOL);
					}
					break;
				}
				State = 776;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Case) {
					{
					State = 775;
					caseClauses();
					}
				}

				}
				break;
			}
			State = 781;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 780;
				Match(EOL);
				}
			}

			State = 783;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 80, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 785;
				caseClause();
				}
				}
				State = 788;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(MainParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 82, RULE_caseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790;
			Match(Case);
			State = 791;
			expressionSequence();
			State = 792;
			Match(Colon);
			State = 794;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 793;
				Match(EOL);
				}
				break;
			}
			State = 797;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 796;
				statementList();
				}
				break;
			}
			State = 800;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 799;
				Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 84, RULE_defaultClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 802;
			Match(Default);
			State = 803;
			Match(Colon);
			State = 805;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 804;
				Match(EOL);
				}
				break;
			}
			State = 808;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 807;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		public LabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelledStatementContext labelledStatement() {
		LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_labelledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810;
			Match(Identifier);
			State = 811;
			Match(Colon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(MainParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenParenContext openParen() {
			return GetRuleContext<OpenParenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_gotoStatement);
		try {
			State = 820;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 813;
				Match(Goto);
				State = 814;
				propertyName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 815;
				Match(Goto);
				State = 816;
				openParen();
				State = 817;
				propertyName();
				State = 818;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(MainParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 822;
			Match(Throw);
			State = 823;
			if (!(this.notEOL())) throw new FailedPredicateException(this, "this.notEOL()");
			State = 824;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(MainParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext[] catchProduction() {
			return GetRuleContexts<CatchProductionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext catchProduction(int i) {
			return GetRuleContext<CatchProductionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_tryStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 826;
			Match(Try);
			State = 828;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				{
				State = 827;
				Match(EOL);
				}
				break;
			}
			State = 830;
			statement();
			State = 832;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				{
				State = 831;
				Match(EOL);
				}
				break;
			}
			State = 837;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 834;
					catchProduction();
					}
					} 
				}
				State = 839;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			}
			State = 841;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				{
				State = 840;
				elseProduction();
				}
				break;
			}
			State = 844;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				{
				State = 843;
				finallyProduction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(MainParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchAssignableContext catchAssignable() {
			return GetRuleContext<CatchAssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 94, RULE_catchProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			Match(Catch);
			State = 848;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 847;
				catchAssignable();
				}
				break;
			}
			State = 851;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				{
				State = 850;
				Match(EOL);
				}
				break;
			}
			State = 853;
			statement();
			State = 855;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				{
				State = 854;
				Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchAssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenParenContext openParen() {
			return GetRuleContext<OpenParenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public CatchAssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchAssignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchAssignable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchAssignableContext catchAssignable() {
		CatchAssignableContext _localctx = new CatchAssignableContext(Context, State);
		EnterRule(_localctx, 96, RULE_catchAssignable);
		int _la;
		try {
			State = 870;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracketWithWS:
			case OpenBrace:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Export:
			case Import:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 857;
				assignable();
				State = 860;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
				case 1:
					{
					State = 858;
					Match(As);
					State = 859;
					identifier();
					}
					break;
				}
				}
				break;
			case OpenParenNoWS:
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 862;
				openParen();
				State = 863;
				assignable();
				State = 866;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==As) {
					{
					State = 864;
					Match(As);
					State = 865;
					identifier();
					}
				}

				State = 868;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public ElseProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseProductionContext elseProduction() {
		ElseProductionContext _localctx = new ElseProductionContext(Context, State);
		EnterRule(_localctx, 98, RULE_elseProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872;
			Match(Else);
			State = 873;
			statement();
			State = 875;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 874;
				Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(MainParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 100, RULE_finallyProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 877;
			Match(Finally);
			State = 878;
			statement();
			State = 880;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				{
				State = 879;
				Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenNoWS() { return GetToken(MainParser.OpenParenNoWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaFunctionBodyContext lambdaFunctionBody() {
			return GetRuleContext<LambdaFunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 102, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 883;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				{
				State = 882;
				Match(Async);
				}
				break;
			}
			State = 885;
			identifier();
			State = 886;
			Match(OpenParenNoWS);
			State = 888;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014432870400064L) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 68648475066367L) != 0) || _la==Identifier) {
				{
				State = 887;
				formalParameterList();
				}
			}

			State = 890;
			Match(CloseParen);
			State = 891;
			lambdaFunctionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MainParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 104, RULE_classDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 893;
			Match(Class);
			State = 894;
			identifier();
			State = 895;
			classTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(MainParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext[] classElement() {
			return GetRuleContexts<ClassElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext classElement(int i) {
			return GetRuleContext<ClassElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MainParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MainParser.Dot, i);
		}
		public ClassTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTailContext classTail() {
		ClassTailContext _localctx = new ClassTailContext(Context, State);
		EnterRule(_localctx, 106, RULE_classTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extends) {
				{
				State = 897;
				Match(Extends);
				State = 898;
				identifier();
				State = 903;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Dot) {
					{
					{
					State = 899;
					Match(Dot);
					State = 900;
					identifier();
					}
					}
					State = 905;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 909;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 908;
				Match(EOL);
				}
			}

			State = 911;
			Match(OpenBrace);
			State = 915;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 281184153871839487L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				{
				State = 912;
				classElement();
				}
				}
				State = 917;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 919;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 918;
				Match(EOL);
				}
			}

			State = 921;
			Match(CloseBrace);
			State = 923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				{
				State = 922;
				Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementContext : ParserRuleContext {
		public ClassElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElement; } }
	 
		public ClassElementContext() { }
		public virtual void CopyFrom(ClassElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public NestedClassDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassFieldDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		public ClassFieldDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassMethodDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		public ClassMethodDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassPropertyDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDefinitionContext propertyDefinition() {
			return GetRuleContext<PropertyDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		public ClassPropertyDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementContext classElement() {
		ClassElementContext _localctx = new ClassElementContext(Context, State);
		EnterRule(_localctx, 108, RULE_classElement);
		int _la;
		try {
			State = 946;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				_localctx = new ClassMethodDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 926;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
				case 1:
					{
					State = 925;
					Match(Static);
					}
					break;
				}
				State = 928;
				methodDefinition();
				State = 929;
				Match(EOL);
				}
				break;
			case 2:
				_localctx = new ClassPropertyDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 932;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Static) {
					{
					State = 931;
					Match(Static);
					}
				}

				State = 934;
				propertyDefinition();
				State = 935;
				Match(EOL);
				}
				break;
			case 3:
				_localctx = new ClassFieldDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 938;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
				case 1:
					{
					State = 937;
					Match(Static);
					}
					break;
				}
				State = 940;
				fieldDefinition();
				State = 941;
				Match(EOL);
				}
				break;
			case 4:
				_localctx = new NestedClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 943;
				classDeclaration();
				State = 944;
				Match(EOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenNoWS() { return GetToken(MainParser.OpenParenNoWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaFunctionBodyContext lambdaFunctionBody() {
			return GetRuleContext<LambdaFunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
		EnterRule(_localctx, 110, RULE_methodDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				{
				State = 948;
				Match(Async);
				}
				break;
			}
			State = 951;
			propertyName();
			State = 952;
			Match(OpenParenNoWS);
			State = 954;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014432870400064L) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 68648475066367L) != 0) || _la==Identifier) {
				{
				State = 953;
				formalParameterList();
				}
			}

			State = 956;
			Match(CloseParen);
			State = 957;
			lambdaFunctionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassPropertyNameContext classPropertyName() {
			return GetRuleContext<ClassPropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyGetterDefinitionContext[] propertyGetterDefinition() {
			return GetRuleContexts<PropertyGetterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyGetterDefinitionContext propertyGetterDefinition(int i) {
			return GetRuleContext<PropertyGetterDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySetterDefinitionContext[] propertySetterDefinition() {
			return GetRuleContexts<PropertySetterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySetterDefinitionContext propertySetterDefinition(int i) {
			return GetRuleContext<PropertySetterDefinitionContext>(i);
		}
		public PropertyDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefinitionContext propertyDefinition() {
		PropertyDefinitionContext _localctx = new PropertyDefinitionContext(Context, State);
		EnterRule(_localctx, 112, RULE_propertyDefinition);
		int _la;
		try {
			int _alt;
			State = 979;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 959;
				classPropertyName();
				State = 960;
				Match(Arrow);
				State = 961;
				singleExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 963;
				classPropertyName();
				State = 965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EOL) {
					{
					State = 964;
					Match(EOL);
					}
				}

				State = 967;
				Match(OpenBrace);
				State = 972;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 970;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
						case 1:
							{
							State = 968;
							propertyGetterDefinition();
							}
							break;
						case 2:
							{
							State = 969;
							propertySetterDefinition();
							}
							break;
						}
						} 
					}
					State = 974;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
				}
				State = 975;
				Match(CloseBrace);
				State = 977;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
				case 1:
					{
					State = 976;
					Match(EOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassPropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		public ClassPropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classPropertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassPropertyNameContext classPropertyName() {
		ClassPropertyNameContext _localctx = new ClassPropertyNameContext(Context, State);
		EnterRule(_localctx, 114, RULE_classPropertyName);
		try {
			State = 987;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 981;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 982;
				identifier();
				State = 983;
				Match(OpenBracket);
				State = 984;
				formalParameterList();
				State = 985;
				Match(CloseBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaFunctionBodyContext lambdaFunctionBody() {
			return GetRuleContext<LambdaFunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public PropertyGetterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetterDefinitionContext propertyGetterDefinition() {
		PropertyGetterDefinitionContext _localctx = new PropertyGetterDefinitionContext(Context, State);
		EnterRule(_localctx, 116, RULE_propertyGetterDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 989;
			if (!(this.n("get"))) throw new FailedPredicateException(this, "this.n(\"get\")");
			State = 990;
			identifier();
			State = 991;
			lambdaFunctionBody();
			State = 993;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				{
				State = 992;
				Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaFunctionBodyContext lambdaFunctionBody() {
			return GetRuleContext<LambdaFunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public PropertySetterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetterDefinitionContext propertySetterDefinition() {
		PropertySetterDefinitionContext _localctx = new PropertySetterDefinitionContext(Context, State);
		EnterRule(_localctx, 118, RULE_propertySetterDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 995;
			if (!(this.n("set"))) throw new FailedPredicateException(this, "this.n(\"set\")");
			State = 996;
			identifier();
			State = 997;
			lambdaFunctionBody();
			State = 999;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				{
				State = 998;
				Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext[] propertyName() {
			return GetRuleContexts<PropertyNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName(int i) {
			return GetRuleContext<PropertyNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Assign() { return GetTokens(MainParser.Assign); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign(int i) {
			return GetToken(MainParser.Assign, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 120, RULE_fieldDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1001;
			propertyName();
			State = 1013;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				{
				State = 1006;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1002;
						Match(Assign);
						State = 1003;
						propertyName();
						}
						} 
					}
					State = 1008;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				}
				State = 1010;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EOL) {
					{
					State = 1009;
					Match(EOL);
					}
				}

				State = 1012;
				initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterArgContext lastFormalParameterArg() {
			return GetRuleContext<LastFormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext[] formalParameterArg() {
			return GetRuleContexts<FormalParameterArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg(int i) {
			return GetRuleContext<FormalParameterArgContext>(i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 122, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1021;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1016;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014398509613120L) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 68648475066367L) != 0) || _la==Identifier) {
						{
						State = 1015;
						formalParameterArg();
						}
					}

					State = 1018;
					Match(Comma);
					}
					} 
				}
				State = 1023;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			}
			State = 1024;
			lastFormalParameterArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterArgContext formalParameterArg() {
		FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
		EnterRule(_localctx, 124, RULE_formalParameterArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1027;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BitAnd) {
				{
				State = 1026;
				Match(BitAnd);
				}
			}

			State = 1029;
			assignable();
			State = 1033;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				{
				State = 1030;
				Match(Assign);
				State = 1031;
				singleExpression(0);
				}
				break;
			case QuestionMark:
				{
				State = 1032;
				Match(QuestionMark);
				}
				break;
			case CloseBracket:
			case CloseParen:
			case Comma:
			case Multiply:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg() {
			return GetRuleContext<FormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		public LastFormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterArgContext lastFormalParameterArg() {
		LastFormalParameterArgContext _localctx = new LastFormalParameterArgContext(Context, State);
		EnterRule(_localctx, 126, RULE_lastFormalParameterArg);
		int _la;
		try {
			State = 1040;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracketWithWS:
			case OpenBrace:
			case BitAnd:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Export:
			case Import:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1035;
				formalParameterArg();
				State = 1037;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 1036;
					Match(Multiply);
					}
				}

				}
				break;
			case Multiply:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1039;
				Match(Multiply);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 128, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1043;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 1042;
				Match(EOL);
				}
			}

			State = 1045;
			Match(OpenBrace);
			State = 1047;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				{
				State = 1046;
				statementList();
				}
				break;
			}
			State = 1049;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracketWithWS() { return GetToken(MainParser.OpenBracketWithWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementListContext arrayElementList() {
			return GetRuleContext<ArrayElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 130, RULE_arrayLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1051;
			Match(OpenBracketWithWS);
			State = 1052;
			arrayElementList();
			State = 1053;
			Match(CloseBracket);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		public ArrayElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementListContext arrayElementList() {
		ArrayElementListContext _localctx = new ArrayElementListContext(Context, State);
		EnterRule(_localctx, 132, RULE_arrayElementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1056;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014466692252234L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 281465628848553983L) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & 7L) != 0)) {
						{
						State = 1055;
						arrayElement();
						}
					}

					State = 1058;
					Match(Comma);
					}
					} 
				}
				State = 1063;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			}
			State = 1065;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014466692252234L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 281465628848553983L) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & 7L) != 0)) {
				{
				State = 1064;
				arrayElement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(Context, State);
		EnterRule(_localctx, 134, RULE_arrayElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1067;
			singleExpression(0);
			State = 1069;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply) {
				{
				State = 1068;
				Match(Multiply);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MapElementListContext mapElementList() {
			return GetRuleContext<MapElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		public MapLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapLiteralContext mapLiteral() {
		MapLiteralContext _localctx = new MapLiteralContext(Context, State);
		EnterRule(_localctx, 136, RULE_mapLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1071;
			Match(OpenBracket);
			State = 1072;
			mapElementList();
			State = 1073;
			Match(CloseBracket);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapElementContext[] mapElement() {
			return GetRuleContexts<MapElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapElementContext mapElement(int i) {
			return GetRuleContext<MapElementContext>(i);
		}
		public MapElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapElementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapElementListContext mapElementList() {
		MapElementListContext _localctx = new MapElementListContext(Context, State);
		EnterRule(_localctx, 138, RULE_mapElementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1081;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014466693300810L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 281465628848553983L) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & 7L) != 0)) {
				{
				{
				State = 1076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014466692252234L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 281465628848553983L) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & 7L) != 0)) {
					{
					State = 1075;
					mapElement();
					}
				}

				State = 1078;
				Match(Comma);
				}
				}
				State = 1083;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public MapElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapElementContext mapElement() {
		MapElementContext _localctx = new MapElementContext(Context, State);
		EnterRule(_localctx, 140, RULE_mapElement);
		int _la;
		try {
			State = 1098;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1084;
				singleExpression(0);
				State = 1086;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 1085;
					Match(Multiply);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1088;
				singleExpression(0);
				State = 1090;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EOL) {
					{
					State = 1089;
					Match(EOL);
					}
				}

				State = 1092;
				Match(Colon);
				State = 1094;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EOL) {
					{
					State = 1093;
					Match(EOL);
					}
				}

				State = 1096;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public DynamicPropertyNameContext dynamicPropertyName() {
			return GetRuleContext<DynamicPropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertySetterContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenNoWS() { return GetToken(MainParser.OpenParenNoWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg() {
			return GetRuleContext<FormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertySetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyGetterContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenNoWS() { return GetToken(MainParser.OpenParenNoWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertyGetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionPropertyContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenNoWS() { return GetToken(MainParser.OpenParenNoWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionPropertyContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 142, RULE_propertyAssignment);
		int _la;
		try {
			State = 1135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				_localctx = new PropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1100;
				dynamicPropertyName();
				State = 1102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EOL) {
					{
					State = 1101;
					Match(EOL);
					}
				}

				State = 1104;
				Match(Colon);
				State = 1106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EOL) {
					{
					State = 1105;
					Match(EOL);
					}
				}

				State = 1108;
				singleExpression(0);
				}
				break;
			case 2:
				_localctx = new FunctionPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1111;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
				case 1:
					{
					State = 1110;
					Match(Async);
					}
					break;
				}
				State = 1114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 1113;
					Match(Multiply);
					}
				}

				State = 1116;
				propertyName();
				State = 1117;
				Match(OpenParenNoWS);
				State = 1119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014432870400064L) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 68648475066367L) != 0) || _la==Identifier) {
					{
					State = 1118;
					formalParameterList();
					}
				}

				State = 1121;
				Match(CloseParen);
				State = 1122;
				functionBody();
				}
				break;
			case 3:
				_localctx = new PropertyGetterContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1124;
				getter();
				State = 1125;
				Match(OpenParenNoWS);
				State = 1126;
				Match(CloseParen);
				State = 1127;
				functionBody();
				}
				break;
			case 4:
				_localctx = new PropertySetterContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1129;
				setter();
				State = 1130;
				Match(OpenParenNoWS);
				State = 1131;
				formalParameterArg();
				State = 1132;
				Match(CloseParen);
				State = 1133;
				functionBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicPropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference() {
			return GetRuleContext<DereferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerefContinuationContext[] derefContinuation() {
			return GetRuleContexts<DerefContinuationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerefContinuationContext derefContinuation(int i) {
			return GetRuleContext<DerefContinuationContext>(i);
		}
		public DynamicPropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicPropertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicPropertyNameContext dynamicPropertyName() {
		DynamicPropertyNameContext _localctx = new DynamicPropertyNameContext(Context, State);
		EnterRule(_localctx, 144, RULE_dynamicPropertyName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1139;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case Unset:
			case BooleanLiteral:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Export:
			case Import:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
			case StringLiteral:
				{
				State = 1137;
				propertyName();
				}
				break;
			case DerefStart:
				{
				State = 1138;
				dereference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1141;
					derefContinuation();
					}
					} 
				}
				State = 1146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 146, RULE_propertyName);
		try {
			State = 1151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1147;
				Match(Identifier);
				}
				break;
			case NullLiteral:
			case Unset:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Export:
			case Import:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1148;
				reservedWord();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1149;
				Match(StringLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1150;
				numericLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerefContinuationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefContinuation() { return GetToken(MainParser.DerefContinuation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefEnd() { return GetToken(MainParser.DerefEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentifierContinuation() { return GetToken(MainParser.IdentifierContinuation, 0); }
		public DerefContinuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derefContinuation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerefContinuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerefContinuationContext derefContinuation() {
		DerefContinuationContext _localctx = new DerefContinuationContext(Context, State);
		EnterRule(_localctx, 148, RULE_derefContinuation);
		try {
			State = 1158;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DerefContinuation:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1153;
				Match(DerefContinuation);
				State = 1154;
				singleExpression(0);
				State = 1155;
				Match(DerefEnd);
				}
				break;
			case IdentifierContinuation:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1157;
				Match(IdentifierContinuation);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DereferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefStart() { return GetToken(MainParser.DerefStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefEnd() { return GetToken(MainParser.DerefEnd, 0); }
		public DereferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dereference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDereference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DereferenceContext dereference() {
		DereferenceContext _localctx = new DereferenceContext(Context, State);
		EnterRule(_localctx, 150, RULE_dereference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1160;
			Match(DerefStart);
			State = 1161;
			singleExpression(0);
			State = 1162;
			Match(DerefEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 152, RULE_arguments);
		int _la;
		try {
			State = 1182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DerefStart:
			case OpenParenNoWS:
			case OpenBracketWithWS:
			case RegularExpressionLiteral:
			case OpenParen:
			case OpenBrace:
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case BitNot:
			case Not:
			case Multiply:
			case BitAnd:
			case NullLiteral:
			case Unset:
			case BooleanLiteral:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
			case MultilineStringLiteral:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1164;
				argument();
				State = 1171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1165;
					Match(Comma);
					State = 1167;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014466692252234L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 281465628848553983L) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & 7L) != 0)) {
						{
						State = 1166;
						argument();
						}
					}

					}
					}
					State = 1173;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case Comma:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1174;
					Match(Comma);
					State = 1176;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014466692252234L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 281465628848553983L) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & 7L) != 0)) {
						{
						State = 1175;
						argument();
						}
					}

					}
					}
					State = 1180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 154, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1184;
			singleExpression(0);
			State = 1186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply) {
				{
				State = 1185;
				Match(Multiply);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 156, RULE_expressionSequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188;
			singleExpression(0);
			State = 1193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1189;
				Match(Comma);
				State = 1190;
				singleExpression(0);
				}
				}
				State = 1195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionConcatenationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public SingleExpressionConcatenationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpressionConcatenation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleExpressionConcatenation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionConcatenationContext singleExpressionConcatenation() {
		SingleExpressionConcatenationContext _localctx = new SingleExpressionConcatenationContext(Context, State);
		EnterRule(_localctx, 158, RULE_singleExpressionConcatenation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1196;
			if (!(!this.isBOS())) throw new FailedPredicateException(this, "!this.isBOS()");
			State = 1197;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenNoWS() { return GetToken(MainParser.OpenParenNoWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctionCallArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallArgumentsContext functionCallArguments() {
		FunctionCallArgumentsContext _localctx = new FunctionCallArgumentsContext(Context, State);
		EnterRule(_localctx, 160, RULE_functionCallArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1199;
			Match(OpenParenNoWS);
			State = 1201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014466693300810L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 281465628848553983L) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & 7L) != 0)) {
				{
				State = 1200;
				arguments();
				}
			}

			State = 1203;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberIndexArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public MemberIndexArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberIndexArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberIndexArgumentsContext memberIndexArguments() {
		MemberIndexArgumentsContext _localctx = new MemberIndexArgumentsContext(Context, State);
		EnterRule(_localctx, 162, RULE_memberIndexArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1205;
			if (!(!this.isPrevWS())) throw new FailedPredicateException(this, "!this.isPrevWS()");
			State = 1206;
			Match(OpenBracket);
			State = 1208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014466692252234L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 281465628848553983L) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & 7L) != 0)) {
				{
				State = 1207;
				expressionSequence();
				}
			}

			State = 1210;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BaseExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Base() { return GetToken(MainParser.Base, 0); }
		public BaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public TernaryExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MainParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		public LogicalAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(MainParser.Power, 0); }
		public PowerExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DynamicIdentifierExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DynamicIdentifierContext dynamicIdentifier() {
			return GetRuleContext<DynamicIdentifierContext>(0);
		}
		public DynamicIdentifierExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		public InExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MainParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		public LogicalOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionalChainExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		public OptionalChainExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalChainExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(MainParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public NotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegExMatchExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegExMatch() { return GetToken(MainParser.RegExMatch, 0); }
		public RegExMatchExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegExMatchExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecreaseExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgumentsContext functionCallArguments() {
			return GetRuleContext<FunctionCallArgumentsContext>(0);
		}
		public FunctionCallExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AwaitExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public AwaitExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwaitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(MainParser.This, 0); }
		public ThisExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaFunctionContext lambdaFunction() {
			return GetRuleContext<LambdaFunctionContext>(0);
		}
		public FunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecreaseExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		public PostDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstanceofExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		public InstanceofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryPlusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(MainParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public DeleteExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(MainParser.BitXOr, 0); }
		public BitXOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotConcatenateExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DotConcat() { return GetToken(MainParser.DotConcat, 0); }
		public DotConcatenateExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotConcatenateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(MainParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(MainParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(MainParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityNotEquals() { return GetToken(MainParser.IdentityNotEquals, 0); }
		public EqualityExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuperExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(MainParser.Super, 0); }
		public SuperExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(MainParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivide() { return GetToken(MainParser.IntegerDivide, 0); }
		public MultiplicativeExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitShiftExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(MainParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(MainParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogical() { return GetToken(MainParser.RightShiftLogical, 0); }
		public BitShiftExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenParenContext openParen() {
			return GetRuleContext<OpenParenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		public AdditiveExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(MainParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(MainParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(MainParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(MainParser.GreaterThanEquals, 0); }
		public RelationalExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		public PostIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContainsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(MainParser.Contains, 0); }
		public ContainsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitNotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(MainParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public BitNotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarRefExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VarRefExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarRefExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MainParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DynamicPropertyNameContext dynamicPropertyName() {
			return GetRuleContext<DynamicPropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public MemberDotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MainParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		public ClassExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberIndexArgumentsContext memberIndexArguments() {
			return GetRuleContext<MemberIndexArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		public MemberIndexExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		public IsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		public BitAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImplicitConcatenateExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionConcatenationContext[] singleExpressionConcatenation() {
			return GetRuleContexts<SingleExpressionConcatenationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionConcatenationContext singleExpressionConcatenation(int i) {
			return GetRuleContext<SingleExpressionConcatenationContext>(i);
		}
		public ImplicitConcatenateExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitConcatenateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(MainParser.BitOr, 0); }
		public BitOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentOperatorExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentOperatorExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperatorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(MainParser.NullCoalesce, 0); }
		public CoalesceExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 164;
		EnterRecursionRule(_localctx, 164, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				_localctx = new ClassExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1213;
				Match(Class);
				State = 1214;
				Match(Identifier);
				State = 1215;
				classTail();
				}
				break;
			case 2:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1216;
				lambdaFunction();
				}
				break;
			case 3:
				{
				_localctx = new DeleteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1217;
				Match(Delete);
				State = 1218;
				singleExpression(39);
				}
				break;
			case 4:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1219;
				Match(PlusPlus);
				State = 1220;
				singleExpression(38);
				}
				break;
			case 5:
				{
				_localctx = new PreDecreaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1221;
				Match(MinusMinus);
				State = 1222;
				singleExpression(37);
				}
				break;
			case 6:
				{
				_localctx = new VarRefExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1223;
				Match(BitAnd);
				State = 1224;
				singleExpression(35);
				}
				break;
			case 7:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1225;
				Match(Minus);
				State = 1226;
				singleExpression(34);
				}
				break;
			case 8:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1227;
				Match(Plus);
				State = 1228;
				singleExpression(33);
				}
				break;
			case 9:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1229;
				Match(BitNot);
				State = 1230;
				singleExpression(32);
				}
				break;
			case 10:
				{
				_localctx = new AwaitExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1231;
				Match(Await);
				State = 1232;
				singleExpression(31);
				}
				break;
			case 11:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1233;
				_la = TokenStream.LA(1);
				if ( !(_la==Not || _la==VerbalNot) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EOL) {
					{
					State = 1234;
					Match(EOL);
					}
				}

				State = 1237;
				singleExpression(15);
				}
				break;
			case 12:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1238;
				openParen();
				State = 1239;
				expressionSequence();
				State = 1240;
				Match(CloseParen);
				}
				break;
			case 13:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1242;
				Match(This);
				}
				break;
			case 14:
				{
				_localctx = new SuperExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1243;
				Match(Super);
				}
				break;
			case 15:
				{
				_localctx = new BaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1244;
				Match(Base);
				}
				break;
			case 16:
				{
				_localctx = new DynamicIdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1245;
				dynamicIdentifier();
				}
				break;
			case 17:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1246;
				identifier();
				}
				break;
			case 18:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1247;
				literal();
				}
				break;
			case 19:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1248;
				arrayLiteral();
				}
				break;
			case 20:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1249;
				objectLiteral();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1350;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,189,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1348;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
					case 1:
						{
						_localctx = new OptionalChainExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1252;
						if (!(Precpred(Context, 45))) throw new FailedPredicateException(this, "Precpred(Context, 45)");
						State = 1253;
						Match(QuestionMarkDot);
						State = 1254;
						singleExpression(46);
						}
						break;
					case 2:
						{
						_localctx = new PowerExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1255;
						if (!(Precpred(Context, 36))) throw new FailedPredicateException(this, "Precpred(Context, 36)");
						State = 1256;
						Match(Power);
						State = 1257;
						singleExpression(36);
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1258;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 1259;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1260;
						singleExpression(31);
						}
						break;
					case 4:
						{
						_localctx = new AdditiveExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1261;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1262;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1263;
						singleExpression(30);
						}
						break;
					case 5:
						{
						_localctx = new BitShiftExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1264;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1265;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30786325577728L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1266;
						singleExpression(29);
						}
						break;
					case 6:
						{
						_localctx = new BitAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1267;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1268;
						Match(BitAnd);
						State = 1269;
						singleExpression(28);
						}
						break;
					case 7:
						{
						_localctx = new BitXOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1270;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1271;
						Match(BitXOr);
						State = 1272;
						singleExpression(27);
						}
						break;
					case 8:
						{
						_localctx = new BitOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1273;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1274;
						Match(BitOr);
						State = 1275;
						singleExpression(26);
						}
						break;
					case 9:
						{
						_localctx = new DotConcatenateExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1276;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1277;
						Match(DotConcat);
						State = 1278;
						singleExpression(25);
						}
						break;
					case 10:
						{
						_localctx = new RegExMatchExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1279;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1280;
						Match(RegExMatch);
						State = 1281;
						singleExpression(23);
						}
						break;
					case 11:
						{
						_localctx = new RelationalExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1282;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1283;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 527765581332480L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1284;
						singleExpression(22);
						}
						break;
					case 12:
						{
						_localctx = new EqualityExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1285;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1286;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8444249301319680L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1287;
						singleExpression(21);
						}
						break;
					case 13:
						{
						_localctx = new InstanceofExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1288;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1289;
						Match(Instanceof);
						State = 1290;
						singleExpression(20);
						}
						break;
					case 14:
						{
						_localctx = new IsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1291;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1292;
						Match(Is);
						State = 1293;
						singleExpression(19);
						}
						break;
					case 15:
						{
						_localctx = new InExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1294;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1295;
						Match(In);
						State = 1296;
						singleExpression(18);
						}
						break;
					case 16:
						{
						_localctx = new ContainsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1297;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1298;
						Match(Contains);
						State = 1299;
						singleExpression(17);
						}
						break;
					case 17:
						{
						_localctx = new LogicalAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1300;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1301;
						_la = TokenStream.LA(1);
						if ( !(_la==And || _la==VerbalAnd) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1302;
						singleExpression(15);
						}
						break;
					case 18:
						{
						_localctx = new LogicalOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1303;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1304;
						_la = TokenStream.LA(1);
						if ( !(_la==Or || _la==VerbalOr) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1305;
						singleExpression(14);
						}
						break;
					case 19:
						{
						_localctx = new CoalesceExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1306;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1307;
						Match(NullCoalesce);
						State = 1308;
						singleExpression(13);
						}
						break;
					case 20:
						{
						_localctx = new TernaryExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1309;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1310;
						Match(QuestionMark);
						State = 1311;
						singleExpression(0);
						State = 1313;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EOL) {
							{
							State = 1312;
							Match(EOL);
							}
						}

						State = 1315;
						Match(Colon);
						State = 1317;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EOL) {
							{
							State = 1316;
							Match(EOL);
							}
						}

						State = 1319;
						singleExpression(12);
						}
						break;
					case 21:
						{
						_localctx = new AssignmentOperatorExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1321;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1322;
						assignmentOperator();
						State = 1323;
						singleExpression(10);
						}
						break;
					case 22:
						{
						_localctx = new MemberIndexExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1325;
						if (!(Precpred(Context, 44))) throw new FailedPredicateException(this, "Precpred(Context, 44)");
						State = 1327;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
						case 1:
							{
							State = 1326;
							Match(QuestionMarkDot);
							}
							break;
						}
						State = 1329;
						memberIndexArguments();
						}
						break;
					case 23:
						{
						_localctx = new FunctionCallExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1330;
						if (!(Precpred(Context, 43))) throw new FailedPredicateException(this, "Precpred(Context, 43)");
						State = 1331;
						functionCallArguments();
						}
						break;
					case 24:
						{
						_localctx = new MemberDotExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1332;
						if (!(Precpred(Context, 42))) throw new FailedPredicateException(this, "Precpred(Context, 42)");
						State = 1334;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==QuestionMark) {
							{
							State = 1333;
							Match(QuestionMark);
							}
						}

						State = 1336;
						Match(Dot);
						State = 1337;
						dynamicPropertyName();
						}
						break;
					case 25:
						{
						_localctx = new PostIncrementExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1338;
						if (!(Precpred(Context, 41))) throw new FailedPredicateException(this, "Precpred(Context, 41)");
						State = 1339;
						Match(PlusPlus);
						}
						break;
					case 26:
						{
						_localctx = new PostDecreaseExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1340;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 1341;
						Match(MinusMinus);
						}
						break;
					case 27:
						{
						_localctx = new ImplicitConcatenateExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1342;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1344;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 1343;
								singleExpressionConcatenation();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 1346;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,187,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					} 
				}
				State = 1352;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,189,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 166, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerefContinuationContext[] derefContinuation() {
			return GetRuleContexts<DerefContinuationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerefContinuationContext derefContinuation(int i) {
			return GetRuleContext<DerefContinuationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference() {
			return GetRuleContext<DereferenceContext>(0);
		}
		public DynamicIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicIdentifierContext dynamicIdentifier() {
		DynamicIdentifierContext _localctx = new DynamicIdentifierContext(Context, State);
		EnterRule(_localctx, 168, RULE_dynamicIdentifier);
		try {
			int _alt;
			State = 1368;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Default:
			case Yield:
			case Async:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1355;
				identifier();
				State = 1357;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1356;
						derefContinuation();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1359;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,190,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case DerefStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1361;
				dereference();
				State = 1365;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,191,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1362;
						derefContinuation();
						}
						} 
					}
					State = 1367;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,191,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 170, RULE_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1370;
			Match(Assign);
			State = 1371;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public AssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableContext assignable() {
		AssignableContext _localctx = new AssignableContext(Context, State);
		EnterRule(_localctx, 172, RULE_assignable);
		try {
			State = 1377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1373;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1374;
				keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1375;
				arrayLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1376;
				objectLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 174, RULE_objectLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1379;
			Match(OpenBrace);
			State = 1391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				{
				State = 1380;
				propertyAssignment();
				State = 1385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1381;
					Match(Comma);
					State = 1382;
					propertyAssignment();
					}
					}
					State = 1387;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EOL) {
					{
					State = 1388;
					Match(EOL);
					}
				}

				}
				break;
			}
			State = 1393;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaFunctionContext : ParserRuleContext {
		public LambdaFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaFunction; } }
	 
		public LambdaFunctionContext() { }
		public virtual void CopyFrom(LambdaFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedLambdaFunctionContext : LambdaFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public NamedLambdaFunctionContext(LambdaFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedLambdaFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnonymousLambdaFunctionContext : LambdaFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenParenContext openParen() {
			return GetRuleContext<OpenParenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaFunctionBodyContext lambdaFunctionBody() {
			return GetRuleContext<LambdaFunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public AnonymousLambdaFunctionContext(LambdaFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousLambdaFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnonymousFatArrowLambdaFunctionContext : LambdaFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public AnonymousFatArrowLambdaFunctionContext(LambdaFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousFatArrowLambdaFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaFunctionContext lambdaFunction() {
		LambdaFunctionContext _localctx = new LambdaFunctionContext(Context, State);
		EnterRule(_localctx, 176, RULE_lambdaFunction);
		int _la;
		try {
			State = 1424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
			case 1:
				_localctx = new AnonymousLambdaFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Async) {
					{
					State = 1395;
					Match(Async);
					}
				}

				State = 1398;
				openParen();
				State = 1400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014432870400064L) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 68648475066367L) != 0) || _la==Identifier) {
					{
					State = 1399;
					formalParameterList();
					}
				}

				State = 1402;
				Match(CloseParen);
				State = 1403;
				lambdaFunctionBody();
				}
				break;
			case 2:
				_localctx = new AnonymousFatArrowLambdaFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1406;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
				case 1:
					{
					State = 1405;
					Match(Async);
					}
					break;
				}
				State = 1419;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
				case 1:
					{
					State = 1409;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OpenBracketWithWS || _la==OpenBrace || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 68648475066367L) != 0) || _la==Identifier) {
						{
						State = 1408;
						assignable();
						}
					}

					State = 1411;
					Match(Multiply);
					}
					break;
				case 2:
					{
					State = 1413;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BitAnd) {
						{
						State = 1412;
						Match(BitAnd);
						}
					}

					State = 1415;
					assignable();
					State = 1417;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==QuestionMark) {
						{
						State = 1416;
						Match(QuestionMark);
						}
					}

					}
					break;
				}
				State = 1421;
				Match(Arrow);
				State = 1422;
				singleExpression(0);
				}
				break;
			case 3:
				_localctx = new NamedLambdaFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1423;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaFunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public LambdaFunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaFunctionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaFunctionBodyContext lambdaFunctionBody() {
		LambdaFunctionBodyContext _localctx = new LambdaFunctionBodyContext(Context, State);
		EnterRule(_localctx, 178, RULE_lambdaFunctionBody);
		try {
			State = 1429;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Arrow:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1426;
				Match(Arrow);
				State = 1427;
				singleExpression(0);
				}
				break;
			case OpenBrace:
			case EOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1428;
				functionBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(MainParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(MainParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(MainParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(MainParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(MainParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivideAssign() { return GetToken(MainParser.IntegerDivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConcatenateAssign() { return GetToken(MainParser.ConcatenateAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(MainParser.BitOrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(MainParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(MainParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(MainParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(MainParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogicalAssign() { return GetToken(MainParser.RightShiftLogicalAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PowerAssign() { return GetToken(MainParser.PowerAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullishCoalescingAssign() { return GetToken(MainParser.NullishCoalescingAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 180, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1431;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & 9006924376834049L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(MainParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultilineStringLiteral() { return GetToken(MainParser.MultilineStringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegularExpressionLiteral() { return GetToken(MainParser.RegularExpressionLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BigintLiteralContext bigintLiteral() {
			return GetRuleContext<BigintLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 182, RULE_literal);
		try {
			State = 1441;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1433;
				Match(NullLiteral);
				}
				break;
			case Unset:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1434;
				Match(Unset);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1435;
				boolean();
				}
				break;
			case MultilineStringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1436;
				Match(MultilineStringLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1437;
				Match(StringLiteral);
				}
				break;
			case RegularExpressionLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1438;
				Match(RegularExpressionLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1439;
				numericLiteral();
				}
				break;
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1440;
				bigintLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(MainParser.BooleanLiteral, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 184, RULE_boolean);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1443;
			Match(BooleanLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(MainParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(MainParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral() { return GetToken(MainParser.OctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral2() { return GetToken(MainParser.OctalIntegerLiteral2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryIntegerLiteral() { return GetToken(MainParser.BinaryIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 186, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1445;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BigintLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigDecimalIntegerLiteral() { return GetToken(MainParser.BigDecimalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigHexIntegerLiteral() { return GetToken(MainParser.BigHexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigOctalIntegerLiteral() { return GetToken(MainParser.BigOctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigBinaryIntegerLiteral() { return GetToken(MainParser.BigBinaryIntegerLiteral, 0); }
		public BigintLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bigintLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBigintLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BigintLiteralContext bigintLiteral() {
		BigintLiteralContext _localctx = new BigintLiteralContext(Context, State);
		EnterRule(_localctx, 188, RULE_bigintLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1447;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 190, RULE_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1449;
			if (!(this.n("get"))) throw new FailedPredicateException(this, "this.n(\"get\")");
			State = 1450;
			identifier();
			State = 1451;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 192, RULE_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1453;
			if (!(this.n("set"))) throw new FailedPredicateException(this, "this.n(\"set\")");
			State = 1454;
			identifier();
			State = 1455;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 194, RULE_identifierName);
		try {
			State = 1459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1457;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1458;
				reservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 196, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1461;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 68720525313L) != 0) || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(MainParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 198, RULE_reservedWord);
		try {
			State = 1467;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Export:
			case Import:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1463;
				keyword();
				}
				break;
			case NullLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1464;
				Match(NullLiteral);
				}
				break;
			case Unset:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1465;
				Match(Unset);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1466;
				boolean();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenParenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenNoWS() { return GetToken(MainParser.OpenParenNoWS, 0); }
		public OpenParenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openParen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenParen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenParenContext openParen() {
		OpenParenContext _localctx = new OpenParenContext(Context, State);
		EnterRule(_localctx, 200, RULE_openParen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1469;
			_la = TokenStream.LA(1);
			if ( !(_la==OpenParenNoWS || _la==OpenParen) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MainParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(MainParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(MainParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(MainParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(MainParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MainParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(MainParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MainParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(MainParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MainParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(MainParser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MainParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(MainParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(MainParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(MainParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MainParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(MainParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(MainParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(MainParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(MainParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(MainParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(MainParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 202, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1471;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 68648475066367L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MainParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 204, RULE_eos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1473;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==EOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 29: return functionStatement_sempred((FunctionStatementContext)_localctx, predIndex);
		case 37: return yieldStatement_sempred((YieldStatementContext)_localctx, predIndex);
		case 45: return throwStatement_sempred((ThrowStatementContext)_localctx, predIndex);
		case 58: return propertyGetterDefinition_sempred((PropertyGetterDefinitionContext)_localctx, predIndex);
		case 59: return propertySetterDefinition_sempred((PropertySetterDefinitionContext)_localctx, predIndex);
		case 79: return singleExpressionConcatenation_sempred((SingleExpressionConcatenationContext)_localctx, predIndex);
		case 81: return memberIndexArguments_sempred((MemberIndexArgumentsContext)_localctx, predIndex);
		case 82: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 95: return getter_sempred((GetterContext)_localctx, predIndex);
		case 96: return setter_sempred((SetterContext)_localctx, predIndex);
		}
		return true;
	}
	private bool functionStatement_sempred(FunctionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.isNextWS();
		}
		return true;
	}
	private bool yieldStatement_sempred(YieldStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return this.notEOL();
		}
		return true;
	}
	private bool throwStatement_sempred(ThrowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return this.notEOL();
		}
		return true;
	}
	private bool propertyGetterDefinition_sempred(PropertyGetterDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return this.n("get");
		}
		return true;
	}
	private bool propertySetterDefinition_sempred(PropertySetterDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return this.n("set");
		}
		return true;
	}
	private bool singleExpressionConcatenation_sempred(SingleExpressionConcatenationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return !this.isBOS();
		}
		return true;
	}
	private bool memberIndexArguments_sempred(MemberIndexArgumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return !this.isPrevWS();
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 45);
		case 8: return Precpred(Context, 36);
		case 9: return Precpred(Context, 30);
		case 10: return Precpred(Context, 29);
		case 11: return Precpred(Context, 28);
		case 12: return Precpred(Context, 27);
		case 13: return Precpred(Context, 26);
		case 14: return Precpred(Context, 25);
		case 15: return Precpred(Context, 24);
		case 16: return Precpred(Context, 22);
		case 17: return Precpred(Context, 21);
		case 18: return Precpred(Context, 20);
		case 19: return Precpred(Context, 19);
		case 20: return Precpred(Context, 18);
		case 21: return Precpred(Context, 17);
		case 22: return Precpred(Context, 16);
		case 23: return Precpred(Context, 14);
		case 24: return Precpred(Context, 13);
		case 25: return Precpred(Context, 12);
		case 26: return Precpred(Context, 11);
		case 27: return Precpred(Context, 10);
		case 28: return Precpred(Context, 44);
		case 29: return Precpred(Context, 43);
		case 30: return Precpred(Context, 42);
		case 31: return Precpred(Context, 41);
		case 32: return Precpred(Context, 40);
		case 33: return Precpred(Context, 23);
		}
		return true;
	}
	private bool getter_sempred(GetterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return this.n("get");
		}
		return true;
	}
	private bool setter_sempred(SetterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return this.n("set");
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,172,1476,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,1,0,1,0,1,0,1,1,4,1,211,
		8,1,11,1,12,1,212,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,224,8,2,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,235,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,255,8,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,275,8,
		3,1,4,1,4,3,4,279,8,4,1,4,1,4,1,4,1,4,1,4,3,4,286,8,4,1,4,1,4,1,4,1,4,
		3,4,292,8,4,1,4,1,4,1,4,1,4,3,4,298,8,4,1,4,3,4,301,8,4,1,5,1,5,1,5,1,
		5,1,6,1,6,1,6,5,6,310,8,6,10,6,12,6,313,9,6,1,6,1,6,1,6,1,6,1,6,1,6,3,
		6,321,8,6,1,7,1,7,1,7,5,7,326,8,7,10,7,12,7,329,9,7,1,7,3,7,332,8,7,1,
		7,1,7,1,7,1,7,3,7,338,8,7,1,8,1,8,3,8,342,8,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,360,8,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,3,8,385,8,8,1,9,3,9,388,8,9,1,9,1,9,3,9,392,8,9,1,9,3,9,395,8,9,1,
		9,1,9,1,10,4,10,400,8,10,11,10,12,10,401,1,11,1,11,3,11,406,8,11,1,12,
		1,12,1,12,1,13,3,13,412,8,13,1,13,1,13,3,13,416,8,13,1,13,1,13,1,13,3,
		13,421,8,13,1,14,1,14,1,14,1,14,5,14,427,8,14,10,14,12,14,430,9,14,1,14,
		1,14,3,14,434,8,14,3,14,436,8,14,1,14,1,14,1,15,1,15,1,15,3,15,443,8,15,
		1,16,1,16,3,16,447,8,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,3,19,456,8,
		19,1,19,1,19,3,19,460,8,19,1,20,1,20,1,20,1,21,1,21,1,21,3,21,468,8,21,
		1,22,1,22,3,22,472,8,22,1,22,1,22,3,22,476,8,22,1,22,1,22,1,22,3,22,481,
		8,22,1,23,1,23,1,23,1,23,1,23,3,23,488,8,23,3,23,490,8,23,1,24,1,24,1,
		24,1,24,5,24,496,8,24,10,24,12,24,499,9,24,1,24,1,24,3,24,503,8,24,3,24,
		505,8,24,1,24,1,24,1,25,1,25,1,25,3,25,512,8,25,1,26,1,26,3,26,516,8,26,
		1,27,1,27,1,27,5,27,521,8,27,10,27,12,27,524,9,27,1,28,1,28,1,28,1,28,
		3,28,530,8,28,1,29,1,29,1,29,3,29,535,8,29,1,30,1,30,1,31,1,31,1,31,3,
		31,542,8,31,1,31,1,31,3,31,546,8,31,1,31,1,31,3,31,550,8,31,1,31,3,31,
		553,8,31,1,32,1,32,3,32,557,8,32,1,32,3,32,560,8,32,1,32,1,32,1,32,1,32,
		1,32,3,32,567,8,32,1,32,1,32,3,32,571,8,32,1,32,1,32,1,32,1,32,1,32,3,
		32,578,8,32,1,32,1,32,1,32,1,32,1,32,3,32,585,8,32,1,32,1,32,3,32,589,
		8,32,1,32,1,32,1,32,1,32,1,32,3,32,596,8,32,1,32,1,32,1,32,1,32,1,32,3,
		32,603,8,32,1,32,1,32,3,32,607,8,32,1,32,1,32,1,32,1,32,1,32,3,32,614,
		8,32,1,32,1,32,1,32,1,32,1,32,3,32,621,8,32,1,32,1,32,3,32,625,8,32,1,
		32,1,32,1,32,1,32,1,32,3,32,632,8,32,5,32,634,8,32,10,32,12,32,637,9,32,
		1,32,1,32,1,32,1,32,1,32,3,32,644,8,32,1,32,1,32,3,32,648,8,32,1,32,1,
		32,1,32,3,32,653,8,32,1,32,1,32,1,32,1,32,1,32,3,32,660,8,32,1,32,1,32,
		3,32,664,8,32,1,32,1,32,1,32,3,32,669,8,32,1,32,1,32,1,32,1,32,1,32,3,
		32,676,8,32,1,32,1,32,3,32,680,8,32,3,32,682,8,32,1,33,3,33,685,8,33,1,
		33,1,33,3,33,689,8,33,5,33,691,8,33,10,33,12,33,694,9,33,1,33,1,33,1,33,
		1,33,3,33,700,8,33,1,33,1,33,3,33,704,8,33,5,33,706,8,33,10,33,12,33,709,
		9,33,1,33,1,33,1,33,1,33,3,33,715,8,33,1,34,1,34,3,34,719,8,34,1,34,1,
		34,1,34,1,34,1,34,3,34,726,8,34,3,34,728,8,34,1,35,1,35,3,35,732,8,35,
		1,35,1,35,1,35,1,35,1,35,3,35,739,8,35,3,35,741,8,35,1,36,1,36,3,36,745,
		8,36,1,37,1,37,1,37,3,37,750,8,37,1,38,1,38,3,38,754,8,38,1,38,1,38,3,
		38,758,8,38,1,38,3,38,761,8,38,1,38,1,38,1,39,1,39,3,39,767,8,39,1,39,
		3,39,770,8,39,1,39,1,39,3,39,774,8,39,1,39,3,39,777,8,39,3,39,779,8,39,
		1,39,3,39,782,8,39,1,39,1,39,1,40,4,40,787,8,40,11,40,12,40,788,1,41,1,
		41,1,41,1,41,3,41,795,8,41,1,41,3,41,798,8,41,1,41,3,41,801,8,41,1,42,
		1,42,1,42,3,42,806,8,42,1,42,3,42,809,8,42,1,43,1,43,1,43,1,44,1,44,1,
		44,1,44,1,44,1,44,1,44,3,44,821,8,44,1,45,1,45,1,45,1,45,1,46,1,46,3,46,
		829,8,46,1,46,1,46,3,46,833,8,46,1,46,5,46,836,8,46,10,46,12,46,839,9,
		46,1,46,3,46,842,8,46,1,46,3,46,845,8,46,1,47,1,47,3,47,849,8,47,1,47,
		3,47,852,8,47,1,47,1,47,3,47,856,8,47,1,48,1,48,1,48,3,48,861,8,48,1,48,
		1,48,1,48,1,48,3,48,867,8,48,1,48,1,48,3,48,871,8,48,1,49,1,49,1,49,3,
		49,876,8,49,1,50,1,50,1,50,3,50,881,8,50,1,51,3,51,884,8,51,1,51,1,51,
		1,51,3,51,889,8,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,
		53,5,53,902,8,53,10,53,12,53,905,9,53,3,53,907,8,53,1,53,3,53,910,8,53,
		1,53,1,53,5,53,914,8,53,10,53,12,53,917,9,53,1,53,3,53,920,8,53,1,53,1,
		53,3,53,924,8,53,1,54,3,54,927,8,54,1,54,1,54,1,54,1,54,3,54,933,8,54,
		1,54,1,54,1,54,1,54,3,54,939,8,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,947,
		8,54,1,55,3,55,950,8,55,1,55,1,55,1,55,3,55,955,8,55,1,55,1,55,1,55,1,
		56,1,56,1,56,1,56,1,56,1,56,3,56,966,8,56,1,56,1,56,1,56,5,56,971,8,56,
		10,56,12,56,974,9,56,1,56,1,56,3,56,978,8,56,3,56,980,8,56,1,57,1,57,1,
		57,1,57,1,57,1,57,3,57,988,8,57,1,58,1,58,1,58,1,58,3,58,994,8,58,1,59,
		1,59,1,59,1,59,3,59,1000,8,59,1,60,1,60,1,60,5,60,1005,8,60,10,60,12,60,
		1008,9,60,1,60,3,60,1011,8,60,1,60,3,60,1014,8,60,1,61,3,61,1017,8,61,
		1,61,5,61,1020,8,61,10,61,12,61,1023,9,61,1,61,1,61,1,62,3,62,1028,8,62,
		1,62,1,62,1,62,1,62,3,62,1034,8,62,1,63,1,63,3,63,1038,8,63,1,63,3,63,
		1041,8,63,1,64,3,64,1044,8,64,1,64,1,64,3,64,1048,8,64,1,64,1,64,1,65,
		1,65,1,65,1,65,1,66,3,66,1057,8,66,1,66,5,66,1060,8,66,10,66,12,66,1063,
		9,66,1,66,3,66,1066,8,66,1,67,1,67,3,67,1070,8,67,1,68,1,68,1,68,1,68,
		1,69,3,69,1077,8,69,1,69,5,69,1080,8,69,10,69,12,69,1083,9,69,1,70,1,70,
		3,70,1087,8,70,1,70,1,70,3,70,1091,8,70,1,70,1,70,3,70,1095,8,70,1,70,
		1,70,3,70,1099,8,70,1,71,1,71,3,71,1103,8,71,1,71,1,71,3,71,1107,8,71,
		1,71,1,71,1,71,3,71,1112,8,71,1,71,3,71,1115,8,71,1,71,1,71,1,71,3,71,
		1120,8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
		1,71,1,71,3,71,1136,8,71,1,72,1,72,3,72,1140,8,72,1,72,5,72,1143,8,72,
		10,72,12,72,1146,9,72,1,73,1,73,1,73,1,73,3,73,1152,8,73,1,74,1,74,1,74,
		1,74,1,74,3,74,1159,8,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,3,76,1168,
		8,76,5,76,1170,8,76,10,76,12,76,1173,9,76,1,76,1,76,3,76,1177,8,76,4,76,
		1179,8,76,11,76,12,76,1180,3,76,1183,8,76,1,77,1,77,3,77,1187,8,77,1,78,
		1,78,1,78,5,78,1192,8,78,10,78,12,78,1195,9,78,1,79,1,79,1,79,1,80,1,80,
		3,80,1202,8,80,1,80,1,80,1,81,1,81,1,81,3,81,1209,8,81,1,81,1,81,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1236,8,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1251,8,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,3,82,1314,8,82,1,82,1,82,3,82,1318,8,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,3,82,1328,8,82,1,82,1,82,1,82,1,82,1,82,
		3,82,1335,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,4,82,1345,8,82,
		11,82,12,82,1346,5,82,1349,8,82,10,82,12,82,1352,9,82,1,83,1,83,1,84,1,
		84,4,84,1358,8,84,11,84,12,84,1359,1,84,1,84,5,84,1364,8,84,10,84,12,84,
		1367,9,84,3,84,1369,8,84,1,85,1,85,1,85,1,86,1,86,1,86,1,86,3,86,1378,
		8,86,1,87,1,87,1,87,1,87,5,87,1384,8,87,10,87,12,87,1387,9,87,1,87,3,87,
		1390,8,87,3,87,1392,8,87,1,87,1,87,1,88,3,88,1397,8,88,1,88,1,88,3,88,
		1401,8,88,1,88,1,88,1,88,1,88,3,88,1407,8,88,1,88,3,88,1410,8,88,1,88,
		1,88,3,88,1414,8,88,1,88,1,88,3,88,1418,8,88,3,88,1420,8,88,1,88,1,88,
		1,88,3,88,1425,8,88,1,89,1,89,1,89,3,89,1430,8,89,1,90,1,90,1,91,1,91,
		1,91,1,91,1,91,1,91,1,91,1,91,3,91,1442,8,91,1,92,1,92,1,93,1,93,1,94,
		1,94,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,97,1,97,3,97,1460,8,97,
		1,98,1,98,1,99,1,99,1,99,1,99,3,99,1468,8,99,1,100,1,100,1,101,1,101,1,
		102,1,102,1,102,0,1,164,103,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
		32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
		80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
		156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
		192,194,196,198,200,202,204,0,18,1,0,152,159,1,0,130,132,3,0,112,112,129,
		129,160,160,2,0,34,34,116,116,1,0,35,37,1,0,31,32,1,0,42,44,1,0,45,48,
		1,0,49,52,2,0,57,57,115,115,2,0,58,58,117,117,2,0,21,21,59,73,1,0,78,82,
		1,0,83,86,4,0,92,92,112,112,128,128,160,160,2,0,3,3,15,15,6,0,87,101,106,
		113,115,117,119,122,124,125,128,132,1,1,165,165,1686,0,206,1,0,0,0,2,210,
		1,0,0,0,4,223,1,0,0,0,6,274,1,0,0,0,8,300,1,0,0,0,10,302,1,0,0,0,12,306,
		1,0,0,0,14,322,1,0,0,0,16,384,1,0,0,0,18,387,1,0,0,0,20,399,1,0,0,0,22,
		403,1,0,0,0,24,407,1,0,0,0,26,420,1,0,0,0,28,422,1,0,0,0,30,439,1,0,0,
		0,32,446,1,0,0,0,34,448,1,0,0,0,36,450,1,0,0,0,38,455,1,0,0,0,40,461,1,
		0,0,0,42,464,1,0,0,0,44,480,1,0,0,0,46,489,1,0,0,0,48,491,1,0,0,0,50,508,
		1,0,0,0,52,515,1,0,0,0,54,517,1,0,0,0,56,525,1,0,0,0,58,531,1,0,0,0,60,
		536,1,0,0,0,62,538,1,0,0,0,64,681,1,0,0,0,66,714,1,0,0,0,68,727,1,0,0,
		0,70,740,1,0,0,0,72,742,1,0,0,0,74,746,1,0,0,0,76,751,1,0,0,0,78,764,1,
		0,0,0,80,786,1,0,0,0,82,790,1,0,0,0,84,802,1,0,0,0,86,810,1,0,0,0,88,820,
		1,0,0,0,90,822,1,0,0,0,92,826,1,0,0,0,94,846,1,0,0,0,96,870,1,0,0,0,98,
		872,1,0,0,0,100,877,1,0,0,0,102,883,1,0,0,0,104,893,1,0,0,0,106,906,1,
		0,0,0,108,946,1,0,0,0,110,949,1,0,0,0,112,979,1,0,0,0,114,987,1,0,0,0,
		116,989,1,0,0,0,118,995,1,0,0,0,120,1001,1,0,0,0,122,1021,1,0,0,0,124,
		1027,1,0,0,0,126,1040,1,0,0,0,128,1043,1,0,0,0,130,1051,1,0,0,0,132,1061,
		1,0,0,0,134,1067,1,0,0,0,136,1071,1,0,0,0,138,1081,1,0,0,0,140,1098,1,
		0,0,0,142,1135,1,0,0,0,144,1139,1,0,0,0,146,1151,1,0,0,0,148,1158,1,0,
		0,0,150,1160,1,0,0,0,152,1182,1,0,0,0,154,1184,1,0,0,0,156,1188,1,0,0,
		0,158,1196,1,0,0,0,160,1199,1,0,0,0,162,1205,1,0,0,0,164,1250,1,0,0,0,
		166,1353,1,0,0,0,168,1368,1,0,0,0,170,1370,1,0,0,0,172,1377,1,0,0,0,174,
		1379,1,0,0,0,176,1424,1,0,0,0,178,1429,1,0,0,0,180,1431,1,0,0,0,182,1441,
		1,0,0,0,184,1443,1,0,0,0,186,1445,1,0,0,0,188,1447,1,0,0,0,190,1449,1,
		0,0,0,192,1453,1,0,0,0,194,1459,1,0,0,0,196,1461,1,0,0,0,198,1467,1,0,
		0,0,200,1469,1,0,0,0,202,1471,1,0,0,0,204,1473,1,0,0,0,206,207,3,2,1,0,
		207,208,5,0,0,1,208,1,1,0,0,0,209,211,3,4,2,0,210,209,1,0,0,0,211,212,
		1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,3,1,0,0,0,214,224,3,104,52,
		0,215,224,3,102,51,0,216,224,3,6,3,0,217,224,3,8,4,0,218,224,3,10,5,0,
		219,224,3,12,6,0,220,224,3,14,7,0,221,224,3,16,8,0,222,224,5,165,0,0,223,
		214,1,0,0,0,223,215,1,0,0,0,223,216,1,0,0,0,223,217,1,0,0,0,223,218,1,
		0,0,0,223,219,1,0,0,0,223,220,1,0,0,0,223,221,1,0,0,0,223,222,1,0,0,0,
		224,5,1,0,0,0,225,226,5,137,0,0,226,227,3,186,93,0,227,228,3,204,102,0,
		228,275,1,0,0,0,229,230,5,138,0,0,230,231,5,171,0,0,231,275,3,204,102,
		0,232,234,5,139,0,0,233,235,5,171,0,0,234,233,1,0,0,0,234,235,1,0,0,0,
		235,236,1,0,0,0,236,275,3,204,102,0,237,238,5,136,0,0,238,239,3,186,93,
		0,239,240,3,204,102,0,240,275,1,0,0,0,241,242,5,133,0,0,242,243,5,171,
		0,0,243,275,3,204,102,0,244,245,5,134,0,0,245,246,5,171,0,0,246,275,3,
		204,102,0,247,248,5,141,0,0,248,249,3,186,93,0,249,250,3,204,102,0,250,
		275,1,0,0,0,251,254,5,142,0,0,252,255,3,186,93,0,253,255,3,184,92,0,254,
		252,1,0,0,0,254,253,1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,275,3,
		204,102,0,257,258,5,143,0,0,258,259,3,186,93,0,259,260,3,204,102,0,260,
		275,1,0,0,0,261,262,5,144,0,0,262,275,3,204,102,0,263,264,5,145,0,0,264,
		265,5,171,0,0,265,275,3,204,102,0,266,267,5,146,0,0,267,268,5,171,0,0,
		268,275,3,204,102,0,269,270,5,150,0,0,270,275,3,204,102,0,271,272,7,0,
		0,0,272,273,5,171,0,0,273,275,3,204,102,0,274,225,1,0,0,0,274,229,1,0,
		0,0,274,232,1,0,0,0,274,237,1,0,0,0,274,241,1,0,0,0,274,244,1,0,0,0,274,
		247,1,0,0,0,274,251,1,0,0,0,274,257,1,0,0,0,274,261,1,0,0,0,274,263,1,
		0,0,0,274,266,1,0,0,0,274,269,1,0,0,0,274,271,1,0,0,0,275,7,1,0,0,0,276,
		278,5,135,0,0,277,279,3,164,82,0,278,277,1,0,0,0,278,279,1,0,0,0,279,280,
		1,0,0,0,280,301,3,204,102,0,281,282,5,151,0,0,282,301,3,204,102,0,283,
		285,5,140,0,0,284,286,3,186,93,0,285,284,1,0,0,0,285,286,1,0,0,0,286,287,
		1,0,0,0,287,301,3,204,102,0,288,291,5,148,0,0,289,292,3,186,93,0,290,292,
		3,184,92,0,291,289,1,0,0,0,291,290,1,0,0,0,291,292,1,0,0,0,292,293,1,0,
		0,0,293,301,3,204,102,0,294,297,5,147,0,0,295,298,3,186,93,0,296,298,3,
		184,92,0,297,295,1,0,0,0,297,296,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,
		0,299,301,3,204,102,0,300,276,1,0,0,0,300,281,1,0,0,0,300,283,1,0,0,0,
		300,288,1,0,0,0,300,294,1,0,0,0,301,9,1,0,0,0,302,303,5,12,0,0,303,304,
		5,11,0,0,304,305,3,204,102,0,305,11,1,0,0,0,306,311,5,10,0,0,307,308,5,
		165,0,0,308,310,5,10,0,0,309,307,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,
		0,311,312,1,0,0,0,312,320,1,0,0,0,313,311,1,0,0,0,314,315,5,168,0,0,315,
		321,3,204,102,0,316,317,3,102,51,0,317,318,3,204,102,0,318,321,1,0,0,0,
		319,321,3,16,8,0,320,314,1,0,0,0,320,316,1,0,0,0,320,319,1,0,0,0,321,13,
		1,0,0,0,322,327,5,12,0,0,323,324,5,165,0,0,324,326,5,12,0,0,325,323,1,
		0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,331,1,0,0,0,
		329,327,1,0,0,0,330,332,5,165,0,0,331,330,1,0,0,0,331,332,1,0,0,0,332,
		337,1,0,0,0,333,334,3,102,51,0,334,335,3,204,102,0,335,338,1,0,0,0,336,
		338,3,16,8,0,337,333,1,0,0,0,337,336,1,0,0,0,338,15,1,0,0,0,339,341,3,
		18,9,0,340,342,3,204,102,0,341,340,1,0,0,0,341,342,1,0,0,0,342,385,1,0,
		0,0,343,344,3,104,52,0,344,345,3,204,102,0,345,385,1,0,0,0,346,347,3,58,
		29,0,347,348,3,204,102,0,348,385,1,0,0,0,349,350,3,22,11,0,350,351,3,204,
		102,0,351,385,1,0,0,0,352,353,3,60,30,0,353,354,3,204,102,0,354,385,1,
		0,0,0,355,385,3,62,31,0,356,357,3,86,43,0,357,358,5,165,0,0,358,360,1,
		0,0,0,359,356,1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,0,361,385,3,64,32,
		0,362,363,3,68,34,0,363,364,3,204,102,0,364,385,1,0,0,0,365,366,3,70,35,
		0,366,367,3,204,102,0,367,385,1,0,0,0,368,369,3,72,36,0,369,370,3,204,
		102,0,370,385,1,0,0,0,371,372,3,86,43,0,372,373,3,204,102,0,373,385,1,
		0,0,0,374,375,3,88,44,0,375,376,3,204,102,0,376,385,1,0,0,0,377,378,3,
		76,38,0,378,379,3,204,102,0,379,385,1,0,0,0,380,381,3,90,45,0,381,382,
		3,204,102,0,382,385,1,0,0,0,383,385,3,92,46,0,384,339,1,0,0,0,384,343,
		1,0,0,0,384,346,1,0,0,0,384,349,1,0,0,0,384,352,1,0,0,0,384,355,1,0,0,
		0,384,359,1,0,0,0,384,362,1,0,0,0,384,365,1,0,0,0,384,368,1,0,0,0,384,
		371,1,0,0,0,384,374,1,0,0,0,384,377,1,0,0,0,384,380,1,0,0,0,384,383,1,
		0,0,0,385,17,1,0,0,0,386,388,5,165,0,0,387,386,1,0,0,0,387,388,1,0,0,0,
		388,389,1,0,0,0,389,391,5,17,0,0,390,392,3,20,10,0,391,390,1,0,0,0,391,
		392,1,0,0,0,392,394,1,0,0,0,393,395,5,165,0,0,394,393,1,0,0,0,394,395,
		1,0,0,0,395,396,1,0,0,0,396,397,5,18,0,0,397,19,1,0,0,0,398,400,3,16,8,
		0,399,398,1,0,0,0,400,401,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,
		21,1,0,0,0,403,405,7,1,0,0,404,406,3,54,27,0,405,404,1,0,0,0,405,406,1,
		0,0,0,406,23,1,0,0,0,407,408,5,125,0,0,408,409,3,26,13,0,409,25,1,0,0,
		0,410,412,3,36,18,0,411,410,1,0,0,0,411,412,1,0,0,0,412,415,1,0,0,0,413,
		416,3,38,19,0,414,416,3,28,14,0,415,413,1,0,0,0,415,414,1,0,0,0,416,417,
		1,0,0,0,417,418,3,40,20,0,418,421,1,0,0,0,419,421,5,162,0,0,420,411,1,
		0,0,0,420,419,1,0,0,0,421,27,1,0,0,0,422,428,5,17,0,0,423,424,3,30,15,
		0,424,425,5,20,0,0,425,427,1,0,0,0,426,423,1,0,0,0,427,430,1,0,0,0,428,
		426,1,0,0,0,428,429,1,0,0,0,429,435,1,0,0,0,430,428,1,0,0,0,431,433,3,
		30,15,0,432,434,5,20,0,0,433,432,1,0,0,0,433,434,1,0,0,0,434,436,1,0,0,
		0,435,431,1,0,0,0,435,436,1,0,0,0,436,437,1,0,0,0,437,438,5,18,0,0,438,
		29,1,0,0,0,439,442,3,32,16,0,440,441,5,127,0,0,441,443,3,34,17,0,442,440,
		1,0,0,0,442,443,1,0,0,0,443,31,1,0,0,0,444,447,3,194,97,0,445,447,5,162,
		0,0,446,444,1,0,0,0,446,445,1,0,0,0,447,33,1,0,0,0,448,449,7,2,0,0,449,
		35,1,0,0,0,450,451,3,42,21,0,451,452,5,20,0,0,452,37,1,0,0,0,453,456,5,
		35,0,0,454,456,3,194,97,0,455,453,1,0,0,0,455,454,1,0,0,0,456,459,1,0,
		0,0,457,458,5,127,0,0,458,460,3,194,97,0,459,457,1,0,0,0,459,460,1,0,0,
		0,460,39,1,0,0,0,461,462,5,126,0,0,462,463,5,162,0,0,463,41,1,0,0,0,464,
		467,3,194,97,0,465,466,5,127,0,0,466,468,3,194,97,0,467,465,1,0,0,0,467,
		468,1,0,0,0,468,43,1,0,0,0,469,471,5,124,0,0,470,472,5,92,0,0,471,470,
		1,0,0,0,471,472,1,0,0,0,472,475,1,0,0,0,473,476,3,46,23,0,474,476,3,52,
		26,0,475,473,1,0,0,0,475,474,1,0,0,0,476,481,1,0,0,0,477,478,5,124,0,0,
		478,479,5,92,0,0,479,481,3,164,82,0,480,469,1,0,0,0,480,477,1,0,0,0,481,
		45,1,0,0,0,482,483,3,38,19,0,483,484,3,40,20,0,484,490,1,0,0,0,485,487,
		3,48,24,0,486,488,3,40,20,0,487,486,1,0,0,0,487,488,1,0,0,0,488,490,1,
		0,0,0,489,482,1,0,0,0,489,485,1,0,0,0,490,47,1,0,0,0,491,497,5,17,0,0,
		492,493,3,50,25,0,493,494,5,20,0,0,494,496,1,0,0,0,495,492,1,0,0,0,496,
		499,1,0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,504,1,0,0,0,499,497,1,
		0,0,0,500,502,3,50,25,0,501,503,5,20,0,0,502,501,1,0,0,0,502,503,1,0,0,
		0,503,505,1,0,0,0,504,500,1,0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,506,
		507,5,18,0,0,507,49,1,0,0,0,508,511,3,32,16,0,509,510,5,127,0,0,510,512,
		3,32,16,0,511,509,1,0,0,0,511,512,1,0,0,0,512,51,1,0,0,0,513,516,3,104,
		52,0,514,516,3,102,51,0,515,513,1,0,0,0,515,514,1,0,0,0,516,53,1,0,0,0,
		517,522,3,56,28,0,518,519,5,20,0,0,519,521,3,56,28,0,520,518,1,0,0,0,521,
		524,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,55,1,0,0,0,524,522,1,0,
		0,0,525,529,3,172,86,0,526,527,3,180,90,0,527,528,3,164,82,0,528,530,1,
		0,0,0,529,526,1,0,0,0,529,530,1,0,0,0,530,57,1,0,0,0,531,532,4,29,0,0,
		532,534,3,196,98,0,533,535,3,152,76,0,534,533,1,0,0,0,534,535,1,0,0,0,
		535,59,1,0,0,0,536,537,3,156,78,0,537,61,1,0,0,0,538,539,5,107,0,0,539,
		541,3,164,82,0,540,542,5,165,0,0,541,540,1,0,0,0,541,542,1,0,0,0,542,543,
		1,0,0,0,543,552,3,16,8,0,544,546,5,165,0,0,545,544,1,0,0,0,545,546,1,0,
		0,0,546,547,1,0,0,0,547,549,5,93,0,0,548,550,5,165,0,0,549,548,1,0,0,0,
		549,550,1,0,0,0,550,551,1,0,0,0,551,553,3,16,8,0,552,545,1,0,0,0,552,553,
		1,0,0,0,553,63,1,0,0,0,554,556,5,100,0,0,555,557,3,164,82,0,556,555,1,
		0,0,0,556,557,1,0,0,0,557,559,1,0,0,0,558,560,5,165,0,0,559,558,1,0,0,
		0,559,560,1,0,0,0,560,561,1,0,0,0,561,566,3,16,8,0,562,563,5,101,0,0,563,
		564,3,164,82,0,564,565,5,165,0,0,565,567,1,0,0,0,566,562,1,0,0,0,566,567,
		1,0,0,0,567,570,1,0,0,0,568,569,5,93,0,0,569,571,3,16,8,0,570,568,1,0,
		0,0,570,571,1,0,0,0,571,682,1,0,0,0,572,573,5,100,0,0,573,574,5,102,0,
		0,574,577,3,164,82,0,575,576,5,20,0,0,576,578,3,164,82,0,577,575,1,0,0,
		0,577,578,1,0,0,0,578,579,1,0,0,0,579,584,3,16,8,0,580,581,5,101,0,0,581,
		582,3,164,82,0,582,583,5,165,0,0,583,585,1,0,0,0,584,580,1,0,0,0,584,585,
		1,0,0,0,585,588,1,0,0,0,586,587,5,93,0,0,587,589,3,16,8,0,588,586,1,0,
		0,0,588,589,1,0,0,0,589,682,1,0,0,0,590,591,5,100,0,0,591,592,5,103,0,
		0,592,595,3,164,82,0,593,594,5,20,0,0,594,596,3,164,82,0,595,593,1,0,0,
		0,595,596,1,0,0,0,596,597,1,0,0,0,597,602,3,16,8,0,598,599,5,101,0,0,599,
		600,3,164,82,0,600,601,5,165,0,0,601,603,1,0,0,0,602,598,1,0,0,0,602,603,
		1,0,0,0,603,606,1,0,0,0,604,605,5,93,0,0,605,607,3,16,8,0,606,604,1,0,
		0,0,606,607,1,0,0,0,607,682,1,0,0,0,608,609,5,100,0,0,609,610,5,104,0,
		0,610,613,3,164,82,0,611,612,5,20,0,0,612,614,3,164,82,0,613,611,1,0,0,
		0,613,614,1,0,0,0,614,615,1,0,0,0,615,620,3,16,8,0,616,617,5,101,0,0,617,
		618,3,164,82,0,618,619,5,165,0,0,619,621,1,0,0,0,620,616,1,0,0,0,620,621,
		1,0,0,0,621,624,1,0,0,0,622,623,5,93,0,0,623,625,3,16,8,0,624,622,1,0,
		0,0,624,625,1,0,0,0,625,682,1,0,0,0,626,627,5,100,0,0,627,628,5,105,0,
		0,628,635,3,164,82,0,629,631,5,20,0,0,630,632,3,164,82,0,631,630,1,0,0,
		0,631,632,1,0,0,0,632,634,1,0,0,0,633,629,1,0,0,0,634,637,1,0,0,0,635,
		633,1,0,0,0,635,636,1,0,0,0,636,638,1,0,0,0,637,635,1,0,0,0,638,643,3,
		16,8,0,639,640,5,101,0,0,640,641,3,164,82,0,641,642,5,165,0,0,642,644,
		1,0,0,0,643,639,1,0,0,0,643,644,1,0,0,0,644,647,1,0,0,0,645,646,5,93,0,
		0,646,648,3,16,8,0,647,645,1,0,0,0,647,648,1,0,0,0,648,682,1,0,0,0,649,
		650,5,99,0,0,650,652,3,164,82,0,651,653,5,165,0,0,652,651,1,0,0,0,652,
		653,1,0,0,0,653,654,1,0,0,0,654,659,3,16,8,0,655,656,5,101,0,0,656,657,
		3,164,82,0,657,658,5,165,0,0,658,660,1,0,0,0,659,655,1,0,0,0,659,660,1,
		0,0,0,660,663,1,0,0,0,661,662,5,93,0,0,662,664,3,16,8,0,663,661,1,0,0,
		0,663,664,1,0,0,0,664,682,1,0,0,0,665,666,5,98,0,0,666,668,3,66,33,0,667,
		669,5,165,0,0,668,667,1,0,0,0,668,669,1,0,0,0,669,670,1,0,0,0,670,675,
		3,16,8,0,671,672,5,101,0,0,672,673,3,164,82,0,673,674,5,165,0,0,674,676,
		1,0,0,0,675,671,1,0,0,0,675,676,1,0,0,0,676,679,1,0,0,0,677,678,5,93,0,
		0,678,680,3,16,8,0,679,677,1,0,0,0,679,680,1,0,0,0,680,682,1,0,0,0,681,
		554,1,0,0,0,681,572,1,0,0,0,681,590,1,0,0,0,681,608,1,0,0,0,681,626,1,
		0,0,0,681,649,1,0,0,0,681,665,1,0,0,0,682,65,1,0,0,0,683,685,3,172,86,
		0,684,683,1,0,0,0,684,685,1,0,0,0,685,692,1,0,0,0,686,688,5,20,0,0,687,
		689,3,172,86,0,688,687,1,0,0,0,688,689,1,0,0,0,689,691,1,0,0,0,690,686,
		1,0,0,0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,1,0,0,0,693,695,1,0,0,
		0,694,692,1,0,0,0,695,696,5,110,0,0,696,715,3,164,82,0,697,699,3,200,100,
		0,698,700,3,172,86,0,699,698,1,0,0,0,699,700,1,0,0,0,700,707,1,0,0,0,701,
		703,5,20,0,0,702,704,3,172,86,0,703,702,1,0,0,0,703,704,1,0,0,0,704,706,
		1,0,0,0,705,701,1,0,0,0,706,709,1,0,0,0,707,705,1,0,0,0,707,708,1,0,0,
		0,708,710,1,0,0,0,709,707,1,0,0,0,710,711,5,110,0,0,711,712,3,164,82,0,
		712,713,5,16,0,0,713,715,1,0,0,0,714,684,1,0,0,0,714,697,1,0,0,0,715,67,
		1,0,0,0,716,718,5,97,0,0,717,719,3,146,73,0,718,717,1,0,0,0,718,719,1,
		0,0,0,719,728,1,0,0,0,720,725,5,97,0,0,721,722,3,200,100,0,722,723,3,146,
		73,0,723,724,5,16,0,0,724,726,1,0,0,0,725,721,1,0,0,0,725,726,1,0,0,0,
		726,728,1,0,0,0,727,716,1,0,0,0,727,720,1,0,0,0,728,69,1,0,0,0,729,731,
		5,87,0,0,730,732,3,146,73,0,731,730,1,0,0,0,731,732,1,0,0,0,732,741,1,
		0,0,0,733,738,5,87,0,0,734,735,3,200,100,0,735,736,3,146,73,0,736,737,
		5,16,0,0,737,739,1,0,0,0,738,734,1,0,0,0,738,739,1,0,0,0,739,741,1,0,0,
		0,740,729,1,0,0,0,740,733,1,0,0,0,741,71,1,0,0,0,742,744,5,96,0,0,743,
		745,3,164,82,0,744,743,1,0,0,0,744,745,1,0,0,0,745,73,1,0,0,0,746,749,
		5,112,0,0,747,748,4,37,1,0,748,750,3,164,82,0,749,747,1,0,0,0,749,750,
		1,0,0,0,750,75,1,0,0,0,751,753,5,90,0,0,752,754,3,164,82,0,753,752,1,0,
		0,0,753,754,1,0,0,0,754,757,1,0,0,0,755,756,5,20,0,0,756,758,3,182,91,
		0,757,755,1,0,0,0,757,758,1,0,0,0,758,760,1,0,0,0,759,761,5,165,0,0,760,
		759,1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,762,763,3,78,39,0,763,77,1,
		0,0,0,764,766,5,17,0,0,765,767,3,80,40,0,766,765,1,0,0,0,766,767,1,0,0,
		0,767,778,1,0,0,0,768,770,5,165,0,0,769,768,1,0,0,0,769,770,1,0,0,0,770,
		771,1,0,0,0,771,773,3,84,42,0,772,774,5,165,0,0,773,772,1,0,0,0,773,774,
		1,0,0,0,774,776,1,0,0,0,775,777,3,80,40,0,776,775,1,0,0,0,776,777,1,0,
		0,0,777,779,1,0,0,0,778,769,1,0,0,0,778,779,1,0,0,0,779,781,1,0,0,0,780,
		782,5,165,0,0,781,780,1,0,0,0,781,782,1,0,0,0,782,783,1,0,0,0,783,784,
		5,18,0,0,784,79,1,0,0,0,785,787,3,82,41,0,786,785,1,0,0,0,787,788,1,0,
		0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,81,1,0,0,0,790,791,5,91,0,0,791,
		792,3,156,78,0,792,794,5,24,0,0,793,795,5,165,0,0,794,793,1,0,0,0,794,
		795,1,0,0,0,795,797,1,0,0,0,796,798,3,20,10,0,797,796,1,0,0,0,797,798,
		1,0,0,0,798,800,1,0,0,0,799,801,5,165,0,0,800,799,1,0,0,0,800,801,1,0,
		0,0,801,83,1,0,0,0,802,803,5,92,0,0,803,805,5,24,0,0,804,806,5,165,0,0,
		805,804,1,0,0,0,805,806,1,0,0,0,806,808,1,0,0,0,807,809,3,20,10,0,808,
		807,1,0,0,0,808,809,1,0,0,0,809,85,1,0,0,0,810,811,5,160,0,0,811,812,5,
		24,0,0,812,87,1,0,0,0,813,814,5,118,0,0,814,821,3,146,73,0,815,816,5,118,
		0,0,816,817,3,200,100,0,817,818,3,146,73,0,818,819,5,16,0,0,819,821,1,
		0,0,0,820,813,1,0,0,0,820,815,1,0,0,0,821,89,1,0,0,0,822,823,5,108,0,0,
		823,824,4,45,2,0,824,825,3,164,82,0,825,91,1,0,0,0,826,828,5,111,0,0,827,
		829,5,165,0,0,828,827,1,0,0,0,828,829,1,0,0,0,829,830,1,0,0,0,830,832,
		3,16,8,0,831,833,5,165,0,0,832,831,1,0,0,0,832,833,1,0,0,0,833,837,1,0,
		0,0,834,836,3,94,47,0,835,834,1,0,0,0,836,839,1,0,0,0,837,835,1,0,0,0,
		837,838,1,0,0,0,838,841,1,0,0,0,839,837,1,0,0,0,840,842,3,98,49,0,841,
		840,1,0,0,0,841,842,1,0,0,0,842,844,1,0,0,0,843,845,3,100,50,0,844,843,
		1,0,0,0,844,845,1,0,0,0,845,93,1,0,0,0,846,848,5,94,0,0,847,849,3,96,48,
		0,848,847,1,0,0,0,848,849,1,0,0,0,849,851,1,0,0,0,850,852,5,165,0,0,851,
		850,1,0,0,0,851,852,1,0,0,0,852,853,1,0,0,0,853,855,3,16,8,0,854,856,5,
		165,0,0,855,854,1,0,0,0,855,856,1,0,0,0,856,95,1,0,0,0,857,860,3,172,86,
		0,858,859,5,127,0,0,859,861,3,196,98,0,860,858,1,0,0,0,860,861,1,0,0,0,
		861,871,1,0,0,0,862,863,3,200,100,0,863,866,3,172,86,0,864,865,5,127,0,
		0,865,867,3,196,98,0,866,864,1,0,0,0,866,867,1,0,0,0,867,868,1,0,0,0,868,
		869,5,16,0,0,869,871,1,0,0,0,870,857,1,0,0,0,870,862,1,0,0,0,871,97,1,
		0,0,0,872,873,5,93,0,0,873,875,3,16,8,0,874,876,5,165,0,0,875,874,1,0,
		0,0,875,876,1,0,0,0,876,99,1,0,0,0,877,878,5,95,0,0,878,880,3,16,8,0,879,
		881,5,165,0,0,880,879,1,0,0,0,880,881,1,0,0,0,881,101,1,0,0,0,882,884,
		5,128,0,0,883,882,1,0,0,0,883,884,1,0,0,0,884,885,1,0,0,0,885,886,3,196,
		98,0,886,888,5,3,0,0,887,889,3,122,61,0,888,887,1,0,0,0,888,889,1,0,0,
		0,889,890,1,0,0,0,890,891,5,16,0,0,891,892,3,178,89,0,892,103,1,0,0,0,
		893,894,5,119,0,0,894,895,3,196,98,0,895,896,3,106,53,0,896,105,1,0,0,
		0,897,898,5,121,0,0,898,903,3,196,98,0,899,900,5,28,0,0,900,902,3,196,
		98,0,901,899,1,0,0,0,902,905,1,0,0,0,903,901,1,0,0,0,903,904,1,0,0,0,904,
		907,1,0,0,0,905,903,1,0,0,0,906,897,1,0,0,0,906,907,1,0,0,0,907,909,1,
		0,0,0,908,910,5,165,0,0,909,908,1,0,0,0,909,910,1,0,0,0,910,911,1,0,0,
		0,911,915,5,17,0,0,912,914,3,108,54,0,913,912,1,0,0,0,914,917,1,0,0,0,
		915,913,1,0,0,0,915,916,1,0,0,0,916,919,1,0,0,0,917,915,1,0,0,0,918,920,
		5,165,0,0,919,918,1,0,0,0,919,920,1,0,0,0,920,921,1,0,0,0,921,923,5,18,
		0,0,922,924,5,165,0,0,923,922,1,0,0,0,923,924,1,0,0,0,924,107,1,0,0,0,
		925,927,5,130,0,0,926,925,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,0,928,
		929,3,110,55,0,929,930,5,165,0,0,930,947,1,0,0,0,931,933,5,130,0,0,932,
		931,1,0,0,0,932,933,1,0,0,0,933,934,1,0,0,0,934,935,3,112,56,0,935,936,
		5,165,0,0,936,947,1,0,0,0,937,939,5,130,0,0,938,937,1,0,0,0,938,939,1,
		0,0,0,939,940,1,0,0,0,940,941,3,120,60,0,941,942,5,165,0,0,942,947,1,0,
		0,0,943,944,3,104,52,0,944,945,5,165,0,0,945,947,1,0,0,0,946,926,1,0,0,
		0,946,932,1,0,0,0,946,938,1,0,0,0,946,943,1,0,0,0,947,109,1,0,0,0,948,
		950,5,128,0,0,949,948,1,0,0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,952,
		3,146,73,0,952,954,5,3,0,0,953,955,3,122,61,0,954,953,1,0,0,0,954,955,
		1,0,0,0,955,956,1,0,0,0,956,957,5,16,0,0,957,958,3,178,89,0,958,111,1,
		0,0,0,959,960,3,114,57,0,960,961,5,74,0,0,961,962,3,164,82,0,962,980,1,
		0,0,0,963,965,3,114,57,0,964,966,5,165,0,0,965,964,1,0,0,0,965,966,1,0,
		0,0,966,967,1,0,0,0,967,972,5,17,0,0,968,971,3,116,58,0,969,971,3,118,
		59,0,970,968,1,0,0,0,970,969,1,0,0,0,971,974,1,0,0,0,972,970,1,0,0,0,972,
		973,1,0,0,0,973,975,1,0,0,0,974,972,1,0,0,0,975,977,5,18,0,0,976,978,5,
		165,0,0,977,976,1,0,0,0,977,978,1,0,0,0,978,980,1,0,0,0,979,959,1,0,0,
		0,979,963,1,0,0,0,980,113,1,0,0,0,981,988,3,196,98,0,982,983,3,196,98,
		0,983,984,5,13,0,0,984,985,3,122,61,0,985,986,5,14,0,0,986,988,1,0,0,0,
		987,981,1,0,0,0,987,982,1,0,0,0,988,115,1,0,0,0,989,990,4,58,3,0,990,991,
		3,196,98,0,991,993,3,178,89,0,992,994,5,165,0,0,993,992,1,0,0,0,993,994,
		1,0,0,0,994,117,1,0,0,0,995,996,4,59,4,0,996,997,3,196,98,0,997,999,3,
		178,89,0,998,1000,5,165,0,0,999,998,1,0,0,0,999,1000,1,0,0,0,1000,119,
		1,0,0,0,1001,1013,3,146,73,0,1002,1003,5,21,0,0,1003,1005,3,146,73,0,1004,
		1002,1,0,0,0,1005,1008,1,0,0,0,1006,1004,1,0,0,0,1006,1007,1,0,0,0,1007,
		1010,1,0,0,0,1008,1006,1,0,0,0,1009,1011,5,165,0,0,1010,1009,1,0,0,0,1010,
		1011,1,0,0,0,1011,1012,1,0,0,0,1012,1014,3,170,85,0,1013,1006,1,0,0,0,
		1013,1014,1,0,0,0,1014,121,1,0,0,0,1015,1017,3,124,62,0,1016,1015,1,0,
		0,0,1016,1017,1,0,0,0,1017,1018,1,0,0,0,1018,1020,5,20,0,0,1019,1016,1,
		0,0,0,1020,1023,1,0,0,0,1021,1019,1,0,0,0,1021,1022,1,0,0,0,1022,1024,
		1,0,0,0,1023,1021,1,0,0,0,1024,1025,3,126,63,0,1025,123,1,0,0,0,1026,1028,
		5,54,0,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1029,1,0,0,0,1029,1033,
		3,172,86,0,1030,1031,5,21,0,0,1031,1034,3,164,82,0,1032,1034,5,22,0,0,
		1033,1030,1,0,0,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,125,1,0,0,0,
		1035,1037,3,124,62,0,1036,1038,5,35,0,0,1037,1036,1,0,0,0,1037,1038,1,
		0,0,0,1038,1041,1,0,0,0,1039,1041,5,35,0,0,1040,1035,1,0,0,0,1040,1039,
		1,0,0,0,1041,127,1,0,0,0,1042,1044,5,165,0,0,1043,1042,1,0,0,0,1043,1044,
		1,0,0,0,1044,1045,1,0,0,0,1045,1047,5,17,0,0,1046,1048,3,20,10,0,1047,
		1046,1,0,0,0,1047,1048,1,0,0,0,1048,1049,1,0,0,0,1049,1050,5,18,0,0,1050,
		129,1,0,0,0,1051,1052,5,6,0,0,1052,1053,3,132,66,0,1053,1054,5,14,0,0,
		1054,131,1,0,0,0,1055,1057,3,134,67,0,1056,1055,1,0,0,0,1056,1057,1,0,
		0,0,1057,1058,1,0,0,0,1058,1060,5,20,0,0,1059,1056,1,0,0,0,1060,1063,1,
		0,0,0,1061,1059,1,0,0,0,1061,1062,1,0,0,0,1062,1065,1,0,0,0,1063,1061,
		1,0,0,0,1064,1066,3,134,67,0,1065,1064,1,0,0,0,1065,1066,1,0,0,0,1066,
		133,1,0,0,0,1067,1069,3,164,82,0,1068,1070,5,35,0,0,1069,1068,1,0,0,0,
		1069,1070,1,0,0,0,1070,135,1,0,0,0,1071,1072,5,13,0,0,1072,1073,3,138,
		69,0,1073,1074,5,14,0,0,1074,137,1,0,0,0,1075,1077,3,140,70,0,1076,1075,
		1,0,0,0,1076,1077,1,0,0,0,1077,1078,1,0,0,0,1078,1080,5,20,0,0,1079,1076,
		1,0,0,0,1080,1083,1,0,0,0,1081,1079,1,0,0,0,1081,1082,1,0,0,0,1082,139,
		1,0,0,0,1083,1081,1,0,0,0,1084,1086,3,164,82,0,1085,1087,5,35,0,0,1086,
		1085,1,0,0,0,1086,1087,1,0,0,0,1087,1099,1,0,0,0,1088,1090,3,164,82,0,
		1089,1091,5,165,0,0,1090,1089,1,0,0,0,1090,1091,1,0,0,0,1091,1092,1,0,
		0,0,1092,1094,5,24,0,0,1093,1095,5,165,0,0,1094,1093,1,0,0,0,1094,1095,
		1,0,0,0,1095,1096,1,0,0,0,1096,1097,3,164,82,0,1097,1099,1,0,0,0,1098,
		1084,1,0,0,0,1098,1088,1,0,0,0,1099,141,1,0,0,0,1100,1102,3,144,72,0,1101,
		1103,5,165,0,0,1102,1101,1,0,0,0,1102,1103,1,0,0,0,1103,1104,1,0,0,0,1104,
		1106,5,24,0,0,1105,1107,5,165,0,0,1106,1105,1,0,0,0,1106,1107,1,0,0,0,
		1107,1108,1,0,0,0,1108,1109,3,164,82,0,1109,1136,1,0,0,0,1110,1112,5,128,
		0,0,1111,1110,1,0,0,0,1111,1112,1,0,0,0,1112,1114,1,0,0,0,1113,1115,5,
		35,0,0,1114,1113,1,0,0,0,1114,1115,1,0,0,0,1115,1116,1,0,0,0,1116,1117,
		3,146,73,0,1117,1119,5,3,0,0,1118,1120,3,122,61,0,1119,1118,1,0,0,0,1119,
		1120,1,0,0,0,1120,1121,1,0,0,0,1121,1122,5,16,0,0,1122,1123,3,128,64,0,
		1123,1136,1,0,0,0,1124,1125,3,190,95,0,1125,1126,5,3,0,0,1126,1127,5,16,
		0,0,1127,1128,3,128,64,0,1128,1136,1,0,0,0,1129,1130,3,192,96,0,1130,1131,
		5,3,0,0,1131,1132,3,124,62,0,1132,1133,5,16,0,0,1133,1134,3,128,64,0,1134,
		1136,1,0,0,0,1135,1100,1,0,0,0,1135,1111,1,0,0,0,1135,1124,1,0,0,0,1135,
		1129,1,0,0,0,1136,143,1,0,0,0,1137,1140,3,146,73,0,1138,1140,3,150,75,
		0,1139,1137,1,0,0,0,1139,1138,1,0,0,0,1140,1144,1,0,0,0,1141,1143,3,148,
		74,0,1142,1141,1,0,0,0,1143,1146,1,0,0,0,1144,1142,1,0,0,0,1144,1145,1,
		0,0,0,1145,145,1,0,0,0,1146,1144,1,0,0,0,1147,1152,5,160,0,0,1148,1152,
		3,198,99,0,1149,1152,5,162,0,0,1150,1152,3,186,93,0,1151,1147,1,0,0,0,
		1151,1148,1,0,0,0,1151,1149,1,0,0,0,1151,1150,1,0,0,0,1152,147,1,0,0,0,
		1153,1154,5,4,0,0,1154,1155,3,164,82,0,1155,1156,5,2,0,0,1156,1159,1,0,
		0,0,1157,1159,5,5,0,0,1158,1153,1,0,0,0,1158,1157,1,0,0,0,1159,149,1,0,
		0,0,1160,1161,5,1,0,0,1161,1162,3,164,82,0,1162,1163,5,2,0,0,1163,151,
		1,0,0,0,1164,1171,3,154,77,0,1165,1167,5,20,0,0,1166,1168,3,154,77,0,1167,
		1166,1,0,0,0,1167,1168,1,0,0,0,1168,1170,1,0,0,0,1169,1165,1,0,0,0,1170,
		1173,1,0,0,0,1171,1169,1,0,0,0,1171,1172,1,0,0,0,1172,1183,1,0,0,0,1173,
		1171,1,0,0,0,1174,1176,5,20,0,0,1175,1177,3,154,77,0,1176,1175,1,0,0,0,
		1176,1177,1,0,0,0,1177,1179,1,0,0,0,1178,1174,1,0,0,0,1179,1180,1,0,0,
		0,1180,1178,1,0,0,0,1180,1181,1,0,0,0,1181,1183,1,0,0,0,1182,1164,1,0,
		0,0,1182,1178,1,0,0,0,1183,153,1,0,0,0,1184,1186,3,164,82,0,1185,1187,
		5,35,0,0,1186,1185,1,0,0,0,1186,1187,1,0,0,0,1187,155,1,0,0,0,1188,1193,
		3,164,82,0,1189,1190,5,20,0,0,1190,1192,3,164,82,0,1191,1189,1,0,0,0,1192,
		1195,1,0,0,0,1193,1191,1,0,0,0,1193,1194,1,0,0,0,1194,157,1,0,0,0,1195,
		1193,1,0,0,0,1196,1197,4,79,5,0,1197,1198,3,164,82,0,1198,159,1,0,0,0,
		1199,1201,5,3,0,0,1200,1202,3,152,76,0,1201,1200,1,0,0,0,1201,1202,1,0,
		0,0,1202,1203,1,0,0,0,1203,1204,5,16,0,0,1204,161,1,0,0,0,1205,1206,4,
		81,6,0,1206,1208,5,13,0,0,1207,1209,3,156,78,0,1208,1207,1,0,0,0,1208,
		1209,1,0,0,0,1209,1210,1,0,0,0,1210,1211,5,14,0,0,1211,163,1,0,0,0,1212,
		1213,6,82,-1,0,1213,1214,5,119,0,0,1214,1215,5,160,0,0,1215,1251,3,106,
		53,0,1216,1251,3,176,88,0,1217,1218,5,109,0,0,1218,1251,3,164,82,39,1219,
		1220,5,29,0,0,1220,1251,3,164,82,38,1221,1222,5,30,0,0,1222,1251,3,164,
		82,37,1223,1224,5,54,0,0,1224,1251,3,164,82,35,1225,1226,5,32,0,0,1226,
		1251,3,164,82,34,1227,1228,5,31,0,0,1228,1251,3,164,82,33,1229,1230,5,
		33,0,0,1230,1251,3,164,82,32,1231,1232,5,129,0,0,1232,1251,3,164,82,31,
		1233,1235,7,3,0,0,1234,1236,5,165,0,0,1235,1234,1,0,0,0,1235,1236,1,0,
		0,0,1236,1237,1,0,0,0,1237,1251,3,164,82,15,1238,1239,3,200,100,0,1239,
		1240,3,156,78,0,1240,1241,5,16,0,0,1241,1251,1,0,0,0,1242,1251,5,106,0,
		0,1243,1251,5,122,0,0,1244,1251,5,123,0,0,1245,1251,3,168,84,0,1246,1251,
		3,196,98,0,1247,1251,3,182,91,0,1248,1251,3,130,65,0,1249,1251,3,174,87,
		0,1250,1212,1,0,0,0,1250,1216,1,0,0,0,1250,1217,1,0,0,0,1250,1219,1,0,
		0,0,1250,1221,1,0,0,0,1250,1223,1,0,0,0,1250,1225,1,0,0,0,1250,1227,1,
		0,0,0,1250,1229,1,0,0,0,1250,1231,1,0,0,0,1250,1233,1,0,0,0,1250,1238,
		1,0,0,0,1250,1242,1,0,0,0,1250,1243,1,0,0,0,1250,1244,1,0,0,0,1250,1245,
		1,0,0,0,1250,1246,1,0,0,0,1250,1247,1,0,0,0,1250,1248,1,0,0,0,1250,1249,
		1,0,0,0,1251,1350,1,0,0,0,1252,1253,10,45,0,0,1253,1254,5,23,0,0,1254,
		1349,3,164,82,46,1255,1256,10,36,0,0,1256,1257,5,39,0,0,1257,1349,3,164,
		82,36,1258,1259,10,30,0,0,1259,1260,7,4,0,0,1260,1349,3,164,82,31,1261,
		1262,10,29,0,0,1262,1263,7,5,0,0,1263,1349,3,164,82,30,1264,1265,10,28,
		0,0,1265,1266,7,6,0,0,1266,1349,3,164,82,29,1267,1268,10,27,0,0,1268,1269,
		5,54,0,0,1269,1349,3,164,82,28,1270,1271,10,26,0,0,1271,1272,5,55,0,0,
		1272,1349,3,164,82,27,1273,1274,10,25,0,0,1274,1275,5,56,0,0,1275,1349,
		3,164,82,26,1276,1277,10,24,0,0,1277,1278,5,27,0,0,1278,1349,3,164,82,
		25,1279,1280,10,22,0,0,1280,1281,5,53,0,0,1281,1349,3,164,82,23,1282,1283,
		10,21,0,0,1283,1284,7,7,0,0,1284,1349,3,164,82,22,1285,1286,10,20,0,0,
		1286,1287,7,8,0,0,1287,1349,3,164,82,21,1288,1289,10,19,0,0,1289,1290,
		5,89,0,0,1290,1349,3,164,82,20,1291,1292,10,18,0,0,1292,1293,5,113,0,0,
		1293,1349,3,164,82,19,1294,1295,10,17,0,0,1295,1296,5,110,0,0,1296,1349,
		3,164,82,18,1297,1298,10,16,0,0,1298,1299,5,114,0,0,1299,1349,3,164,82,
		17,1300,1301,10,14,0,0,1301,1302,7,9,0,0,1302,1349,3,164,82,15,1303,1304,
		10,13,0,0,1304,1305,7,10,0,0,1305,1349,3,164,82,14,1306,1307,10,12,0,0,
		1307,1308,5,40,0,0,1308,1349,3,164,82,13,1309,1310,10,11,0,0,1310,1311,
		5,22,0,0,1311,1313,3,164,82,0,1312,1314,5,165,0,0,1313,1312,1,0,0,0,1313,
		1314,1,0,0,0,1314,1315,1,0,0,0,1315,1317,5,24,0,0,1316,1318,5,165,0,0,
		1317,1316,1,0,0,0,1317,1318,1,0,0,0,1318,1319,1,0,0,0,1319,1320,3,164,
		82,12,1320,1349,1,0,0,0,1321,1322,10,10,0,0,1322,1323,3,180,90,0,1323,
		1324,3,164,82,10,1324,1349,1,0,0,0,1325,1327,10,44,0,0,1326,1328,5,23,
		0,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,1329,1,0,0,0,1329,1349,3,
		162,81,0,1330,1331,10,43,0,0,1331,1349,3,160,80,0,1332,1334,10,42,0,0,
		1333,1335,5,22,0,0,1334,1333,1,0,0,0,1334,1335,1,0,0,0,1335,1336,1,0,0,
		0,1336,1337,5,28,0,0,1337,1349,3,144,72,0,1338,1339,10,41,0,0,1339,1349,
		5,29,0,0,1340,1341,10,40,0,0,1341,1349,5,30,0,0,1342,1344,10,23,0,0,1343,
		1345,3,158,79,0,1344,1343,1,0,0,0,1345,1346,1,0,0,0,1346,1344,1,0,0,0,
		1346,1347,1,0,0,0,1347,1349,1,0,0,0,1348,1252,1,0,0,0,1348,1255,1,0,0,
		0,1348,1258,1,0,0,0,1348,1261,1,0,0,0,1348,1264,1,0,0,0,1348,1267,1,0,
		0,0,1348,1270,1,0,0,0,1348,1273,1,0,0,0,1348,1276,1,0,0,0,1348,1279,1,
		0,0,0,1348,1282,1,0,0,0,1348,1285,1,0,0,0,1348,1288,1,0,0,0,1348,1291,
		1,0,0,0,1348,1294,1,0,0,0,1348,1297,1,0,0,0,1348,1300,1,0,0,0,1348,1303,
		1,0,0,0,1348,1306,1,0,0,0,1348,1309,1,0,0,0,1348,1321,1,0,0,0,1348,1325,
		1,0,0,0,1348,1330,1,0,0,0,1348,1332,1,0,0,0,1348,1338,1,0,0,0,1348,1340,
		1,0,0,0,1348,1342,1,0,0,0,1349,1352,1,0,0,0,1350,1348,1,0,0,0,1350,1351,
		1,0,0,0,1351,165,1,0,0,0,1352,1350,1,0,0,0,1353,1354,1,0,0,0,1354,167,
		1,0,0,0,1355,1357,3,196,98,0,1356,1358,3,148,74,0,1357,1356,1,0,0,0,1358,
		1359,1,0,0,0,1359,1357,1,0,0,0,1359,1360,1,0,0,0,1360,1369,1,0,0,0,1361,
		1365,3,150,75,0,1362,1364,3,148,74,0,1363,1362,1,0,0,0,1364,1367,1,0,0,
		0,1365,1363,1,0,0,0,1365,1366,1,0,0,0,1366,1369,1,0,0,0,1367,1365,1,0,
		0,0,1368,1355,1,0,0,0,1368,1361,1,0,0,0,1369,169,1,0,0,0,1370,1371,5,21,
		0,0,1371,1372,3,164,82,0,1372,171,1,0,0,0,1373,1378,3,196,98,0,1374,1378,
		3,202,101,0,1375,1378,3,130,65,0,1376,1378,3,174,87,0,1377,1373,1,0,0,
		0,1377,1374,1,0,0,0,1377,1375,1,0,0,0,1377,1376,1,0,0,0,1378,173,1,0,0,
		0,1379,1391,5,17,0,0,1380,1385,3,142,71,0,1381,1382,5,20,0,0,1382,1384,
		3,142,71,0,1383,1381,1,0,0,0,1384,1387,1,0,0,0,1385,1383,1,0,0,0,1385,
		1386,1,0,0,0,1386,1389,1,0,0,0,1387,1385,1,0,0,0,1388,1390,5,165,0,0,1389,
		1388,1,0,0,0,1389,1390,1,0,0,0,1390,1392,1,0,0,0,1391,1380,1,0,0,0,1391,
		1392,1,0,0,0,1392,1393,1,0,0,0,1393,1394,5,18,0,0,1394,175,1,0,0,0,1395,
		1397,5,128,0,0,1396,1395,1,0,0,0,1396,1397,1,0,0,0,1397,1398,1,0,0,0,1398,
		1400,3,200,100,0,1399,1401,3,122,61,0,1400,1399,1,0,0,0,1400,1401,1,0,
		0,0,1401,1402,1,0,0,0,1402,1403,5,16,0,0,1403,1404,3,178,89,0,1404,1425,
		1,0,0,0,1405,1407,5,128,0,0,1406,1405,1,0,0,0,1406,1407,1,0,0,0,1407,1419,
		1,0,0,0,1408,1410,3,172,86,0,1409,1408,1,0,0,0,1409,1410,1,0,0,0,1410,
		1411,1,0,0,0,1411,1420,5,35,0,0,1412,1414,5,54,0,0,1413,1412,1,0,0,0,1413,
		1414,1,0,0,0,1414,1415,1,0,0,0,1415,1417,3,172,86,0,1416,1418,5,22,0,0,
		1417,1416,1,0,0,0,1417,1418,1,0,0,0,1418,1420,1,0,0,0,1419,1409,1,0,0,
		0,1419,1413,1,0,0,0,1420,1421,1,0,0,0,1421,1422,5,74,0,0,1422,1425,3,164,
		82,0,1423,1425,3,102,51,0,1424,1396,1,0,0,0,1424,1406,1,0,0,0,1424,1423,
		1,0,0,0,1425,177,1,0,0,0,1426,1427,5,74,0,0,1427,1430,3,164,82,0,1428,
		1430,3,128,64,0,1429,1426,1,0,0,0,1429,1428,1,0,0,0,1430,179,1,0,0,0,1431,
		1432,7,11,0,0,1432,181,1,0,0,0,1433,1442,5,75,0,0,1434,1442,5,76,0,0,1435,
		1442,3,184,92,0,1436,1442,5,161,0,0,1437,1442,5,162,0,0,1438,1442,5,9,
		0,0,1439,1442,3,186,93,0,1440,1442,3,188,94,0,1441,1433,1,0,0,0,1441,1434,
		1,0,0,0,1441,1435,1,0,0,0,1441,1436,1,0,0,0,1441,1437,1,0,0,0,1441,1438,
		1,0,0,0,1441,1439,1,0,0,0,1441,1440,1,0,0,0,1442,183,1,0,0,0,1443,1444,
		5,77,0,0,1444,185,1,0,0,0,1445,1446,7,12,0,0,1446,187,1,0,0,0,1447,1448,
		7,13,0,0,1448,189,1,0,0,0,1449,1450,4,95,34,0,1450,1451,3,196,98,0,1451,
		1452,3,146,73,0,1452,191,1,0,0,0,1453,1454,4,96,35,0,1454,1455,3,196,98,
		0,1455,1456,3,146,73,0,1456,193,1,0,0,0,1457,1460,3,196,98,0,1458,1460,
		3,198,99,0,1459,1457,1,0,0,0,1459,1458,1,0,0,0,1460,195,1,0,0,0,1461,1462,
		7,14,0,0,1462,197,1,0,0,0,1463,1468,3,202,101,0,1464,1468,5,75,0,0,1465,
		1468,5,76,0,0,1466,1468,3,184,92,0,1467,1463,1,0,0,0,1467,1464,1,0,0,0,
		1467,1465,1,0,0,0,1467,1466,1,0,0,0,1468,199,1,0,0,0,1469,1470,7,15,0,
		0,1470,201,1,0,0,0,1471,1472,7,16,0,0,1472,203,1,0,0,0,1473,1474,7,17,
		0,0,1474,205,1,0,0,0,209,212,223,234,254,274,278,285,291,297,300,311,320,
		327,331,337,341,359,384,387,391,394,401,405,411,415,420,428,433,435,442,
		446,455,459,467,471,475,480,487,489,497,502,504,511,515,522,529,534,541,
		545,549,552,556,559,566,570,577,584,588,595,602,606,613,620,624,631,635,
		643,647,652,659,663,668,675,679,681,684,688,692,699,703,707,714,718,725,
		727,731,738,740,744,749,753,757,760,766,769,773,776,778,781,788,794,797,
		800,805,808,820,828,832,837,841,844,848,851,855,860,866,870,875,880,883,
		888,903,906,909,915,919,923,926,932,938,946,949,954,965,970,972,977,979,
		987,993,999,1006,1010,1013,1016,1021,1027,1033,1037,1040,1043,1047,1056,
		1061,1065,1069,1076,1081,1086,1090,1094,1098,1102,1106,1111,1114,1119,
		1135,1139,1144,1151,1158,1167,1171,1176,1180,1182,1186,1193,1201,1208,
		1235,1250,1313,1317,1327,1334,1346,1348,1350,1359,1365,1368,1377,1385,
		1389,1391,1396,1400,1406,1409,1413,1417,1419,1424,1429,1441,1459,1467
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
