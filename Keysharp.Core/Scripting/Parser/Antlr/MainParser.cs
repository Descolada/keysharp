//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/minip/source/repos/Keysharp_clone/Keysharp.Core/Scripting/Parser/Antlr/MainParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MainParser : MainParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DerefStart=1, DerefEnd=2, SingleLineBlockComment=3, HotstringTrigger=4, 
		RemapKey=5, HotkeyTrigger=6, OpenBracket=7, CloseBracket=8, OpenParen=9, 
		CloseParen=10, OpenBrace=11, CloseBrace=12, Comma=13, Assign=14, QuestionMark=15, 
		QuestionMarkDot=16, Colon=17, DoubleColon=18, Ellipsis=19, Dot=20, ConcatDot=21, 
		PlusPlus=22, MinusMinus=23, Plus=24, Minus=25, BitNot=26, Not=27, Multiply=28, 
		Divide=29, IntegerDivide=30, Modulus=31, Power=32, NullCoalesce=33, Hashtag=34, 
		RightShiftArithmetic=35, LeftShiftArithmetic=36, RightShiftLogical=37, 
		LessThan=38, MoreThan=39, LessThanEquals=40, GreaterThanEquals=41, Equals_=42, 
		NotEquals=43, IdentityEquals=44, IdentityNotEquals=45, RegExMatch=46, 
		BitAnd=47, BitXOr=48, BitOr=49, And=50, Or=51, MultiplyAssign=52, DivideAssign=53, 
		ModulusAssign=54, PlusAssign=55, MinusAssign=56, LeftShiftArithmeticAssign=57, 
		RightShiftArithmeticAssign=58, RightShiftLogicalAssign=59, IntegerDivideAssign=60, 
		ConcatenateAssign=61, BitAndAssign=62, BitXorAssign=63, BitOrAssign=64, 
		PowerAssign=65, NullishCoalescingAssign=66, Arrow=67, NullLiteral=68, 
		Unset=69, True=70, False=71, DecimalLiteral=72, HexIntegerLiteral=73, 
		OctalIntegerLiteral=74, OctalIntegerLiteral2=75, BinaryIntegerLiteral=76, 
		BigHexIntegerLiteral=77, BigOctalIntegerLiteral=78, BigBinaryIntegerLiteral=79, 
		BigDecimalIntegerLiteral=80, Break=81, Do=82, Instanceof=83, Switch=84, 
		Case=85, Default=86, Else=87, Catch=88, Finally=89, Return=90, Continue=91, 
		For=92, While=93, Parse=94, Reg=95, Read=96, Files=97, Loop=98, Until=99, 
		This=100, If=101, Throw=102, Delete=103, In=104, Try=105, Yield=106, Is=107, 
		Contains=108, VerbalAnd=109, VerbalNot=110, VerbalOr=111, Goto=112, Get=113, 
		Set=114, Class=115, Enum=116, Extends=117, Super=118, Base=119, Export=120, 
		Import=121, From=122, As=123, Async=124, Await=125, Static=126, Global=127, 
		Local=128, Identifier=129, StringLiteral=130, EOL=131, WS=132, UnexpectedCharacter=133, 
		HotstringWhitespaces=134, HotstringMultiLineExpansion=135, HotstringSingleLineExpansion=136, 
		HotstringUnexpectedCharacter=137, DirectiveWhitespaces=138, DirectiveContent=139, 
		DirectiveUnexpectedCharacter=140, Digits=141, HotIf=142, InputLevel=143, 
		SuspendExempt=144, UseHook=145, Hotstring=146, Define=147, Undef=148, 
		ElIf=149, EndIf=150, Line=151, Error=152, Warning=153, Region=154, EndRegion=155, 
		Pragma=156, Nullable=157, Include=158, IncludeAgain=159, DllLoad=160, 
		Requires=161, SingleInstance=162, Persistent=163, Warn=164, NoDynamicVars=165, 
		ErrorStdOut=166, ClipboardTimeout=167, HotIfTimeout=168, MaxThreads=169, 
		MaxThreadsBuffer=170, MaxThreadsPerHotkey=171, WinActivateForce=172, NoTrayIcon=173, 
		Assembly=174, DirectiveHidden=175, ConditionalSymbol=176, DirectiveSingleLineComment=177, 
		DirectiveNewline=178, UnexpectedDirectiveCharacter=179, Text=180, UnexpectedTextDirectiveCharacter=181, 
		NoMouse=182, EndChars=183, HotstringOptions=184, UnexpectedHotstringOptionsCharacter=185;
	public const int
		RULE_program = 0, RULE_sourceElements = 1, RULE_sourceElement = 2, RULE_positionalDirective = 3, 
		RULE_remap = 4, RULE_hotstring = 5, RULE_hotstringExpansion = 6, RULE_hotkey = 7, 
		RULE_statement = 8, RULE_blockStatement = 9, RULE_block = 10, RULE_statementList = 11, 
		RULE_variableStatement = 12, RULE_awaitStatement = 13, RULE_deleteStatement = 14, 
		RULE_importStatement = 15, RULE_importFromBlock = 16, RULE_importModuleItems = 17, 
		RULE_importAliasName = 18, RULE_moduleExportName = 19, RULE_importedBinding = 20, 
		RULE_importDefault = 21, RULE_importNamespace = 22, RULE_importFrom = 23, 
		RULE_aliasName = 24, RULE_exportStatement = 25, RULE_exportFromBlock = 26, 
		RULE_exportModuleItems = 27, RULE_exportAliasName = 28, RULE_declaration = 29, 
		RULE_variableDeclarationList = 30, RULE_variableDeclaration = 31, RULE_functionStatement = 32, 
		RULE_expressionStatement = 33, RULE_ifStatement = 34, RULE_flowBlock = 35, 
		RULE_untilProduction = 36, RULE_elseProduction = 37, RULE_iterationStatement = 38, 
		RULE_forInParameters = 39, RULE_continueStatement = 40, RULE_breakStatement = 41, 
		RULE_returnStatement = 42, RULE_yieldStatement = 43, RULE_switchStatement = 44, 
		RULE_caseBlock = 45, RULE_caseClause = 46, RULE_labelledStatement = 47, 
		RULE_gotoStatement = 48, RULE_throwStatement = 49, RULE_tryStatement = 50, 
		RULE_catchProduction = 51, RULE_catchAssignable = 52, RULE_catchClasses = 53, 
		RULE_finallyProduction = 54, RULE_functionDeclaration = 55, RULE_classDeclaration = 56, 
		RULE_classExtensionName = 57, RULE_classTail = 58, RULE_classElement = 59, 
		RULE_methodDefinition = 60, RULE_propertyDefinition = 61, RULE_classPropertyName = 62, 
		RULE_propertyGetterDefinition = 63, RULE_propertySetterDefinition = 64, 
		RULE_fieldDefinition = 65, RULE_formalParameterList = 66, RULE_formalParameterArg = 67, 
		RULE_lastFormalParameterArg = 68, RULE_arrayLiteral = 69, RULE_mapLiteral = 70, 
		RULE_mapElementList = 71, RULE_mapElement = 72, RULE_propertyAssignment = 73, 
		RULE_propertyName = 74, RULE_dereference = 75, RULE_arguments = 76, RULE_argument = 77, 
		RULE_expressionSequence = 78, RULE_memberIndexArguments = 79, RULE_propertyIndexArguments = 80, 
		RULE_expression = 81, RULE_singleExpression = 82, RULE_primaryExpression = 83, 
		RULE_accessSuffix = 84, RULE_memberDot = 85, RULE_memberIdentifier = 86, 
		RULE_dynamicIdentifier = 87, RULE_initializer = 88, RULE_assignable = 89, 
		RULE_objectLiteral = 90, RULE_functionHead = 91, RULE_functionHeadPrefix = 92, 
		RULE_functionExpressionHead = 93, RULE_fatArrowExpressionHead = 94, RULE_functionBody = 95, 
		RULE_assignmentOperator = 96, RULE_literal = 97, RULE_boolean = 98, RULE_numericLiteral = 99, 
		RULE_bigintLiteral = 100, RULE_getter = 101, RULE_setter = 102, RULE_identifierName = 103, 
		RULE_identifier = 104, RULE_reservedWord = 105, RULE_keyword = 106, RULE_s = 107, 
		RULE_eos = 108;
	public static readonly string[] ruleNames = {
		"program", "sourceElements", "sourceElement", "positionalDirective", "remap", 
		"hotstring", "hotstringExpansion", "hotkey", "statement", "blockStatement", 
		"block", "statementList", "variableStatement", "awaitStatement", "deleteStatement", 
		"importStatement", "importFromBlock", "importModuleItems", "importAliasName", 
		"moduleExportName", "importedBinding", "importDefault", "importNamespace", 
		"importFrom", "aliasName", "exportStatement", "exportFromBlock", "exportModuleItems", 
		"exportAliasName", "declaration", "variableDeclarationList", "variableDeclaration", 
		"functionStatement", "expressionStatement", "ifStatement", "flowBlock", 
		"untilProduction", "elseProduction", "iterationStatement", "forInParameters", 
		"continueStatement", "breakStatement", "returnStatement", "yieldStatement", 
		"switchStatement", "caseBlock", "caseClause", "labelledStatement", "gotoStatement", 
		"throwStatement", "tryStatement", "catchProduction", "catchAssignable", 
		"catchClasses", "finallyProduction", "functionDeclaration", "classDeclaration", 
		"classExtensionName", "classTail", "classElement", "methodDefinition", 
		"propertyDefinition", "classPropertyName", "propertyGetterDefinition", 
		"propertySetterDefinition", "fieldDefinition", "formalParameterList", 
		"formalParameterArg", "lastFormalParameterArg", "arrayLiteral", "mapLiteral", 
		"mapElementList", "mapElement", "propertyAssignment", "propertyName", 
		"dereference", "arguments", "argument", "expressionSequence", "memberIndexArguments", 
		"propertyIndexArguments", "expression", "singleExpression", "primaryExpression", 
		"accessSuffix", "memberDot", "memberIdentifier", "dynamicIdentifier", 
		"initializer", "assignable", "objectLiteral", "functionHead", "functionHeadPrefix", 
		"functionExpressionHead", "fatArrowExpressionHead", "functionBody", "assignmentOperator", 
		"literal", "boolean", "numericLiteral", "bigintLiteral", "getter", "setter", 
		"identifierName", "identifier", "reservedWord", "keyword", "s", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'['", "']'", "'('", "')'", 
		"'{'", "'}'", "','", "':='", "'?'", "'?.'", "':'", "'::'", "'...'", "'.'", 
		null, "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", "'//'", 
		"'%'", "'**'", "'??'", "'#'", "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", 
		"'>='", "'='", "'!='", "'=='", "'!=='", "'~='", "'&'", "'^'", "'|'", "'&&'", 
		"'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", 
		"'//='", "'.='", "'&='", "'^='", "'|='", "'**='", "'??='", "'=>'", "'null'", 
		"'unset'", "'true'", "'false'", null, null, null, null, null, null, null, 
		null, null, "'break'", "'do'", "'instanceof'", "'switch'", "'case'", "'default'", 
		"'else'", "'catch'", "'finally'", "'return'", "'continue'", "'for'", "'while'", 
		"'parse'", "'reg'", "'read'", "'files'", "'loop'", "'until'", "'this'", 
		"'if'", "'throw'", "'delete'", "'in'", "'try'", "'yield'", "'is'", "'contains'", 
		"'and'", "'not'", "'or'", "'goto'", "'get'", "'set'", "'class'", "'enum'", 
		"'extends'", "'super'", "'base'", "'export'", "'import'", "'from'", "'as'", 
		"'async'", "'await'", "'static'", "'global'", "'local'", null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'hotif'", 
		"'inputlevel'", "'suspendexempt'", "'usehook'", "'hotstring'", "'define'", 
		"'undef'", "'elif'", "'endif'", "'line'", null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "'nodynamicvars'", "'errorstdout'", 
		null, null, null, null, null, "'winactivateforce'", "'notrayicon'", null, 
		"'hidden'", null, null, null, null, null, null, "'NoMouse'", "'EndChars'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DerefStart", "DerefEnd", "SingleLineBlockComment", "HotstringTrigger", 
		"RemapKey", "HotkeyTrigger", "OpenBracket", "CloseBracket", "OpenParen", 
		"CloseParen", "OpenBrace", "CloseBrace", "Comma", "Assign", "QuestionMark", 
		"QuestionMarkDot", "Colon", "DoubleColon", "Ellipsis", "Dot", "ConcatDot", 
		"PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", 
		"Divide", "IntegerDivide", "Modulus", "Power", "NullCoalesce", "Hashtag", 
		"RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", "LessThan", 
		"MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_", "NotEquals", 
		"IdentityEquals", "IdentityNotEquals", "RegExMatch", "BitAnd", "BitXOr", 
		"BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
		"PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
		"RightShiftLogicalAssign", "IntegerDivideAssign", "ConcatenateAssign", 
		"BitAndAssign", "BitXorAssign", "BitOrAssign", "PowerAssign", "NullishCoalescingAssign", 
		"Arrow", "NullLiteral", "Unset", "True", "False", "DecimalLiteral", "HexIntegerLiteral", 
		"OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
		"BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", 
		"BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Switch", "Case", 
		"Default", "Else", "Catch", "Finally", "Return", "Continue", "For", "While", 
		"Parse", "Reg", "Read", "Files", "Loop", "Until", "This", "If", "Throw", 
		"Delete", "In", "Try", "Yield", "Is", "Contains", "VerbalAnd", "VerbalNot", 
		"VerbalOr", "Goto", "Get", "Set", "Class", "Enum", "Extends", "Super", 
		"Base", "Export", "Import", "From", "As", "Async", "Await", "Static", 
		"Global", "Local", "Identifier", "StringLiteral", "EOL", "WS", "UnexpectedCharacter", 
		"HotstringWhitespaces", "HotstringMultiLineExpansion", "HotstringSingleLineExpansion", 
		"HotstringUnexpectedCharacter", "DirectiveWhitespaces", "DirectiveContent", 
		"DirectiveUnexpectedCharacter", "Digits", "HotIf", "InputLevel", "SuspendExempt", 
		"UseHook", "Hotstring", "Define", "Undef", "ElIf", "EndIf", "Line", "Error", 
		"Warning", "Region", "EndRegion", "Pragma", "Nullable", "Include", "IncludeAgain", 
		"DllLoad", "Requires", "SingleInstance", "Persistent", "Warn", "NoDynamicVars", 
		"ErrorStdOut", "ClipboardTimeout", "HotIfTimeout", "MaxThreads", "MaxThreadsBuffer", 
		"MaxThreadsPerHotkey", "WinActivateForce", "NoTrayIcon", "Assembly", "DirectiveHidden", 
		"ConditionalSymbol", "DirectiveSingleLineComment", "DirectiveNewline", 
		"UnexpectedDirectiveCharacter", "Text", "UnexpectedTextDirectiveCharacter", 
		"NoMouse", "EndChars", "HotstringOptions", "UnexpectedHotstringOptionsCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MainParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MainParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MainParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MainParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MainParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				sourceElements();
				State = 219;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 229;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 224;
						sourceElement();
						State = 225;
						eos();
						}
						break;
					case 2:
						{
						State = 227;
						Match(WS);
						}
						break;
					case 3:
						{
						State = 228;
						Match(EOL);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 231;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(MainParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PositionalDirectiveContext positionalDirective() {
			return GetRuleContext<PositionalDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemapContext remap() {
			return GetRuleContext<RemapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotstringContext hotstring() {
			return GetRuleContext<HotstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotkeyContext hotkey() {
			return GetRuleContext<HotkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sourceElement);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 234;
				Match(Hashtag);
				State = 235;
				positionalDirective();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 236;
				remap();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 237;
				hotstring();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 238;
				hotkey();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 239;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionalDirectiveContext : ParserRuleContext {
		public PositionalDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionalDirective; } }
	 
		public PositionalDirectiveContext() { }
		public virtual void CopyFrom(PositionalDirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HotstringDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hotstring() { return GetToken(MainParser.Hotstring, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringOptions() { return GetToken(MainParser.HotstringOptions, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NoMouse() { return GetToken(MainParser.NoMouse, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndChars() { return GetToken(MainParser.EndChars, 0); }
		public HotstringDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstringDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InputLevelDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InputLevel() { return GetToken(MainParser.InputLevel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public InputLevelDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputLevelDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuspendExemptDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SuspendExempt() { return GetToken(MainParser.SuspendExempt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public SuspendExemptDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuspendExemptDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UseHookDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UseHook() { return GetToken(MainParser.UseHook, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public UseHookDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseHookDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HotIfDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotIf() { return GetToken(MainParser.HotIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public HotIfDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotIfDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionalDirectiveContext positionalDirective() {
		PositionalDirectiveContext _localctx = new PositionalDirectiveContext(Context, State);
		EnterRule(_localctx, 6, RULE_positionalDirective);
		int _la;
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HotIf:
				_localctx = new HotIfDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 242;
				Match(HotIf);
				State = 244;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 243;
					singleExpression(0);
					}
					break;
				}
				}
				break;
			case Hotstring:
				_localctx = new HotstringDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 246;
				Match(Hotstring);
				State = 251;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case HotstringOptions:
					{
					State = 247;
					Match(HotstringOptions);
					}
					break;
				case NoMouse:
					{
					State = 248;
					Match(NoMouse);
					}
					break;
				case EndChars:
					{
					State = 249;
					Match(EndChars);
					State = 250;
					Match(HotstringOptions);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case InputLevel:
				_localctx = new InputLevelDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 253;
				Match(InputLevel);
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 31L) != 0)) {
					{
					State = 254;
					numericLiteral();
					}
				}

				}
				break;
			case UseHook:
				_localctx = new UseHookDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 257;
				Match(UseHook);
				State = 260;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
					{
					State = 258;
					numericLiteral();
					}
					break;
				case True:
				case False:
					{
					State = 259;
					boolean();
					}
					break;
				case Eof:
				case EOL:
					break;
				default:
					break;
				}
				}
				break;
			case SuspendExempt:
				_localctx = new SuspendExemptDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 262;
				Match(SuspendExempt);
				State = 265;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
					{
					State = 263;
					numericLiteral();
					}
					break;
				case True:
				case False:
					{
					State = 264;
					boolean();
					}
					break;
				case Eof:
				case EOL:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RemapKey() { return GetToken(MainParser.RemapKey, 0); }
		public RemapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remap; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemapContext remap() {
		RemapContext _localctx = new RemapContext(Context, State);
		EnterRule(_localctx, 8, RULE_remap);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			Match(RemapKey);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotstringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HotstringTrigger() { return GetTokens(MainParser.HotstringTrigger); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringTrigger(int i) {
			return GetToken(MainParser.HotstringTrigger, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotstringExpansionContext hotstringExpansion() {
			return GetRuleContext<HotstringExpansionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public HotstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotstring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotstringContext hotstring() {
		HotstringContext _localctx = new HotstringContext(Context, State);
		EnterRule(_localctx, 10, RULE_hotstring);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(HotstringTrigger);
			State = 276;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 272;
					Match(EOL);
					State = 273;
					Match(HotstringTrigger);
					}
					} 
				}
				State = 278;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 282;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 279;
					Match(WS);
					}
					} 
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 285;
				hotstringExpansion();
				}
				break;
			case 2:
				{
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EOL) {
					{
					State = 286;
					Match(EOL);
					}
				}

				State = 289;
				functionDeclaration();
				}
				break;
			case 3:
				{
				State = 291;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 290;
					Match(EOL);
					}
					break;
				}
				State = 293;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotstringExpansionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringSingleLineExpansion() { return GetToken(MainParser.HotstringSingleLineExpansion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringMultiLineExpansion() { return GetToken(MainParser.HotstringMultiLineExpansion, 0); }
		public HotstringExpansionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotstringExpansion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstringExpansion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotstringExpansionContext hotstringExpansion() {
		HotstringExpansionContext _localctx = new HotstringExpansionContext(Context, State);
		EnterRule(_localctx, 12, RULE_hotstringExpansion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			_la = TokenStream.LA(1);
			if ( !(_la==HotstringMultiLineExpansion || _la==HotstringSingleLineExpansion) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotkeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HotkeyTrigger() { return GetTokens(MainParser.HotkeyTrigger); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotkeyTrigger(int i) {
			return GetToken(MainParser.HotkeyTrigger, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public HotkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotkey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotkey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotkeyContext hotkey() {
		HotkeyContext _localctx = new HotkeyContext(Context, State);
		EnterRule(_localctx, 14, RULE_hotkey);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			Match(HotkeyTrigger);
			State = 303;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 299;
					Match(EOL);
					State = 300;
					Match(HotkeyTrigger);
					}
					} 
				}
				State = 305;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 309;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 306;
					s();
					}
					} 
				}
				State = 311;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 312;
				functionDeclaration();
				}
				break;
			case 2:
				{
				State = 313;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelledStatementContext labelledStatement() {
			return GetRuleContext<LabelledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AwaitStatementContext awaitStatement() {
			return GetRuleContext<AwaitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStatementContext functionStatement() {
			return GetRuleContext<FunctionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			State = 334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 316;
				variableStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317;
				ifStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 318;
				iterationStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 319;
				continueStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 320;
				breakStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 321;
				returnStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 322;
				yieldStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 323;
				labelledStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 324;
				gotoStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 325;
				switchStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 326;
				throwStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 327;
				tryStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 328;
				awaitStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 329;
				deleteStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 330;
				if (!(this.isFunctionCallStatement())) throw new FailedPredicateException(this, "this.isFunctionCallStatement()");
				State = 331;
				functionStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 332;
				blockStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 333;
				expressionStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_blockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			Match(OpenBrace);
			State = 342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 339;
					s();
					}
					} 
				}
				State = 344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 345;
				statementList();
				}
				break;
			}
			State = 348;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 22, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 350;
					sourceElement();
					State = 351;
					Match(EOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 355;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(MainParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(MainParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public VariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStatementContext variableStatement() {
		VariableStatementContext _localctx = new VariableStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_variableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 358;
					Match(WS);
					}
					}
					State = 363;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 364;
				variableDeclarationList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwaitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public AwaitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awaitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwaitStatementContext awaitStatement() {
		AwaitStatementContext _localctx = new AwaitStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_awaitStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(Await);
			State = 371;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 368;
					Match(WS);
					}
					} 
				}
				State = 373;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			State = 374;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(MainParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_deleteStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(Delete);
			State = 380;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 377;
					Match(WS);
					}
					} 
				}
				State = 382;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			State = 383;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(MainParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromBlockContext importFromBlock() {
			return GetRuleContext<ImportFromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_importStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			Match(Import);
			State = 389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 386;
				Match(WS);
				}
				}
				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 392;
			importFromBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportModuleItemsContext importModuleItems() {
			return GetRuleContext<ImportModuleItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDefaultContext importDefault() {
			return GetRuleContext<ImportDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ImportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromBlockContext importFromBlock() {
		ImportFromBlockContext _localctx = new ImportFromBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_importFromBlock);
		try {
			State = 404;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
			case Multiply:
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Parse:
			case Reg:
			case Read:
			case Files:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 395;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 394;
					importDefault();
					}
					break;
				}
				State = 399;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Multiply:
				case NullLiteral:
				case Unset:
				case True:
				case False:
				case Break:
				case Do:
				case Instanceof:
				case Switch:
				case Case:
				case Default:
				case Else:
				case Catch:
				case Finally:
				case Return:
				case Continue:
				case For:
				case While:
				case Parse:
				case Reg:
				case Read:
				case Files:
				case Loop:
				case Until:
				case This:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case Yield:
				case Is:
				case Contains:
				case VerbalAnd:
				case VerbalNot:
				case VerbalOr:
				case Goto:
				case Get:
				case Set:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Base:
				case Export:
				case Import:
				case From:
				case As:
				case Async:
				case Await:
				case Static:
				case Global:
				case Local:
				case Identifier:
					{
					State = 397;
					importNamespace();
					}
					break;
				case OpenBrace:
					{
					State = 398;
					importModuleItems();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 401;
				importFrom();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 403;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasNameContext[] importAliasName() {
			return GetRuleContexts<ImportAliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasNameContext importAliasName(int i) {
			return GetRuleContext<ImportAliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ImportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importModuleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportModuleItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportModuleItemsContext importModuleItems() {
		ImportModuleItemsContext _localctx = new ImportModuleItemsContext(Context, State);
		EnterRule(_localctx, 34, RULE_importModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			Match(OpenBrace);
			State = 418;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 407;
					importAliasName();
					State = 411;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 408;
						Match(WS);
						}
						}
						State = 413;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 414;
					Match(Comma);
					}
					} 
				}
				State = 420;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 9223372036854767631L) != 0)) {
				{
				State = 421;
				importAliasName();
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma || _la==WS) {
					{
					State = 425;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 422;
						Match(WS);
						}
						}
						State = 427;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 428;
					Match(Comma);
					}
				}

				}
			}

			State = 433;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext moduleExportName() {
			return GetRuleContext<ModuleExportNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportedBindingContext importedBinding() {
			return GetRuleContext<ImportedBindingContext>(0);
		}
		public ImportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasNameContext importAliasName() {
		ImportAliasNameContext _localctx = new ImportAliasNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_importAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			moduleExportName();
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 436;
				Match(As);
				State = 437;
				importedBinding();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleExportNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ModuleExportNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleExportName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleExportName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleExportNameContext moduleExportName() {
		ModuleExportNameContext _localctx = new ModuleExportNameContext(Context, State);
		EnterRule(_localctx, 38, RULE_moduleExportName);
		try {
			State = 442;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Parse:
			case Reg:
			case Read:
			case Files:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 440;
				identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 441;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportedBindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		public ImportedBindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importedBinding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportedBinding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportedBindingContext importedBinding() {
		ImportedBindingContext _localctx = new ImportedBindingContext(Context, State);
		EnterRule(_localctx, 40, RULE_importedBinding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 8912897L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext aliasName() {
			return GetRuleContext<AliasNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ImportDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefaultContext importDefault() {
		ImportDefaultContext _localctx = new ImportDefaultContext(Context, State);
		EnterRule(_localctx, 42, RULE_importDefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			aliasName();
			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 447;
				Match(WS);
				}
				}
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 453;
			Match(Comma);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public ImportNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportNamespaceContext importNamespace() {
		ImportNamespaceContext _localctx = new ImportNamespaceContext(Context, State);
		EnterRule(_localctx, 44, RULE_importNamespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
				{
				State = 455;
				Match(Multiply);
				}
				break;
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Parse:
			case Reg:
			case Read:
			case Files:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				{
				State = 456;
				identifierName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 459;
				Match(As);
				State = 460;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(MainParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ImportFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromContext importFrom() {
		ImportFromContext _localctx = new ImportFromContext(Context, State);
		EnterRule(_localctx, 46, RULE_importFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			Match(From);
			State = 464;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public AliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasNameContext aliasName() {
		AliasNameContext _localctx = new AliasNameContext(Context, State);
		EnterRule(_localctx, 48, RULE_aliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			identifierName();
			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 467;
				Match(As);
				State = 468;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
	 
		public ExportStatementContext() { }
		public virtual void CopyFrom(ExportStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExportDefaultDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ExportDefaultDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDefaultDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExportDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExportFromBlockContext exportFromBlock() {
			return GetRuleContext<ExportFromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		public ExportDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_exportStatement);
		try {
			State = 482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				_localctx = new ExportDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 471;
				Match(Export);
				State = 473;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 472;
					Match(Default);
					}
					break;
				}
				State = 477;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 475;
					exportFromBlock();
					}
					break;
				case 2:
					{
					State = 476;
					declaration();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ExportDefaultDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 479;
				Match(Export);
				State = 480;
				Match(Default);
				State = 481;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportModuleItemsContext exportModuleItems() {
			return GetRuleContext<ExportModuleItemsContext>(0);
		}
		public ExportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportFromBlockContext exportFromBlock() {
		ExportFromBlockContext _localctx = new ExportFromBlockContext(Context, State);
		EnterRule(_localctx, 52, RULE_exportFromBlock);
		int _la;
		try {
			State = 491;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Parse:
			case Reg:
			case Read:
			case Files:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 484;
				importNamespace();
				State = 485;
				importFrom();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 487;
				exportModuleItems();
				State = 489;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==From) {
					{
					State = 488;
					importFrom();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExportAliasNameContext[] exportAliasName() {
			return GetRuleContexts<ExportAliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportAliasNameContext exportAliasName(int i) {
			return GetRuleContext<ExportAliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ExportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportModuleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportModuleItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportModuleItemsContext exportModuleItems() {
		ExportModuleItemsContext _localctx = new ExportModuleItemsContext(Context, State);
		EnterRule(_localctx, 54, RULE_exportModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			Match(OpenBrace);
			State = 505;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 494;
					exportAliasName();
					State = 498;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 495;
						Match(WS);
						}
						}
						State = 500;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 501;
					Match(Comma);
					}
					} 
				}
				State = 507;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			State = 518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 9223372036854767631L) != 0)) {
				{
				State = 508;
				exportAliasName();
				State = 516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma || _la==WS) {
					{
					State = 512;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 509;
						Match(WS);
						}
						}
						State = 514;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 515;
					Match(Comma);
					}
				}

				}
			}

			State = 520;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportAliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext[] moduleExportName() {
			return GetRuleContexts<ModuleExportNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext moduleExportName(int i) {
			return GetRuleContext<ModuleExportNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public ExportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportAliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportAliasNameContext exportAliasName() {
		ExportAliasNameContext _localctx = new ExportAliasNameContext(Context, State);
		EnterRule(_localctx, 56, RULE_exportAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			moduleExportName();
			State = 525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 523;
				Match(As);
				State = 524;
				moduleExportName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_declaration);
		try {
			State = 529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 527;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 528;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 60, RULE_variableDeclarationList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			variableDeclaration();
			State = 542;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 535;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 532;
						Match(WS);
						}
						}
						State = 537;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 538;
					Match(Comma);
					State = 539;
					variableDeclaration();
					}
					} 
				}
				State = 544;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			assignable();
			State = 550;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 546;
				assignmentOperator();
				State = 547;
				expression(0);
				}
				break;
			case 2:
				{
				State = 549;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PlusPlus || _la==MinusMinus) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public FunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStatementContext functionStatement() {
		FunctionStatementContext _localctx = new FunctionStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_functionStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			primaryExpression(0);
			State = 559;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 554;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 553;
						Match(WS);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 556;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 558;
				arguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			expressionSequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MainParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			Match(If);
			State = 567;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 564;
					s();
					}
					} 
				}
				State = 569;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			State = 570;
			singleExpression(0);
			State = 574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 571;
				Match(WS);
				}
				}
				State = 576;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 577;
			flowBlock();
			State = 578;
			elseProduction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlowBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FlowBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flowBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlowBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlowBlockContext flowBlock() {
		FlowBlockContext _localctx = new FlowBlockContext(Context, State);
		EnterRule(_localctx, 70, RULE_flowBlock);
		try {
			int _alt;
			State = 587;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 581;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 580;
						Match(EOL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 583;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 585;
				statement();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 586;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public UntilProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilProductionContext untilProduction() {
		UntilProductionContext _localctx = new UntilProductionContext(Context, State);
		EnterRule(_localctx, 72, RULE_untilProduction);
		try {
			int _alt;
			State = 599;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 589;
				Match(EOL);
				State = 590;
				Match(Until);
				State = 594;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 591;
						s();
						}
						} 
					}
					State = 596;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				}
				State = 597;
				singleExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 598;
				if (!(!this.second(Until))) throw new FailedPredicateException(this, "!this.second(Until)");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public ElseProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseProductionContext elseProduction() {
		ElseProductionContext _localctx = new ElseProductionContext(Context, State);
		EnterRule(_localctx, 74, RULE_elseProduction);
		try {
			int _alt;
			State = 611;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 601;
				Match(EOL);
				State = 602;
				Match(Else);
				State = 606;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 603;
						s();
						}
						} 
					}
					State = 608;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				}
				State = 609;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 610;
				if (!(!this.second(Else))) throw new FailedPredicateException(this, "!this.second(Else)");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public LoopStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MainParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MainParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForInParametersContext forInParameters() {
			return GetRuleContext<ForInParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SpecializedLoopStatementContext : IterationStatementContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Files() { return GetToken(MainParser.Files, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Read() { return GetToken(MainParser.Read, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Reg() { return GetToken(MainParser.Reg, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Parse() { return GetToken(MainParser.Parse, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public SpecializedLoopStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecializedLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_iterationStatement);
		int _la;
		try {
			int _alt;
			State = 704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				_localctx = new SpecializedLoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 613;
				Match(Loop);
				State = 614;
				((SpecializedLoopStatementContext)_localctx).type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 15L) != 0)) ) {
					((SpecializedLoopStatementContext)_localctx).type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 618;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 615;
						Match(WS);
						}
						} 
					}
					State = 620;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				}
				State = 621;
				singleExpression(0);
				State = 634;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 625;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 622;
							Match(WS);
							}
							}
							State = 627;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 628;
						Match(Comma);
						State = 630;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
						case 1:
							{
							State = 629;
							singleExpression(0);
							}
							break;
						}
						}
						} 
					}
					State = 636;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				}
				State = 640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 637;
					Match(WS);
					}
					}
					State = 642;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 643;
				flowBlock();
				State = 644;
				untilProduction();
				State = 645;
				elseProduction();
				}
				break;
			case 2:
				_localctx = new LoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 647;
				if (!(this.isValidLoopExpression())) throw new FailedPredicateException(this, "this.isValidLoopExpression()");
				State = 648;
				Match(Loop);
				State = 652;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 649;
						Match(WS);
						}
						} 
					}
					State = 654;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
				}
				State = 662;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 655;
					singleExpression(0);
					State = 659;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 656;
						Match(WS);
						}
						}
						State = 661;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 664;
				flowBlock();
				State = 665;
				untilProduction();
				State = 666;
				elseProduction();
				}
				break;
			case 3:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 668;
				Match(While);
				State = 672;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 669;
						Match(WS);
						}
						} 
					}
					State = 674;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
				}
				State = 675;
				singleExpression(0);
				State = 679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 676;
					Match(WS);
					}
					}
					State = 681;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 682;
				flowBlock();
				State = 683;
				untilProduction();
				State = 684;
				elseProduction();
				}
				break;
			case 4:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 686;
				Match(For);
				State = 690;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 687;
						Match(WS);
						}
						} 
					}
					State = 692;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
				}
				State = 693;
				forInParameters();
				State = 697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 694;
					Match(WS);
					}
					}
					State = 699;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 700;
				flowBlock();
				State = 701;
				untilProduction();
				State = 702;
				elseProduction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext[] assignable() {
			return GetRuleContexts<AssignableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable(int i) {
			return GetRuleContext<AssignableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ForInParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInParametersContext forInParameters() {
		ForInParametersContext _localctx = new ForInParametersContext(Context, State);
		EnterRule(_localctx, 78, RULE_forInParameters);
		int _la;
		try {
			int _alt;
			State = 773;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Comma:
			case NullLiteral:
			case Do:
			case Default:
			case Parse:
			case Reg:
			case Read:
			case Files:
			case This:
			case In:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case From:
			case As:
			case Identifier:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2364354625299300353L) != 0)) {
					{
					State = 706;
					assignable();
					}
				}

				State = 721;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 712;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 709;
							Match(WS);
							}
							}
							State = 714;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 715;
						Match(Comma);
						State = 717;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2364354625299300353L) != 0)) {
							{
							State = 716;
							assignable();
							}
						}

						}
						} 
					}
					State = 723;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
				}
				State = 727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 724;
					Match(WS);
					}
					}
					State = 729;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 730;
				Match(In);
				State = 734;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 731;
						Match(WS);
						}
						} 
					}
					State = 736;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
				}
				State = 737;
				singleExpression(0);
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 738;
				Match(OpenParen);
				State = 740;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2364354625299300353L) != 0)) {
					{
					State = 739;
					assignable();
					}
				}

				State = 754;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 745;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 742;
							Match(WS);
							}
							}
							State = 747;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 748;
						Match(Comma);
						State = 750;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2364354625299300353L) != 0)) {
							{
							State = 749;
							assignable();
							}
						}

						}
						} 
					}
					State = 756;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
				}
				State = 760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 757;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 762;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 763;
				Match(In);
				State = 767;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 764;
						_la = TokenStream.LA(1);
						if ( !(_la==EOL || _la==WS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 769;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
				}
				State = 770;
				singleExpression(0);
				State = 771;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(MainParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_continueStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			Match(Continue);
			State = 779;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 776;
					Match(WS);
					}
					} 
				}
				State = 781;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			}
			State = 787;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 782;
				propertyName();
				}
				break;
			case 2:
				{
				State = 783;
				Match(OpenParen);
				State = 784;
				propertyName();
				State = 785;
				Match(CloseParen);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MainParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_breakStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			Match(Break);
			State = 793;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 790;
					Match(WS);
					}
					} 
				}
				State = 795;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			State = 801;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 796;
				Match(OpenParen);
				State = 797;
				propertyName();
				State = 798;
				Match(CloseParen);
				}
				break;
			case 2:
				{
				State = 800;
				propertyName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MainParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_returnStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 803;
			Match(Return);
			State = 807;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 804;
					Match(WS);
					}
					} 
				}
				State = 809;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			}
			State = 811;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				{
				State = 810;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_yieldStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 813;
			Match(Yield);
			State = 817;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 814;
					Match(WS);
					}
					} 
				}
				State = 819;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			}
			State = 821;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 820;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(MainParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_switchStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			Match(Switch);
			State = 827;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 824;
					Match(WS);
					}
					} 
				}
				State = 829;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			}
			State = 831;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 830;
				singleExpression(0);
				}
				break;
			}
			State = 841;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 833;
					Match(WS);
					}
					}
					State = 838;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 839;
				Match(Comma);
				State = 840;
				literal();
				}
				break;
			}
			State = 846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 843;
				s();
				}
				}
				State = 848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 849;
			caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 90, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 851;
			Match(OpenBrace);
			State = 855;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 852;
				s();
				}
				}
				State = 857;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Case || _la==Default) {
				{
				{
				State = 858;
				caseClause();
				}
				}
				State = 863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 864;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(MainParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 92, RULE_caseClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 875;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Case:
				{
				State = 866;
				Match(Case);
				State = 870;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 867;
						Match(WS);
						}
						} 
					}
					State = 872;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
				}
				State = 873;
				expressionSequence();
				}
				break;
			case Default:
				{
				State = 874;
				Match(Default);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 877;
				Match(WS);
				}
				}
				State = 882;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 883;
			Match(Colon);
			State = 892;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 887;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 884;
						s();
						}
						} 
					}
					State = 889;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
				}
				State = 890;
				statementList();
				}
				break;
			case 2:
				{
				State = 891;
				Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		public LabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelledStatementContext labelledStatement() {
		LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_labelledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894;
			identifier();
			State = 895;
			Match(Colon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(MainParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_gotoStatement);
		int _la;
		try {
			State = 916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 897;
				Match(Goto);
				State = 901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 898;
					Match(WS);
					}
					}
					State = 903;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 904;
				propertyName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 905;
				Match(Goto);
				State = 909;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 906;
					Match(WS);
					}
					}
					State = 911;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 912;
				Match(OpenParen);
				State = 913;
				propertyName();
				State = 914;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(MainParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_throwStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			Match(Throw);
			State = 922;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 919;
					Match(WS);
					}
					} 
				}
				State = 924;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			}
			State = 926;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 925;
				singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(MainParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext[] catchProduction() {
			return GetRuleContexts<CatchProductionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext catchProduction(int i) {
			return GetRuleContext<CatchProductionContext>(i);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_tryStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 928;
			Match(Try);
			State = 932;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 929;
					s();
					}
					} 
				}
				State = 934;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			}
			State = 935;
			statement();
			State = 939;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 936;
					catchProduction();
					}
					} 
				}
				State = 941;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			}
			State = 942;
			elseProduction();
			State = 943;
			finallyProduction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(MainParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchAssignableContext catchAssignable() {
			return GetRuleContext<CatchAssignableContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 102, RULE_catchProduction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 945;
			Match(EOL);
			State = 946;
			Match(Catch);
			State = 950;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 947;
					Match(WS);
					}
					} 
				}
				State = 952;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			}
			State = 960;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenParen || _la==NullLiteral || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & 1270208660828177L) != 0)) {
				{
				State = 953;
				catchAssignable();
				State = 957;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 954;
					Match(WS);
					}
					}
					State = 959;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 962;
			flowBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchAssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CatchClassesContext catchClasses() {
			return GetRuleContext<CatchClassesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public CatchAssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchAssignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchAssignable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchAssignableContext catchAssignable() {
		CatchAssignableContext _localctx = new CatchAssignableContext(Context, State);
		EnterRule(_localctx, 104, RULE_catchAssignable);
		int _la;
		try {
			State = 1039;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 964;
				catchClasses();
				State = 972;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
				case 1:
					{
					State = 968;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 965;
						Match(WS);
						}
						}
						State = 970;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 971;
					Match(As);
					}
					break;
				}
				State = 981;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
				case 1:
					{
					State = 977;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 974;
						Match(WS);
						}
						}
						State = 979;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 980;
					identifier();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 983;
				Match(OpenParen);
				State = 984;
				catchClasses();
				State = 992;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
				case 1:
					{
					State = 988;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 985;
						Match(WS);
						}
						}
						State = 990;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 991;
					Match(As);
					}
					break;
				}
				State = 1001;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2364354625299300353L) != 0) || _la==WS) {
					{
					State = 997;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 994;
						Match(WS);
						}
						}
						State = 999;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1000;
					identifier();
					}
				}

				State = 1003;
				Match(CloseParen);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 1008;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1005;
					Match(WS);
					}
					}
					State = 1010;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1011;
				Match(As);
				}
				{
				State = 1016;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1013;
					Match(WS);
					}
					}
					State = 1018;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1019;
				identifier();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1020;
				Match(OpenParen);
				{
				State = 1024;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1021;
					Match(WS);
					}
					}
					State = 1026;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1027;
				Match(As);
				}
				{
				State = 1032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1029;
					Match(WS);
					}
					}
					State = 1034;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1035;
				identifier();
				}
				State = 1037;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClassesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public CatchClassesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClasses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClasses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClassesContext catchClasses() {
		CatchClassesContext _localctx = new CatchClassesContext(Context, State);
		EnterRule(_localctx, 106, RULE_catchClasses);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1041;
			identifier();
			State = 1052;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1045;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1042;
						Match(WS);
						}
						}
						State = 1047;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1048;
					Match(Comma);
					State = 1049;
					identifier();
					}
					} 
				}
				State = 1054;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(MainParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 108, RULE_finallyProduction);
		try {
			int _alt;
			State = 1065;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1055;
				Match(EOL);
				State = 1056;
				Match(Finally);
				State = 1060;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1057;
						s();
						}
						} 
					}
					State = 1062;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
				}
				State = 1063;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1064;
				if (!(!this.second(Finally))) throw new FailedPredicateException(this, "!this.second(Finally)");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 110, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1067;
			functionHead();
			State = 1068;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MainParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(MainParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassExtensionNameContext classExtensionName() {
			return GetRuleContext<ClassExtensionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 112, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			Match(Class);
			State = 1074;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 1071;
				Match(WS);
				}
				}
				State = 1076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1077;
			identifier();
			State = 1090;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1079;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1078;
					Match(WS);
					}
					}
					State = 1081;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS );
				State = 1083;
				Match(Extends);
				State = 1085;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1084;
					Match(WS);
					}
					}
					State = 1087;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS );
				State = 1089;
				classExtensionName();
				}
				break;
			}
			State = 1095;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1092;
				s();
				}
				}
				State = 1097;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1098;
			classTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassExtensionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MainParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MainParser.Dot, i);
		}
		public ClassExtensionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classExtensionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExtensionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassExtensionNameContext classExtensionName() {
		ClassExtensionNameContext _localctx = new ClassExtensionNameContext(Context, State);
		EnterRule(_localctx, 114, RULE_classExtensionName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1100;
			identifier();
			State = 1105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 1101;
				Match(Dot);
				State = 1102;
				identifier();
				}
				}
				State = 1107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext[] classElement() {
			return GetRuleContexts<ClassElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext classElement(int i) {
			return GetRuleContext<ClassElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ClassTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTailContext classTail() {
		ClassTailContext _localctx = new ClassTailContext(Context, State);
		EnterRule(_localctx, 116, RULE_classTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1108;
			Match(OpenBrace);
			State = 1115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & -7681L) != 0)) {
				{
				State = 1113;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NullLiteral:
				case Unset:
				case True:
				case False:
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
				case Break:
				case Do:
				case Instanceof:
				case Switch:
				case Case:
				case Default:
				case Else:
				case Catch:
				case Finally:
				case Return:
				case Continue:
				case For:
				case While:
				case Parse:
				case Reg:
				case Read:
				case Files:
				case Loop:
				case Until:
				case This:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case Yield:
				case Is:
				case Contains:
				case VerbalAnd:
				case VerbalNot:
				case VerbalOr:
				case Goto:
				case Get:
				case Set:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Base:
				case Export:
				case Import:
				case From:
				case As:
				case Async:
				case Await:
				case Static:
				case Global:
				case Local:
				case Identifier:
				case StringLiteral:
					{
					State = 1109;
					classElement();
					State = 1110;
					Match(EOL);
					}
					break;
				case EOL:
					{
					State = 1112;
					Match(EOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1118;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementContext : ParserRuleContext {
		public ClassElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElement; } }
	 
		public ClassElementContext() { }
		public virtual void CopyFrom(ClassElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public NestedClassDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassFieldDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext[] fieldDefinition() {
			return GetRuleContexts<FieldDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition(int i) {
			return GetRuleContext<FieldDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ClassFieldDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassMethodDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public ClassMethodDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassPropertyDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDefinitionContext propertyDefinition() {
			return GetRuleContext<PropertyDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ClassPropertyDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementContext classElement() {
		ClassElementContext _localctx = new ClassElementContext(Context, State);
		EnterRule(_localctx, 118, RULE_classElement);
		int _la;
		try {
			State = 1155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				_localctx = new ClassMethodDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1120;
				methodDefinition();
				}
				break;
			case 2:
				_localctx = new ClassPropertyDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1128;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
				case 1:
					{
					State = 1121;
					Match(Static);
					State = 1125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1122;
						Match(WS);
						}
						}
						State = 1127;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 1130;
				propertyDefinition();
				}
				break;
			case 3:
				_localctx = new ClassFieldDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1138;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
				case 1:
					{
					State = 1131;
					Match(Static);
					State = 1135;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1132;
						Match(WS);
						}
						}
						State = 1137;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 1140;
				fieldDefinition();
				State = 1151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma || _la==WS) {
					{
					{
					State = 1144;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1141;
						Match(WS);
						}
						}
						State = 1146;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1147;
					Match(Comma);
					State = 1148;
					fieldDefinition();
					}
					}
					State = 1153;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 4:
				_localctx = new NestedClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1154;
				classDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
		EnterRule(_localctx, 120, RULE_methodDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1157;
			functionHead();
			State = 1158;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassPropertyNameContext classPropertyName() {
			return GetRuleContext<ClassPropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyGetterDefinitionContext[] propertyGetterDefinition() {
			return GetRuleContexts<PropertyGetterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyGetterDefinitionContext propertyGetterDefinition(int i) {
			return GetRuleContext<PropertyGetterDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySetterDefinitionContext[] propertySetterDefinition() {
			return GetRuleContexts<PropertySetterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySetterDefinitionContext propertySetterDefinition(int i) {
			return GetRuleContext<PropertySetterDefinitionContext>(i);
		}
		public PropertyDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefinitionContext propertyDefinition() {
		PropertyDefinitionContext _localctx = new PropertyDefinitionContext(Context, State);
		EnterRule(_localctx, 122, RULE_propertyDefinition);
		int _la;
		try {
			State = 1185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1160;
				classPropertyName();
				State = 1161;
				Match(Arrow);
				State = 1162;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1164;
				classPropertyName();
				State = 1168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1165;
					s();
					}
					}
					State = 1170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1171;
				Match(OpenBrace);
				State = 1179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 1179;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Get:
						{
						State = 1172;
						propertyGetterDefinition();
						State = 1173;
						Match(EOL);
						}
						break;
					case Set:
						{
						State = 1175;
						propertySetterDefinition();
						State = 1176;
						Match(EOL);
						}
						break;
					case EOL:
						{
						State = 1178;
						Match(EOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 1181;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 262147L) != 0) );
				State = 1183;
				Match(CloseBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassPropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public ClassPropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classPropertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassPropertyNameContext classPropertyName() {
		ClassPropertyNameContext _localctx = new ClassPropertyNameContext(Context, State);
		EnterRule(_localctx, 124, RULE_classPropertyName);
		int _la;
		try {
			State = 1201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1187;
				propertyName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1188;
				propertyName();
				State = 1189;
				Match(OpenBracket);
				State = 1191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply || _la==BitAnd || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2364354625299300353L) != 0)) {
					{
					State = 1190;
					formalParameterList();
					}
				}

				State = 1196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1193;
					s();
					}
					}
					State = 1198;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1199;
				Match(CloseBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(MainParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertyGetterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetterDefinitionContext propertyGetterDefinition() {
		PropertyGetterDefinitionContext _localctx = new PropertyGetterDefinitionContext(Context, State);
		EnterRule(_localctx, 126, RULE_propertyGetterDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1203;
			Match(Get);
			State = 1204;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(MainParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertySetterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetterDefinitionContext propertySetterDefinition() {
		PropertySetterDefinitionContext _localctx = new PropertySetterDefinitionContext(Context, State);
		EnterRule(_localctx, 128, RULE_propertySetterDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1206;
			Match(Set);
			State = 1207;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext[] propertyName() {
			return GetRuleContexts<PropertyNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName(int i) {
			return GetRuleContext<PropertyNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MainParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MainParser.Dot, i);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 130, RULE_fieldDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1209;
			propertyName();
			State = 1214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 1210;
				Match(Dot);
				State = 1211;
				propertyName();
				}
				}
				State = 1216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 1217;
			Match(Assign);
			State = 1218;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterArgContext lastFormalParameterArg() {
			return GetRuleContext<LastFormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext[] formalParameterArg() {
			return GetRuleContexts<FormalParameterArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg(int i) {
			return GetRuleContext<FormalParameterArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 132, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1231;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1220;
					formalParameterArg();
					State = 1224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1221;
						Match(WS);
						}
						}
						State = 1226;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1227;
					Match(Comma);
					}
					} 
				}
				State = 1233;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			}
			State = 1234;
			lastFormalParameterArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterArgContext formalParameterArg() {
		FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
		EnterRule(_localctx, 134, RULE_formalParameterArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BitAnd) {
				{
				State = 1236;
				Match(BitAnd);
				}
			}

			State = 1239;
			identifier();
			State = 1243;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				{
				State = 1240;
				Match(Assign);
				State = 1241;
				expression(0);
				}
				break;
			case QuestionMark:
				{
				State = 1242;
				Match(QuestionMark);
				}
				break;
			case CloseBracket:
			case CloseParen:
			case Comma:
			case EOL:
			case WS:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg() {
			return GetRuleContext<FormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LastFormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterArgContext lastFormalParameterArg() {
		LastFormalParameterArgContext _localctx = new LastFormalParameterArgContext(Context, State);
		EnterRule(_localctx, 136, RULE_lastFormalParameterArg);
		int _la;
		try {
			State = 1250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1245;
				formalParameterArg();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2364354625299300353L) != 0)) {
					{
					State = 1246;
					identifier();
					}
				}

				State = 1249;
				Match(Multiply);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 138, RULE_arrayLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1252;
			Match(OpenBracket);
			State = 1256;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1253;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 1258;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			}
			State = 1266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738021042818L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & -1L) != 0) || _la==WS) {
				{
				State = 1259;
				arguments();
				State = 1263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1260;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1265;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1268;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MapElementListContext mapElementList() {
			return GetRuleContext<MapElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public MapLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapLiteralContext mapLiteral() {
		MapLiteralContext _localctx = new MapLiteralContext(Context, State);
		EnterRule(_localctx, 140, RULE_mapLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1270;
			Match(OpenBracket);
			State = 1274;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,171,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1271;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 1276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,171,Context);
			}
			State = 1277;
			mapElementList();
			State = 1281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1278;
				_la = TokenStream.LA(1);
				if ( !(_la==EOL || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1284;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapElementContext[] mapElement() {
			return GetRuleContexts<MapElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapElementContext mapElement(int i) {
			return GetRuleContext<MapElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public MapElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapElementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapElementListContext mapElementList() {
		MapElementListContext _localctx = new MapElementListContext(Context, State);
		EnterRule(_localctx, 142, RULE_mapElementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1295;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1289;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1286;
						Match(WS);
						}
						}
						State = 1291;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1292;
					Match(Comma);
					}
					} 
				}
				State = 1297;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			}
			State = 1298;
			mapElement();
			State = 1311;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1302;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1299;
						Match(WS);
						}
						}
						State = 1304;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1305;
					Match(Comma);
					State = 1307;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
					case 1:
						{
						State = 1306;
						mapElement();
						}
						break;
					}
					}
					} 
				}
				State = 1313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapElementContext : ParserRuleContext {
		public ExpressionContext key;
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MapElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapElementContext mapElement() {
		MapElementContext _localctx = new MapElementContext(Context, State);
		EnterRule(_localctx, 144, RULE_mapElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1314;
			_localctx.key = expression(0);
			State = 1315;
			Match(Colon);
			State = 1316;
			_localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberIdentifierContext memberIdentifier() {
			return GetRuleContext<MemberIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 146, RULE_propertyAssignment);
		int _la;
		try {
			int _alt;
			_localctx = new PropertyExpressionAssignmentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 1318;
			memberIdentifier();
			State = 1322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1319;
				_la = TokenStream.LA(1);
				if ( !(_la==EOL || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1325;
			Match(Colon);
			State = 1329;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1326;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 1331;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
			}
			State = 1332;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 148, RULE_propertyName);
		try {
			State = 1338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1334;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1335;
				reservedWord();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1336;
				Match(StringLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1337;
				numericLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DereferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefStart() { return GetToken(MainParser.DerefStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefEnd() { return GetToken(MainParser.DerefEnd, 0); }
		public DereferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dereference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDereference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DereferenceContext dereference() {
		DereferenceContext _localctx = new DereferenceContext(Context, State);
		EnterRule(_localctx, 150, RULE_dereference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1340;
			Match(DerefStart);
			State = 1341;
			expression(0);
			State = 1342;
			Match(DerefEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 152, RULE_arguments);
		int _la;
		try {
			int _alt;
			State = 1374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1344;
				argument();
				State = 1357;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1348;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 1345;
							Match(WS);
							}
							}
							State = 1350;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1351;
						Match(Comma);
						State = 1353;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
						case 1:
							{
							State = 1352;
							argument();
							}
							break;
						}
						}
						} 
					}
					State = 1359;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1370;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1363;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 1360;
							Match(WS);
							}
							}
							State = 1365;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1366;
						Match(Comma);
						State = 1368;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
						case 1:
							{
							State = 1367;
							argument();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1372;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 154, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1376;
			expression(0);
			State = 1378;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				{
				State = 1377;
				_la = TokenStream.LA(1);
				if ( !(_la==QuestionMark || _la==Multiply) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 156, RULE_expressionSequence);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1380;
			expression(0);
			State = 1391;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,190,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1384;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1381;
						Match(WS);
						}
						}
						State = 1386;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1387;
					Match(Comma);
					State = 1388;
					expression(0);
					}
					} 
				}
				State = 1393;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,190,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberIndexArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public MemberIndexArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberIndexArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberIndexArgumentsContext memberIndexArguments() {
		MemberIndexArgumentsContext _localctx = new MemberIndexArgumentsContext(Context, State);
		EnterRule(_localctx, 158, RULE_memberIndexArguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1394;
			Match(OpenBracket);
			State = 1398;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,191,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1395;
					s();
					}
					} 
				}
				State = 1400;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,191,Context);
			}
			State = 1408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738021042818L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & -1L) != 0) || _la==WS) {
				{
				State = 1401;
				arguments();
				State = 1405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1402;
					s();
					}
					}
					State = 1407;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1410;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyIndexArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public PropertyIndexArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyIndexArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyIndexArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyIndexArgumentsContext propertyIndexArguments() {
		PropertyIndexArgumentsContext _localctx = new PropertyIndexArgumentsContext(Context, State);
		EnterRule(_localctx, 160, RULE_propertyIndexArguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1412;
			Match(OpenBracket);
			State = 1416;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,194,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1413;
					s();
					}
					} 
				}
				State = 1418;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,194,Context);
			}
			{
			State = 1419;
			arguments();
			State = 1423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1420;
				s();
				}
				}
				State = 1425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 1426;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PostIncrementDecrementExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		public PostIncrementDecrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(MainParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(MainParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(MainParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(MainParser.GreaterThanEquals, 0); }
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		public ExpressionContext ternCond;
		public ExpressionContext ternTrue;
		public ExpressionContext ternFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementDecrementExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		public PreIncrementDecrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MainParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(MainParser.Power, 0); }
		public PowerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContainExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public PrimaryExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(MainParser.Contains, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ContainExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FatArrowExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FatArrowExpressionHeadContext fatArrowExpressionHead() {
			return GetRuleContext<FatArrowExpressionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FatArrowExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFatArrowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MainParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionDummyContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ExpressionDummyContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionDummy(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(MainParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(MainParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegExMatchExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegExMatch() { return GetToken(MainParser.RegExMatch, 0); }
		public RegExMatchExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegExMatchExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpressionHeadContext functionExpressionHead() {
			return GetRuleContext<FunctionExpressionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public FunctionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public PrimaryExpressionContext left;
		public AssignmentOperatorContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public BitAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(MainParser.BitOr, 0); }
		public BitOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenateExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConcatDot() { return GetToken(MainParser.ConcatDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ConcatenateExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(MainParser.BitXOr, 0); }
		public BitXOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(MainParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(MainParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(MainParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityNotEquals() { return GetToken(MainParser.IdentityNotEquals, 0); }
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VerbalNotExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public VerbalNotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbalNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(MainParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivide() { return GetToken(MainParser.IntegerDivide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(MainParser.NullCoalesce, 0); }
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitShiftExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(MainParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(MainParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogical() { return GetToken(MainParser.RightShiftLogical, 0); }
		public BitShiftExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 162;
		EnterRecursionRule(_localctx, 162, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				{
				_localctx = new PreIncrementDecrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1429;
				((PreIncrementDecrementExpressionContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PlusPlus || _la==MinusMinus) ) {
					((PreIncrementDecrementExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1430;
				((PreIncrementDecrementExpressionContext)_localctx).right = expression(23);
				}
				break;
			case 2:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1431;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1436;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1437;
				((UnaryExpressionContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 251658240L) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1438;
				((UnaryExpressionContext)_localctx).right = expression(21);
				}
				break;
			case 3:
				{
				_localctx = new VerbalNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1439;
				((VerbalNotExpressionContext)_localctx).op = Match(VerbalNot);
				State = 1443;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,197,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1440;
						Match(WS);
						}
						} 
					}
					State = 1445;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,197,Context);
				}
				State = 1446;
				((VerbalNotExpressionContext)_localctx).right = expression(9);
				}
				break;
			case 4:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1447;
				((AssignmentExpressionContext)_localctx).left = primaryExpression(0);
				State = 1448;
				((AssignmentExpressionContext)_localctx).op = assignmentOperator();
				State = 1449;
				((AssignmentExpressionContext)_localctx).right = expression(4);
				}
				break;
			case 5:
				{
				_localctx = new FatArrowExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1451;
				fatArrowExpressionHead();
				State = 1452;
				Match(Arrow);
				State = 1453;
				expression(3);
				}
				break;
			case 6:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1455;
				functionExpressionHead();
				State = 1459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1456;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1461;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1462;
				block();
				}
				break;
			case 7:
				{
				_localctx = new ExpressionDummyContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1464;
				primaryExpression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1601;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,216,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1599;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
					case 1:
						{
						_localctx = new PowerExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PowerExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1467;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1468;
						((PowerExpressionContext)_localctx).op = Match(Power);
						State = 1469;
						((PowerExpressionContext)_localctx).right = expression(22);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicativeExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1470;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						{
						State = 1471;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1879048192L) != 0)) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1475;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1472;
								_la = TokenStream.LA(1);
								if ( !(_la==EOL || _la==WS) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								} 
							}
							State = 1477;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
						}
						}
						State = 1478;
						((MultiplicativeExpressionContext)_localctx).right = expression(21);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AdditiveExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1479;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						{
						State = 1483;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1480;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1485;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1486;
						((AdditiveExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1490;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,202,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1487;
								_la = TokenStream.LA(1);
								if ( !(_la==EOL || _la==WS) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								} 
							}
							State = 1492;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,202,Context);
						}
						}
						State = 1493;
						((AdditiveExpressionContext)_localctx).right = expression(20);
						}
						break;
					case 4:
						{
						_localctx = new BitShiftExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitShiftExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1494;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1495;
						((BitShiftExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0)) ) {
							((BitShiftExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1496;
						((BitShiftExpressionContext)_localctx).right = expression(19);
						}
						break;
					case 5:
						{
						_localctx = new BitAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1497;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						{
						State = 1501;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1498;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1503;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1504;
						((BitAndExpressionContext)_localctx).op = Match(BitAnd);
						State = 1508;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1505;
								_la = TokenStream.LA(1);
								if ( !(_la==EOL || _la==WS) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								} 
							}
							State = 1510;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
						}
						}
						State = 1511;
						((BitAndExpressionContext)_localctx).right = expression(18);
						}
						break;
					case 6:
						{
						_localctx = new BitXOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitXOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1512;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1513;
						((BitXOrExpressionContext)_localctx).op = Match(BitXOr);
						State = 1514;
						((BitXOrExpressionContext)_localctx).right = expression(17);
						}
						break;
					case 7:
						{
						_localctx = new BitOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1515;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1516;
						((BitOrExpressionContext)_localctx).op = Match(BitOr);
						State = 1517;
						((BitOrExpressionContext)_localctx).right = expression(16);
						}
						break;
					case 8:
						{
						_localctx = new ConcatenateExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ConcatenateExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1518;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1525;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ConcatDot:
							{
							State = 1519;
							Match(ConcatDot);
							}
							break;
						case WS:
							{
							State = 1521;
							ErrorHandler.Sync(this);
							_alt = 1;
							do {
								switch (_alt) {
								case 1:
									{
									{
									State = 1520;
									Match(WS);
									}
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								State = 1523;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream,205,Context);
							} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1527;
						((ConcatenateExpressionContext)_localctx).right = expression(15);
						}
						break;
					case 9:
						{
						_localctx = new RegExMatchExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RegExMatchExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1528;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1529;
						((RegExMatchExpressionContext)_localctx).op = Match(RegExMatch);
						State = 1530;
						((RegExMatchExpressionContext)_localctx).right = expression(14);
						}
						break;
					case 10:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RelationalExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1531;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1532;
						((RelationalExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4123168604160L) != 0)) ) {
							((RelationalExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1533;
						((RelationalExpressionContext)_localctx).right = expression(13);
						}
						break;
					case 11:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1534;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1535;
						((EqualityExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 65970697666560L) != 0)) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1536;
						((EqualityExpressionContext)_localctx).right = expression(12);
						}
						break;
					case 12:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1537;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1540;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case And:
							{
							State = 1538;
							((LogicalAndExpressionContext)_localctx).op = Match(And);
							}
							break;
						case VerbalAnd:
							{
							State = 1539;
							((LogicalAndExpressionContext)_localctx).op = Match(VerbalAnd);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1542;
						((LogicalAndExpressionContext)_localctx).right = expression(9);
						}
						break;
					case 13:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1543;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1546;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case Or:
							{
							State = 1544;
							((LogicalOrExpressionContext)_localctx).op = Match(Or);
							}
							break;
						case VerbalOr:
							{
							State = 1545;
							((LogicalOrExpressionContext)_localctx).op = Match(VerbalOr);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1548;
						((LogicalOrExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 14:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CoalesceExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1549;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1550;
						((CoalesceExpressionContext)_localctx).op = Match(NullCoalesce);
						State = 1551;
						((CoalesceExpressionContext)_localctx).right = expression(6);
						}
						break;
					case 15:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TernaryExpressionContext)_localctx).ternCond = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1552;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1556;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1553;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1558;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1559;
						Match(QuestionMark);
						State = 1563;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1560;
								_la = TokenStream.LA(1);
								if ( !(_la==EOL || _la==WS) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								} 
							}
							State = 1565;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
						}
						State = 1566;
						((TernaryExpressionContext)_localctx).ternTrue = expression(0);
						State = 1570;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1567;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1572;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1573;
						Match(Colon);
						State = 1577;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1574;
								_la = TokenStream.LA(1);
								if ( !(_la==EOL || _la==WS) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								} 
							}
							State = 1579;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
						}
						State = 1580;
						((TernaryExpressionContext)_localctx).ternFalse = expression(5);
						}
						break;
					case 16:
						{
						_localctx = new PostIncrementDecrementExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PostIncrementDecrementExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1582;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1583;
						((PostIncrementDecrementExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PlusPlus || _la==MinusMinus) ) {
							((PostIncrementDecrementExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 17:
						{
						_localctx = new ContainExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1584;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						{
						State = 1588;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1585;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1590;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1591;
						((ContainExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 52428801L) != 0)) ) {
							((ContainExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1595;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1592;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1597;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1598;
						((ContainExpressionContext)_localctx).right = primaryExpression(0);
						}
						break;
					}
					} 
				}
				State = 1603;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,216,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BitShiftExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(MainParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(MainParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogical() { return GetToken(MainParser.RightShiftLogical, 0); }
		public BitShiftExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionDuplicateContext : SingleExpressionContext {
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(MainParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(MainParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public UnaryExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementDecrementExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		public PostIncrementDecrementExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementDecrementExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementDecrementExpressionDuplicateContext : SingleExpressionContext {
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		public PreIncrementDecrementExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementDecrementExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(MainParser.BitOr, 0); }
		public BitOrExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegExMatchExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegExMatch() { return GetToken(MainParser.RegExMatch, 0); }
		public RegExMatchExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegExMatchExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VerbalNotExpressionDuplicateContext : SingleExpressionContext {
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public VerbalNotExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbalNotExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleExpressionDummyContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public SingleExpressionDummyContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleExpressionDummy(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext ternCond;
		public ExpressionContext ternTrue;
		public SingleExpressionContext ternFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public TernaryExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public BitAndExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContainExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public PrimaryExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(MainParser.Contains, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ContainExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(MainParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivide() { return GetToken(MainParser.IntegerDivide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public MultiplicativeExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(MainParser.Power, 0); }
		public PowerExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(MainParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(MainParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(MainParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(MainParser.GreaterThanEquals, 0); }
		public RelationalExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public AdditiveExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MainParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		public LogicalOrExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionDuplicateContext : SingleExpressionContext {
		public PrimaryExpressionContext left;
		public AssignmentOperatorContext op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public AssignmentExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(MainParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(MainParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(MainParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityNotEquals() { return GetToken(MainParser.IdentityNotEquals, 0); }
		public EqualityExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenateExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConcatDot() { return GetToken(MainParser.ConcatDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ConcatenateExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenateExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MainParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		public LogicalAndExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(MainParser.NullCoalesce, 0); }
		public CoalesceExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(MainParser.BitXOr, 0); }
		public BitXOrExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 164;
		EnterRecursionRule(_localctx, 164, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				{
				_localctx = new PreIncrementDecrementExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1605;
				((PreIncrementDecrementExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PlusPlus || _la==MinusMinus) ) {
					((PreIncrementDecrementExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1606;
				((PreIncrementDecrementExpressionDuplicateContext)_localctx).right = singleExpression(21);
				}
				break;
			case 2:
				{
				_localctx = new UnaryExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1607;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1612;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1613;
				((UnaryExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 251658240L) != 0)) ) {
					((UnaryExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1614;
				((UnaryExpressionDuplicateContext)_localctx).right = singleExpression(19);
				}
				break;
			case 3:
				{
				_localctx = new VerbalNotExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1615;
				((VerbalNotExpressionDuplicateContext)_localctx).op = Match(VerbalNot);
				State = 1619;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,218,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1616;
						Match(WS);
						}
						} 
					}
					State = 1621;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,218,Context);
				}
				State = 1622;
				((VerbalNotExpressionDuplicateContext)_localctx).right = singleExpression(7);
				}
				break;
			case 4:
				{
				_localctx = new AssignmentExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1623;
				((AssignmentExpressionDuplicateContext)_localctx).left = primaryExpression(0);
				State = 1624;
				((AssignmentExpressionDuplicateContext)_localctx).op = assignmentOperator();
				State = 1625;
				((AssignmentExpressionDuplicateContext)_localctx).right = singleExpression(2);
				}
				break;
			case 5:
				{
				_localctx = new SingleExpressionDummyContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1627;
				primaryExpression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1764;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,236,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1762;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,235,Context) ) {
					case 1:
						{
						_localctx = new PowerExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((PowerExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1630;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1631;
						((PowerExpressionDuplicateContext)_localctx).op = Match(Power);
						State = 1632;
						((PowerExpressionDuplicateContext)_localctx).right = singleExpression(20);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((MultiplicativeExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1633;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						{
						State = 1634;
						((MultiplicativeExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1879048192L) != 0)) ) {
							((MultiplicativeExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1638;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,220,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1635;
								_la = TokenStream.LA(1);
								if ( !(_la==EOL || _la==WS) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								} 
							}
							State = 1640;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,220,Context);
						}
						}
						State = 1641;
						((MultiplicativeExpressionDuplicateContext)_localctx).right = singleExpression(19);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((AdditiveExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1642;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						{
						State = 1646;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1643;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1648;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1649;
						((AdditiveExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1653;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,222,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1650;
								_la = TokenStream.LA(1);
								if ( !(_la==EOL || _la==WS) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								} 
							}
							State = 1655;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,222,Context);
						}
						}
						State = 1656;
						((AdditiveExpressionDuplicateContext)_localctx).right = singleExpression(18);
						}
						break;
					case 4:
						{
						_localctx = new BitShiftExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((BitShiftExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1657;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1658;
						((BitShiftExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0)) ) {
							((BitShiftExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1659;
						((BitShiftExpressionDuplicateContext)_localctx).right = singleExpression(17);
						}
						break;
					case 5:
						{
						_localctx = new BitAndExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((BitAndExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1660;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						{
						State = 1664;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1661;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1666;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1667;
						((BitAndExpressionDuplicateContext)_localctx).op = Match(BitAnd);
						State = 1671;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,224,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1668;
								_la = TokenStream.LA(1);
								if ( !(_la==EOL || _la==WS) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								} 
							}
							State = 1673;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,224,Context);
						}
						}
						State = 1674;
						((BitAndExpressionDuplicateContext)_localctx).right = singleExpression(16);
						}
						break;
					case 6:
						{
						_localctx = new BitXOrExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((BitXOrExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1675;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1676;
						((BitXOrExpressionDuplicateContext)_localctx).op = Match(BitXOr);
						State = 1677;
						((BitXOrExpressionDuplicateContext)_localctx).right = singleExpression(15);
						}
						break;
					case 7:
						{
						_localctx = new BitOrExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((BitOrExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1678;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1679;
						((BitOrExpressionDuplicateContext)_localctx).op = Match(BitOr);
						State = 1680;
						((BitOrExpressionDuplicateContext)_localctx).right = singleExpression(14);
						}
						break;
					case 8:
						{
						_localctx = new ConcatenateExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((ConcatenateExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1681;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1688;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ConcatDot:
							{
							State = 1682;
							Match(ConcatDot);
							}
							break;
						case WS:
							{
							State = 1684;
							ErrorHandler.Sync(this);
							_alt = 1;
							do {
								switch (_alt) {
								case 1:
									{
									{
									State = 1683;
									Match(WS);
									}
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								State = 1686;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream,225,Context);
							} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1690;
						((ConcatenateExpressionDuplicateContext)_localctx).right = singleExpression(13);
						}
						break;
					case 9:
						{
						_localctx = new RegExMatchExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((RegExMatchExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1691;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1692;
						((RegExMatchExpressionDuplicateContext)_localctx).op = Match(RegExMatch);
						State = 1693;
						((RegExMatchExpressionDuplicateContext)_localctx).right = singleExpression(12);
						}
						break;
					case 10:
						{
						_localctx = new RelationalExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((RelationalExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1694;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1695;
						((RelationalExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4123168604160L) != 0)) ) {
							((RelationalExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1696;
						((RelationalExpressionDuplicateContext)_localctx).right = singleExpression(11);
						}
						break;
					case 11:
						{
						_localctx = new EqualityExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((EqualityExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1697;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1698;
						((EqualityExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 65970697666560L) != 0)) ) {
							((EqualityExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1699;
						((EqualityExpressionDuplicateContext)_localctx).right = singleExpression(10);
						}
						break;
					case 12:
						{
						_localctx = new LogicalAndExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1700;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1703;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case And:
							{
							State = 1701;
							((LogicalAndExpressionDuplicateContext)_localctx).op = Match(And);
							}
							break;
						case VerbalAnd:
							{
							State = 1702;
							((LogicalAndExpressionDuplicateContext)_localctx).op = Match(VerbalAnd);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1705;
						((LogicalAndExpressionDuplicateContext)_localctx).right = singleExpression(7);
						}
						break;
					case 13:
						{
						_localctx = new LogicalOrExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1706;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1709;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case Or:
							{
							State = 1707;
							((LogicalOrExpressionDuplicateContext)_localctx).op = Match(Or);
							}
							break;
						case VerbalOr:
							{
							State = 1708;
							((LogicalOrExpressionDuplicateContext)_localctx).op = Match(VerbalOr);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1711;
						((LogicalOrExpressionDuplicateContext)_localctx).right = singleExpression(6);
						}
						break;
					case 14:
						{
						_localctx = new CoalesceExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((CoalesceExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1712;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1713;
						((CoalesceExpressionDuplicateContext)_localctx).op = Match(NullCoalesce);
						State = 1714;
						((CoalesceExpressionDuplicateContext)_localctx).right = singleExpression(4);
						}
						break;
					case 15:
						{
						_localctx = new TernaryExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((TernaryExpressionDuplicateContext)_localctx).ternCond = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1715;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1719;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1716;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1721;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1722;
						Match(QuestionMark);
						State = 1726;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,230,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1723;
								_la = TokenStream.LA(1);
								if ( !(_la==EOL || _la==WS) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								} 
							}
							State = 1728;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,230,Context);
						}
						State = 1729;
						((TernaryExpressionDuplicateContext)_localctx).ternTrue = expression(0);
						State = 1733;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1730;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1735;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1736;
						Match(Colon);
						State = 1740;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,232,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1737;
								_la = TokenStream.LA(1);
								if ( !(_la==EOL || _la==WS) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								} 
							}
							State = 1742;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,232,Context);
						}
						State = 1743;
						((TernaryExpressionDuplicateContext)_localctx).ternFalse = singleExpression(3);
						}
						break;
					case 16:
						{
						_localctx = new PostIncrementDecrementExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((PostIncrementDecrementExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1745;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1746;
						((PostIncrementDecrementExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PlusPlus || _la==MinusMinus) ) {
							((PostIncrementDecrementExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 17:
						{
						_localctx = new ContainExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((ContainExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1747;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						{
						State = 1751;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1748;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1753;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1754;
						((ContainExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 52428801L) != 0)) ) {
							((ContainExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1758;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1755;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1760;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1761;
						((ContainExpressionDuplicateContext)_localctx).right = primaryExpression(0);
						}
						break;
					}
					} 
				}
				State = 1766;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,236,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
	 
		public PrimaryExpressionContext() { }
		public virtual void CopyFrom(PrimaryExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MapLiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapLiteralContext mapLiteral() {
			return GetRuleContext<MapLiteralContext>(0);
		}
		public MapLiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarRefExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public VarRefExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarRefExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DynamicIdentifierExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DynamicIdentifierContext dynamicIdentifier() {
			return GetRuleContext<DynamicIdentifierContext>(0);
		}
		public DynamicIdentifierExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessSuffixContext accessSuffix() {
			return GetRuleContext<AccessSuffixContext>(0);
		}
		public AccessExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		return primaryExpression(0);
	}

	private PrimaryExpressionContext primaryExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, _parentState);
		PrimaryExpressionContext _prevctx = _localctx;
		int _startState = 166;
		EnterRecursionRule(_localctx, 166, RULE_primaryExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1780;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
			case 1:
				{
				_localctx = new VarRefExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1768;
				Match(BitAnd);
				State = 1769;
				primaryExpression(8);
				}
				break;
			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1770;
				identifier();
				}
				break;
			case 3:
				{
				_localctx = new DynamicIdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1771;
				dynamicIdentifier();
				}
				break;
			case 4:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1772;
				literal();
				}
				break;
			case 5:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1773;
				arrayLiteral();
				}
				break;
			case 6:
				{
				_localctx = new MapLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1774;
				mapLiteral();
				}
				break;
			case 7:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1775;
				objectLiteral();
				}
				break;
			case 8:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1776;
				Match(OpenParen);
				State = 1777;
				expressionSequence();
				State = 1778;
				Match(CloseParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1786;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,238,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AccessExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
					State = 1782;
					if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
					State = 1783;
					accessSuffix();
					}
					} 
				}
				State = 1788;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,238,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AccessSuffixContext : ParserRuleContext {
		public IToken modifier;
		[System.Diagnostics.DebuggerNonUserCode] public MemberIdentifierContext memberIdentifier() {
			return GetRuleContext<MemberIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MainParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyIndexArgumentsContext propertyIndexArguments() {
			return GetRuleContext<PropertyIndexArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberIndexArgumentsContext memberIndexArguments() {
			return GetRuleContext<MemberIndexArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public AccessSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSuffixContext accessSuffix() {
		AccessSuffixContext _localctx = new AccessSuffixContext(Context, State);
		EnterRule(_localctx, 168, RULE_accessSuffix);
		int _la;
		try {
			State = 1806;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1789;
				_localctx.modifier = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==QuestionMarkDot || _la==Dot) ) {
					_localctx.modifier = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1790;
				memberIdentifier();
				State = 1792;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
				case 1:
					{
					State = 1791;
					propertyIndexArguments();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1795;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QuestionMarkDot) {
					{
					State = 1794;
					_localctx.modifier = Match(QuestionMarkDot);
					}
				}

				State = 1803;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OpenBracket:
					{
					State = 1797;
					memberIndexArguments();
					}
					break;
				case OpenParen:
					{
					State = 1798;
					Match(OpenParen);
					State = 1800;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738021042818L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & -1L) != 0) || _la==WS) {
						{
						State = 1799;
						arguments();
						}
					}

					State = 1802;
					Match(CloseParen);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1805;
				_localctx.modifier = Match(QuestionMark);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MainParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		public MemberDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDotContext memberDot() {
		MemberDotContext _localctx = new MemberDotContext(Context, State);
		EnterRule(_localctx, 170, RULE_memberDot);
		int _la;
		try {
			State = 1834;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1808;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1811;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EOL || _la==WS );
				State = 1813;
				Match(Dot);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1814;
				Match(Dot);
				State = 1818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1815;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1820;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1824;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1821;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1826;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1827;
				Match(QuestionMarkDot);
				State = 1831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1828;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1833;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DynamicIdentifierContext dynamicIdentifier() {
			return GetRuleContext<DynamicIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public MemberIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberIdentifierContext memberIdentifier() {
		MemberIdentifierContext _localctx = new MemberIdentifierContext(Context, State);
		EnterRule(_localctx, 172, RULE_memberIdentifier);
		try {
			State = 1840;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1836;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1837;
				dynamicIdentifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1838;
				keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1839;
				literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext[] propertyName() {
			return GetRuleContexts<PropertyNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName(int i) {
			return GetRuleContext<PropertyNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext[] dereference() {
			return GetRuleContexts<DereferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference(int i) {
			return GetRuleContext<DereferenceContext>(i);
		}
		public DynamicIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicIdentifierContext dynamicIdentifier() {
		DynamicIdentifierContext _localctx = new DynamicIdentifierContext(Context, State);
		EnterRule(_localctx, 174, RULE_dynamicIdentifier);
		try {
			int _alt;
			State = 1859;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Parse:
			case Reg:
			case Read:
			case Files:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1842;
				propertyName();
				State = 1843;
				dereference();
				State = 1848;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,251,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 1846;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NullLiteral:
						case Unset:
						case True:
						case False:
						case DecimalLiteral:
						case HexIntegerLiteral:
						case OctalIntegerLiteral:
						case OctalIntegerLiteral2:
						case BinaryIntegerLiteral:
						case Break:
						case Do:
						case Instanceof:
						case Switch:
						case Case:
						case Default:
						case Else:
						case Catch:
						case Finally:
						case Return:
						case Continue:
						case For:
						case While:
						case Parse:
						case Reg:
						case Read:
						case Files:
						case Loop:
						case Until:
						case This:
						case If:
						case Throw:
						case Delete:
						case In:
						case Try:
						case Yield:
						case Is:
						case Contains:
						case VerbalAnd:
						case VerbalNot:
						case VerbalOr:
						case Goto:
						case Get:
						case Set:
						case Class:
						case Enum:
						case Extends:
						case Super:
						case Base:
						case Export:
						case Import:
						case From:
						case As:
						case Async:
						case Await:
						case Static:
						case Global:
						case Local:
						case Identifier:
						case StringLiteral:
							{
							State = 1844;
							propertyName();
							}
							break;
						case DerefStart:
							{
							State = 1845;
							dereference();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 1850;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,251,Context);
				}
				}
				break;
			case DerefStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1851;
				dereference();
				State = 1856;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,253,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 1854;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NullLiteral:
						case Unset:
						case True:
						case False:
						case DecimalLiteral:
						case HexIntegerLiteral:
						case OctalIntegerLiteral:
						case OctalIntegerLiteral2:
						case BinaryIntegerLiteral:
						case Break:
						case Do:
						case Instanceof:
						case Switch:
						case Case:
						case Default:
						case Else:
						case Catch:
						case Finally:
						case Return:
						case Continue:
						case For:
						case While:
						case Parse:
						case Reg:
						case Read:
						case Files:
						case Loop:
						case Until:
						case This:
						case If:
						case Throw:
						case Delete:
						case In:
						case Try:
						case Yield:
						case Is:
						case Contains:
						case VerbalAnd:
						case VerbalNot:
						case VerbalOr:
						case Goto:
						case Get:
						case Set:
						case Class:
						case Enum:
						case Extends:
						case Super:
						case Base:
						case Export:
						case Import:
						case From:
						case As:
						case Async:
						case Await:
						case Static:
						case Global:
						case Local:
						case Identifier:
						case StringLiteral:
							{
							State = 1852;
							propertyName();
							}
							break;
						case DerefStart:
							{
							State = 1853;
							dereference();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 1858;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,253,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 176, RULE_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1861;
			Match(Assign);
			State = 1862;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableContext assignable() {
		AssignableContext _localctx = new AssignableContext(Context, State);
		EnterRule(_localctx, 178, RULE_assignable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1864;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 180, RULE_objectLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1866;
			Match(OpenBrace);
			State = 1870;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1867;
				s();
				}
				}
				State = 1872;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DerefStart || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 9223372036854775807L) != 0)) {
				{
				State = 1873;
				propertyAssignment();
				State = 1884;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,257,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1877;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 1874;
							Match(WS);
							}
							}
							State = 1879;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1880;
						Match(Comma);
						State = 1881;
						propertyAssignment();
						}
						} 
					}
					State = 1886;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,257,Context);
				}
				State = 1890;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1887;
					s();
					}
					}
					State = 1892;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1895;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadPrefixContext functionHeadPrefix() {
			return GetRuleContext<FunctionHeadPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeadContext functionHead() {
		FunctionHeadContext _localctx = new FunctionHeadContext(Context, State);
		EnterRule(_localctx, 182, RULE_functionHead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1898;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,260,Context) ) {
			case 1:
				{
				State = 1897;
				functionHeadPrefix();
				}
				break;
			}
			State = 1900;
			identifierName();
			State = 1901;
			Match(OpenParen);
			State = 1903;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply || _la==BitAnd || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2364354625299300353L) != 0)) {
				{
				State = 1902;
				formalParameterList();
				}
			}

			State = 1905;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeadPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Async() { return GetTokens(MainParser.Async); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async(int i) {
			return GetToken(MainParser.Async, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Static() { return GetTokens(MainParser.Static); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static(int i) {
			return GetToken(MainParser.Static, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public FunctionHeadPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHeadPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHeadPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeadPrefixContext functionHeadPrefix() {
		FunctionHeadPrefixContext _localctx = new FunctionHeadPrefixContext(Context, State);
		EnterRule(_localctx, 184, RULE_functionHeadPrefix);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1914;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1907;
					_la = TokenStream.LA(1);
					if ( !(_la==Async || _la==Static) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1911;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1908;
						Match(WS);
						}
						}
						State = 1913;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1916;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,263,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadPrefixContext functionHeadPrefix() {
			return GetRuleContext<FunctionHeadPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionExpressionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionExpressionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpressionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionHeadContext functionExpressionHead() {
		FunctionExpressionHeadContext _localctx = new FunctionExpressionHeadContext(Context, State);
		EnterRule(_localctx, 186, RULE_functionExpressionHead);
		int _la;
		try {
			State = 1927;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1918;
				functionHead();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1920;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Async || _la==Static) {
					{
					State = 1919;
					functionHeadPrefix();
					}
				}

				State = 1922;
				Match(OpenParen);
				State = 1924;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply || _la==BitAnd || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2364354625299300353L) != 0)) {
					{
					State = 1923;
					formalParameterList();
					}
				}

				State = 1926;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FatArrowExpressionHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadPrefixContext functionHeadPrefix() {
			return GetRuleContext<FunctionHeadPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpressionHeadContext functionExpressionHead() {
			return GetRuleContext<FunctionExpressionHeadContext>(0);
		}
		public FatArrowExpressionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fatArrowExpressionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFatArrowExpressionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FatArrowExpressionHeadContext fatArrowExpressionHead() {
		FatArrowExpressionHeadContext _localctx = new FatArrowExpressionHeadContext(Context, State);
		EnterRule(_localctx, 188, RULE_fatArrowExpressionHead);
		int _la;
		try {
			State = 1947;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1933;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 4611686018427379727L) != 0)) {
					{
					State = 1930;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
					case 1:
						{
						State = 1929;
						functionHeadPrefix();
						}
						break;
					}
					State = 1932;
					identifierName();
					}
				}

				State = 1935;
				Match(Multiply);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1937;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
				case 1:
					{
					State = 1936;
					functionHeadPrefix();
					}
					break;
				}
				State = 1940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BitAnd) {
					{
					State = 1939;
					Match(BitAnd);
					}
				}

				State = 1942;
				identifierName();
				State = 1944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QuestionMark) {
					{
					State = 1943;
					Match(QuestionMark);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1946;
				functionExpressionHead();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 190, RULE_functionBody);
		int _la;
		try {
			State = 1958;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Arrow:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1949;
				Match(Arrow);
				State = 1950;
				expression(0);
				}
				break;
			case OpenBrace:
			case EOL:
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1951;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1956;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1957;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(MainParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(MainParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(MainParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(MainParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(MainParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivideAssign() { return GetToken(MainParser.IntegerDivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConcatenateAssign() { return GetToken(MainParser.ConcatenateAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(MainParser.BitOrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(MainParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(MainParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(MainParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(MainParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogicalAssign() { return GetToken(MainParser.RightShiftLogicalAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PowerAssign() { return GetToken(MainParser.PowerAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullishCoalescingAssign() { return GetToken(MainParser.NullishCoalescingAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 192, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1960;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 9006924376834049L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BigintLiteralContext bigintLiteral() {
			return GetRuleContext<BigintLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(MainParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 194, RULE_literal);
		int _la;
		try {
			State = 1966;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1962;
				boolean();
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1963;
				numericLiteral();
				}
				break;
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1964;
				bigintLiteral();
				}
				break;
			case NullLiteral:
			case Unset:
			case StringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1965;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 4611686018427387907L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(MainParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(MainParser.False, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 196, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1968;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(MainParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(MainParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral() { return GetToken(MainParser.OctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral2() { return GetToken(MainParser.OctalIntegerLiteral2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryIntegerLiteral() { return GetToken(MainParser.BinaryIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 198, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1970;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BigintLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigDecimalIntegerLiteral() { return GetToken(MainParser.BigDecimalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigHexIntegerLiteral() { return GetToken(MainParser.BigHexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigOctalIntegerLiteral() { return GetToken(MainParser.BigOctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigBinaryIntegerLiteral() { return GetToken(MainParser.BigBinaryIntegerLiteral, 0); }
		public BigintLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bigintLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBigintLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BigintLiteralContext bigintLiteral() {
		BigintLiteralContext _localctx = new BigintLiteralContext(Context, State);
		EnterRule(_localctx, 200, RULE_bigintLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1972;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(MainParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 202, RULE_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974;
			Match(Get);
			State = 1975;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(MainParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 204, RULE_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1977;
			Match(Set);
			State = 1978;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 206, RULE_identifierName);
		try {
			State = 1982;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1980;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1981;
				reservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(MainParser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(MainParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(MainParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(MainParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Base() { return GetToken(MainParser.Base, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(MainParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(MainParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(MainParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MainParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(MainParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(MainParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Parse() { return GetToken(MainParser.Parse, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Reg() { return GetToken(MainParser.Reg, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Read() { return GetToken(MainParser.Read, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Files() { return GetToken(MainParser.Files, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 208, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1984;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2364354625299300353L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 210, RULE_reservedWord);
		try {
			State = 1989;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1986;
				keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1987;
				Match(Unset);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1988;
				boolean();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(MainParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(MainParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MainParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MainParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MainParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MainParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(MainParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(MainParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MainParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(MainParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(MainParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(MainParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(MainParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(MainParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(MainParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(MainParser.Contains, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(MainParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(MainParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(MainParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 212, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1991;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 1142243045026942977L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(MainParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public SContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SContext s() {
		SContext _localctx = new SContext(Context, State);
		EnterRule(_localctx, 214, RULE_s);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1993;
			_la = TokenStream.LA(1);
			if ( !(_la==EOL || _la==WS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MainParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 216, RULE_eos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1995;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==EOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return statement_sempred((StatementContext)_localctx, predIndex);
		case 36: return untilProduction_sempred((UntilProductionContext)_localctx, predIndex);
		case 37: return elseProduction_sempred((ElseProductionContext)_localctx, predIndex);
		case 38: return iterationStatement_sempred((IterationStatementContext)_localctx, predIndex);
		case 54: return finallyProduction_sempred((FinallyProductionContext)_localctx, predIndex);
		case 81: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 82: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 83: return primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool statement_sempred(StatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.isFunctionCallStatement();
		}
		return true;
	}
	private bool untilProduction_sempred(UntilProductionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return !this.second(Until);
		}
		return true;
	}
	private bool elseProduction_sempred(ElseProductionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return !this.second(Else);
		}
		return true;
	}
	private bool iterationStatement_sempred(IterationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return this.isValidLoopExpression();
		}
		return true;
	}
	private bool finallyProduction_sempred(FinallyProductionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return !this.second(Finally);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 22);
		case 6: return Precpred(Context, 20);
		case 7: return Precpred(Context, 19);
		case 8: return Precpred(Context, 18);
		case 9: return Precpred(Context, 17);
		case 10: return Precpred(Context, 16);
		case 11: return Precpred(Context, 15);
		case 12: return Precpred(Context, 14);
		case 13: return Precpred(Context, 13);
		case 14: return Precpred(Context, 12);
		case 15: return Precpred(Context, 11);
		case 16: return Precpred(Context, 8);
		case 17: return Precpred(Context, 7);
		case 18: return Precpred(Context, 6);
		case 19: return Precpred(Context, 5);
		case 20: return Precpred(Context, 24);
		case 21: return Precpred(Context, 10);
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 20);
		case 23: return Precpred(Context, 18);
		case 24: return Precpred(Context, 17);
		case 25: return Precpred(Context, 16);
		case 26: return Precpred(Context, 15);
		case 27: return Precpred(Context, 14);
		case 28: return Precpred(Context, 13);
		case 29: return Precpred(Context, 12);
		case 30: return Precpred(Context, 11);
		case 31: return Precpred(Context, 10);
		case 32: return Precpred(Context, 9);
		case 33: return Precpred(Context, 6);
		case 34: return Precpred(Context, 5);
		case 35: return Precpred(Context, 4);
		case 36: return Precpred(Context, 3);
		case 37: return Precpred(Context, 22);
		case 38: return Precpred(Context, 8);
		}
		return true;
	}
	private bool primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,185,1998,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,1,0,1,0,1,0,1,0,3,0,223,
		8,0,1,1,1,1,1,1,1,1,1,1,4,1,230,8,1,11,1,12,1,231,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,3,2,241,8,2,1,3,1,3,3,3,245,8,3,1,3,1,3,1,3,1,3,1,3,3,3,252,8,
		3,1,3,1,3,3,3,256,8,3,1,3,1,3,1,3,3,3,261,8,3,1,3,1,3,1,3,3,3,266,8,3,
		3,3,268,8,3,1,4,1,4,1,5,1,5,1,5,5,5,275,8,5,10,5,12,5,278,9,5,1,5,5,5,
		281,8,5,10,5,12,5,284,9,5,1,5,1,5,3,5,288,8,5,1,5,1,5,3,5,292,8,5,1,5,
		3,5,295,8,5,1,6,1,6,1,7,1,7,1,7,5,7,302,8,7,10,7,12,7,305,9,7,1,7,5,7,
		308,8,7,10,7,12,7,311,9,7,1,7,1,7,3,7,315,8,7,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,335,8,8,1,9,1,9,1,
		10,1,10,5,10,341,8,10,10,10,12,10,344,9,10,1,10,3,10,347,8,10,1,10,1,10,
		1,11,1,11,1,11,4,11,354,8,11,11,11,12,11,355,1,12,1,12,5,12,360,8,12,10,
		12,12,12,363,9,12,1,12,3,12,366,8,12,1,13,1,13,5,13,370,8,13,10,13,12,
		13,373,9,13,1,13,1,13,1,14,1,14,5,14,379,8,14,10,14,12,14,382,9,14,1,14,
		1,14,1,15,1,15,5,15,388,8,15,10,15,12,15,391,9,15,1,15,1,15,1,16,3,16,
		396,8,16,1,16,1,16,3,16,400,8,16,1,16,1,16,1,16,3,16,405,8,16,1,17,1,17,
		1,17,5,17,410,8,17,10,17,12,17,413,9,17,1,17,1,17,5,17,417,8,17,10,17,
		12,17,420,9,17,1,17,1,17,5,17,424,8,17,10,17,12,17,427,9,17,1,17,3,17,
		430,8,17,3,17,432,8,17,1,17,1,17,1,18,1,18,1,18,3,18,439,8,18,1,19,1,19,
		3,19,443,8,19,1,20,1,20,1,21,1,21,5,21,449,8,21,10,21,12,21,452,9,21,1,
		21,1,21,1,22,1,22,3,22,458,8,22,1,22,1,22,3,22,462,8,22,1,23,1,23,1,23,
		1,24,1,24,1,24,3,24,470,8,24,1,25,1,25,3,25,474,8,25,1,25,1,25,3,25,478,
		8,25,1,25,1,25,1,25,3,25,483,8,25,1,26,1,26,1,26,1,26,1,26,3,26,490,8,
		26,3,26,492,8,26,1,27,1,27,1,27,5,27,497,8,27,10,27,12,27,500,9,27,1,27,
		1,27,5,27,504,8,27,10,27,12,27,507,9,27,1,27,1,27,5,27,511,8,27,10,27,
		12,27,514,9,27,1,27,3,27,517,8,27,3,27,519,8,27,1,27,1,27,1,28,1,28,1,
		28,3,28,526,8,28,1,29,1,29,3,29,530,8,29,1,30,1,30,5,30,534,8,30,10,30,
		12,30,537,9,30,1,30,1,30,5,30,541,8,30,10,30,12,30,544,9,30,1,31,1,31,
		1,31,1,31,1,31,3,31,551,8,31,1,32,1,32,4,32,555,8,32,11,32,12,32,556,1,
		32,3,32,560,8,32,1,33,1,33,1,34,1,34,5,34,566,8,34,10,34,12,34,569,9,34,
		1,34,1,34,5,34,573,8,34,10,34,12,34,576,9,34,1,34,1,34,1,34,1,35,4,35,
		582,8,35,11,35,12,35,583,1,35,1,35,3,35,588,8,35,1,36,1,36,1,36,5,36,593,
		8,36,10,36,12,36,596,9,36,1,36,1,36,3,36,600,8,36,1,37,1,37,1,37,5,37,
		605,8,37,10,37,12,37,608,9,37,1,37,1,37,3,37,612,8,37,1,38,1,38,1,38,5,
		38,617,8,38,10,38,12,38,620,9,38,1,38,1,38,5,38,624,8,38,10,38,12,38,627,
		9,38,1,38,1,38,3,38,631,8,38,5,38,633,8,38,10,38,12,38,636,9,38,1,38,5,
		38,639,8,38,10,38,12,38,642,9,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,5,
		38,651,8,38,10,38,12,38,654,9,38,1,38,1,38,5,38,658,8,38,10,38,12,38,661,
		9,38,3,38,663,8,38,1,38,1,38,1,38,1,38,1,38,1,38,5,38,671,8,38,10,38,12,
		38,674,9,38,1,38,1,38,5,38,678,8,38,10,38,12,38,681,9,38,1,38,1,38,1,38,
		1,38,1,38,1,38,5,38,689,8,38,10,38,12,38,692,9,38,1,38,1,38,5,38,696,8,
		38,10,38,12,38,699,9,38,1,38,1,38,1,38,1,38,3,38,705,8,38,1,39,3,39,708,
		8,39,1,39,5,39,711,8,39,10,39,12,39,714,9,39,1,39,1,39,3,39,718,8,39,5,
		39,720,8,39,10,39,12,39,723,9,39,1,39,5,39,726,8,39,10,39,12,39,729,9,
		39,1,39,1,39,5,39,733,8,39,10,39,12,39,736,9,39,1,39,1,39,1,39,3,39,741,
		8,39,1,39,5,39,744,8,39,10,39,12,39,747,9,39,1,39,1,39,3,39,751,8,39,5,
		39,753,8,39,10,39,12,39,756,9,39,1,39,5,39,759,8,39,10,39,12,39,762,9,
		39,1,39,1,39,5,39,766,8,39,10,39,12,39,769,9,39,1,39,1,39,1,39,3,39,774,
		8,39,1,40,1,40,5,40,778,8,40,10,40,12,40,781,9,40,1,40,1,40,1,40,1,40,
		1,40,3,40,788,8,40,1,41,1,41,5,41,792,8,41,10,41,12,41,795,9,41,1,41,1,
		41,1,41,1,41,1,41,3,41,802,8,41,1,42,1,42,5,42,806,8,42,10,42,12,42,809,
		9,42,1,42,3,42,812,8,42,1,43,1,43,5,43,816,8,43,10,43,12,43,819,9,43,1,
		43,3,43,822,8,43,1,44,1,44,5,44,826,8,44,10,44,12,44,829,9,44,1,44,3,44,
		832,8,44,1,44,5,44,835,8,44,10,44,12,44,838,9,44,1,44,1,44,3,44,842,8,
		44,1,44,5,44,845,8,44,10,44,12,44,848,9,44,1,44,1,44,1,45,1,45,5,45,854,
		8,45,10,45,12,45,857,9,45,1,45,5,45,860,8,45,10,45,12,45,863,9,45,1,45,
		1,45,1,46,1,46,5,46,869,8,46,10,46,12,46,872,9,46,1,46,1,46,3,46,876,8,
		46,1,46,5,46,879,8,46,10,46,12,46,882,9,46,1,46,1,46,5,46,886,8,46,10,
		46,12,46,889,9,46,1,46,1,46,3,46,893,8,46,1,47,1,47,1,47,1,48,1,48,5,48,
		900,8,48,10,48,12,48,903,9,48,1,48,1,48,1,48,5,48,908,8,48,10,48,12,48,
		911,9,48,1,48,1,48,1,48,1,48,3,48,917,8,48,1,49,1,49,5,49,921,8,49,10,
		49,12,49,924,9,49,1,49,3,49,927,8,49,1,50,1,50,5,50,931,8,50,10,50,12,
		50,934,9,50,1,50,1,50,5,50,938,8,50,10,50,12,50,941,9,50,1,50,1,50,1,50,
		1,51,1,51,1,51,5,51,949,8,51,10,51,12,51,952,9,51,1,51,1,51,5,51,956,8,
		51,10,51,12,51,959,9,51,3,51,961,8,51,1,51,1,51,1,52,1,52,5,52,967,8,52,
		10,52,12,52,970,9,52,1,52,3,52,973,8,52,1,52,5,52,976,8,52,10,52,12,52,
		979,9,52,1,52,3,52,982,8,52,1,52,1,52,1,52,5,52,987,8,52,10,52,12,52,990,
		9,52,1,52,3,52,993,8,52,1,52,5,52,996,8,52,10,52,12,52,999,9,52,1,52,3,
		52,1002,8,52,1,52,1,52,1,52,5,52,1007,8,52,10,52,12,52,1010,9,52,1,52,
		1,52,1,52,5,52,1015,8,52,10,52,12,52,1018,9,52,1,52,1,52,1,52,5,52,1023,
		8,52,10,52,12,52,1026,9,52,1,52,1,52,1,52,5,52,1031,8,52,10,52,12,52,1034,
		9,52,1,52,1,52,1,52,1,52,3,52,1040,8,52,1,53,1,53,5,53,1044,8,53,10,53,
		12,53,1047,9,53,1,53,1,53,5,53,1051,8,53,10,53,12,53,1054,9,53,1,54,1,
		54,1,54,5,54,1059,8,54,10,54,12,54,1062,9,54,1,54,1,54,3,54,1066,8,54,
		1,55,1,55,1,55,1,56,1,56,5,56,1073,8,56,10,56,12,56,1076,9,56,1,56,1,56,
		4,56,1080,8,56,11,56,12,56,1081,1,56,1,56,4,56,1086,8,56,11,56,12,56,1087,
		1,56,3,56,1091,8,56,1,56,5,56,1094,8,56,10,56,12,56,1097,9,56,1,56,1,56,
		1,57,1,57,1,57,5,57,1104,8,57,10,57,12,57,1107,9,57,1,58,1,58,1,58,1,58,
		1,58,5,58,1114,8,58,10,58,12,58,1117,9,58,1,58,1,58,1,59,1,59,1,59,5,59,
		1124,8,59,10,59,12,59,1127,9,59,3,59,1129,8,59,1,59,1,59,1,59,5,59,1134,
		8,59,10,59,12,59,1137,9,59,3,59,1139,8,59,1,59,1,59,5,59,1143,8,59,10,
		59,12,59,1146,9,59,1,59,1,59,5,59,1150,8,59,10,59,12,59,1153,9,59,1,59,
		3,59,1156,8,59,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,5,61,1167,
		8,61,10,61,12,61,1170,9,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,4,61,
		1180,8,61,11,61,12,61,1181,1,61,1,61,3,61,1186,8,61,1,62,1,62,1,62,1,62,
		3,62,1192,8,62,1,62,5,62,1195,8,62,10,62,12,62,1198,9,62,1,62,1,62,3,62,
		1202,8,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,5,65,1213,8,65,
		10,65,12,65,1216,9,65,1,65,1,65,1,65,1,66,1,66,5,66,1223,8,66,10,66,12,
		66,1226,9,66,1,66,1,66,5,66,1230,8,66,10,66,12,66,1233,9,66,1,66,1,66,
		1,67,3,67,1238,8,67,1,67,1,67,1,67,1,67,3,67,1244,8,67,1,68,1,68,3,68,
		1248,8,68,1,68,3,68,1251,8,68,1,69,1,69,5,69,1255,8,69,10,69,12,69,1258,
		9,69,1,69,1,69,5,69,1262,8,69,10,69,12,69,1265,9,69,3,69,1267,8,69,1,69,
		1,69,1,70,1,70,5,70,1273,8,70,10,70,12,70,1276,9,70,1,70,1,70,5,70,1280,
		8,70,10,70,12,70,1283,9,70,1,70,1,70,1,71,5,71,1288,8,71,10,71,12,71,1291,
		9,71,1,71,5,71,1294,8,71,10,71,12,71,1297,9,71,1,71,1,71,5,71,1301,8,71,
		10,71,12,71,1304,9,71,1,71,1,71,3,71,1308,8,71,5,71,1310,8,71,10,71,12,
		71,1313,9,71,1,72,1,72,1,72,1,72,1,73,1,73,5,73,1321,8,73,10,73,12,73,
		1324,9,73,1,73,1,73,5,73,1328,8,73,10,73,12,73,1331,9,73,1,73,1,73,1,74,
		1,74,1,74,1,74,3,74,1339,8,74,1,75,1,75,1,75,1,75,1,76,1,76,5,76,1347,
		8,76,10,76,12,76,1350,9,76,1,76,1,76,3,76,1354,8,76,5,76,1356,8,76,10,
		76,12,76,1359,9,76,1,76,5,76,1362,8,76,10,76,12,76,1365,9,76,1,76,1,76,
		3,76,1369,8,76,4,76,1371,8,76,11,76,12,76,1372,3,76,1375,8,76,1,77,1,77,
		3,77,1379,8,77,1,78,1,78,5,78,1383,8,78,10,78,12,78,1386,9,78,1,78,1,78,
		5,78,1390,8,78,10,78,12,78,1393,9,78,1,79,1,79,5,79,1397,8,79,10,79,12,
		79,1400,9,79,1,79,1,79,5,79,1404,8,79,10,79,12,79,1407,9,79,3,79,1409,
		8,79,1,79,1,79,1,80,1,80,5,80,1415,8,80,10,80,12,80,1418,9,80,1,80,1,80,
		5,80,1422,8,80,10,80,12,80,1425,9,80,1,80,1,80,1,81,1,81,1,81,1,81,5,81,
		1433,8,81,10,81,12,81,1436,9,81,1,81,1,81,1,81,1,81,5,81,1442,8,81,10,
		81,12,81,1445,9,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
		81,5,81,1458,8,81,10,81,12,81,1461,9,81,1,81,1,81,1,81,3,81,1466,8,81,
		1,81,1,81,1,81,1,81,1,81,1,81,5,81,1474,8,81,10,81,12,81,1477,9,81,1,81,
		1,81,1,81,5,81,1482,8,81,10,81,12,81,1485,9,81,1,81,1,81,5,81,1489,8,81,
		10,81,12,81,1492,9,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,1500,8,81,10,
		81,12,81,1503,9,81,1,81,1,81,5,81,1507,8,81,10,81,12,81,1510,9,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,4,81,1522,8,81,11,81,12,81,
		1523,3,81,1526,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,3,81,1541,8,81,1,81,1,81,1,81,1,81,3,81,1547,8,81,1,81,
		1,81,1,81,1,81,1,81,1,81,5,81,1555,8,81,10,81,12,81,1558,9,81,1,81,1,81,
		5,81,1562,8,81,10,81,12,81,1565,9,81,1,81,1,81,5,81,1569,8,81,10,81,12,
		81,1572,9,81,1,81,1,81,5,81,1576,8,81,10,81,12,81,1579,9,81,1,81,1,81,
		1,81,1,81,1,81,1,81,5,81,1587,8,81,10,81,12,81,1590,9,81,1,81,1,81,5,81,
		1594,8,81,10,81,12,81,1597,9,81,1,81,5,81,1600,8,81,10,81,12,81,1603,9,
		81,1,82,1,82,1,82,1,82,5,82,1609,8,82,10,82,12,82,1612,9,82,1,82,1,82,
		1,82,1,82,5,82,1618,8,82,10,82,12,82,1621,9,82,1,82,1,82,1,82,1,82,1,82,
		1,82,3,82,1629,8,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1637,8,82,10,82,
		12,82,1640,9,82,1,82,1,82,1,82,5,82,1645,8,82,10,82,12,82,1648,9,82,1,
		82,1,82,5,82,1652,8,82,10,82,12,82,1655,9,82,1,82,1,82,1,82,1,82,1,82,
		1,82,5,82,1663,8,82,10,82,12,82,1666,9,82,1,82,1,82,5,82,1670,8,82,10,
		82,12,82,1673,9,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,4,
		82,1685,8,82,11,82,12,82,1686,3,82,1689,8,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1704,8,82,1,82,1,82,1,82,
		1,82,3,82,1710,8,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1718,8,82,10,82,
		12,82,1721,9,82,1,82,1,82,5,82,1725,8,82,10,82,12,82,1728,9,82,1,82,1,
		82,5,82,1732,8,82,10,82,12,82,1735,9,82,1,82,1,82,5,82,1739,8,82,10,82,
		12,82,1742,9,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1750,8,82,10,82,12,
		82,1753,9,82,1,82,1,82,5,82,1757,8,82,10,82,12,82,1760,9,82,1,82,5,82,
		1763,8,82,10,82,12,82,1766,9,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
		1,83,1,83,1,83,1,83,1,83,3,83,1781,8,83,1,83,1,83,5,83,1785,8,83,10,83,
		12,83,1788,9,83,1,84,1,84,1,84,3,84,1793,8,84,1,84,3,84,1796,8,84,1,84,
		1,84,1,84,3,84,1801,8,84,1,84,3,84,1804,8,84,1,84,3,84,1807,8,84,1,85,
		4,85,1810,8,85,11,85,12,85,1811,1,85,1,85,1,85,5,85,1817,8,85,10,85,12,
		85,1820,9,85,1,85,5,85,1823,8,85,10,85,12,85,1826,9,85,1,85,1,85,5,85,
		1830,8,85,10,85,12,85,1833,9,85,3,85,1835,8,85,1,86,1,86,1,86,1,86,3,86,
		1841,8,86,1,87,1,87,1,87,1,87,5,87,1847,8,87,10,87,12,87,1850,9,87,1,87,
		1,87,1,87,5,87,1855,8,87,10,87,12,87,1858,9,87,3,87,1860,8,87,1,88,1,88,
		1,88,1,89,1,89,1,90,1,90,5,90,1869,8,90,10,90,12,90,1872,9,90,1,90,1,90,
		5,90,1876,8,90,10,90,12,90,1879,9,90,1,90,1,90,5,90,1883,8,90,10,90,12,
		90,1886,9,90,1,90,5,90,1889,8,90,10,90,12,90,1892,9,90,3,90,1894,8,90,
		1,90,1,90,1,91,3,91,1899,8,91,1,91,1,91,1,91,3,91,1904,8,91,1,91,1,91,
		1,92,1,92,5,92,1910,8,92,10,92,12,92,1913,9,92,4,92,1915,8,92,11,92,12,
		92,1916,1,93,1,93,3,93,1921,8,93,1,93,1,93,3,93,1925,8,93,1,93,3,93,1928,
		8,93,1,94,3,94,1931,8,94,1,94,3,94,1934,8,94,1,94,1,94,3,94,1938,8,94,
		1,94,3,94,1941,8,94,1,94,1,94,3,94,1945,8,94,1,94,3,94,1948,8,94,1,95,
		1,95,1,95,5,95,1953,8,95,10,95,12,95,1956,9,95,1,95,3,95,1959,8,95,1,96,
		1,96,1,97,1,97,1,97,1,97,3,97,1967,8,97,1,98,1,98,1,99,1,99,1,100,1,100,
		1,101,1,101,1,101,1,102,1,102,1,102,1,103,1,103,3,103,1983,8,103,1,104,
		1,104,1,105,1,105,1,105,3,105,1990,8,105,1,106,1,106,1,107,1,107,1,108,
		1,108,1,108,0,3,162,164,166,109,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
		156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
		192,194,196,198,200,202,204,206,208,210,212,214,216,0,24,1,0,135,136,1,
		0,126,128,3,0,106,106,125,125,129,129,1,0,22,23,1,0,94,97,1,0,131,132,
		2,0,15,15,28,28,1,0,24,27,1,0,28,30,1,0,24,25,1,0,35,37,1,0,38,41,1,0,
		42,45,3,0,83,83,104,104,107,108,2,0,16,16,20,20,2,0,124,124,126,126,2,
		0,14,14,52,66,2,0,68,69,130,130,1,0,70,71,1,0,72,76,1,0,77,80,8,0,68,68,
		82,82,86,86,94,97,100,100,113,119,122,123,129,129,9,0,69,69,81,81,83,85,
		87,93,98,99,101,112,118,118,120,121,123,128,1,1,131,131,2258,0,222,1,0,
		0,0,2,229,1,0,0,0,4,240,1,0,0,0,6,267,1,0,0,0,8,269,1,0,0,0,10,271,1,0,
		0,0,12,296,1,0,0,0,14,298,1,0,0,0,16,334,1,0,0,0,18,336,1,0,0,0,20,338,
		1,0,0,0,22,353,1,0,0,0,24,357,1,0,0,0,26,367,1,0,0,0,28,376,1,0,0,0,30,
		385,1,0,0,0,32,404,1,0,0,0,34,406,1,0,0,0,36,435,1,0,0,0,38,442,1,0,0,
		0,40,444,1,0,0,0,42,446,1,0,0,0,44,457,1,0,0,0,46,463,1,0,0,0,48,466,1,
		0,0,0,50,482,1,0,0,0,52,491,1,0,0,0,54,493,1,0,0,0,56,522,1,0,0,0,58,529,
		1,0,0,0,60,531,1,0,0,0,62,545,1,0,0,0,64,552,1,0,0,0,66,561,1,0,0,0,68,
		563,1,0,0,0,70,587,1,0,0,0,72,599,1,0,0,0,74,611,1,0,0,0,76,704,1,0,0,
		0,78,773,1,0,0,0,80,775,1,0,0,0,82,789,1,0,0,0,84,803,1,0,0,0,86,813,1,
		0,0,0,88,823,1,0,0,0,90,851,1,0,0,0,92,875,1,0,0,0,94,894,1,0,0,0,96,916,
		1,0,0,0,98,918,1,0,0,0,100,928,1,0,0,0,102,945,1,0,0,0,104,1039,1,0,0,
		0,106,1041,1,0,0,0,108,1065,1,0,0,0,110,1067,1,0,0,0,112,1070,1,0,0,0,
		114,1100,1,0,0,0,116,1108,1,0,0,0,118,1155,1,0,0,0,120,1157,1,0,0,0,122,
		1185,1,0,0,0,124,1201,1,0,0,0,126,1203,1,0,0,0,128,1206,1,0,0,0,130,1209,
		1,0,0,0,132,1231,1,0,0,0,134,1237,1,0,0,0,136,1250,1,0,0,0,138,1252,1,
		0,0,0,140,1270,1,0,0,0,142,1295,1,0,0,0,144,1314,1,0,0,0,146,1318,1,0,
		0,0,148,1338,1,0,0,0,150,1340,1,0,0,0,152,1374,1,0,0,0,154,1376,1,0,0,
		0,156,1380,1,0,0,0,158,1394,1,0,0,0,160,1412,1,0,0,0,162,1465,1,0,0,0,
		164,1628,1,0,0,0,166,1780,1,0,0,0,168,1806,1,0,0,0,170,1834,1,0,0,0,172,
		1840,1,0,0,0,174,1859,1,0,0,0,176,1861,1,0,0,0,178,1864,1,0,0,0,180,1866,
		1,0,0,0,182,1898,1,0,0,0,184,1914,1,0,0,0,186,1927,1,0,0,0,188,1947,1,
		0,0,0,190,1958,1,0,0,0,192,1960,1,0,0,0,194,1966,1,0,0,0,196,1968,1,0,
		0,0,198,1970,1,0,0,0,200,1972,1,0,0,0,202,1974,1,0,0,0,204,1977,1,0,0,
		0,206,1982,1,0,0,0,208,1984,1,0,0,0,210,1989,1,0,0,0,212,1991,1,0,0,0,
		214,1993,1,0,0,0,216,1995,1,0,0,0,218,219,3,2,1,0,219,220,5,0,0,1,220,
		223,1,0,0,0,221,223,5,0,0,1,222,218,1,0,0,0,222,221,1,0,0,0,223,1,1,0,
		0,0,224,225,3,4,2,0,225,226,3,216,108,0,226,230,1,0,0,0,227,230,5,132,
		0,0,228,230,5,131,0,0,229,224,1,0,0,0,229,227,1,0,0,0,229,228,1,0,0,0,
		230,231,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,3,1,0,0,0,233,241,
		3,112,56,0,234,235,5,34,0,0,235,241,3,6,3,0,236,241,3,8,4,0,237,241,3,
		10,5,0,238,241,3,14,7,0,239,241,3,16,8,0,240,233,1,0,0,0,240,234,1,0,0,
		0,240,236,1,0,0,0,240,237,1,0,0,0,240,238,1,0,0,0,240,239,1,0,0,0,241,
		5,1,0,0,0,242,244,5,142,0,0,243,245,3,164,82,0,244,243,1,0,0,0,244,245,
		1,0,0,0,245,268,1,0,0,0,246,251,5,146,0,0,247,252,5,184,0,0,248,252,5,
		182,0,0,249,250,5,183,0,0,250,252,5,184,0,0,251,247,1,0,0,0,251,248,1,
		0,0,0,251,249,1,0,0,0,252,268,1,0,0,0,253,255,5,143,0,0,254,256,3,198,
		99,0,255,254,1,0,0,0,255,256,1,0,0,0,256,268,1,0,0,0,257,260,5,145,0,0,
		258,261,3,198,99,0,259,261,3,196,98,0,260,258,1,0,0,0,260,259,1,0,0,0,
		260,261,1,0,0,0,261,268,1,0,0,0,262,265,5,144,0,0,263,266,3,198,99,0,264,
		266,3,196,98,0,265,263,1,0,0,0,265,264,1,0,0,0,265,266,1,0,0,0,266,268,
		1,0,0,0,267,242,1,0,0,0,267,246,1,0,0,0,267,253,1,0,0,0,267,257,1,0,0,
		0,267,262,1,0,0,0,268,7,1,0,0,0,269,270,5,5,0,0,270,9,1,0,0,0,271,276,
		5,4,0,0,272,273,5,131,0,0,273,275,5,4,0,0,274,272,1,0,0,0,275,278,1,0,
		0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,282,1,0,0,0,278,276,1,0,0,0,279,
		281,5,132,0,0,280,279,1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,
		1,0,0,0,283,294,1,0,0,0,284,282,1,0,0,0,285,295,3,12,6,0,286,288,5,131,
		0,0,287,286,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,0,289,295,3,110,55,0,
		290,292,5,131,0,0,291,290,1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,
		295,3,16,8,0,294,285,1,0,0,0,294,287,1,0,0,0,294,291,1,0,0,0,295,11,1,
		0,0,0,296,297,7,0,0,0,297,13,1,0,0,0,298,303,5,6,0,0,299,300,5,131,0,0,
		300,302,5,6,0,0,301,299,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,
		1,0,0,0,304,309,1,0,0,0,305,303,1,0,0,0,306,308,3,214,107,0,307,306,1,
		0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,314,1,0,0,0,
		311,309,1,0,0,0,312,315,3,110,55,0,313,315,3,16,8,0,314,312,1,0,0,0,314,
		313,1,0,0,0,315,15,1,0,0,0,316,335,3,24,12,0,317,335,3,68,34,0,318,335,
		3,76,38,0,319,335,3,80,40,0,320,335,3,82,41,0,321,335,3,84,42,0,322,335,
		3,86,43,0,323,335,3,94,47,0,324,335,3,96,48,0,325,335,3,88,44,0,326,335,
		3,98,49,0,327,335,3,100,50,0,328,335,3,26,13,0,329,335,3,28,14,0,330,331,
		4,8,0,0,331,335,3,64,32,0,332,335,3,18,9,0,333,335,3,66,33,0,334,316,1,
		0,0,0,334,317,1,0,0,0,334,318,1,0,0,0,334,319,1,0,0,0,334,320,1,0,0,0,
		334,321,1,0,0,0,334,322,1,0,0,0,334,323,1,0,0,0,334,324,1,0,0,0,334,325,
		1,0,0,0,334,326,1,0,0,0,334,327,1,0,0,0,334,328,1,0,0,0,334,329,1,0,0,
		0,334,330,1,0,0,0,334,332,1,0,0,0,334,333,1,0,0,0,335,17,1,0,0,0,336,337,
		3,20,10,0,337,19,1,0,0,0,338,342,5,11,0,0,339,341,3,214,107,0,340,339,
		1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,346,1,0,0,
		0,344,342,1,0,0,0,345,347,3,22,11,0,346,345,1,0,0,0,346,347,1,0,0,0,347,
		348,1,0,0,0,348,349,5,12,0,0,349,21,1,0,0,0,350,351,3,4,2,0,351,352,5,
		131,0,0,352,354,1,0,0,0,353,350,1,0,0,0,354,355,1,0,0,0,355,353,1,0,0,
		0,355,356,1,0,0,0,356,23,1,0,0,0,357,365,7,1,0,0,358,360,5,132,0,0,359,
		358,1,0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,364,1,
		0,0,0,363,361,1,0,0,0,364,366,3,60,30,0,365,361,1,0,0,0,365,366,1,0,0,
		0,366,25,1,0,0,0,367,371,5,125,0,0,368,370,5,132,0,0,369,368,1,0,0,0,370,
		373,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,371,1,
		0,0,0,374,375,3,164,82,0,375,27,1,0,0,0,376,380,5,103,0,0,377,379,5,132,
		0,0,378,377,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,
		383,1,0,0,0,382,380,1,0,0,0,383,384,3,164,82,0,384,29,1,0,0,0,385,389,
		5,121,0,0,386,388,5,132,0,0,387,386,1,0,0,0,388,391,1,0,0,0,389,387,1,
		0,0,0,389,390,1,0,0,0,390,392,1,0,0,0,391,389,1,0,0,0,392,393,3,32,16,
		0,393,31,1,0,0,0,394,396,3,42,21,0,395,394,1,0,0,0,395,396,1,0,0,0,396,
		399,1,0,0,0,397,400,3,44,22,0,398,400,3,34,17,0,399,397,1,0,0,0,399,398,
		1,0,0,0,400,401,1,0,0,0,401,402,3,46,23,0,402,405,1,0,0,0,403,405,5,130,
		0,0,404,395,1,0,0,0,404,403,1,0,0,0,405,33,1,0,0,0,406,418,5,11,0,0,407,
		411,3,36,18,0,408,410,5,132,0,0,409,408,1,0,0,0,410,413,1,0,0,0,411,409,
		1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,411,1,0,0,0,414,415,5,13,0,
		0,415,417,1,0,0,0,416,407,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,
		419,1,0,0,0,419,431,1,0,0,0,420,418,1,0,0,0,421,429,3,36,18,0,422,424,
		5,132,0,0,423,422,1,0,0,0,424,427,1,0,0,0,425,423,1,0,0,0,425,426,1,0,
		0,0,426,428,1,0,0,0,427,425,1,0,0,0,428,430,5,13,0,0,429,425,1,0,0,0,429,
		430,1,0,0,0,430,432,1,0,0,0,431,421,1,0,0,0,431,432,1,0,0,0,432,433,1,
		0,0,0,433,434,5,12,0,0,434,35,1,0,0,0,435,438,3,38,19,0,436,437,5,123,
		0,0,437,439,3,40,20,0,438,436,1,0,0,0,438,439,1,0,0,0,439,37,1,0,0,0,440,
		443,3,206,103,0,441,443,5,130,0,0,442,440,1,0,0,0,442,441,1,0,0,0,443,
		39,1,0,0,0,444,445,7,2,0,0,445,41,1,0,0,0,446,450,3,48,24,0,447,449,5,
		132,0,0,448,447,1,0,0,0,449,452,1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,
		0,451,453,1,0,0,0,452,450,1,0,0,0,453,454,5,13,0,0,454,43,1,0,0,0,455,
		458,5,28,0,0,456,458,3,206,103,0,457,455,1,0,0,0,457,456,1,0,0,0,458,461,
		1,0,0,0,459,460,5,123,0,0,460,462,3,206,103,0,461,459,1,0,0,0,461,462,
		1,0,0,0,462,45,1,0,0,0,463,464,5,122,0,0,464,465,5,130,0,0,465,47,1,0,
		0,0,466,469,3,206,103,0,467,468,5,123,0,0,468,470,3,206,103,0,469,467,
		1,0,0,0,469,470,1,0,0,0,470,49,1,0,0,0,471,473,5,120,0,0,472,474,5,86,
		0,0,473,472,1,0,0,0,473,474,1,0,0,0,474,477,1,0,0,0,475,478,3,52,26,0,
		476,478,3,58,29,0,477,475,1,0,0,0,477,476,1,0,0,0,478,483,1,0,0,0,479,
		480,5,120,0,0,480,481,5,86,0,0,481,483,3,164,82,0,482,471,1,0,0,0,482,
		479,1,0,0,0,483,51,1,0,0,0,484,485,3,44,22,0,485,486,3,46,23,0,486,492,
		1,0,0,0,487,489,3,54,27,0,488,490,3,46,23,0,489,488,1,0,0,0,489,490,1,
		0,0,0,490,492,1,0,0,0,491,484,1,0,0,0,491,487,1,0,0,0,492,53,1,0,0,0,493,
		505,5,11,0,0,494,498,3,56,28,0,495,497,5,132,0,0,496,495,1,0,0,0,497,500,
		1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,501,1,0,0,0,500,498,1,0,0,
		0,501,502,5,13,0,0,502,504,1,0,0,0,503,494,1,0,0,0,504,507,1,0,0,0,505,
		503,1,0,0,0,505,506,1,0,0,0,506,518,1,0,0,0,507,505,1,0,0,0,508,516,3,
		56,28,0,509,511,5,132,0,0,510,509,1,0,0,0,511,514,1,0,0,0,512,510,1,0,
		0,0,512,513,1,0,0,0,513,515,1,0,0,0,514,512,1,0,0,0,515,517,5,13,0,0,516,
		512,1,0,0,0,516,517,1,0,0,0,517,519,1,0,0,0,518,508,1,0,0,0,518,519,1,
		0,0,0,519,520,1,0,0,0,520,521,5,12,0,0,521,55,1,0,0,0,522,525,3,38,19,
		0,523,524,5,123,0,0,524,526,3,38,19,0,525,523,1,0,0,0,525,526,1,0,0,0,
		526,57,1,0,0,0,527,530,3,112,56,0,528,530,3,110,55,0,529,527,1,0,0,0,529,
		528,1,0,0,0,530,59,1,0,0,0,531,542,3,62,31,0,532,534,5,132,0,0,533,532,
		1,0,0,0,534,537,1,0,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,538,1,0,0,
		0,537,535,1,0,0,0,538,539,5,13,0,0,539,541,3,62,31,0,540,535,1,0,0,0,541,
		544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,61,1,0,0,0,544,542,1,0,
		0,0,545,550,3,178,89,0,546,547,3,192,96,0,547,548,3,162,81,0,548,551,1,
		0,0,0,549,551,7,3,0,0,550,546,1,0,0,0,550,549,1,0,0,0,550,551,1,0,0,0,
		551,63,1,0,0,0,552,559,3,166,83,0,553,555,5,132,0,0,554,553,1,0,0,0,555,
		556,1,0,0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,558,1,0,0,0,558,560,3,
		152,76,0,559,554,1,0,0,0,559,560,1,0,0,0,560,65,1,0,0,0,561,562,3,156,
		78,0,562,67,1,0,0,0,563,567,5,101,0,0,564,566,3,214,107,0,565,564,1,0,
		0,0,566,569,1,0,0,0,567,565,1,0,0,0,567,568,1,0,0,0,568,570,1,0,0,0,569,
		567,1,0,0,0,570,574,3,164,82,0,571,573,5,132,0,0,572,571,1,0,0,0,573,576,
		1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,577,1,0,0,0,576,574,1,0,0,
		0,577,578,3,70,35,0,578,579,3,74,37,0,579,69,1,0,0,0,580,582,5,131,0,0,
		581,580,1,0,0,0,582,583,1,0,0,0,583,581,1,0,0,0,583,584,1,0,0,0,584,585,
		1,0,0,0,585,588,3,16,8,0,586,588,3,20,10,0,587,581,1,0,0,0,587,586,1,0,
		0,0,588,71,1,0,0,0,589,590,5,131,0,0,590,594,5,99,0,0,591,593,3,214,107,
		0,592,591,1,0,0,0,593,596,1,0,0,0,594,592,1,0,0,0,594,595,1,0,0,0,595,
		597,1,0,0,0,596,594,1,0,0,0,597,600,3,164,82,0,598,600,4,36,1,0,599,589,
		1,0,0,0,599,598,1,0,0,0,600,73,1,0,0,0,601,602,5,131,0,0,602,606,5,87,
		0,0,603,605,3,214,107,0,604,603,1,0,0,0,605,608,1,0,0,0,606,604,1,0,0,
		0,606,607,1,0,0,0,607,609,1,0,0,0,608,606,1,0,0,0,609,612,3,16,8,0,610,
		612,4,37,2,0,611,601,1,0,0,0,611,610,1,0,0,0,612,75,1,0,0,0,613,614,5,
		98,0,0,614,618,7,4,0,0,615,617,5,132,0,0,616,615,1,0,0,0,617,620,1,0,0,
		0,618,616,1,0,0,0,618,619,1,0,0,0,619,621,1,0,0,0,620,618,1,0,0,0,621,
		634,3,164,82,0,622,624,5,132,0,0,623,622,1,0,0,0,624,627,1,0,0,0,625,623,
		1,0,0,0,625,626,1,0,0,0,626,628,1,0,0,0,627,625,1,0,0,0,628,630,5,13,0,
		0,629,631,3,164,82,0,630,629,1,0,0,0,630,631,1,0,0,0,631,633,1,0,0,0,632,
		625,1,0,0,0,633,636,1,0,0,0,634,632,1,0,0,0,634,635,1,0,0,0,635,640,1,
		0,0,0,636,634,1,0,0,0,637,639,5,132,0,0,638,637,1,0,0,0,639,642,1,0,0,
		0,640,638,1,0,0,0,640,641,1,0,0,0,641,643,1,0,0,0,642,640,1,0,0,0,643,
		644,3,70,35,0,644,645,3,72,36,0,645,646,3,74,37,0,646,705,1,0,0,0,647,
		648,4,38,3,0,648,652,5,98,0,0,649,651,5,132,0,0,650,649,1,0,0,0,651,654,
		1,0,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,662,1,0,0,0,654,652,1,0,0,
		0,655,659,3,164,82,0,656,658,5,132,0,0,657,656,1,0,0,0,658,661,1,0,0,0,
		659,657,1,0,0,0,659,660,1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,662,655,
		1,0,0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,665,3,70,35,0,665,666,3,72,
		36,0,666,667,3,74,37,0,667,705,1,0,0,0,668,672,5,93,0,0,669,671,5,132,
		0,0,670,669,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,
		675,1,0,0,0,674,672,1,0,0,0,675,679,3,164,82,0,676,678,5,132,0,0,677,676,
		1,0,0,0,678,681,1,0,0,0,679,677,1,0,0,0,679,680,1,0,0,0,680,682,1,0,0,
		0,681,679,1,0,0,0,682,683,3,70,35,0,683,684,3,72,36,0,684,685,3,74,37,
		0,685,705,1,0,0,0,686,690,5,92,0,0,687,689,5,132,0,0,688,687,1,0,0,0,689,
		692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,693,1,0,0,0,692,690,1,
		0,0,0,693,697,3,78,39,0,694,696,5,132,0,0,695,694,1,0,0,0,696,699,1,0,
		0,0,697,695,1,0,0,0,697,698,1,0,0,0,698,700,1,0,0,0,699,697,1,0,0,0,700,
		701,3,70,35,0,701,702,3,72,36,0,702,703,3,74,37,0,703,705,1,0,0,0,704,
		613,1,0,0,0,704,647,1,0,0,0,704,668,1,0,0,0,704,686,1,0,0,0,705,77,1,0,
		0,0,706,708,3,178,89,0,707,706,1,0,0,0,707,708,1,0,0,0,708,721,1,0,0,0,
		709,711,5,132,0,0,710,709,1,0,0,0,711,714,1,0,0,0,712,710,1,0,0,0,712,
		713,1,0,0,0,713,715,1,0,0,0,714,712,1,0,0,0,715,717,5,13,0,0,716,718,3,
		178,89,0,717,716,1,0,0,0,717,718,1,0,0,0,718,720,1,0,0,0,719,712,1,0,0,
		0,720,723,1,0,0,0,721,719,1,0,0,0,721,722,1,0,0,0,722,727,1,0,0,0,723,
		721,1,0,0,0,724,726,5,132,0,0,725,724,1,0,0,0,726,729,1,0,0,0,727,725,
		1,0,0,0,727,728,1,0,0,0,728,730,1,0,0,0,729,727,1,0,0,0,730,734,5,104,
		0,0,731,733,5,132,0,0,732,731,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,
		734,735,1,0,0,0,735,737,1,0,0,0,736,734,1,0,0,0,737,774,3,164,82,0,738,
		740,5,9,0,0,739,741,3,178,89,0,740,739,1,0,0,0,740,741,1,0,0,0,741,754,
		1,0,0,0,742,744,5,132,0,0,743,742,1,0,0,0,744,747,1,0,0,0,745,743,1,0,
		0,0,745,746,1,0,0,0,746,748,1,0,0,0,747,745,1,0,0,0,748,750,5,13,0,0,749,
		751,3,178,89,0,750,749,1,0,0,0,750,751,1,0,0,0,751,753,1,0,0,0,752,745,
		1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,0,754,755,1,0,0,0,755,760,1,0,0,
		0,756,754,1,0,0,0,757,759,7,5,0,0,758,757,1,0,0,0,759,762,1,0,0,0,760,
		758,1,0,0,0,760,761,1,0,0,0,761,763,1,0,0,0,762,760,1,0,0,0,763,767,5,
		104,0,0,764,766,7,5,0,0,765,764,1,0,0,0,766,769,1,0,0,0,767,765,1,0,0,
		0,767,768,1,0,0,0,768,770,1,0,0,0,769,767,1,0,0,0,770,771,3,164,82,0,771,
		772,5,10,0,0,772,774,1,0,0,0,773,707,1,0,0,0,773,738,1,0,0,0,774,79,1,
		0,0,0,775,779,5,91,0,0,776,778,5,132,0,0,777,776,1,0,0,0,778,781,1,0,0,
		0,779,777,1,0,0,0,779,780,1,0,0,0,780,787,1,0,0,0,781,779,1,0,0,0,782,
		788,3,148,74,0,783,784,5,9,0,0,784,785,3,148,74,0,785,786,5,10,0,0,786,
		788,1,0,0,0,787,782,1,0,0,0,787,783,1,0,0,0,787,788,1,0,0,0,788,81,1,0,
		0,0,789,793,5,81,0,0,790,792,5,132,0,0,791,790,1,0,0,0,792,795,1,0,0,0,
		793,791,1,0,0,0,793,794,1,0,0,0,794,801,1,0,0,0,795,793,1,0,0,0,796,797,
		5,9,0,0,797,798,3,148,74,0,798,799,5,10,0,0,799,802,1,0,0,0,800,802,3,
		148,74,0,801,796,1,0,0,0,801,800,1,0,0,0,801,802,1,0,0,0,802,83,1,0,0,
		0,803,807,5,90,0,0,804,806,5,132,0,0,805,804,1,0,0,0,806,809,1,0,0,0,807,
		805,1,0,0,0,807,808,1,0,0,0,808,811,1,0,0,0,809,807,1,0,0,0,810,812,3,
		162,81,0,811,810,1,0,0,0,811,812,1,0,0,0,812,85,1,0,0,0,813,817,5,106,
		0,0,814,816,5,132,0,0,815,814,1,0,0,0,816,819,1,0,0,0,817,815,1,0,0,0,
		817,818,1,0,0,0,818,821,1,0,0,0,819,817,1,0,0,0,820,822,3,162,81,0,821,
		820,1,0,0,0,821,822,1,0,0,0,822,87,1,0,0,0,823,827,5,84,0,0,824,826,5,
		132,0,0,825,824,1,0,0,0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,1,0,0,
		0,828,831,1,0,0,0,829,827,1,0,0,0,830,832,3,164,82,0,831,830,1,0,0,0,831,
		832,1,0,0,0,832,841,1,0,0,0,833,835,5,132,0,0,834,833,1,0,0,0,835,838,
		1,0,0,0,836,834,1,0,0,0,836,837,1,0,0,0,837,839,1,0,0,0,838,836,1,0,0,
		0,839,840,5,13,0,0,840,842,3,194,97,0,841,836,1,0,0,0,841,842,1,0,0,0,
		842,846,1,0,0,0,843,845,3,214,107,0,844,843,1,0,0,0,845,848,1,0,0,0,846,
		844,1,0,0,0,846,847,1,0,0,0,847,849,1,0,0,0,848,846,1,0,0,0,849,850,3,
		90,45,0,850,89,1,0,0,0,851,855,5,11,0,0,852,854,3,214,107,0,853,852,1,
		0,0,0,854,857,1,0,0,0,855,853,1,0,0,0,855,856,1,0,0,0,856,861,1,0,0,0,
		857,855,1,0,0,0,858,860,3,92,46,0,859,858,1,0,0,0,860,863,1,0,0,0,861,
		859,1,0,0,0,861,862,1,0,0,0,862,864,1,0,0,0,863,861,1,0,0,0,864,865,5,
		12,0,0,865,91,1,0,0,0,866,870,5,85,0,0,867,869,5,132,0,0,868,867,1,0,0,
		0,869,872,1,0,0,0,870,868,1,0,0,0,870,871,1,0,0,0,871,873,1,0,0,0,872,
		870,1,0,0,0,873,876,3,156,78,0,874,876,5,86,0,0,875,866,1,0,0,0,875,874,
		1,0,0,0,876,880,1,0,0,0,877,879,5,132,0,0,878,877,1,0,0,0,879,882,1,0,
		0,0,880,878,1,0,0,0,880,881,1,0,0,0,881,883,1,0,0,0,882,880,1,0,0,0,883,
		892,5,17,0,0,884,886,3,214,107,0,885,884,1,0,0,0,886,889,1,0,0,0,887,885,
		1,0,0,0,887,888,1,0,0,0,888,890,1,0,0,0,889,887,1,0,0,0,890,893,3,22,11,
		0,891,893,5,131,0,0,892,887,1,0,0,0,892,891,1,0,0,0,893,93,1,0,0,0,894,
		895,3,208,104,0,895,896,5,17,0,0,896,95,1,0,0,0,897,901,5,112,0,0,898,
		900,5,132,0,0,899,898,1,0,0,0,900,903,1,0,0,0,901,899,1,0,0,0,901,902,
		1,0,0,0,902,904,1,0,0,0,903,901,1,0,0,0,904,917,3,148,74,0,905,909,5,112,
		0,0,906,908,5,132,0,0,907,906,1,0,0,0,908,911,1,0,0,0,909,907,1,0,0,0,
		909,910,1,0,0,0,910,912,1,0,0,0,911,909,1,0,0,0,912,913,5,9,0,0,913,914,
		3,148,74,0,914,915,5,10,0,0,915,917,1,0,0,0,916,897,1,0,0,0,916,905,1,
		0,0,0,917,97,1,0,0,0,918,922,5,102,0,0,919,921,5,132,0,0,920,919,1,0,0,
		0,921,924,1,0,0,0,922,920,1,0,0,0,922,923,1,0,0,0,923,926,1,0,0,0,924,
		922,1,0,0,0,925,927,3,164,82,0,926,925,1,0,0,0,926,927,1,0,0,0,927,99,
		1,0,0,0,928,932,5,105,0,0,929,931,3,214,107,0,930,929,1,0,0,0,931,934,
		1,0,0,0,932,930,1,0,0,0,932,933,1,0,0,0,933,935,1,0,0,0,934,932,1,0,0,
		0,935,939,3,16,8,0,936,938,3,102,51,0,937,936,1,0,0,0,938,941,1,0,0,0,
		939,937,1,0,0,0,939,940,1,0,0,0,940,942,1,0,0,0,941,939,1,0,0,0,942,943,
		3,74,37,0,943,944,3,108,54,0,944,101,1,0,0,0,945,946,5,131,0,0,946,950,
		5,88,0,0,947,949,5,132,0,0,948,947,1,0,0,0,949,952,1,0,0,0,950,948,1,0,
		0,0,950,951,1,0,0,0,951,960,1,0,0,0,952,950,1,0,0,0,953,957,3,104,52,0,
		954,956,5,132,0,0,955,954,1,0,0,0,956,959,1,0,0,0,957,955,1,0,0,0,957,
		958,1,0,0,0,958,961,1,0,0,0,959,957,1,0,0,0,960,953,1,0,0,0,960,961,1,
		0,0,0,961,962,1,0,0,0,962,963,3,70,35,0,963,103,1,0,0,0,964,972,3,106,
		53,0,965,967,5,132,0,0,966,965,1,0,0,0,967,970,1,0,0,0,968,966,1,0,0,0,
		968,969,1,0,0,0,969,971,1,0,0,0,970,968,1,0,0,0,971,973,5,123,0,0,972,
		968,1,0,0,0,972,973,1,0,0,0,973,981,1,0,0,0,974,976,5,132,0,0,975,974,
		1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,977,978,1,0,0,0,978,980,1,0,0,
		0,979,977,1,0,0,0,980,982,3,208,104,0,981,977,1,0,0,0,981,982,1,0,0,0,
		982,1040,1,0,0,0,983,984,5,9,0,0,984,992,3,106,53,0,985,987,5,132,0,0,
		986,985,1,0,0,0,987,990,1,0,0,0,988,986,1,0,0,0,988,989,1,0,0,0,989,991,
		1,0,0,0,990,988,1,0,0,0,991,993,5,123,0,0,992,988,1,0,0,0,992,993,1,0,
		0,0,993,1001,1,0,0,0,994,996,5,132,0,0,995,994,1,0,0,0,996,999,1,0,0,0,
		997,995,1,0,0,0,997,998,1,0,0,0,998,1000,1,0,0,0,999,997,1,0,0,0,1000,
		1002,3,208,104,0,1001,997,1,0,0,0,1001,1002,1,0,0,0,1002,1003,1,0,0,0,
		1003,1004,5,10,0,0,1004,1040,1,0,0,0,1005,1007,5,132,0,0,1006,1005,1,0,
		0,0,1007,1010,1,0,0,0,1008,1006,1,0,0,0,1008,1009,1,0,0,0,1009,1011,1,
		0,0,0,1010,1008,1,0,0,0,1011,1012,5,123,0,0,1012,1016,1,0,0,0,1013,1015,
		5,132,0,0,1014,1013,1,0,0,0,1015,1018,1,0,0,0,1016,1014,1,0,0,0,1016,1017,
		1,0,0,0,1017,1019,1,0,0,0,1018,1016,1,0,0,0,1019,1040,3,208,104,0,1020,
		1024,5,9,0,0,1021,1023,5,132,0,0,1022,1021,1,0,0,0,1023,1026,1,0,0,0,1024,
		1022,1,0,0,0,1024,1025,1,0,0,0,1025,1027,1,0,0,0,1026,1024,1,0,0,0,1027,
		1028,5,123,0,0,1028,1032,1,0,0,0,1029,1031,5,132,0,0,1030,1029,1,0,0,0,
		1031,1034,1,0,0,0,1032,1030,1,0,0,0,1032,1033,1,0,0,0,1033,1035,1,0,0,
		0,1034,1032,1,0,0,0,1035,1036,3,208,104,0,1036,1037,1,0,0,0,1037,1038,
		5,10,0,0,1038,1040,1,0,0,0,1039,964,1,0,0,0,1039,983,1,0,0,0,1039,1008,
		1,0,0,0,1039,1020,1,0,0,0,1040,105,1,0,0,0,1041,1052,3,208,104,0,1042,
		1044,5,132,0,0,1043,1042,1,0,0,0,1044,1047,1,0,0,0,1045,1043,1,0,0,0,1045,
		1046,1,0,0,0,1046,1048,1,0,0,0,1047,1045,1,0,0,0,1048,1049,5,13,0,0,1049,
		1051,3,208,104,0,1050,1045,1,0,0,0,1051,1054,1,0,0,0,1052,1050,1,0,0,0,
		1052,1053,1,0,0,0,1053,107,1,0,0,0,1054,1052,1,0,0,0,1055,1056,5,131,0,
		0,1056,1060,5,89,0,0,1057,1059,3,214,107,0,1058,1057,1,0,0,0,1059,1062,
		1,0,0,0,1060,1058,1,0,0,0,1060,1061,1,0,0,0,1061,1063,1,0,0,0,1062,1060,
		1,0,0,0,1063,1066,3,16,8,0,1064,1066,4,54,4,0,1065,1055,1,0,0,0,1065,1064,
		1,0,0,0,1066,109,1,0,0,0,1067,1068,3,182,91,0,1068,1069,3,190,95,0,1069,
		111,1,0,0,0,1070,1074,5,115,0,0,1071,1073,5,132,0,0,1072,1071,1,0,0,0,
		1073,1076,1,0,0,0,1074,1072,1,0,0,0,1074,1075,1,0,0,0,1075,1077,1,0,0,
		0,1076,1074,1,0,0,0,1077,1090,3,208,104,0,1078,1080,5,132,0,0,1079,1078,
		1,0,0,0,1080,1081,1,0,0,0,1081,1079,1,0,0,0,1081,1082,1,0,0,0,1082,1083,
		1,0,0,0,1083,1085,5,117,0,0,1084,1086,5,132,0,0,1085,1084,1,0,0,0,1086,
		1087,1,0,0,0,1087,1085,1,0,0,0,1087,1088,1,0,0,0,1088,1089,1,0,0,0,1089,
		1091,3,114,57,0,1090,1079,1,0,0,0,1090,1091,1,0,0,0,1091,1095,1,0,0,0,
		1092,1094,3,214,107,0,1093,1092,1,0,0,0,1094,1097,1,0,0,0,1095,1093,1,
		0,0,0,1095,1096,1,0,0,0,1096,1098,1,0,0,0,1097,1095,1,0,0,0,1098,1099,
		3,116,58,0,1099,113,1,0,0,0,1100,1105,3,208,104,0,1101,1102,5,20,0,0,1102,
		1104,3,208,104,0,1103,1101,1,0,0,0,1104,1107,1,0,0,0,1105,1103,1,0,0,0,
		1105,1106,1,0,0,0,1106,115,1,0,0,0,1107,1105,1,0,0,0,1108,1115,5,11,0,
		0,1109,1110,3,118,59,0,1110,1111,5,131,0,0,1111,1114,1,0,0,0,1112,1114,
		5,131,0,0,1113,1109,1,0,0,0,1113,1112,1,0,0,0,1114,1117,1,0,0,0,1115,1113,
		1,0,0,0,1115,1116,1,0,0,0,1116,1118,1,0,0,0,1117,1115,1,0,0,0,1118,1119,
		5,12,0,0,1119,117,1,0,0,0,1120,1156,3,120,60,0,1121,1125,5,126,0,0,1122,
		1124,5,132,0,0,1123,1122,1,0,0,0,1124,1127,1,0,0,0,1125,1123,1,0,0,0,1125,
		1126,1,0,0,0,1126,1129,1,0,0,0,1127,1125,1,0,0,0,1128,1121,1,0,0,0,1128,
		1129,1,0,0,0,1129,1130,1,0,0,0,1130,1156,3,122,61,0,1131,1135,5,126,0,
		0,1132,1134,5,132,0,0,1133,1132,1,0,0,0,1134,1137,1,0,0,0,1135,1133,1,
		0,0,0,1135,1136,1,0,0,0,1136,1139,1,0,0,0,1137,1135,1,0,0,0,1138,1131,
		1,0,0,0,1138,1139,1,0,0,0,1139,1140,1,0,0,0,1140,1151,3,130,65,0,1141,
		1143,5,132,0,0,1142,1141,1,0,0,0,1143,1146,1,0,0,0,1144,1142,1,0,0,0,1144,
		1145,1,0,0,0,1145,1147,1,0,0,0,1146,1144,1,0,0,0,1147,1148,5,13,0,0,1148,
		1150,3,130,65,0,1149,1144,1,0,0,0,1150,1153,1,0,0,0,1151,1149,1,0,0,0,
		1151,1152,1,0,0,0,1152,1156,1,0,0,0,1153,1151,1,0,0,0,1154,1156,3,112,
		56,0,1155,1120,1,0,0,0,1155,1128,1,0,0,0,1155,1138,1,0,0,0,1155,1154,1,
		0,0,0,1156,119,1,0,0,0,1157,1158,3,182,91,0,1158,1159,3,190,95,0,1159,
		121,1,0,0,0,1160,1161,3,124,62,0,1161,1162,5,67,0,0,1162,1163,3,162,81,
		0,1163,1186,1,0,0,0,1164,1168,3,124,62,0,1165,1167,3,214,107,0,1166,1165,
		1,0,0,0,1167,1170,1,0,0,0,1168,1166,1,0,0,0,1168,1169,1,0,0,0,1169,1171,
		1,0,0,0,1170,1168,1,0,0,0,1171,1179,5,11,0,0,1172,1173,3,126,63,0,1173,
		1174,5,131,0,0,1174,1180,1,0,0,0,1175,1176,3,128,64,0,1176,1177,5,131,
		0,0,1177,1180,1,0,0,0,1178,1180,5,131,0,0,1179,1172,1,0,0,0,1179,1175,
		1,0,0,0,1179,1178,1,0,0,0,1180,1181,1,0,0,0,1181,1179,1,0,0,0,1181,1182,
		1,0,0,0,1182,1183,1,0,0,0,1183,1184,5,12,0,0,1184,1186,1,0,0,0,1185,1160,
		1,0,0,0,1185,1164,1,0,0,0,1186,123,1,0,0,0,1187,1202,3,148,74,0,1188,1189,
		3,148,74,0,1189,1191,5,7,0,0,1190,1192,3,132,66,0,1191,1190,1,0,0,0,1191,
		1192,1,0,0,0,1192,1196,1,0,0,0,1193,1195,3,214,107,0,1194,1193,1,0,0,0,
		1195,1198,1,0,0,0,1196,1194,1,0,0,0,1196,1197,1,0,0,0,1197,1199,1,0,0,
		0,1198,1196,1,0,0,0,1199,1200,5,8,0,0,1200,1202,1,0,0,0,1201,1187,1,0,
		0,0,1201,1188,1,0,0,0,1202,125,1,0,0,0,1203,1204,5,113,0,0,1204,1205,3,
		190,95,0,1205,127,1,0,0,0,1206,1207,5,114,0,0,1207,1208,3,190,95,0,1208,
		129,1,0,0,0,1209,1214,3,148,74,0,1210,1211,5,20,0,0,1211,1213,3,148,74,
		0,1212,1210,1,0,0,0,1213,1216,1,0,0,0,1214,1212,1,0,0,0,1214,1215,1,0,
		0,0,1215,1217,1,0,0,0,1216,1214,1,0,0,0,1217,1218,5,14,0,0,1218,1219,3,
		162,81,0,1219,131,1,0,0,0,1220,1224,3,134,67,0,1221,1223,5,132,0,0,1222,
		1221,1,0,0,0,1223,1226,1,0,0,0,1224,1222,1,0,0,0,1224,1225,1,0,0,0,1225,
		1227,1,0,0,0,1226,1224,1,0,0,0,1227,1228,5,13,0,0,1228,1230,1,0,0,0,1229,
		1220,1,0,0,0,1230,1233,1,0,0,0,1231,1229,1,0,0,0,1231,1232,1,0,0,0,1232,
		1234,1,0,0,0,1233,1231,1,0,0,0,1234,1235,3,136,68,0,1235,133,1,0,0,0,1236,
		1238,5,47,0,0,1237,1236,1,0,0,0,1237,1238,1,0,0,0,1238,1239,1,0,0,0,1239,
		1243,3,208,104,0,1240,1241,5,14,0,0,1241,1244,3,162,81,0,1242,1244,5,15,
		0,0,1243,1240,1,0,0,0,1243,1242,1,0,0,0,1243,1244,1,0,0,0,1244,135,1,0,
		0,0,1245,1251,3,134,67,0,1246,1248,3,208,104,0,1247,1246,1,0,0,0,1247,
		1248,1,0,0,0,1248,1249,1,0,0,0,1249,1251,5,28,0,0,1250,1245,1,0,0,0,1250,
		1247,1,0,0,0,1251,137,1,0,0,0,1252,1256,5,7,0,0,1253,1255,7,5,0,0,1254,
		1253,1,0,0,0,1255,1258,1,0,0,0,1256,1254,1,0,0,0,1256,1257,1,0,0,0,1257,
		1266,1,0,0,0,1258,1256,1,0,0,0,1259,1263,3,152,76,0,1260,1262,7,5,0,0,
		1261,1260,1,0,0,0,1262,1265,1,0,0,0,1263,1261,1,0,0,0,1263,1264,1,0,0,
		0,1264,1267,1,0,0,0,1265,1263,1,0,0,0,1266,1259,1,0,0,0,1266,1267,1,0,
		0,0,1267,1268,1,0,0,0,1268,1269,5,8,0,0,1269,139,1,0,0,0,1270,1274,5,7,
		0,0,1271,1273,7,5,0,0,1272,1271,1,0,0,0,1273,1276,1,0,0,0,1274,1272,1,
		0,0,0,1274,1275,1,0,0,0,1275,1277,1,0,0,0,1276,1274,1,0,0,0,1277,1281,
		3,142,71,0,1278,1280,7,5,0,0,1279,1278,1,0,0,0,1280,1283,1,0,0,0,1281,
		1279,1,0,0,0,1281,1282,1,0,0,0,1282,1284,1,0,0,0,1283,1281,1,0,0,0,1284,
		1285,5,8,0,0,1285,141,1,0,0,0,1286,1288,5,132,0,0,1287,1286,1,0,0,0,1288,
		1291,1,0,0,0,1289,1287,1,0,0,0,1289,1290,1,0,0,0,1290,1292,1,0,0,0,1291,
		1289,1,0,0,0,1292,1294,5,13,0,0,1293,1289,1,0,0,0,1294,1297,1,0,0,0,1295,
		1293,1,0,0,0,1295,1296,1,0,0,0,1296,1298,1,0,0,0,1297,1295,1,0,0,0,1298,
		1311,3,144,72,0,1299,1301,5,132,0,0,1300,1299,1,0,0,0,1301,1304,1,0,0,
		0,1302,1300,1,0,0,0,1302,1303,1,0,0,0,1303,1305,1,0,0,0,1304,1302,1,0,
		0,0,1305,1307,5,13,0,0,1306,1308,3,144,72,0,1307,1306,1,0,0,0,1307,1308,
		1,0,0,0,1308,1310,1,0,0,0,1309,1302,1,0,0,0,1310,1313,1,0,0,0,1311,1309,
		1,0,0,0,1311,1312,1,0,0,0,1312,143,1,0,0,0,1313,1311,1,0,0,0,1314,1315,
		3,162,81,0,1315,1316,5,17,0,0,1316,1317,3,162,81,0,1317,145,1,0,0,0,1318,
		1322,3,172,86,0,1319,1321,7,5,0,0,1320,1319,1,0,0,0,1321,1324,1,0,0,0,
		1322,1320,1,0,0,0,1322,1323,1,0,0,0,1323,1325,1,0,0,0,1324,1322,1,0,0,
		0,1325,1329,5,17,0,0,1326,1328,7,5,0,0,1327,1326,1,0,0,0,1328,1331,1,0,
		0,0,1329,1327,1,0,0,0,1329,1330,1,0,0,0,1330,1332,1,0,0,0,1331,1329,1,
		0,0,0,1332,1333,3,162,81,0,1333,147,1,0,0,0,1334,1339,3,208,104,0,1335,
		1339,3,210,105,0,1336,1339,5,130,0,0,1337,1339,3,198,99,0,1338,1334,1,
		0,0,0,1338,1335,1,0,0,0,1338,1336,1,0,0,0,1338,1337,1,0,0,0,1339,149,1,
		0,0,0,1340,1341,5,1,0,0,1341,1342,3,162,81,0,1342,1343,5,2,0,0,1343,151,
		1,0,0,0,1344,1357,3,154,77,0,1345,1347,5,132,0,0,1346,1345,1,0,0,0,1347,
		1350,1,0,0,0,1348,1346,1,0,0,0,1348,1349,1,0,0,0,1349,1351,1,0,0,0,1350,
		1348,1,0,0,0,1351,1353,5,13,0,0,1352,1354,3,154,77,0,1353,1352,1,0,0,0,
		1353,1354,1,0,0,0,1354,1356,1,0,0,0,1355,1348,1,0,0,0,1356,1359,1,0,0,
		0,1357,1355,1,0,0,0,1357,1358,1,0,0,0,1358,1375,1,0,0,0,1359,1357,1,0,
		0,0,1360,1362,5,132,0,0,1361,1360,1,0,0,0,1362,1365,1,0,0,0,1363,1361,
		1,0,0,0,1363,1364,1,0,0,0,1364,1366,1,0,0,0,1365,1363,1,0,0,0,1366,1368,
		5,13,0,0,1367,1369,3,154,77,0,1368,1367,1,0,0,0,1368,1369,1,0,0,0,1369,
		1371,1,0,0,0,1370,1363,1,0,0,0,1371,1372,1,0,0,0,1372,1370,1,0,0,0,1372,
		1373,1,0,0,0,1373,1375,1,0,0,0,1374,1344,1,0,0,0,1374,1370,1,0,0,0,1375,
		153,1,0,0,0,1376,1378,3,162,81,0,1377,1379,7,6,0,0,1378,1377,1,0,0,0,1378,
		1379,1,0,0,0,1379,155,1,0,0,0,1380,1391,3,162,81,0,1381,1383,5,132,0,0,
		1382,1381,1,0,0,0,1383,1386,1,0,0,0,1384,1382,1,0,0,0,1384,1385,1,0,0,
		0,1385,1387,1,0,0,0,1386,1384,1,0,0,0,1387,1388,5,13,0,0,1388,1390,3,162,
		81,0,1389,1384,1,0,0,0,1390,1393,1,0,0,0,1391,1389,1,0,0,0,1391,1392,1,
		0,0,0,1392,157,1,0,0,0,1393,1391,1,0,0,0,1394,1398,5,7,0,0,1395,1397,3,
		214,107,0,1396,1395,1,0,0,0,1397,1400,1,0,0,0,1398,1396,1,0,0,0,1398,1399,
		1,0,0,0,1399,1408,1,0,0,0,1400,1398,1,0,0,0,1401,1405,3,152,76,0,1402,
		1404,3,214,107,0,1403,1402,1,0,0,0,1404,1407,1,0,0,0,1405,1403,1,0,0,0,
		1405,1406,1,0,0,0,1406,1409,1,0,0,0,1407,1405,1,0,0,0,1408,1401,1,0,0,
		0,1408,1409,1,0,0,0,1409,1410,1,0,0,0,1410,1411,5,8,0,0,1411,159,1,0,0,
		0,1412,1416,5,7,0,0,1413,1415,3,214,107,0,1414,1413,1,0,0,0,1415,1418,
		1,0,0,0,1416,1414,1,0,0,0,1416,1417,1,0,0,0,1417,1419,1,0,0,0,1418,1416,
		1,0,0,0,1419,1423,3,152,76,0,1420,1422,3,214,107,0,1421,1420,1,0,0,0,1422,
		1425,1,0,0,0,1423,1421,1,0,0,0,1423,1424,1,0,0,0,1424,1426,1,0,0,0,1425,
		1423,1,0,0,0,1426,1427,5,8,0,0,1427,161,1,0,0,0,1428,1429,6,81,-1,0,1429,
		1430,7,3,0,0,1430,1466,3,162,81,23,1431,1433,7,5,0,0,1432,1431,1,0,0,0,
		1433,1436,1,0,0,0,1434,1432,1,0,0,0,1434,1435,1,0,0,0,1435,1437,1,0,0,
		0,1436,1434,1,0,0,0,1437,1438,7,7,0,0,1438,1466,3,162,81,21,1439,1443,
		5,110,0,0,1440,1442,5,132,0,0,1441,1440,1,0,0,0,1442,1445,1,0,0,0,1443,
		1441,1,0,0,0,1443,1444,1,0,0,0,1444,1446,1,0,0,0,1445,1443,1,0,0,0,1446,
		1466,3,162,81,9,1447,1448,3,166,83,0,1448,1449,3,192,96,0,1449,1450,3,
		162,81,4,1450,1466,1,0,0,0,1451,1452,3,188,94,0,1452,1453,5,67,0,0,1453,
		1454,3,162,81,3,1454,1466,1,0,0,0,1455,1459,3,186,93,0,1456,1458,7,5,0,
		0,1457,1456,1,0,0,0,1458,1461,1,0,0,0,1459,1457,1,0,0,0,1459,1460,1,0,
		0,0,1460,1462,1,0,0,0,1461,1459,1,0,0,0,1462,1463,3,20,10,0,1463,1466,
		1,0,0,0,1464,1466,3,166,83,0,1465,1428,1,0,0,0,1465,1434,1,0,0,0,1465,
		1439,1,0,0,0,1465,1447,1,0,0,0,1465,1451,1,0,0,0,1465,1455,1,0,0,0,1465,
		1464,1,0,0,0,1466,1601,1,0,0,0,1467,1468,10,22,0,0,1468,1469,5,32,0,0,
		1469,1600,3,162,81,22,1470,1471,10,20,0,0,1471,1475,7,8,0,0,1472,1474,
		7,5,0,0,1473,1472,1,0,0,0,1474,1477,1,0,0,0,1475,1473,1,0,0,0,1475,1476,
		1,0,0,0,1476,1478,1,0,0,0,1477,1475,1,0,0,0,1478,1600,3,162,81,21,1479,
		1483,10,19,0,0,1480,1482,7,5,0,0,1481,1480,1,0,0,0,1482,1485,1,0,0,0,1483,
		1481,1,0,0,0,1483,1484,1,0,0,0,1484,1486,1,0,0,0,1485,1483,1,0,0,0,1486,
		1490,7,9,0,0,1487,1489,7,5,0,0,1488,1487,1,0,0,0,1489,1492,1,0,0,0,1490,
		1488,1,0,0,0,1490,1491,1,0,0,0,1491,1493,1,0,0,0,1492,1490,1,0,0,0,1493,
		1600,3,162,81,20,1494,1495,10,18,0,0,1495,1496,7,10,0,0,1496,1600,3,162,
		81,19,1497,1501,10,17,0,0,1498,1500,7,5,0,0,1499,1498,1,0,0,0,1500,1503,
		1,0,0,0,1501,1499,1,0,0,0,1501,1502,1,0,0,0,1502,1504,1,0,0,0,1503,1501,
		1,0,0,0,1504,1508,5,47,0,0,1505,1507,7,5,0,0,1506,1505,1,0,0,0,1507,1510,
		1,0,0,0,1508,1506,1,0,0,0,1508,1509,1,0,0,0,1509,1511,1,0,0,0,1510,1508,
		1,0,0,0,1511,1600,3,162,81,18,1512,1513,10,16,0,0,1513,1514,5,48,0,0,1514,
		1600,3,162,81,17,1515,1516,10,15,0,0,1516,1517,5,49,0,0,1517,1600,3,162,
		81,16,1518,1525,10,14,0,0,1519,1526,5,21,0,0,1520,1522,5,132,0,0,1521,
		1520,1,0,0,0,1522,1523,1,0,0,0,1523,1521,1,0,0,0,1523,1524,1,0,0,0,1524,
		1526,1,0,0,0,1525,1519,1,0,0,0,1525,1521,1,0,0,0,1526,1527,1,0,0,0,1527,
		1600,3,162,81,15,1528,1529,10,13,0,0,1529,1530,5,46,0,0,1530,1600,3,162,
		81,14,1531,1532,10,12,0,0,1532,1533,7,11,0,0,1533,1600,3,162,81,13,1534,
		1535,10,11,0,0,1535,1536,7,12,0,0,1536,1600,3,162,81,12,1537,1540,10,8,
		0,0,1538,1541,5,50,0,0,1539,1541,5,109,0,0,1540,1538,1,0,0,0,1540,1539,
		1,0,0,0,1541,1542,1,0,0,0,1542,1600,3,162,81,9,1543,1546,10,7,0,0,1544,
		1547,5,51,0,0,1545,1547,5,111,0,0,1546,1544,1,0,0,0,1546,1545,1,0,0,0,
		1547,1548,1,0,0,0,1548,1600,3,162,81,8,1549,1550,10,6,0,0,1550,1551,5,
		33,0,0,1551,1600,3,162,81,6,1552,1556,10,5,0,0,1553,1555,7,5,0,0,1554,
		1553,1,0,0,0,1555,1558,1,0,0,0,1556,1554,1,0,0,0,1556,1557,1,0,0,0,1557,
		1559,1,0,0,0,1558,1556,1,0,0,0,1559,1563,5,15,0,0,1560,1562,7,5,0,0,1561,
		1560,1,0,0,0,1562,1565,1,0,0,0,1563,1561,1,0,0,0,1563,1564,1,0,0,0,1564,
		1566,1,0,0,0,1565,1563,1,0,0,0,1566,1570,3,162,81,0,1567,1569,7,5,0,0,
		1568,1567,1,0,0,0,1569,1572,1,0,0,0,1570,1568,1,0,0,0,1570,1571,1,0,0,
		0,1571,1573,1,0,0,0,1572,1570,1,0,0,0,1573,1577,5,17,0,0,1574,1576,7,5,
		0,0,1575,1574,1,0,0,0,1576,1579,1,0,0,0,1577,1575,1,0,0,0,1577,1578,1,
		0,0,0,1578,1580,1,0,0,0,1579,1577,1,0,0,0,1580,1581,3,162,81,5,1581,1600,
		1,0,0,0,1582,1583,10,24,0,0,1583,1600,7,3,0,0,1584,1588,10,10,0,0,1585,
		1587,7,5,0,0,1586,1585,1,0,0,0,1587,1590,1,0,0,0,1588,1586,1,0,0,0,1588,
		1589,1,0,0,0,1589,1591,1,0,0,0,1590,1588,1,0,0,0,1591,1595,7,13,0,0,1592,
		1594,7,5,0,0,1593,1592,1,0,0,0,1594,1597,1,0,0,0,1595,1593,1,0,0,0,1595,
		1596,1,0,0,0,1596,1598,1,0,0,0,1597,1595,1,0,0,0,1598,1600,3,166,83,0,
		1599,1467,1,0,0,0,1599,1470,1,0,0,0,1599,1479,1,0,0,0,1599,1494,1,0,0,
		0,1599,1497,1,0,0,0,1599,1512,1,0,0,0,1599,1515,1,0,0,0,1599,1518,1,0,
		0,0,1599,1528,1,0,0,0,1599,1531,1,0,0,0,1599,1534,1,0,0,0,1599,1537,1,
		0,0,0,1599,1543,1,0,0,0,1599,1549,1,0,0,0,1599,1552,1,0,0,0,1599,1582,
		1,0,0,0,1599,1584,1,0,0,0,1600,1603,1,0,0,0,1601,1599,1,0,0,0,1601,1602,
		1,0,0,0,1602,163,1,0,0,0,1603,1601,1,0,0,0,1604,1605,6,82,-1,0,1605,1606,
		7,3,0,0,1606,1629,3,164,82,21,1607,1609,7,5,0,0,1608,1607,1,0,0,0,1609,
		1612,1,0,0,0,1610,1608,1,0,0,0,1610,1611,1,0,0,0,1611,1613,1,0,0,0,1612,
		1610,1,0,0,0,1613,1614,7,7,0,0,1614,1629,3,164,82,19,1615,1619,5,110,0,
		0,1616,1618,5,132,0,0,1617,1616,1,0,0,0,1618,1621,1,0,0,0,1619,1617,1,
		0,0,0,1619,1620,1,0,0,0,1620,1622,1,0,0,0,1621,1619,1,0,0,0,1622,1629,
		3,164,82,7,1623,1624,3,166,83,0,1624,1625,3,192,96,0,1625,1626,3,164,82,
		2,1626,1629,1,0,0,0,1627,1629,3,166,83,0,1628,1604,1,0,0,0,1628,1610,1,
		0,0,0,1628,1615,1,0,0,0,1628,1623,1,0,0,0,1628,1627,1,0,0,0,1629,1764,
		1,0,0,0,1630,1631,10,20,0,0,1631,1632,5,32,0,0,1632,1763,3,164,82,20,1633,
		1634,10,18,0,0,1634,1638,7,8,0,0,1635,1637,7,5,0,0,1636,1635,1,0,0,0,1637,
		1640,1,0,0,0,1638,1636,1,0,0,0,1638,1639,1,0,0,0,1639,1641,1,0,0,0,1640,
		1638,1,0,0,0,1641,1763,3,164,82,19,1642,1646,10,17,0,0,1643,1645,7,5,0,
		0,1644,1643,1,0,0,0,1645,1648,1,0,0,0,1646,1644,1,0,0,0,1646,1647,1,0,
		0,0,1647,1649,1,0,0,0,1648,1646,1,0,0,0,1649,1653,7,9,0,0,1650,1652,7,
		5,0,0,1651,1650,1,0,0,0,1652,1655,1,0,0,0,1653,1651,1,0,0,0,1653,1654,
		1,0,0,0,1654,1656,1,0,0,0,1655,1653,1,0,0,0,1656,1763,3,164,82,18,1657,
		1658,10,16,0,0,1658,1659,7,10,0,0,1659,1763,3,164,82,17,1660,1664,10,15,
		0,0,1661,1663,7,5,0,0,1662,1661,1,0,0,0,1663,1666,1,0,0,0,1664,1662,1,
		0,0,0,1664,1665,1,0,0,0,1665,1667,1,0,0,0,1666,1664,1,0,0,0,1667,1671,
		5,47,0,0,1668,1670,7,5,0,0,1669,1668,1,0,0,0,1670,1673,1,0,0,0,1671,1669,
		1,0,0,0,1671,1672,1,0,0,0,1672,1674,1,0,0,0,1673,1671,1,0,0,0,1674,1763,
		3,164,82,16,1675,1676,10,14,0,0,1676,1677,5,48,0,0,1677,1763,3,164,82,
		15,1678,1679,10,13,0,0,1679,1680,5,49,0,0,1680,1763,3,164,82,14,1681,1688,
		10,12,0,0,1682,1689,5,21,0,0,1683,1685,5,132,0,0,1684,1683,1,0,0,0,1685,
		1686,1,0,0,0,1686,1684,1,0,0,0,1686,1687,1,0,0,0,1687,1689,1,0,0,0,1688,
		1682,1,0,0,0,1688,1684,1,0,0,0,1689,1690,1,0,0,0,1690,1763,3,164,82,13,
		1691,1692,10,11,0,0,1692,1693,5,46,0,0,1693,1763,3,164,82,12,1694,1695,
		10,10,0,0,1695,1696,7,11,0,0,1696,1763,3,164,82,11,1697,1698,10,9,0,0,
		1698,1699,7,12,0,0,1699,1763,3,164,82,10,1700,1703,10,6,0,0,1701,1704,
		5,50,0,0,1702,1704,5,109,0,0,1703,1701,1,0,0,0,1703,1702,1,0,0,0,1704,
		1705,1,0,0,0,1705,1763,3,164,82,7,1706,1709,10,5,0,0,1707,1710,5,51,0,
		0,1708,1710,5,111,0,0,1709,1707,1,0,0,0,1709,1708,1,0,0,0,1710,1711,1,
		0,0,0,1711,1763,3,164,82,6,1712,1713,10,4,0,0,1713,1714,5,33,0,0,1714,
		1763,3,164,82,4,1715,1719,10,3,0,0,1716,1718,7,5,0,0,1717,1716,1,0,0,0,
		1718,1721,1,0,0,0,1719,1717,1,0,0,0,1719,1720,1,0,0,0,1720,1722,1,0,0,
		0,1721,1719,1,0,0,0,1722,1726,5,15,0,0,1723,1725,7,5,0,0,1724,1723,1,0,
		0,0,1725,1728,1,0,0,0,1726,1724,1,0,0,0,1726,1727,1,0,0,0,1727,1729,1,
		0,0,0,1728,1726,1,0,0,0,1729,1733,3,162,81,0,1730,1732,7,5,0,0,1731,1730,
		1,0,0,0,1732,1735,1,0,0,0,1733,1731,1,0,0,0,1733,1734,1,0,0,0,1734,1736,
		1,0,0,0,1735,1733,1,0,0,0,1736,1740,5,17,0,0,1737,1739,7,5,0,0,1738,1737,
		1,0,0,0,1739,1742,1,0,0,0,1740,1738,1,0,0,0,1740,1741,1,0,0,0,1741,1743,
		1,0,0,0,1742,1740,1,0,0,0,1743,1744,3,164,82,3,1744,1763,1,0,0,0,1745,
		1746,10,22,0,0,1746,1763,7,3,0,0,1747,1751,10,8,0,0,1748,1750,7,5,0,0,
		1749,1748,1,0,0,0,1750,1753,1,0,0,0,1751,1749,1,0,0,0,1751,1752,1,0,0,
		0,1752,1754,1,0,0,0,1753,1751,1,0,0,0,1754,1758,7,13,0,0,1755,1757,7,5,
		0,0,1756,1755,1,0,0,0,1757,1760,1,0,0,0,1758,1756,1,0,0,0,1758,1759,1,
		0,0,0,1759,1761,1,0,0,0,1760,1758,1,0,0,0,1761,1763,3,166,83,0,1762,1630,
		1,0,0,0,1762,1633,1,0,0,0,1762,1642,1,0,0,0,1762,1657,1,0,0,0,1762,1660,
		1,0,0,0,1762,1675,1,0,0,0,1762,1678,1,0,0,0,1762,1681,1,0,0,0,1762,1691,
		1,0,0,0,1762,1694,1,0,0,0,1762,1697,1,0,0,0,1762,1700,1,0,0,0,1762,1706,
		1,0,0,0,1762,1712,1,0,0,0,1762,1715,1,0,0,0,1762,1745,1,0,0,0,1762,1747,
		1,0,0,0,1763,1766,1,0,0,0,1764,1762,1,0,0,0,1764,1765,1,0,0,0,1765,165,
		1,0,0,0,1766,1764,1,0,0,0,1767,1768,6,83,-1,0,1768,1769,5,47,0,0,1769,
		1781,3,166,83,8,1770,1781,3,208,104,0,1771,1781,3,174,87,0,1772,1781,3,
		194,97,0,1773,1781,3,138,69,0,1774,1781,3,140,70,0,1775,1781,3,180,90,
		0,1776,1777,5,9,0,0,1777,1778,3,156,78,0,1778,1779,5,10,0,0,1779,1781,
		1,0,0,0,1780,1767,1,0,0,0,1780,1770,1,0,0,0,1780,1771,1,0,0,0,1780,1772,
		1,0,0,0,1780,1773,1,0,0,0,1780,1774,1,0,0,0,1780,1775,1,0,0,0,1780,1776,
		1,0,0,0,1781,1786,1,0,0,0,1782,1783,10,9,0,0,1783,1785,3,168,84,0,1784,
		1782,1,0,0,0,1785,1788,1,0,0,0,1786,1784,1,0,0,0,1786,1787,1,0,0,0,1787,
		167,1,0,0,0,1788,1786,1,0,0,0,1789,1790,7,14,0,0,1790,1792,3,172,86,0,
		1791,1793,3,160,80,0,1792,1791,1,0,0,0,1792,1793,1,0,0,0,1793,1807,1,0,
		0,0,1794,1796,5,16,0,0,1795,1794,1,0,0,0,1795,1796,1,0,0,0,1796,1803,1,
		0,0,0,1797,1804,3,158,79,0,1798,1800,5,9,0,0,1799,1801,3,152,76,0,1800,
		1799,1,0,0,0,1800,1801,1,0,0,0,1801,1802,1,0,0,0,1802,1804,5,10,0,0,1803,
		1797,1,0,0,0,1803,1798,1,0,0,0,1804,1807,1,0,0,0,1805,1807,5,15,0,0,1806,
		1789,1,0,0,0,1806,1795,1,0,0,0,1806,1805,1,0,0,0,1807,169,1,0,0,0,1808,
		1810,7,5,0,0,1809,1808,1,0,0,0,1810,1811,1,0,0,0,1811,1809,1,0,0,0,1811,
		1812,1,0,0,0,1812,1813,1,0,0,0,1813,1835,5,20,0,0,1814,1818,5,20,0,0,1815,
		1817,7,5,0,0,1816,1815,1,0,0,0,1817,1820,1,0,0,0,1818,1816,1,0,0,0,1818,
		1819,1,0,0,0,1819,1835,1,0,0,0,1820,1818,1,0,0,0,1821,1823,7,5,0,0,1822,
		1821,1,0,0,0,1823,1826,1,0,0,0,1824,1822,1,0,0,0,1824,1825,1,0,0,0,1825,
		1827,1,0,0,0,1826,1824,1,0,0,0,1827,1831,5,16,0,0,1828,1830,7,5,0,0,1829,
		1828,1,0,0,0,1830,1833,1,0,0,0,1831,1829,1,0,0,0,1831,1832,1,0,0,0,1832,
		1835,1,0,0,0,1833,1831,1,0,0,0,1834,1809,1,0,0,0,1834,1814,1,0,0,0,1834,
		1824,1,0,0,0,1835,171,1,0,0,0,1836,1841,3,208,104,0,1837,1841,3,174,87,
		0,1838,1841,3,212,106,0,1839,1841,3,194,97,0,1840,1836,1,0,0,0,1840,1837,
		1,0,0,0,1840,1838,1,0,0,0,1840,1839,1,0,0,0,1841,173,1,0,0,0,1842,1843,
		3,148,74,0,1843,1848,3,150,75,0,1844,1847,3,148,74,0,1845,1847,3,150,75,
		0,1846,1844,1,0,0,0,1846,1845,1,0,0,0,1847,1850,1,0,0,0,1848,1846,1,0,
		0,0,1848,1849,1,0,0,0,1849,1860,1,0,0,0,1850,1848,1,0,0,0,1851,1856,3,
		150,75,0,1852,1855,3,148,74,0,1853,1855,3,150,75,0,1854,1852,1,0,0,0,1854,
		1853,1,0,0,0,1855,1858,1,0,0,0,1856,1854,1,0,0,0,1856,1857,1,0,0,0,1857,
		1860,1,0,0,0,1858,1856,1,0,0,0,1859,1842,1,0,0,0,1859,1851,1,0,0,0,1860,
		175,1,0,0,0,1861,1862,5,14,0,0,1862,1863,3,162,81,0,1863,177,1,0,0,0,1864,
		1865,3,208,104,0,1865,179,1,0,0,0,1866,1870,5,11,0,0,1867,1869,3,214,107,
		0,1868,1867,1,0,0,0,1869,1872,1,0,0,0,1870,1868,1,0,0,0,1870,1871,1,0,
		0,0,1871,1893,1,0,0,0,1872,1870,1,0,0,0,1873,1884,3,146,73,0,1874,1876,
		5,132,0,0,1875,1874,1,0,0,0,1876,1879,1,0,0,0,1877,1875,1,0,0,0,1877,1878,
		1,0,0,0,1878,1880,1,0,0,0,1879,1877,1,0,0,0,1880,1881,5,13,0,0,1881,1883,
		3,146,73,0,1882,1877,1,0,0,0,1883,1886,1,0,0,0,1884,1882,1,0,0,0,1884,
		1885,1,0,0,0,1885,1890,1,0,0,0,1886,1884,1,0,0,0,1887,1889,3,214,107,0,
		1888,1887,1,0,0,0,1889,1892,1,0,0,0,1890,1888,1,0,0,0,1890,1891,1,0,0,
		0,1891,1894,1,0,0,0,1892,1890,1,0,0,0,1893,1873,1,0,0,0,1893,1894,1,0,
		0,0,1894,1895,1,0,0,0,1895,1896,5,12,0,0,1896,181,1,0,0,0,1897,1899,3,
		184,92,0,1898,1897,1,0,0,0,1898,1899,1,0,0,0,1899,1900,1,0,0,0,1900,1901,
		3,206,103,0,1901,1903,5,9,0,0,1902,1904,3,132,66,0,1903,1902,1,0,0,0,1903,
		1904,1,0,0,0,1904,1905,1,0,0,0,1905,1906,5,10,0,0,1906,183,1,0,0,0,1907,
		1911,7,15,0,0,1908,1910,5,132,0,0,1909,1908,1,0,0,0,1910,1913,1,0,0,0,
		1911,1909,1,0,0,0,1911,1912,1,0,0,0,1912,1915,1,0,0,0,1913,1911,1,0,0,
		0,1914,1907,1,0,0,0,1915,1916,1,0,0,0,1916,1914,1,0,0,0,1916,1917,1,0,
		0,0,1917,185,1,0,0,0,1918,1928,3,182,91,0,1919,1921,3,184,92,0,1920,1919,
		1,0,0,0,1920,1921,1,0,0,0,1921,1922,1,0,0,0,1922,1924,5,9,0,0,1923,1925,
		3,132,66,0,1924,1923,1,0,0,0,1924,1925,1,0,0,0,1925,1926,1,0,0,0,1926,
		1928,5,10,0,0,1927,1918,1,0,0,0,1927,1920,1,0,0,0,1928,187,1,0,0,0,1929,
		1931,3,184,92,0,1930,1929,1,0,0,0,1930,1931,1,0,0,0,1931,1932,1,0,0,0,
		1932,1934,3,206,103,0,1933,1930,1,0,0,0,1933,1934,1,0,0,0,1934,1935,1,
		0,0,0,1935,1948,5,28,0,0,1936,1938,3,184,92,0,1937,1936,1,0,0,0,1937,1938,
		1,0,0,0,1938,1940,1,0,0,0,1939,1941,5,47,0,0,1940,1939,1,0,0,0,1940,1941,
		1,0,0,0,1941,1942,1,0,0,0,1942,1944,3,206,103,0,1943,1945,5,15,0,0,1944,
		1943,1,0,0,0,1944,1945,1,0,0,0,1945,1948,1,0,0,0,1946,1948,3,186,93,0,
		1947,1933,1,0,0,0,1947,1937,1,0,0,0,1947,1946,1,0,0,0,1948,189,1,0,0,0,
		1949,1950,5,67,0,0,1950,1959,3,162,81,0,1951,1953,7,5,0,0,1952,1951,1,
		0,0,0,1953,1956,1,0,0,0,1954,1952,1,0,0,0,1954,1955,1,0,0,0,1955,1957,
		1,0,0,0,1956,1954,1,0,0,0,1957,1959,3,20,10,0,1958,1949,1,0,0,0,1958,1954,
		1,0,0,0,1959,191,1,0,0,0,1960,1961,7,16,0,0,1961,193,1,0,0,0,1962,1967,
		3,196,98,0,1963,1967,3,198,99,0,1964,1967,3,200,100,0,1965,1967,7,17,0,
		0,1966,1962,1,0,0,0,1966,1963,1,0,0,0,1966,1964,1,0,0,0,1966,1965,1,0,
		0,0,1967,195,1,0,0,0,1968,1969,7,18,0,0,1969,197,1,0,0,0,1970,1971,7,19,
		0,0,1971,199,1,0,0,0,1972,1973,7,20,0,0,1973,201,1,0,0,0,1974,1975,5,113,
		0,0,1975,1976,3,148,74,0,1976,203,1,0,0,0,1977,1978,5,114,0,0,1978,1979,
		3,148,74,0,1979,205,1,0,0,0,1980,1983,3,208,104,0,1981,1983,3,210,105,
		0,1982,1980,1,0,0,0,1982,1981,1,0,0,0,1983,207,1,0,0,0,1984,1985,7,21,
		0,0,1985,209,1,0,0,0,1986,1990,3,212,106,0,1987,1990,5,69,0,0,1988,1990,
		3,196,98,0,1989,1986,1,0,0,0,1989,1987,1,0,0,0,1989,1988,1,0,0,0,1990,
		211,1,0,0,0,1991,1992,7,22,0,0,1992,213,1,0,0,0,1993,1994,7,5,0,0,1994,
		215,1,0,0,0,1995,1996,7,23,0,0,1996,217,1,0,0,0,278,222,229,231,240,244,
		251,255,260,265,267,276,282,287,291,294,303,309,314,334,342,346,355,361,
		365,371,380,389,395,399,404,411,418,425,429,431,438,442,450,457,461,469,
		473,477,482,489,491,498,505,512,516,518,525,529,535,542,550,556,559,567,
		574,583,587,594,599,606,611,618,625,630,634,640,652,659,662,672,679,690,
		697,704,707,712,717,721,727,734,740,745,750,754,760,767,773,779,787,793,
		801,807,811,817,821,827,831,836,841,846,855,861,870,875,880,887,892,901,
		909,916,922,926,932,939,950,957,960,968,972,977,981,988,992,997,1001,1008,
		1016,1024,1032,1039,1045,1052,1060,1065,1074,1081,1087,1090,1095,1105,
		1113,1115,1125,1128,1135,1138,1144,1151,1155,1168,1179,1181,1185,1191,
		1196,1201,1214,1224,1231,1237,1243,1247,1250,1256,1263,1266,1274,1281,
		1289,1295,1302,1307,1311,1322,1329,1338,1348,1353,1357,1363,1368,1372,
		1374,1378,1384,1391,1398,1405,1408,1416,1423,1434,1443,1459,1465,1475,
		1483,1490,1501,1508,1523,1525,1540,1546,1556,1563,1570,1577,1588,1595,
		1599,1601,1610,1619,1628,1638,1646,1653,1664,1671,1686,1688,1703,1709,
		1719,1726,1733,1740,1751,1758,1762,1764,1780,1786,1792,1795,1800,1803,
		1806,1811,1818,1824,1831,1834,1840,1846,1848,1854,1856,1859,1870,1877,
		1884,1890,1893,1898,1903,1911,1916,1920,1924,1927,1930,1933,1937,1940,
		1944,1947,1954,1958,1966,1982,1989
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
