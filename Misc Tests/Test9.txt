using static Keysharp.Core.Accessors;
using static Keysharp.Core.Core;
//using static Keysharp.Core.Common.Window.WindowItemBase;
using static Keysharp.Core.Common.Keyboard.HotkeyDefinition;
using static Keysharp.Core.Common.Keyboard.HotstringDefinition;
using static Keysharp.Core.Dialogs;
using static Keysharp.Core.Dir;
using static Keysharp.Core.Drive;
using static Keysharp.Core.DllHelper;
using static Keysharp.Core.Env;
using static Keysharp.Core.File;
using static Keysharp.Core.Flow;
using static Keysharp.Core.Function;
using static Keysharp.Core.GuiHelper;
using static Keysharp.Core.Images;
using static Keysharp.Core.ImageLists;
using static Keysharp.Core.Ini;
using static Keysharp.Core.Keyboard;
using static Keysharp.Core.KeysharpObject;
using static Keysharp.Core.Loops;
using static Keysharp.Core.Maths;
using static Keysharp.Core.Menu;
using static Keysharp.Core.Misc;
using static Keysharp.Core.Monitor;
using static Keysharp.Core.Mouse;
using static Keysharp.Core.Network;
using static Keysharp.Core.Options;
using static Keysharp.Core.Processes;
using static Keysharp.Core.Registrys;
using static Keysharp.Core.Screen;
using static Keysharp.Core.Security;
using static Keysharp.Core.SimpleJson;
using static Keysharp.Core.Sound;
using static Keysharp.Core.Strings;
using static Keysharp.Core.ToolTips;
using static Keysharp.Core.Window;
using static Keysharp.Core.Windows.WindowsAPI;
using static Keysharp.Scripting.Script;
using static Keysharp.Scripting.Script.Operator;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.CLSCompliantAttribute(true)]
[assembly: Keysharp.Scripting.AssemblyBuildVersionAttribute("0.0.0.1")]

namespace Keysharp.CompiledMain
{
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Data;
	using System.IO;
	using System.Linq;
	using System.Reflection;
	using System.Runtime.InteropServices;
	using System.Text;
	using System.Windows.Forms;
	using Keysharp.Core;
	using Keysharp.Scripting;
	using Array = Keysharp.Core.Array;
	using Buffer = Keysharp.Core.Buffer;

	public sealed class Program
	{
		[System.STAThreadAttribute()]
		public static int Main(string[] args)
		{
			try
			{
				string name = @"*";
				Keysharp.Scripting.Script.Variables.InitGlobalVars();
				Keysharp.Scripting.Script.SetName(name);
				HandleSingleInstance(name, eScriptInstance.Off);
				HandleCommandLineParams(args);
				SetProcessDPIAware();
				CreateTrayMenu();
				var basex = 50;
				var offx = basex;
				var incx = 400;
				//
				var basey = 50;
				var offy = basey;
				var incy = 450;
				//
				guis.Add(CreateGui(offx = basex, offy, false, false, 0));
				guis.Add(CreateGui(offx += incx, offy, false, true, 0));
				guis.Add(CreateGui(offx += incx, offy, false, true, 1));
				guis.Add(CreateGui(offx += incx, offy, false, true, 2));
				//
				guis.Add(CreateGui(offx += incx, offy, false, false, 0, 300, 300));
				guis.Add(CreateGui(offx += incx, offy, false, true, 0, 300, 300));
				guis.Add(CreateGui(offx += incx, offy, false, true, 1, 300, 300));
				guis.Add(CreateGui(offx += incx, offy, false, true, 2, 300, 300));
				//
				offy += incy;
				guis.Add(CreateGui(offx = basex, offy, true, false, 0));
				guis.Add(CreateGui(offx += incx, offy, true, true, 0));
				guis.Add(CreateGui(offx += incx, offy, true, true, 1));
				guis.Add(CreateGui(offx += incx, offy, true, true, 2));
				//
				guis.Add(CreateGui(offx += incx, offy, true, false, 0, 300, 300));
				guis.Add(CreateGui(offx += incx, offy, true, true, 0, 300, 300));
				guis.Add(CreateGui(offx += incx, offy, true, true, 1, 300, 300));
				guis.Add(CreateGui(offx += incx, offy, true, true, 2, 300, 300));
				//
				//
				offy += incy;
				guis.Add(CreateGui2(offx = basex, offy, false, false, 0));
				guis.Add(CreateGui2(offx += incx, offy, false, true, 0));
				guis.Add(CreateGui2(offx += incx, offy, false, true, 1));
				guis.Add(CreateGui2(offx += incx, offy, false, true, 2));
				//
				guis.Add(CreateGui2(offx += incx, offy, false, false, 0, 300, 400));
				guis.Add(CreateGui2(offx += incx, offy, false, true, 0, 300, 400));
				guis.Add(CreateGui2(offx += incx, offy, false, true, 1, 300, 400));
				guis.Add(CreateGui2(offx += incx, offy, false, true, 2, 300, 400));
				//
				offy += incy;
				guis.Add(CreateGui2(offx = basex, offy, true, false, 0));
				guis.Add(CreateGui2(offx += incx, offy, true, true, 0));
				guis.Add(CreateGui2(offx += incx, offy, true, true, 1));
				guis.Add(CreateGui2(offx += incx, offy, true, true, 2));
				//
				guis.Add(CreateGui2(offx += incx, offy, true, false, 0, 300, 400));
				guis.Add(CreateGui2(offx += incx, offy, true, true, 0, 300, 400));
				guis.Add(CreateGui2(offx += incx, offy, true, true, 1, 300, 400));
				guis.Add(CreateGui2(offx += incx, offy, true, true, 2, 300, 400));
				RunMainWindow(name);
				ExitApp(0);
				return 0;
			}
			catch (Keysharp.Core.Error kserr)
			{
				if (ErrorOccurred(kserr))
				{
					MsgBox("Uncaught Keysharp exception:\r\n" + kserr);
				}

				ExitApp(1);
				return 1;
			}
			catch (System.Exception mainex)
			{
				MsgBox("Uncaught exception:\r\n" + "Message: " + mainex.Message + "\r\nStack: " + mainex.StackTrace);
				ExitApp(1);
				return 1;
			}
		}

		public static Gui CreateGui(int x, int y, bool resizable, bool hasss, int ssorder, int w = int.MinValue, int h = int.MinValue)
		{
			var gui = resizable ? Gui("+Resize") : Gui();
			var tabnames = new object[]
			{
				"General",
				"View",
				"Settings"
			};

			if (hasss && ssorder == 0)
				Invoke(GetMethodOrProperty(gui, "Add"), "StatusBar", null, "Bar's starting text.");

			var tab = Invoke(GetMethodOrProperty(gui, "Add"), "Tab3", null, new Keysharp.Core.Array(tabnames));

			if (hasss && ssorder == 1)
				Invoke(GetMethodOrProperty(gui, "Add"), "StatusBar", null, "Bar's starting text.");

			for (var i = 0; i < 1; i++)
			{
				foreach (var tabname in tabnames)
				{
					Invoke(GetMethodOrProperty(tab, "UseTab"), tabname);
					var nestedtab = Invoke(GetMethodOrProperty(gui, "Add"), "Tab3", null, new Keysharp.Core.Array(tabnames));

					foreach (var nestedtabname in tabnames)
					{
						Invoke(GetMethodOrProperty(nestedtab, "UseTab"), nestedtabname);
						Invoke(GetMethodOrProperty(gui, "Add"), "Radio", "vMyRadioGroup", "Wait for all items to be in stock before shipping.");
						Invoke(GetMethodOrProperty(gui, "Add"), "Radio", "", "Item 2");
						Invoke(GetMethodOrProperty(gui, "Add"), "Radio", "", "Item 3 is the last one");
						Invoke(GetMethodOrProperty(gui, "Add"), "Edit", "w200 h200", $"{tabname}_{nestedtabname}_{i}");
					}

					Invoke(GetMethodOrProperty(nestedtab, "UseTab"));
					Invoke(GetMethodOrProperty(gui, "Add"), "Edit", "w200 h200", $"{tabname}_{i}");
				}
			}

			if (hasss && ssorder == 2)
				Invoke(GetMethodOrProperty(gui, "Add"), "StatusBar", null, "Bar's starting text.");

			if (w != int.MinValue && h != int.MinValue)
				Invoke(GetMethodOrProperty(gui, "Show"), $"X{x} Y{y} w{w} h{h}");
			else
				Invoke(GetMethodOrProperty(gui, "Show"), $"X{x} Y{y}");

			return gui;
		}

		public static Gui CreateGui2(int x, int y, bool resizable, bool hasss, int ssorder, int w = int.MinValue, int h = int.MinValue)
		{
			var gui = resizable ? Gui("+Resize") : Gui();

			if (hasss && ssorder == 0)
				Invoke(GetMethodOrProperty(gui, "Add"), "StatusBar", null, "Bar's starting text.");

			Invoke(GetMethodOrProperty(gui, "Add"), "UpDown", "vMyUpDown Range1-10", 5L);

			if (hasss && ssorder == 1)
				Invoke(GetMethodOrProperty(gui, "Add"), "StatusBar", null, "Bar's starting text.");

			Invoke(GetMethodOrProperty(gui, "Add"), "Edit");
			Invoke(GetMethodOrProperty(gui, "Add"), "Edit");
			Invoke(GetMethodOrProperty(gui, "Add"), "Edit");
			Invoke(GetMethodOrProperty(gui, "Add"), "Radio", "vMyRadioGroup", "Wait for all items to be in stock before shipping.");
			Invoke(GetMethodOrProperty(gui, "Add"), "Radio", "", "Item 2");
			Invoke(GetMethodOrProperty(gui, "Add"), "Radio", "", "Item 3 is the last one");
			Invoke(GetMethodOrProperty(gui, "Add"), "Edit");
			Invoke(GetMethodOrProperty(gui, "Add"), "Edit");
			Invoke(GetMethodOrProperty(gui, "Add"), "Edit");

			if (hasss && ssorder == 2)
				Invoke(GetMethodOrProperty(gui, "Add"), "StatusBar", null, "Bar's starting text.");

			if (w != int.MinValue && h != int.MinValue)
				Invoke(GetMethodOrProperty(gui, "Show"), $"X{x} Y{y} w{w} h{h}");
			else
				Invoke(GetMethodOrProperty(gui, "Show"), $"X{x} Y{y}");

			return gui;
		}

		public static List<Gui> guis = new List<Gui>(32);
	}
}
