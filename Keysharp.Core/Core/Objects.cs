namespace Keysharp.Core
{
	/// <summary>
	/// Public interface for Obj*() functions.
	/// </summary>
	public static class Objects
	{
		/// <summary>
		/// Creates a new <see cref="Map"/> object.
		/// This can be called manually by the script or be generated by the parser
		/// for object literal construction like:
		/// val := { one : 1 }
		/// Note that the map must be case insensitive so that property lookups like:
		/// val.one and val.One both work.
		/// </summary>
		/// <param name="obj">The optional data to initialize the <see cref="Map"/> with. This can be:
		///     An existing <see cref="Map"/> object.
		///     An <see cref="Array"/> of key,value pairs.
		///     An existing <see cref="Dictionary{string, object}"/> object.
		///     An object[] of key,value pairs.
		/// </param>
		/// <returns>A new <see cref="Map"/> object.</returns>
		public static KeysharpObject Object(params object[] values)
		{
			var kso = new KeysharpObject();
			var count = (values.Length / 2) * 2;

			for (var i = 0; i < count; i += 2)
			{
				var map = new Map
				{
					CaseSense = false
				};
				var key = values[i].ToString();

				if (string.Compare(key, "get", true) == 0
						|| string.Compare(key, "set", true) == 0
						|| string.Compare(key, "call", true) == 0)
				{
					map[key.ToLower()] = values[i + 1];
				}
				else
					map["value"] = values[i + 1];

				kso.DefineProp(key, map);
			}

			return kso;
		}

		/// <summary>
		/// Unsupported.
		/// </summary>
		/// <param name="obj">Ignored.</param>
		/// <returns>None</returns>
		/// <exception cref="Error">An <see cref="Error"/> exception is thrown because this function has no meaning in Keysharp.</exception>
		public static object ObjGetCapacity(object obj)
		{
			Error err;

			if (obj is KeysharpObject kso)
				return kso.GetCapacity();

			return Errors.ErrorOccurred(err = new Error($"Object of type {obj.GetType()} was not of type KeysharpObject.")) ? throw err : null;
		}

		/// <summary>
		/// Returns whether an object contains an OwnProp by the specified name.
		/// </summary>
		/// <param name="obj">The obj to search for an OwnProp on.</param>
		/// <param name="name">The OwnProp name to search for.</param>
		/// <returns>Returns 1 if an object owns a property by the specified name, otherwise 0.</returns>
		/// <exception cref="Error">An <see cref="Error"/> exception is thrown if obj was not of type KeysharpObject.</exception>
		public static long ObjHasOwnProp(object obj, object name) => obj is KeysharpObject kso ? kso.HasOwnProp(name) : 0L;

		/// <summary>
		/// Returns the number of properties owned by an object.
		/// </summary>
		/// <param name="obj">The object to get the OwnProps count for.</param>
		/// <returns>The number of properties owned by an obj.</returns>
		/// <exception cref="Error">An <see cref="Error"/> exception is thrown if obj was not of type KeysharpObject.</exception>
		public static long ObjOwnPropCount(object obj)
		{
			Error err;

			if (obj is KeysharpObject kso)
				return kso.OwnPropCount();

			return Errors.ErrorOccurred(err = new Error($"Object of type {obj.GetType()} was not of type KeysharpObject.")) ? throw err : 0L;
		}

		/// <summary>
		/// Returns an OwnProps iterator for the given object.
		/// </summary>
		/// <param name="obj">The object whose OwnProps will be retrieved.</param>
		/// <param name="userOnly">Optionally pass true to specify only user props, else false return all. Default: true.</param>
		/// <returns>An <see cref="OwnPropsIterator"/> object for obj.</returns>
		/// <exception cref="Error">An <see cref="Error"/> exception is thrown if obj was not of type KeysharpObject.</exception>
		public static object ObjOwnProps(object obj, object userOnly = null)
		{
			Error err;

			if (obj is KeysharpObject kso)
				return kso.OwnProps(userOnly);

			return Errors.ErrorOccurred(err = new Error($"Object of type {obj.GetType()} was not of type KeysharpObject.")) ? throw err : null;
		}

		/// <summary>
		/// Unsupported.
		/// </summary>
		/// <param name="obj">Ignored</param>
		/// <exception cref="Error">An <see cref="Error"/> exception is thrown because this function has no meaning in Keysharp.</exception>
		public static object ObjSetBase(params object[] obj)
		{
			Error err;
			return Errors.ErrorOccurred(err = new Error(Any.BaseExc)) ? throw err : null;
		}

		/// <summary>
		/// Unsupported.
		/// </summary>
		/// <param name="obj0">Ignored</param>
		/// <param name="obj1">Ignored</param>
		/// <returns>None</returns>
		/// <exception cref="Error">An <see cref="Error"/> exception is thrown because this function has no meaning in Keysharp.</exception>
		public static object ObjSetCapacity(object obj0, object obj1)
		{
			Error err;

			if (obj0 is KeysharpObject kso)
				return kso.SetCapacity(obj1);

			return Errors.ErrorOccurred(err = new Error($"Object of type {obj0.GetType()} was not of type KeysharpObject.")) ? throw err : null;
		}
	}
}