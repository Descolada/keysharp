//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/minip/source/repos/Keysharp_clone/Keysharp.Core/Scripting/Parser/Antlr/MainParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MainParser : MainParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DerefStart=1, DerefEnd=2, SingleLineBlockComment=3, HotstringTrigger=4, 
		RemapKey=5, HotkeyTrigger=6, OpenBracket=7, CloseBracket=8, OpenParen=9, 
		CloseParen=10, OpenBrace=11, CloseBrace=12, Comma=13, Assign=14, QuestionMark=15, 
		QuestionMarkDot=16, Colon=17, DoubleColon=18, Ellipsis=19, Dot=20, ConcatDot=21, 
		PlusPlus=22, MinusMinus=23, Plus=24, Minus=25, BitNot=26, Not=27, Multiply=28, 
		Divide=29, IntegerDivide=30, Modulus=31, Power=32, NullCoalesce=33, Hashtag=34, 
		RightShiftArithmetic=35, LeftShiftArithmetic=36, RightShiftLogical=37, 
		LessThan=38, MoreThan=39, LessThanEquals=40, GreaterThanEquals=41, Equals_=42, 
		NotEquals=43, IdentityEquals=44, IdentityNotEquals=45, RegExMatch=46, 
		BitAnd=47, BitXOr=48, BitOr=49, And=50, Or=51, MultiplyAssign=52, DivideAssign=53, 
		ModulusAssign=54, PlusAssign=55, MinusAssign=56, LeftShiftArithmeticAssign=57, 
		RightShiftArithmeticAssign=58, RightShiftLogicalAssign=59, IntegerDivideAssign=60, 
		ConcatenateAssign=61, BitAndAssign=62, BitXorAssign=63, BitOrAssign=64, 
		PowerAssign=65, NullishCoalescingAssign=66, Arrow=67, NullLiteral=68, 
		Unset=69, True=70, False=71, DecimalLiteral=72, HexIntegerLiteral=73, 
		OctalIntegerLiteral=74, OctalIntegerLiteral2=75, BinaryIntegerLiteral=76, 
		BigHexIntegerLiteral=77, BigOctalIntegerLiteral=78, BigBinaryIntegerLiteral=79, 
		BigDecimalIntegerLiteral=80, Break=81, Do=82, Instanceof=83, Switch=84, 
		Case=85, Default=86, Else=87, Catch=88, Finally=89, Return=90, Continue=91, 
		For=92, While=93, Parse=94, Reg=95, Read=96, Files=97, Loop=98, Until=99, 
		This=100, If=101, Throw=102, Delete=103, In=104, Try=105, Yield=106, Is=107, 
		Contains=108, VerbalAnd=109, VerbalNot=110, VerbalOr=111, Goto=112, Get=113, 
		Set=114, Class=115, Enum=116, Extends=117, Super=118, Base=119, Export=120, 
		Import=121, From=122, As=123, Async=124, Await=125, Static=126, Global=127, 
		Local=128, HotIf=129, InputLevel=130, SuspendExempt=131, UseHook=132, 
		HotstringOptions=133, Identifier=134, StringLiteral=135, EOL=136, WS=137, 
		UnexpectedCharacter=138, HotstringWhitespaces=139, HotstringMultiLineExpansion=140, 
		HotstringSingleLineExpansion=141, HotstringUnexpectedCharacter=142, DirectiveWhitespaces=143, 
		DirectiveContent=144, DirectiveUnexpectedCharacter=145, PreprocessorDirectiveWS=146, 
		Digits=147, Define=148, Undef=149, ElIf=150, EndIf=151, Line=152, Error=153, 
		Warning=154, Region=155, EndRegion=156, Pragma=157, Nullable=158, Include=159, 
		IncludeAgain=160, DllLoad=161, Requires=162, SingleInstance=163, Persistent=164, 
		Warn=165, NoDynamicVars=166, ErrorStdOut=167, ClipboardTimeout=168, HotIfTimeout=169, 
		MaxThreads=170, MaxThreadsBuffer=171, MaxThreadsPerHotkey=172, Assembly=173, 
		DirectiveHidden=174, ConditionalSymbol=175, DirectiveSingleLineComment=176, 
		DirectiveNewline=177, Text=178;
	public const int
		RULE_program = 0, RULE_sourceElements = 1, RULE_sourceElement = 2, RULE_positionalDirective = 3, 
		RULE_remap = 4, RULE_hotstring = 5, RULE_hotstringExpansion = 6, RULE_hotkey = 7, 
		RULE_statement = 8, RULE_block = 9, RULE_statementList = 10, RULE_variableStatement = 11, 
		RULE_awaitStatement = 12, RULE_deleteStatement = 13, RULE_importStatement = 14, 
		RULE_importFromBlock = 15, RULE_importModuleItems = 16, RULE_importAliasName = 17, 
		RULE_moduleExportName = 18, RULE_importedBinding = 19, RULE_importDefault = 20, 
		RULE_importNamespace = 21, RULE_importFrom = 22, RULE_aliasName = 23, 
		RULE_exportStatement = 24, RULE_exportFromBlock = 25, RULE_exportModuleItems = 26, 
		RULE_exportAliasName = 27, RULE_declaration = 28, RULE_variableDeclarationList = 29, 
		RULE_variableDeclaration = 30, RULE_functionStatement = 31, RULE_expressionStatement = 32, 
		RULE_ifStatement = 33, RULE_flowBlock = 34, RULE_untilProduction = 35, 
		RULE_elseProduction = 36, RULE_iterationStatement = 37, RULE_forInParameters = 38, 
		RULE_continueStatement = 39, RULE_breakStatement = 40, RULE_returnStatement = 41, 
		RULE_yieldStatement = 42, RULE_switchStatement = 43, RULE_caseBlock = 44, 
		RULE_caseClauses = 45, RULE_caseClause = 46, RULE_defaultClause = 47, 
		RULE_labelledStatement = 48, RULE_gotoStatement = 49, RULE_throwStatement = 50, 
		RULE_tryStatement = 51, RULE_catchProduction = 52, RULE_catchAssignable = 53, 
		RULE_catchClasses = 54, RULE_finallyProduction = 55, RULE_functionDeclaration = 56, 
		RULE_classDeclaration = 57, RULE_classExtensionName = 58, RULE_classTail = 59, 
		RULE_classElement = 60, RULE_methodDefinition = 61, RULE_propertyDefinition = 62, 
		RULE_classPropertyName = 63, RULE_propertyGetterDefinition = 64, RULE_propertySetterDefinition = 65, 
		RULE_fieldDefinition = 66, RULE_formalParameterList = 67, RULE_formalParameterArg = 68, 
		RULE_lastFormalParameterArg = 69, RULE_arrayLiteral = 70, RULE_mapLiteral = 71, 
		RULE_mapElementList = 72, RULE_mapElement = 73, RULE_propertyAssignment = 74, 
		RULE_propertyName = 75, RULE_dereference = 76, RULE_arguments = 77, RULE_argument = 78, 
		RULE_expressionSequence = 79, RULE_memberIndexArguments = 80, RULE_expression = 81, 
		RULE_singleExpression = 82, RULE_primaryExpression = 83, RULE_memberDot = 84, 
		RULE_memberIdentifier = 85, RULE_dynamicIdentifier = 86, RULE_initializer = 87, 
		RULE_assignable = 88, RULE_objectLiteral = 89, RULE_functionHead = 90, 
		RULE_functionHeadPrefix = 91, RULE_functionExpressionHead = 92, RULE_fatArrowExpressionHead = 93, 
		RULE_functionBody = 94, RULE_assignmentOperator = 95, RULE_literal = 96, 
		RULE_boolean = 97, RULE_numericLiteral = 98, RULE_bigintLiteral = 99, 
		RULE_getter = 100, RULE_setter = 101, RULE_identifierName = 102, RULE_identifier = 103, 
		RULE_reservedWord = 104, RULE_keyword = 105, RULE_s = 106, RULE_eos = 107;
	public static readonly string[] ruleNames = {
		"program", "sourceElements", "sourceElement", "positionalDirective", "remap", 
		"hotstring", "hotstringExpansion", "hotkey", "statement", "block", "statementList", 
		"variableStatement", "awaitStatement", "deleteStatement", "importStatement", 
		"importFromBlock", "importModuleItems", "importAliasName", "moduleExportName", 
		"importedBinding", "importDefault", "importNamespace", "importFrom", "aliasName", 
		"exportStatement", "exportFromBlock", "exportModuleItems", "exportAliasName", 
		"declaration", "variableDeclarationList", "variableDeclaration", "functionStatement", 
		"expressionStatement", "ifStatement", "flowBlock", "untilProduction", 
		"elseProduction", "iterationStatement", "forInParameters", "continueStatement", 
		"breakStatement", "returnStatement", "yieldStatement", "switchStatement", 
		"caseBlock", "caseClauses", "caseClause", "defaultClause", "labelledStatement", 
		"gotoStatement", "throwStatement", "tryStatement", "catchProduction", 
		"catchAssignable", "catchClasses", "finallyProduction", "functionDeclaration", 
		"classDeclaration", "classExtensionName", "classTail", "classElement", 
		"methodDefinition", "propertyDefinition", "classPropertyName", "propertyGetterDefinition", 
		"propertySetterDefinition", "fieldDefinition", "formalParameterList", 
		"formalParameterArg", "lastFormalParameterArg", "arrayLiteral", "mapLiteral", 
		"mapElementList", "mapElement", "propertyAssignment", "propertyName", 
		"dereference", "arguments", "argument", "expressionSequence", "memberIndexArguments", 
		"expression", "singleExpression", "primaryExpression", "memberDot", "memberIdentifier", 
		"dynamicIdentifier", "initializer", "assignable", "objectLiteral", "functionHead", 
		"functionHeadPrefix", "functionExpressionHead", "fatArrowExpressionHead", 
		"functionBody", "assignmentOperator", "literal", "boolean", "numericLiteral", 
		"bigintLiteral", "getter", "setter", "identifierName", "identifier", "reservedWord", 
		"keyword", "s", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'['", "']'", "'('", "')'", 
		"'{'", "'}'", "','", "':='", "'?'", "'?.'", "':'", "'::'", "'...'", "'.'", 
		null, "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", "'//'", 
		"'%'", "'**'", "'??'", null, "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", 
		"'>='", "'='", "'!='", "'=='", "'!=='", "'~='", "'&'", "'^'", "'|'", "'&&'", 
		"'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", 
		"'//='", "'.='", "'&='", "'^='", "'|='", "'**='", "'??='", "'=>'", "'null'", 
		"'unset'", "'true'", "'false'", null, null, null, null, null, null, null, 
		null, null, "'break'", "'do'", "'instanceof'", "'switch'", "'case'", "'default'", 
		"'else'", "'catch'", "'finally'", "'return'", "'continue'", "'for'", "'while'", 
		"'parse'", "'reg'", "'read'", "'files'", "'loop'", "'until'", "'this'", 
		"'if'", "'throw'", "'delete'", "'in'", "'try'", "'yield'", "'is'", "'contains'", 
		"'and'", "'not'", "'or'", "'goto'", "'get'", "'set'", "'class'", "'enum'", 
		"'extends'", "'super'", "'base'", "'export'", "'import'", "'from'", "'as'", 
		"'async'", "'await'", "'static'", "'global'", "'local'", "'#hotif'", "'#inputlevel'", 
		"'#suspendexempt'", "'#usehook'", null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "'define'", "'undef'", 
		"'elif'", "'endif'", "'line'", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'nodynamicvars'", "'errorstdout'", 
		null, null, null, null, null, null, "'hidden'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DerefStart", "DerefEnd", "SingleLineBlockComment", "HotstringTrigger", 
		"RemapKey", "HotkeyTrigger", "OpenBracket", "CloseBracket", "OpenParen", 
		"CloseParen", "OpenBrace", "CloseBrace", "Comma", "Assign", "QuestionMark", 
		"QuestionMarkDot", "Colon", "DoubleColon", "Ellipsis", "Dot", "ConcatDot", 
		"PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", 
		"Divide", "IntegerDivide", "Modulus", "Power", "NullCoalesce", "Hashtag", 
		"RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", "LessThan", 
		"MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_", "NotEquals", 
		"IdentityEquals", "IdentityNotEquals", "RegExMatch", "BitAnd", "BitXOr", 
		"BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
		"PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
		"RightShiftLogicalAssign", "IntegerDivideAssign", "ConcatenateAssign", 
		"BitAndAssign", "BitXorAssign", "BitOrAssign", "PowerAssign", "NullishCoalescingAssign", 
		"Arrow", "NullLiteral", "Unset", "True", "False", "DecimalLiteral", "HexIntegerLiteral", 
		"OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
		"BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", 
		"BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Switch", "Case", 
		"Default", "Else", "Catch", "Finally", "Return", "Continue", "For", "While", 
		"Parse", "Reg", "Read", "Files", "Loop", "Until", "This", "If", "Throw", 
		"Delete", "In", "Try", "Yield", "Is", "Contains", "VerbalAnd", "VerbalNot", 
		"VerbalOr", "Goto", "Get", "Set", "Class", "Enum", "Extends", "Super", 
		"Base", "Export", "Import", "From", "As", "Async", "Await", "Static", 
		"Global", "Local", "HotIf", "InputLevel", "SuspendExempt", "UseHook", 
		"HotstringOptions", "Identifier", "StringLiteral", "EOL", "WS", "UnexpectedCharacter", 
		"HotstringWhitespaces", "HotstringMultiLineExpansion", "HotstringSingleLineExpansion", 
		"HotstringUnexpectedCharacter", "DirectiveWhitespaces", "DirectiveContent", 
		"DirectiveUnexpectedCharacter", "PreprocessorDirectiveWS", "Digits", "Define", 
		"Undef", "ElIf", "EndIf", "Line", "Error", "Warning", "Region", "EndRegion", 
		"Pragma", "Nullable", "Include", "IncludeAgain", "DllLoad", "Requires", 
		"SingleInstance", "Persistent", "Warn", "NoDynamicVars", "ErrorStdOut", 
		"ClipboardTimeout", "HotIfTimeout", "MaxThreads", "MaxThreadsBuffer", 
		"MaxThreadsPerHotkey", "Assembly", "DirectiveHidden", "ConditionalSymbol", 
		"DirectiveSingleLineComment", "DirectiveNewline", "Text"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MainParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MainParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MainParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MainParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MainParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216;
				sourceElements();
				State = 217;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 222;
					sourceElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 225;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionalDirectiveContext positionalDirective() {
			return GetRuleContext<PositionalDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemapContext remap() {
			return GetRuleContext<RemapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotstringContext hotstring() {
			return GetRuleContext<HotstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotkeyContext hotkey() {
			return GetRuleContext<HotkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(MainParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sourceElement);
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227;
				classDeclaration();
				State = 228;
				eos();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230;
				positionalDirective();
				State = 231;
				eos();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 233;
				remap();
				State = 234;
				eos();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 236;
				hotstring();
				State = 237;
				eos();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 239;
				hotkey();
				State = 240;
				eos();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 242;
				statement();
				State = 243;
				eos();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 245;
				Match(WS);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 246;
				Match(EOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionalDirectiveContext : ParserRuleContext {
		public PositionalDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionalDirective; } }
	 
		public PositionalDirectiveContext() { }
		public virtual void CopyFrom(PositionalDirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HotstringDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringOptions() { return GetToken(MainParser.HotstringOptions, 0); }
		public HotstringDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstringDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InputLevelDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InputLevel() { return GetToken(MainParser.InputLevel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public InputLevelDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputLevelDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuspendExemptDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SuspendExempt() { return GetToken(MainParser.SuspendExempt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public SuspendExemptDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuspendExemptDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UseHookDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UseHook() { return GetToken(MainParser.UseHook, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public UseHookDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseHookDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HotIfDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotIf() { return GetToken(MainParser.HotIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public HotIfDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotIfDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionalDirectiveContext positionalDirective() {
		PositionalDirectiveContext _localctx = new PositionalDirectiveContext(Context, State);
		EnterRule(_localctx, 6, RULE_positionalDirective);
		int _la;
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HotIf:
				_localctx = new HotIfDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				Match(HotIf);
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140737752599170L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843009213693951L) != 0) || _la==Identifier || _la==StringLiteral) {
					{
					State = 250;
					singleExpression(0);
					}
				}

				}
				break;
			case HotstringOptions:
				_localctx = new HotstringDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 253;
				Match(HotstringOptions);
				}
				break;
			case InputLevel:
				_localctx = new InputLevelDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 254;
				Match(InputLevel);
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 31L) != 0)) {
					{
					State = 255;
					numericLiteral();
					}
				}

				}
				break;
			case UseHook:
				_localctx = new UseHookDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 258;
				Match(UseHook);
				State = 261;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
					{
					State = 259;
					numericLiteral();
					}
					break;
				case True:
				case False:
					{
					State = 260;
					boolean();
					}
					break;
				case Eof:
				case EOL:
					break;
				default:
					break;
				}
				}
				break;
			case SuspendExempt:
				_localctx = new SuspendExemptDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 263;
				Match(SuspendExempt);
				State = 266;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
					{
					State = 264;
					numericLiteral();
					}
					break;
				case True:
				case False:
					{
					State = 265;
					boolean();
					}
					break;
				case Eof:
				case EOL:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RemapKey() { return GetToken(MainParser.RemapKey, 0); }
		public RemapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remap; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemapContext remap() {
		RemapContext _localctx = new RemapContext(Context, State);
		EnterRule(_localctx, 8, RULE_remap);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(RemapKey);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotstringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HotstringTrigger() { return GetTokens(MainParser.HotstringTrigger); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringTrigger(int i) {
			return GetToken(MainParser.HotstringTrigger, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotstringExpansionContext hotstringExpansion() {
			return GetRuleContext<HotstringExpansionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public HotstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotstring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotstringContext hotstring() {
		HotstringContext _localctx = new HotstringContext(Context, State);
		EnterRule(_localctx, 10, RULE_hotstring);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			Match(HotstringTrigger);
			State = 277;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 273;
					Match(EOL);
					State = 274;
					Match(HotstringTrigger);
					}
					} 
				}
				State = 279;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 283;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 280;
					Match(WS);
					}
					} 
				}
				State = 285;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 286;
				hotstringExpansion();
				}
				break;
			case 2:
				{
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EOL) {
					{
					State = 287;
					Match(EOL);
					}
				}

				State = 290;
				functionDeclaration();
				}
				break;
			case 3:
				{
				State = 292;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 291;
					Match(EOL);
					}
					break;
				}
				State = 294;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotstringExpansionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringSingleLineExpansion() { return GetToken(MainParser.HotstringSingleLineExpansion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringMultiLineExpansion() { return GetToken(MainParser.HotstringMultiLineExpansion, 0); }
		public HotstringExpansionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotstringExpansion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstringExpansion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotstringExpansionContext hotstringExpansion() {
		HotstringExpansionContext _localctx = new HotstringExpansionContext(Context, State);
		EnterRule(_localctx, 12, RULE_hotstringExpansion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			_la = TokenStream.LA(1);
			if ( !(_la==HotstringMultiLineExpansion || _la==HotstringSingleLineExpansion) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotkeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HotkeyTrigger() { return GetTokens(MainParser.HotkeyTrigger); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotkeyTrigger(int i) {
			return GetToken(MainParser.HotkeyTrigger, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public HotkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotkey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotkey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotkeyContext hotkey() {
		HotkeyContext _localctx = new HotkeyContext(Context, State);
		EnterRule(_localctx, 14, RULE_hotkey);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(HotkeyTrigger);
			State = 304;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 300;
					Match(EOL);
					State = 301;
					Match(HotkeyTrigger);
					}
					} 
				}
				State = 306;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 310;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 307;
					s();
					}
					} 
				}
				State = 312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 313;
				functionDeclaration();
				}
				break;
			case 2:
				{
				State = 314;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelledStatementContext labelledStatement() {
			return GetRuleContext<LabelledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStatementContext functionStatement() {
			return GetRuleContext<FunctionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AwaitStatementContext awaitStatement() {
			return GetRuleContext<AwaitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			int _alt;
			State = 343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 317;
				variableStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 318;
				ifStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 326;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 319;
					labelledStatement();
					State = 323;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 320;
							s();
							}
							} 
						}
						State = 325;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
					}
					}
					break;
				}
				State = 328;
				iterationStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 329;
				block();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 330;
				expressionStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 331;
				functionStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 332;
				continueStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 333;
				breakStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 334;
				returnStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 335;
				yieldStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 336;
				labelledStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 337;
				gotoStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 338;
				switchStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 339;
				throwStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 340;
				tryStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 341;
				awaitStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 342;
				deleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(OpenBrace);
			State = 349;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 346;
					s();
					}
					} 
				}
				State = 351;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 352;
				statementList();
				}
				break;
			}
			State = 355;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 20, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 357;
					statement();
					State = 358;
					Match(EOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 362;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(MainParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(MainParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public VariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStatementContext variableStatement() {
		VariableStatementContext _localctx = new VariableStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_variableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 365;
					Match(WS);
					}
					}
					State = 370;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 371;
				variableDeclarationList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwaitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public AwaitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awaitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwaitStatementContext awaitStatement() {
		AwaitStatementContext _localctx = new AwaitStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_awaitStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(Await);
			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 375;
				Match(WS);
				}
				}
				State = 380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 381;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(MainParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_deleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			Match(Delete);
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 384;
				Match(WS);
				}
				}
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 390;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(MainParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromBlockContext importFromBlock() {
			return GetRuleContext<ImportFromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_importStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(Import);
			State = 396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 393;
				Match(WS);
				}
				}
				State = 398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 399;
			importFromBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportModuleItemsContext importModuleItems() {
			return GetRuleContext<ImportModuleItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDefaultContext importDefault() {
			return GetRuleContext<ImportDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ImportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromBlockContext importFromBlock() {
		ImportFromBlockContext _localctx = new ImportFromBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_importFromBlock);
		try {
			State = 411;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
			case Multiply:
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Parse:
			case Reg:
			case Read:
			case Files:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 402;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 401;
					importDefault();
					}
					break;
				}
				State = 406;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Multiply:
				case NullLiteral:
				case Unset:
				case True:
				case False:
				case Break:
				case Do:
				case Instanceof:
				case Switch:
				case Case:
				case Default:
				case Else:
				case Catch:
				case Finally:
				case Return:
				case Continue:
				case For:
				case While:
				case Parse:
				case Reg:
				case Read:
				case Files:
				case Loop:
				case Until:
				case This:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case Yield:
				case Is:
				case Contains:
				case VerbalAnd:
				case VerbalNot:
				case VerbalOr:
				case Goto:
				case Get:
				case Set:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Base:
				case Export:
				case Import:
				case From:
				case As:
				case Async:
				case Await:
				case Static:
				case Global:
				case Local:
				case Identifier:
					{
					State = 404;
					importNamespace();
					}
					break;
				case OpenBrace:
					{
					State = 405;
					importModuleItems();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 408;
				importFrom();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 410;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasNameContext[] importAliasName() {
			return GetRuleContexts<ImportAliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasNameContext importAliasName(int i) {
			return GetRuleContext<ImportAliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ImportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importModuleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportModuleItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportModuleItemsContext importModuleItems() {
		ImportModuleItemsContext _localctx = new ImportModuleItemsContext(Context, State);
		EnterRule(_localctx, 32, RULE_importModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(OpenBrace);
			State = 425;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 414;
					importAliasName();
					State = 418;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 415;
						Match(WS);
						}
						}
						State = 420;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 421;
					Match(Comma);
					}
					} 
				}
				State = 427;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843009213685775L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 428;
				importAliasName();
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma || _la==WS) {
					{
					State = 432;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 429;
						Match(WS);
						}
						}
						State = 434;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 435;
					Match(Comma);
					}
				}

				}
			}

			State = 440;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext moduleExportName() {
			return GetRuleContext<ModuleExportNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportedBindingContext importedBinding() {
			return GetRuleContext<ImportedBindingContext>(0);
		}
		public ImportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasNameContext importAliasName() {
		ImportAliasNameContext _localctx = new ImportAliasNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_importAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			moduleExportName();
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 443;
				Match(As);
				State = 444;
				importedBinding();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleExportNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ModuleExportNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleExportName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleExportName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleExportNameContext moduleExportName() {
		ModuleExportNameContext _localctx = new ModuleExportNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_moduleExportName);
		try {
			State = 449;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Parse:
			case Reg:
			case Read:
			case Files:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447;
				identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 448;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportedBindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		public ImportedBindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importedBinding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportedBinding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportedBindingContext importedBinding() {
		ImportedBindingContext _localctx = new ImportedBindingContext(Context, State);
		EnterRule(_localctx, 38, RULE_importedBinding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 268959745L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext aliasName() {
			return GetRuleContext<AliasNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ImportDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefaultContext importDefault() {
		ImportDefaultContext _localctx = new ImportDefaultContext(Context, State);
		EnterRule(_localctx, 40, RULE_importDefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			aliasName();
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 454;
				Match(WS);
				}
				}
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 460;
			Match(Comma);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public ImportNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportNamespaceContext importNamespace() {
		ImportNamespaceContext _localctx = new ImportNamespaceContext(Context, State);
		EnterRule(_localctx, 42, RULE_importNamespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
				{
				State = 462;
				Match(Multiply);
				}
				break;
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Parse:
			case Reg:
			case Read:
			case Files:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				{
				State = 463;
				identifierName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 466;
				Match(As);
				State = 467;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(MainParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ImportFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromContext importFrom() {
		ImportFromContext _localctx = new ImportFromContext(Context, State);
		EnterRule(_localctx, 44, RULE_importFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			Match(From);
			State = 471;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public AliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasNameContext aliasName() {
		AliasNameContext _localctx = new AliasNameContext(Context, State);
		EnterRule(_localctx, 46, RULE_aliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			identifierName();
			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 474;
				Match(As);
				State = 475;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
	 
		public ExportStatementContext() { }
		public virtual void CopyFrom(ExportStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExportDefaultDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ExportDefaultDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDefaultDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExportDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExportFromBlockContext exportFromBlock() {
			return GetRuleContext<ExportFromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		public ExportDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_exportStatement);
		try {
			State = 489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				_localctx = new ExportDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 478;
				Match(Export);
				State = 480;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 479;
					Match(Default);
					}
					break;
				}
				State = 484;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 482;
					exportFromBlock();
					}
					break;
				case 2:
					{
					State = 483;
					declaration();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ExportDefaultDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 486;
				Match(Export);
				State = 487;
				Match(Default);
				State = 488;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportModuleItemsContext exportModuleItems() {
			return GetRuleContext<ExportModuleItemsContext>(0);
		}
		public ExportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportFromBlockContext exportFromBlock() {
		ExportFromBlockContext _localctx = new ExportFromBlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_exportFromBlock);
		int _la;
		try {
			State = 498;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Parse:
			case Reg:
			case Read:
			case Files:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 491;
				importNamespace();
				State = 492;
				importFrom();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 494;
				exportModuleItems();
				State = 496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==From) {
					{
					State = 495;
					importFrom();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExportAliasNameContext[] exportAliasName() {
			return GetRuleContexts<ExportAliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportAliasNameContext exportAliasName(int i) {
			return GetRuleContext<ExportAliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ExportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportModuleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportModuleItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportModuleItemsContext exportModuleItems() {
		ExportModuleItemsContext _localctx = new ExportModuleItemsContext(Context, State);
		EnterRule(_localctx, 52, RULE_exportModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			Match(OpenBrace);
			State = 512;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 501;
					exportAliasName();
					State = 505;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 502;
						Match(WS);
						}
						}
						State = 507;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 508;
					Match(Comma);
					}
					} 
				}
				State = 514;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			State = 525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843009213685775L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 515;
				exportAliasName();
				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma || _la==WS) {
					{
					State = 519;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 516;
						Match(WS);
						}
						}
						State = 521;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 522;
					Match(Comma);
					}
				}

				}
			}

			State = 527;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportAliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext[] moduleExportName() {
			return GetRuleContexts<ModuleExportNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext moduleExportName(int i) {
			return GetRuleContext<ModuleExportNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public ExportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportAliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportAliasNameContext exportAliasName() {
		ExportAliasNameContext _localctx = new ExportAliasNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_exportAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			moduleExportName();
			State = 532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 530;
				Match(As);
				State = 531;
				moduleExportName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_declaration);
		try {
			State = 536;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 534;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 535;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 58, RULE_variableDeclarationList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			variableDeclaration();
			State = 549;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 542;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 539;
						Match(WS);
						}
						}
						State = 544;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 545;
					Match(Comma);
					State = 546;
					variableDeclaration();
					}
					} 
				}
				State = 551;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 60, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			assignable();
			State = 557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 553;
				assignmentOperator();
				State = 554;
				expression(0);
				}
				break;
			case 2:
				{
				State = 556;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PlusPlus || _la==MinusMinus) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public FunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStatementContext functionStatement() {
		FunctionStatementContext _localctx = new FunctionStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_functionStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			primaryExpression(0);
			State = 566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 561;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 560;
						Match(WS);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 563;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 565;
				arguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			if (!(InputStream.LA(1) != MainLexer.OpenBrace && !this.isFunctionCallStatement())) throw new FailedPredicateException(this, "InputStream.LA(1) != MainLexer.OpenBrace && !this.isFunctionCallStatement()");
			State = 569;
			expressionSequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MainParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			Match(If);
			State = 575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 572;
				s();
				}
				}
				State = 577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 578;
			singleExpression(0);
			State = 582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 579;
				Match(WS);
				}
				}
				State = 584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 585;
			flowBlock();
			State = 586;
			elseProduction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlowBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FlowBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flowBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlowBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlowBlockContext flowBlock() {
		FlowBlockContext _localctx = new FlowBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_flowBlock);
		try {
			int _alt;
			State = 595;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 589;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 588;
						Match(EOL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 591;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 593;
				statement();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 594;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public UntilProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilProductionContext untilProduction() {
		UntilProductionContext _localctx = new UntilProductionContext(Context, State);
		EnterRule(_localctx, 70, RULE_untilProduction);
		int _la;
		try {
			State = 607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 597;
				Match(EOL);
				State = 598;
				Match(Until);
				State = 602;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 599;
					s();
					}
					}
					State = 604;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 605;
				singleExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 606;
				if (!(!this.second(Until))) throw new FailedPredicateException(this, "!this.second(Until)");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public ElseProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseProductionContext elseProduction() {
		ElseProductionContext _localctx = new ElseProductionContext(Context, State);
		EnterRule(_localctx, 72, RULE_elseProduction);
		try {
			int _alt;
			State = 619;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 609;
				Match(EOL);
				State = 610;
				Match(Else);
				State = 614;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 611;
						s();
						}
						} 
					}
					State = 616;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				}
				State = 617;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 618;
				if (!(!this.second(Else))) throw new FailedPredicateException(this, "!this.second(Else)");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public LoopStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MainParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MainParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForInParametersContext forInParameters() {
			return GetRuleContext<ForInParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SpecializedLoopStatementContext : IterationStatementContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Files() { return GetToken(MainParser.Files, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Read() { return GetToken(MainParser.Read, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Reg() { return GetToken(MainParser.Reg, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Parse() { return GetToken(MainParser.Parse, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public SpecializedLoopStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecializedLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_iterationStatement);
		int _la;
		try {
			int _alt;
			State = 712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				_localctx = new SpecializedLoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 621;
				Match(Loop);
				State = 622;
				((SpecializedLoopStatementContext)_localctx).type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 15L) != 0)) ) {
					((SpecializedLoopStatementContext)_localctx).type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 623;
					Match(WS);
					}
					}
					State = 628;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 629;
				singleExpression(0);
				State = 642;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 633;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 630;
							Match(WS);
							}
							}
							State = 635;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 636;
						Match(Comma);
						State = 638;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
						case 1:
							{
							State = 637;
							singleExpression(0);
							}
							break;
						}
						}
						} 
					}
					State = 644;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				}
				State = 648;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 645;
					Match(WS);
					}
					}
					State = 650;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 651;
				flowBlock();
				State = 652;
				untilProduction();
				State = 653;
				elseProduction();
				}
				break;
			case 2:
				_localctx = new LoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 655;
				if (!(this.isValidLoopExpression())) throw new FailedPredicateException(this, "this.isValidLoopExpression()");
				State = 656;
				Match(Loop);
				State = 660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 657;
					Match(WS);
					}
					}
					State = 662;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 670;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 663;
					singleExpression(0);
					State = 667;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 664;
						Match(WS);
						}
						}
						State = 669;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 672;
				flowBlock();
				State = 673;
				untilProduction();
				State = 674;
				elseProduction();
				}
				break;
			case 3:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 676;
				Match(While);
				State = 680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 677;
					Match(WS);
					}
					}
					State = 682;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 683;
				singleExpression(0);
				State = 687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 684;
					Match(WS);
					}
					}
					State = 689;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 690;
				flowBlock();
				State = 691;
				untilProduction();
				State = 692;
				elseProduction();
				}
				break;
			case 4:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 694;
				Match(For);
				State = 698;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 695;
						Match(WS);
						}
						} 
					}
					State = 700;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
				}
				State = 701;
				forInParameters();
				State = 705;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 702;
					Match(WS);
					}
					}
					State = 707;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 708;
				flowBlock();
				State = 709;
				untilProduction();
				State = 710;
				elseProduction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext[] assignable() {
			return GetRuleContexts<AssignableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable(int i) {
			return GetRuleContext<AssignableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ForInParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInParametersContext forInParameters() {
		ForInParametersContext _localctx = new ForInParametersContext(Context, State);
		EnterRule(_localctx, 76, RULE_forInParameters);
		int _la;
		try {
			int _alt;
			State = 781;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Comma:
			case NullLiteral:
			case Do:
			case Default:
			case Parse:
			case Reg:
			case Read:
			case Files:
			case This:
			case In:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case From:
			case As:
			case Identifier:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 58511616085606401L) != 0) || _la==Identifier) {
					{
					State = 714;
					assignable();
					}
				}

				State = 729;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 720;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 717;
							Match(WS);
							}
							}
							State = 722;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 723;
						Match(Comma);
						State = 725;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 58511616085606401L) != 0) || _la==Identifier) {
							{
							State = 724;
							assignable();
							}
						}

						}
						} 
					}
					State = 731;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
				}
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 732;
					Match(WS);
					}
					}
					State = 737;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 738;
				Match(In);
				State = 742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 739;
					Match(WS);
					}
					}
					State = 744;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 745;
				singleExpression(0);
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 746;
				Match(OpenParen);
				State = 748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 58511616085606401L) != 0) || _la==Identifier) {
					{
					State = 747;
					assignable();
					}
				}

				State = 762;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 753;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 750;
							Match(WS);
							}
							}
							State = 755;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 756;
						Match(Comma);
						State = 758;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 58511616085606401L) != 0) || _la==Identifier) {
							{
							State = 757;
							assignable();
							}
						}

						}
						} 
					}
					State = 764;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
				}
				State = 768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 765;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 770;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 771;
				Match(In);
				State = 775;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 772;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 777;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 778;
				singleExpression(0);
				State = 779;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(MainParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_continueStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			Match(Continue);
			State = 787;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 784;
					Match(WS);
					}
					} 
				}
				State = 789;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			}
			State = 795;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 790;
				propertyName();
				}
				break;
			case 2:
				{
				State = 791;
				Match(OpenParen);
				State = 792;
				propertyName();
				State = 793;
				Match(CloseParen);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MainParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_breakStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			Match(Break);
			State = 801;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 798;
					Match(WS);
					}
					} 
				}
				State = 803;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			State = 809;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 804;
				Match(OpenParen);
				State = 805;
				propertyName();
				State = 806;
				Match(CloseParen);
				}
				break;
			case 2:
				{
				State = 808;
				propertyName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MainParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_returnStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 811;
			Match(Return);
			State = 815;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 812;
					Match(WS);
					}
					} 
				}
				State = 817;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			}
			State = 819;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				{
				State = 818;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_yieldStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			Match(Yield);
			State = 825;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 822;
					Match(WS);
					}
					} 
				}
				State = 827;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			}
			State = 829;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 828;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(MainParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_switchStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 831;
			Match(Switch);
			State = 835;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 832;
					Match(WS);
					}
					} 
				}
				State = 837;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			}
			State = 839;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 838;
				singleExpression(0);
				}
				break;
			}
			State = 849;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 841;
					Match(WS);
					}
					}
					State = 846;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 847;
				Match(Comma);
				State = 848;
				literal();
				}
				break;
			}
			State = 854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 851;
				s();
				}
				}
				State = 856;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 857;
			caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext[] caseClauses() {
			return GetRuleContexts<CaseClausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext caseClauses(int i) {
			return GetRuleContext<CaseClausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 88, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 859;
			Match(OpenBrace);
			State = 863;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 860;
				s();
				}
				}
				State = 865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 867;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Case) {
				{
				State = 866;
				caseClauses();
				}
			}

			State = 873;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Default) {
				{
				State = 869;
				defaultClause();
				State = 871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Case) {
					{
					State = 870;
					caseClauses();
					}
				}

				}
			}

			State = 875;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 90, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 877;
				caseClause();
				}
				}
				State = 880;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(MainParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 92, RULE_caseClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 882;
			Match(Case);
			State = 886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 883;
				Match(WS);
				}
				}
				State = 888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 889;
			expressionSequence();
			State = 893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 890;
				Match(WS);
				}
				}
				State = 895;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 896;
			Match(Colon);
			State = 905;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				{
				State = 900;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 897;
						s();
						}
						} 
					}
					State = 902;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
				}
				State = 903;
				statementList();
				}
				break;
			case 2:
				{
				State = 904;
				Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 94, RULE_defaultClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			Match(Default);
			State = 911;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 908;
				Match(WS);
				}
				}
				State = 913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 914;
			Match(Colon);
			State = 923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 918;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 915;
						s();
						}
						} 
					}
					State = 920;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
				}
				State = 921;
				statementList();
				}
				break;
			case 2:
				{
				State = 922;
				Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		public LabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelledStatementContext labelledStatement() {
		LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_labelledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 925;
			Match(Identifier);
			State = 926;
			Match(Colon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(MainParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_gotoStatement);
		int _la;
		try {
			State = 947;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 928;
				Match(Goto);
				State = 932;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 929;
					Match(WS);
					}
					}
					State = 934;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 935;
				propertyName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 936;
				Match(Goto);
				State = 940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 937;
					Match(WS);
					}
					}
					State = 942;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 943;
				Match(OpenParen);
				State = 944;
				propertyName();
				State = 945;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(MainParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_throwStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 949;
			Match(Throw);
			State = 953;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 950;
					Match(WS);
					}
					} 
				}
				State = 955;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			}
			State = 957;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 956;
				singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(MainParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext[] catchProduction() {
			return GetRuleContexts<CatchProductionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext catchProduction(int i) {
			return GetRuleContext<CatchProductionContext>(i);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_tryStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 959;
			Match(Try);
			State = 963;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 960;
					s();
					}
					} 
				}
				State = 965;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
			}
			State = 966;
			statement();
			State = 970;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 967;
					catchProduction();
					}
					} 
				}
				State = 972;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			}
			State = 973;
			elseProduction();
			State = 974;
			finallyProduction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(MainParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchAssignableContext catchAssignable() {
			return GetRuleContext<CatchAssignableContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 104, RULE_catchProduction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 976;
			Match(EOL);
			State = 977;
			Match(Catch);
			State = 981;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,124,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 978;
					Match(WS);
					}
					} 
				}
				State = 983;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,124,Context);
			}
			State = 991;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenParen || _la==NullLiteral || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & 40535967911964689L) != 0)) {
				{
				State = 984;
				catchAssignable();
				State = 988;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 985;
					Match(WS);
					}
					}
					State = 990;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 993;
			flowBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchAssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CatchClassesContext catchClasses() {
			return GetRuleContext<CatchClassesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public CatchAssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchAssignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchAssignable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchAssignableContext catchAssignable() {
		CatchAssignableContext _localctx = new CatchAssignableContext(Context, State);
		EnterRule(_localctx, 106, RULE_catchAssignable);
		int _la;
		try {
			State = 1070;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 995;
				catchClasses();
				State = 1003;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
				case 1:
					{
					State = 999;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 996;
						Match(WS);
						}
						}
						State = 1001;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1002;
					Match(As);
					}
					break;
				}
				State = 1012;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
				case 1:
					{
					State = 1008;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1005;
						Match(WS);
						}
						}
						State = 1010;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1011;
					identifier();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1014;
				Match(OpenParen);
				State = 1015;
				catchClasses();
				State = 1023;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
				case 1:
					{
					State = 1019;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1016;
						Match(WS);
						}
						}
						State = 1021;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1022;
					Match(As);
					}
					break;
				}
				State = 1032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 58511616085606401L) != 0) || _la==Identifier || _la==WS) {
					{
					State = 1028;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1025;
						Match(WS);
						}
						}
						State = 1030;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1031;
					identifier();
					}
				}

				State = 1034;
				Match(CloseParen);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 1039;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1036;
					Match(WS);
					}
					}
					State = 1041;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1042;
				Match(As);
				}
				{
				State = 1047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1044;
					Match(WS);
					}
					}
					State = 1049;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1050;
				identifier();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1051;
				Match(OpenParen);
				{
				State = 1055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1052;
					Match(WS);
					}
					}
					State = 1057;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1058;
				Match(As);
				}
				{
				State = 1063;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1060;
					Match(WS);
					}
					}
					State = 1065;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1066;
				identifier();
				}
				State = 1068;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClassesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public CatchClassesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClasses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClasses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClassesContext catchClasses() {
		CatchClassesContext _localctx = new CatchClassesContext(Context, State);
		EnterRule(_localctx, 108, RULE_catchClasses);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1072;
			identifier();
			State = 1083;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1076;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1073;
						Match(WS);
						}
						}
						State = 1078;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1079;
					Match(Comma);
					State = 1080;
					identifier();
					}
					} 
				}
				State = 1085;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(MainParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 110, RULE_finallyProduction);
		try {
			int _alt;
			State = 1096;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1086;
				Match(EOL);
				State = 1087;
				Match(Finally);
				State = 1091;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1088;
						s();
						}
						} 
					}
					State = 1093;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
				}
				State = 1094;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1095;
				if (!(!this.second(Finally))) throw new FailedPredicateException(this, "!this.second(Finally)");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 112, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098;
			functionHead();
			State = 1099;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MainParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(MainParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassExtensionNameContext classExtensionName() {
			return GetRuleContext<ClassExtensionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 114, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1101;
			Match(Class);
			State = 1105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 1102;
				Match(WS);
				}
				}
				State = 1107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1108;
			identifier();
			State = 1121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				{
				State = 1110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1109;
					Match(WS);
					}
					}
					State = 1112;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS );
				State = 1114;
				Match(Extends);
				State = 1116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1115;
					Match(WS);
					}
					}
					State = 1118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS );
				State = 1120;
				classExtensionName();
				}
				break;
			}
			State = 1126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1123;
				s();
				}
				}
				State = 1128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1129;
			classTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassExtensionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MainParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MainParser.Dot, i);
		}
		public ClassExtensionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classExtensionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExtensionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassExtensionNameContext classExtensionName() {
		ClassExtensionNameContext _localctx = new ClassExtensionNameContext(Context, State);
		EnterRule(_localctx, 116, RULE_classExtensionName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1131;
			identifier();
			State = 1136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 1132;
				Match(Dot);
				State = 1133;
				identifier();
				}
				}
				State = 1138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext[] classElement() {
			return GetRuleContexts<ClassElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext classElement(int i) {
			return GetRuleContext<ClassElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ClassTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTailContext classTail() {
		ClassTailContext _localctx = new ClassTailContext(Context, State);
		EnterRule(_localctx, 118, RULE_classTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1139;
			Match(OpenBrace);
			State = 1146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843009213686271L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 7L) != 0)) {
				{
				State = 1144;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NullLiteral:
				case Unset:
				case True:
				case False:
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
				case Break:
				case Do:
				case Instanceof:
				case Switch:
				case Case:
				case Default:
				case Else:
				case Catch:
				case Finally:
				case Return:
				case Continue:
				case For:
				case While:
				case Parse:
				case Reg:
				case Read:
				case Files:
				case Loop:
				case Until:
				case This:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case Yield:
				case Is:
				case Contains:
				case VerbalAnd:
				case VerbalNot:
				case VerbalOr:
				case Goto:
				case Get:
				case Set:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Base:
				case Export:
				case Import:
				case From:
				case As:
				case Async:
				case Await:
				case Static:
				case Global:
				case Local:
				case Identifier:
				case StringLiteral:
					{
					State = 1140;
					classElement();
					State = 1141;
					Match(EOL);
					}
					break;
				case EOL:
					{
					State = 1143;
					Match(EOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1149;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementContext : ParserRuleContext {
		public ClassElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElement; } }
	 
		public ClassElementContext() { }
		public virtual void CopyFrom(ClassElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public NestedClassDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassFieldDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext[] fieldDefinition() {
			return GetRuleContexts<FieldDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition(int i) {
			return GetRuleContext<FieldDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ClassFieldDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassMethodDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public ClassMethodDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassPropertyDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDefinitionContext propertyDefinition() {
			return GetRuleContext<PropertyDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ClassPropertyDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementContext classElement() {
		ClassElementContext _localctx = new ClassElementContext(Context, State);
		EnterRule(_localctx, 120, RULE_classElement);
		int _la;
		try {
			State = 1186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
			case 1:
				_localctx = new ClassMethodDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1151;
				methodDefinition();
				}
				break;
			case 2:
				_localctx = new ClassPropertyDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1159;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
				case 1:
					{
					State = 1152;
					Match(Static);
					State = 1156;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1153;
						Match(WS);
						}
						}
						State = 1158;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 1161;
				propertyDefinition();
				}
				break;
			case 3:
				_localctx = new ClassFieldDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1169;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
				case 1:
					{
					State = 1162;
					Match(Static);
					State = 1166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1163;
						Match(WS);
						}
						}
						State = 1168;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 1171;
				fieldDefinition();
				State = 1182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma || _la==WS) {
					{
					{
					State = 1175;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1172;
						Match(WS);
						}
						}
						State = 1177;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1178;
					Match(Comma);
					State = 1179;
					fieldDefinition();
					}
					}
					State = 1184;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 4:
				_localctx = new NestedClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1185;
				classDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
		EnterRule(_localctx, 122, RULE_methodDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188;
			functionHead();
			State = 1189;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassPropertyNameContext classPropertyName() {
			return GetRuleContext<ClassPropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyGetterDefinitionContext[] propertyGetterDefinition() {
			return GetRuleContexts<PropertyGetterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyGetterDefinitionContext propertyGetterDefinition(int i) {
			return GetRuleContext<PropertyGetterDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySetterDefinitionContext[] propertySetterDefinition() {
			return GetRuleContexts<PropertySetterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySetterDefinitionContext propertySetterDefinition(int i) {
			return GetRuleContext<PropertySetterDefinitionContext>(i);
		}
		public PropertyDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefinitionContext propertyDefinition() {
		PropertyDefinitionContext _localctx = new PropertyDefinitionContext(Context, State);
		EnterRule(_localctx, 124, RULE_propertyDefinition);
		int _la;
		try {
			State = 1216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1191;
				classPropertyName();
				State = 1192;
				Match(Arrow);
				State = 1193;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1195;
				classPropertyName();
				State = 1199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1196;
					s();
					}
					}
					State = 1201;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1202;
				Match(OpenBrace);
				State = 1210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 1210;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Get:
						{
						State = 1203;
						propertyGetterDefinition();
						State = 1204;
						Match(EOL);
						}
						break;
					case Set:
						{
						State = 1206;
						propertySetterDefinition();
						State = 1207;
						Match(EOL);
						}
						break;
					case EOL:
						{
						State = 1209;
						Match(EOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 1212;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8388611L) != 0) );
				State = 1214;
				Match(CloseBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassPropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public ClassPropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classPropertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassPropertyNameContext classPropertyName() {
		ClassPropertyNameContext _localctx = new ClassPropertyNameContext(Context, State);
		EnterRule(_localctx, 126, RULE_classPropertyName);
		int _la;
		try {
			State = 1232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1218;
				propertyName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1219;
				propertyName();
				State = 1220;
				Match(OpenBracket);
				State = 1222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & 306245874173345793L) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 1100383518799L) != 0)) {
					{
					State = 1221;
					formalParameterList();
					}
				}

				State = 1227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1224;
					s();
					}
					}
					State = 1229;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1230;
				Match(CloseBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(MainParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertyGetterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetterDefinitionContext propertyGetterDefinition() {
		PropertyGetterDefinitionContext _localctx = new PropertyGetterDefinitionContext(Context, State);
		EnterRule(_localctx, 128, RULE_propertyGetterDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1234;
			Match(Get);
			State = 1235;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(MainParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertySetterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetterDefinitionContext propertySetterDefinition() {
		PropertySetterDefinitionContext _localctx = new PropertySetterDefinitionContext(Context, State);
		EnterRule(_localctx, 130, RULE_propertySetterDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1237;
			Match(Set);
			State = 1238;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext[] propertyName() {
			return GetRuleContexts<PropertyNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName(int i) {
			return GetRuleContext<PropertyNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MainParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MainParser.Dot, i);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 132, RULE_fieldDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1240;
			propertyName();
			State = 1245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 1241;
				Match(Dot);
				State = 1242;
				propertyName();
				}
				}
				State = 1247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 1248;
			Match(Assign);
			State = 1249;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterArgContext lastFormalParameterArg() {
			return GetRuleContext<LastFormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext[] formalParameterArg() {
			return GetRuleContexts<FormalParameterArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg(int i) {
			return GetRuleContext<FormalParameterArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 134, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1262;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1251;
					formalParameterArg();
					State = 1255;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1252;
						Match(WS);
						}
						}
						State = 1257;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1258;
					Match(Comma);
					}
					} 
				}
				State = 1264;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			}
			State = 1265;
			lastFormalParameterArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterArgContext formalParameterArg() {
		FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
		EnterRule(_localctx, 136, RULE_formalParameterArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BitAnd) {
				{
				State = 1267;
				Match(BitAnd);
				}
			}

			State = 1270;
			identifier();
			State = 1274;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				{
				State = 1271;
				Match(Assign);
				State = 1272;
				expression(0);
				}
				break;
			case QuestionMark:
				{
				State = 1273;
				Match(QuestionMark);
				}
				break;
			case CloseBracket:
			case CloseParen:
			case Comma:
			case EOL:
			case WS:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg() {
			return GetRuleContext<FormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LastFormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterArgContext lastFormalParameterArg() {
		LastFormalParameterArgContext _localctx = new LastFormalParameterArgContext(Context, State);
		EnterRule(_localctx, 138, RULE_lastFormalParameterArg);
		int _la;
		try {
			State = 1281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1276;
				formalParameterArg();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 58511616085606401L) != 0) || _la==Identifier) {
					{
					State = 1277;
					identifier();
					}
				}

				State = 1280;
				Match(Multiply);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 140, RULE_arrayLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1283;
			Match(OpenBracket);
			State = 1287;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1284;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 1289;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			}
			State = 1297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738021042818L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843009213693951L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 11L) != 0)) {
				{
				State = 1290;
				arguments();
				State = 1294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1291;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1296;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1299;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MapElementListContext mapElementList() {
			return GetRuleContext<MapElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public MapLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapLiteralContext mapLiteral() {
		MapLiteralContext _localctx = new MapLiteralContext(Context, State);
		EnterRule(_localctx, 142, RULE_mapLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1301;
			Match(OpenBracket);
			State = 1305;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1302;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 1307;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
			}
			State = 1308;
			mapElementList();
			State = 1312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1309;
				_la = TokenStream.LA(1);
				if ( !(_la==EOL || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1315;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapElementContext[] mapElement() {
			return GetRuleContexts<MapElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapElementContext mapElement(int i) {
			return GetRuleContext<MapElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public MapElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapElementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapElementListContext mapElementList() {
		MapElementListContext _localctx = new MapElementListContext(Context, State);
		EnterRule(_localctx, 144, RULE_mapElementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma || _la==WS) {
				{
				{
				State = 1320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1317;
					Match(WS);
					}
					}
					State = 1322;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1323;
				Match(Comma);
				}
				}
				State = 1328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1329;
			mapElement();
			State = 1342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,182,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1333;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1330;
						Match(WS);
						}
						}
						State = 1335;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1336;
					Match(Comma);
					State = 1338;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738021034626L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843009213693951L) != 0) || _la==Identifier || _la==StringLiteral) {
						{
						State = 1337;
						mapElement();
						}
					}

					}
					} 
				}
				State = 1344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,182,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapElementContext : ParserRuleContext {
		public ExpressionContext key;
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MapElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapElementContext mapElement() {
		MapElementContext _localctx = new MapElementContext(Context, State);
		EnterRule(_localctx, 146, RULE_mapElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1345;
			_localctx.key = expression(0);
			State = 1346;
			Match(Colon);
			State = 1347;
			_localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberIdentifierContext memberIdentifier() {
			return GetRuleContext<MemberIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 148, RULE_propertyAssignment);
		int _la;
		try {
			_localctx = new PropertyExpressionAssignmentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 1349;
			memberIdentifier();
			State = 1353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1350;
				_la = TokenStream.LA(1);
				if ( !(_la==EOL || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1356;
			Match(Colon);
			State = 1360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1357;
				_la = TokenStream.LA(1);
				if ( !(_la==EOL || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1363;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 150, RULE_propertyName);
		try {
			State = 1369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1365;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1366;
				reservedWord();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1367;
				Match(StringLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1368;
				numericLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DereferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefStart() { return GetToken(MainParser.DerefStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefEnd() { return GetToken(MainParser.DerefEnd, 0); }
		public DereferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dereference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDereference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DereferenceContext dereference() {
		DereferenceContext _localctx = new DereferenceContext(Context, State);
		EnterRule(_localctx, 152, RULE_dereference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1371;
			Match(DerefStart);
			State = 1372;
			expression(0);
			State = 1373;
			Match(DerefEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 154, RULE_arguments);
		int _la;
		try {
			int _alt;
			State = 1405;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DerefStart:
			case OpenBracket:
			case OpenParen:
			case OpenBrace:
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case BitNot:
			case Not:
			case Multiply:
			case BitAnd:
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Parse:
			case Reg:
			case Read:
			case Files:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1375;
				argument();
				State = 1388;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,188,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1379;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 1376;
							Match(WS);
							}
							}
							State = 1381;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1382;
						Match(Comma);
						State = 1384;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
						case 1:
							{
							State = 1383;
							argument();
							}
							break;
						}
						}
						} 
					}
					State = 1390;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,188,Context);
				}
				}
				break;
			case Comma:
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1401;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1394;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 1391;
							Match(WS);
							}
							}
							State = 1396;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1397;
						Match(Comma);
						State = 1399;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
						case 1:
							{
							State = 1398;
							argument();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1403;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,191,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 156, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1407;
			expression(0);
			State = 1409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				{
				State = 1408;
				_la = TokenStream.LA(1);
				if ( !(_la==QuestionMark || _la==Multiply) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 158, RULE_expressionSequence);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1411;
			expression(0);
			State = 1422;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,195,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1415;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1412;
						Match(WS);
						}
						}
						State = 1417;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1418;
					Match(Comma);
					State = 1419;
					expression(0);
					}
					} 
				}
				State = 1424;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,195,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberIndexArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public MemberIndexArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberIndexArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberIndexArgumentsContext memberIndexArguments() {
		MemberIndexArgumentsContext _localctx = new MemberIndexArgumentsContext(Context, State);
		EnterRule(_localctx, 160, RULE_memberIndexArguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1425;
			Match(OpenBracket);
			State = 1429;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,196,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1426;
					s();
					}
					} 
				}
				State = 1431;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,196,Context);
			}
			State = 1439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738021042818L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843009213693951L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 11L) != 0)) {
				{
				State = 1432;
				arguments();
				State = 1436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1433;
					s();
					}
					}
					State = 1438;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1441;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		public ExpressionContext ternCond;
		public ExpressionContext ternTrue;
		public ExpressionContext ternFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MainParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(MainParser.Power, 0); }
		public PowerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreIncrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FatArrowExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FatArrowExpressionHeadContext fatArrowExpressionHead() {
			return GetRuleContext<FatArrowExpressionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FatArrowExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFatArrowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MainParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionDummyContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ExpressionDummyContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionDummy(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(MainParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegExMatchExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegExMatch() { return GetToken(MainParser.RegExMatch, 0); }
		public RegExMatchExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegExMatchExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecreaseExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreDecreaseExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpressionHeadContext functionExpressionHead() {
			return GetRuleContext<FunctionExpressionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public FunctionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public PrimaryExpressionContext left;
		public AssignmentOperatorContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecreaseExpressionContext : ExpressionContext {
		public ExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostDecreaseExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryPlusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenateExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConcatDot() { return GetToken(MainParser.ConcatDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ConcatenateExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(MainParser.BitXOr, 0); }
		public BitXOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(MainParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(MainParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(MainParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityNotEquals() { return GetToken(MainParser.IdentityNotEquals, 0); }
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VerbalNotExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public VerbalNotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbalNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(MainParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivide() { return GetToken(MainParser.IntegerDivide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitShiftExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(MainParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(MainParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogical() { return GetToken(MainParser.RightShiftLogical, 0); }
		public BitShiftExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(MainParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(MainParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(MainParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(MainParser.GreaterThanEquals, 0); }
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : ExpressionContext {
		public ExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostIncrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContainExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public PrimaryExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(MainParser.Contains, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ContainExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitNotExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(MainParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BitNotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public BitAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(MainParser.BitOr, 0); }
		public BitOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(MainParser.NullCoalesce, 0); }
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 162;
		EnterRecursionRule(_localctx, 162, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
			case 1:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1444;
				Match(PlusPlus);
				State = 1445;
				((PreIncrementExpressionContext)_localctx).right = expression(27);
				}
				break;
			case 2:
				{
				_localctx = new PreDecreaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1446;
				Match(MinusMinus);
				State = 1447;
				((PreDecreaseExpressionContext)_localctx).right = expression(26);
				}
				break;
			case 3:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1448;
				Match(Minus);
				State = 1449;
				((UnaryMinusExpressionContext)_localctx).right = expression(24);
				}
				break;
			case 4:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1450;
				Match(Not);
				State = 1454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1451;
					Match(WS);
					}
					}
					State = 1456;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1457;
				((NotExpressionContext)_localctx).right = expression(23);
				}
				break;
			case 5:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1458;
				Match(Plus);
				State = 1459;
				((UnaryPlusExpressionContext)_localctx).right = expression(22);
				}
				break;
			case 6:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1460;
				Match(BitNot);
				State = 1461;
				((BitNotExpressionContext)_localctx).right = expression(21);
				}
				break;
			case 7:
				{
				_localctx = new VerbalNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1462;
				Match(VerbalNot);
				State = 1466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1463;
					Match(WS);
					}
					}
					State = 1468;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1469;
				((VerbalNotExpressionContext)_localctx).right = expression(9);
				}
				break;
			case 8:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1470;
				((AssignmentExpressionContext)_localctx).left = primaryExpression(0);
				State = 1471;
				((AssignmentExpressionContext)_localctx).op = assignmentOperator();
				State = 1472;
				((AssignmentExpressionContext)_localctx).right = expression(4);
				}
				break;
			case 9:
				{
				_localctx = new FatArrowExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1474;
				fatArrowExpressionHead();
				State = 1475;
				Match(Arrow);
				State = 1476;
				expression(3);
				}
				break;
			case 10:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1478;
				functionExpressionHead();
				State = 1482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1479;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1484;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1485;
				block();
				}
				break;
			case 11:
				{
				_localctx = new ExpressionDummyContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1487;
				primaryExpression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1620;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,218,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1618;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
					case 1:
						{
						_localctx = new PowerExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PowerExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1490;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1491;
						((PowerExpressionContext)_localctx).op = Match(Power);
						State = 1492;
						((PowerExpressionContext)_localctx).right = expression(25);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicativeExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1493;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						{
						State = 1494;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1879048192L) != 0)) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1498;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1495;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1500;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1501;
						((MultiplicativeExpressionContext)_localctx).right = expression(21);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AdditiveExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1502;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						{
						State = 1503;
						((AdditiveExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1507;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1504;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1509;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1510;
						((AdditiveExpressionContext)_localctx).right = expression(20);
						}
						break;
					case 4:
						{
						_localctx = new BitShiftExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitShiftExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1511;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1512;
						((BitShiftExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0)) ) {
							((BitShiftExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1513;
						((BitShiftExpressionContext)_localctx).right = expression(19);
						}
						break;
					case 5:
						{
						_localctx = new BitAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1514;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						{
						State = 1518;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1515;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1520;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1521;
						((BitAndExpressionContext)_localctx).op = Match(BitAnd);
						State = 1525;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1522;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1527;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1528;
						((BitAndExpressionContext)_localctx).right = expression(18);
						}
						break;
					case 6:
						{
						_localctx = new BitXOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitXOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1529;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1530;
						((BitXOrExpressionContext)_localctx).op = Match(BitXOr);
						State = 1531;
						((BitXOrExpressionContext)_localctx).right = expression(17);
						}
						break;
					case 7:
						{
						_localctx = new BitOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1532;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1533;
						((BitOrExpressionContext)_localctx).op = Match(BitOr);
						State = 1534;
						((BitOrExpressionContext)_localctx).right = expression(16);
						}
						break;
					case 8:
						{
						_localctx = new ConcatenateExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ConcatenateExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1535;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1542;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ConcatDot:
							{
							State = 1536;
							Match(ConcatDot);
							}
							break;
						case WS:
							{
							State = 1538;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							do {
								{
								{
								State = 1537;
								Match(WS);
								}
								}
								State = 1540;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							} while ( _la==WS );
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1544;
						((ConcatenateExpressionContext)_localctx).right = expression(15);
						}
						break;
					case 9:
						{
						_localctx = new RegExMatchExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RegExMatchExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1545;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1546;
						((RegExMatchExpressionContext)_localctx).op = Match(RegExMatch);
						State = 1547;
						((RegExMatchExpressionContext)_localctx).right = expression(14);
						}
						break;
					case 10:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RelationalExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1548;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1549;
						((RelationalExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4123168604160L) != 0)) ) {
							((RelationalExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1550;
						((RelationalExpressionContext)_localctx).right = expression(13);
						}
						break;
					case 11:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1551;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1552;
						((EqualityExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 65970697666560L) != 0)) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1553;
						((EqualityExpressionContext)_localctx).right = expression(12);
						}
						break;
					case 12:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1554;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1557;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case And:
							{
							State = 1555;
							((LogicalAndExpressionContext)_localctx).op = Match(And);
							}
							break;
						case VerbalAnd:
							{
							State = 1556;
							((LogicalAndExpressionContext)_localctx).op = Match(VerbalAnd);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1559;
						((LogicalAndExpressionContext)_localctx).right = expression(9);
						}
						break;
					case 13:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1560;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1563;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case Or:
							{
							State = 1561;
							((LogicalOrExpressionContext)_localctx).op = Match(Or);
							}
							break;
						case VerbalOr:
							{
							State = 1562;
							((LogicalOrExpressionContext)_localctx).op = Match(VerbalOr);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1565;
						((LogicalOrExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 14:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CoalesceExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1566;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1567;
						((CoalesceExpressionContext)_localctx).op = Match(NullCoalesce);
						State = 1568;
						((CoalesceExpressionContext)_localctx).right = expression(6);
						}
						break;
					case 15:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TernaryExpressionContext)_localctx).ternCond = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1569;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1573;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1570;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1575;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1576;
						Match(QuestionMark);
						State = 1580;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1577;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1582;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1583;
						((TernaryExpressionContext)_localctx).ternTrue = expression(0);
						State = 1587;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1584;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1589;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1590;
						Match(Colon);
						State = 1594;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1591;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1596;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1597;
						((TernaryExpressionContext)_localctx).ternFalse = expression(5);
						}
						break;
					case 16:
						{
						_localctx = new PostIncrementExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PostIncrementExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1599;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1600;
						Match(PlusPlus);
						}
						break;
					case 17:
						{
						_localctx = new PostDecreaseExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PostDecreaseExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1601;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1602;
						Match(MinusMinus);
						}
						break;
					case 18:
						{
						_localctx = new ContainExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1603;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						{
						State = 1607;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1604;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1609;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1610;
						((ContainExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 52428801L) != 0)) ) {
							((ContainExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1614;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1611;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1616;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1617;
						((ContainExpressionContext)_localctx).right = primaryExpression(0);
						}
						break;
					}
					} 
				}
				State = 1622;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,218,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BitShiftExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(MainParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(MainParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogical() { return GetToken(MainParser.RightShiftLogical, 0); }
		public BitShiftExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecreaseExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PostDecreaseExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecreaseExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegExMatchExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegExMatch() { return GetToken(MainParser.RegExMatch, 0); }
		public RegExMatchExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegExMatchExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleExpressionDummyContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public SingleExpressionDummyContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleExpressionDummy(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public BitAndExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitNotExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(MainParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public BitNotExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitNotExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContainExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public PrimaryExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(MainParser.Contains, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ContainExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(MainParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public NotExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(MainParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivide() { return GetToken(MainParser.IntegerDivide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public MultiplicativeExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(MainParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(MainParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(MainParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(MainParser.GreaterThanEquals, 0); }
		public RelationalExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MainParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		public LogicalOrExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(MainParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(MainParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(MainParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityNotEquals() { return GetToken(MainParser.IdentityNotEquals, 0); }
		public EqualityExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PostIncrementExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(MainParser.NullCoalesce, 0); }
		public CoalesceExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryMinusExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(MainParser.BitOr, 0); }
		public BitOrExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VerbalNotExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public VerbalNotExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbalNotExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext ternCond;
		public ExpressionContext ternTrue;
		public SingleExpressionContext ternFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public TernaryExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecreaseExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreDecreaseExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecreaseExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryPlusExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(MainParser.Power, 0); }
		public PowerExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public AdditiveExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionDuplicateContext : SingleExpressionContext {
		public PrimaryExpressionContext left;
		public AssignmentOperatorContext op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public AssignmentExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenateExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConcatDot() { return GetToken(MainParser.ConcatDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ConcatenateExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenateExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MainParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		public LogicalAndExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreIncrementExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(MainParser.BitXOr, 0); }
		public BitXOrExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 164;
		EnterRecursionRule(_localctx, 164, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1655;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
			case 1:
				{
				_localctx = new PreIncrementExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1624;
				Match(PlusPlus);
				State = 1625;
				((PreIncrementExpressionDuplicateContext)_localctx).right = singleExpression(25);
				}
				break;
			case 2:
				{
				_localctx = new PreDecreaseExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1626;
				Match(MinusMinus);
				State = 1627;
				((PreDecreaseExpressionDuplicateContext)_localctx).right = singleExpression(24);
				}
				break;
			case 3:
				{
				_localctx = new UnaryMinusExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1628;
				Match(Minus);
				State = 1629;
				((UnaryMinusExpressionDuplicateContext)_localctx).right = singleExpression(22);
				}
				break;
			case 4:
				{
				_localctx = new NotExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1630;
				Match(Not);
				State = 1634;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1631;
					Match(WS);
					}
					}
					State = 1636;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1637;
				((NotExpressionDuplicateContext)_localctx).right = singleExpression(21);
				}
				break;
			case 5:
				{
				_localctx = new UnaryPlusExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1638;
				Match(Plus);
				State = 1639;
				((UnaryPlusExpressionDuplicateContext)_localctx).right = singleExpression(20);
				}
				break;
			case 6:
				{
				_localctx = new BitNotExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1640;
				Match(BitNot);
				State = 1641;
				((BitNotExpressionDuplicateContext)_localctx).right = singleExpression(19);
				}
				break;
			case 7:
				{
				_localctx = new VerbalNotExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1642;
				Match(VerbalNot);
				State = 1646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1643;
					Match(WS);
					}
					}
					State = 1648;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1649;
				((VerbalNotExpressionDuplicateContext)_localctx).right = singleExpression(7);
				}
				break;
			case 8:
				{
				_localctx = new AssignmentExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1650;
				((AssignmentExpressionDuplicateContext)_localctx).left = primaryExpression(0);
				State = 1651;
				((AssignmentExpressionDuplicateContext)_localctx).op = assignmentOperator();
				State = 1652;
				((AssignmentExpressionDuplicateContext)_localctx).right = singleExpression(2);
				}
				break;
			case 9:
				{
				_localctx = new SingleExpressionDummyContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1654;
				primaryExpression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1787;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,237,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1785;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,236,Context) ) {
					case 1:
						{
						_localctx = new PowerExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((PowerExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1657;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1658;
						((PowerExpressionDuplicateContext)_localctx).op = Match(Power);
						State = 1659;
						((PowerExpressionDuplicateContext)_localctx).right = singleExpression(23);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((MultiplicativeExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1660;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						{
						State = 1661;
						((MultiplicativeExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1879048192L) != 0)) ) {
							((MultiplicativeExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1665;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1662;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1667;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1668;
						((MultiplicativeExpressionDuplicateContext)_localctx).right = singleExpression(19);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((AdditiveExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1669;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						{
						State = 1670;
						((AdditiveExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1674;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1671;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1676;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1677;
						((AdditiveExpressionDuplicateContext)_localctx).right = singleExpression(18);
						}
						break;
					case 4:
						{
						_localctx = new BitShiftExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((BitShiftExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1678;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1679;
						((BitShiftExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0)) ) {
							((BitShiftExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1680;
						((BitShiftExpressionDuplicateContext)_localctx).right = singleExpression(17);
						}
						break;
					case 5:
						{
						_localctx = new BitAndExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((BitAndExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1681;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						{
						State = 1685;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1682;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1687;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1688;
						((BitAndExpressionDuplicateContext)_localctx).op = Match(BitAnd);
						State = 1692;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1689;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1694;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1695;
						((BitAndExpressionDuplicateContext)_localctx).right = singleExpression(16);
						}
						break;
					case 6:
						{
						_localctx = new BitXOrExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((BitXOrExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1696;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1697;
						((BitXOrExpressionDuplicateContext)_localctx).op = Match(BitXOr);
						State = 1698;
						((BitXOrExpressionDuplicateContext)_localctx).right = singleExpression(15);
						}
						break;
					case 7:
						{
						_localctx = new BitOrExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((BitOrExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1699;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1700;
						((BitOrExpressionDuplicateContext)_localctx).op = Match(BitOr);
						State = 1701;
						((BitOrExpressionDuplicateContext)_localctx).right = singleExpression(14);
						}
						break;
					case 8:
						{
						_localctx = new ConcatenateExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((ConcatenateExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1702;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1709;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ConcatDot:
							{
							State = 1703;
							Match(ConcatDot);
							}
							break;
						case WS:
							{
							State = 1705;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							do {
								{
								{
								State = 1704;
								Match(WS);
								}
								}
								State = 1707;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							} while ( _la==WS );
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1711;
						((ConcatenateExpressionDuplicateContext)_localctx).right = singleExpression(13);
						}
						break;
					case 9:
						{
						_localctx = new RegExMatchExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((RegExMatchExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1712;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1713;
						((RegExMatchExpressionDuplicateContext)_localctx).op = Match(RegExMatch);
						State = 1714;
						((RegExMatchExpressionDuplicateContext)_localctx).right = singleExpression(12);
						}
						break;
					case 10:
						{
						_localctx = new RelationalExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((RelationalExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1715;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1716;
						((RelationalExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4123168604160L) != 0)) ) {
							((RelationalExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1717;
						((RelationalExpressionDuplicateContext)_localctx).right = singleExpression(11);
						}
						break;
					case 11:
						{
						_localctx = new EqualityExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((EqualityExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1718;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1719;
						((EqualityExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 65970697666560L) != 0)) ) {
							((EqualityExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1720;
						((EqualityExpressionDuplicateContext)_localctx).right = singleExpression(10);
						}
						break;
					case 12:
						{
						_localctx = new LogicalAndExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1721;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1724;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case And:
							{
							State = 1722;
							((LogicalAndExpressionDuplicateContext)_localctx).op = Match(And);
							}
							break;
						case VerbalAnd:
							{
							State = 1723;
							((LogicalAndExpressionDuplicateContext)_localctx).op = Match(VerbalAnd);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1726;
						((LogicalAndExpressionDuplicateContext)_localctx).right = singleExpression(7);
						}
						break;
					case 13:
						{
						_localctx = new LogicalOrExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1727;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1730;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case Or:
							{
							State = 1728;
							((LogicalOrExpressionDuplicateContext)_localctx).op = Match(Or);
							}
							break;
						case VerbalOr:
							{
							State = 1729;
							((LogicalOrExpressionDuplicateContext)_localctx).op = Match(VerbalOr);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1732;
						((LogicalOrExpressionDuplicateContext)_localctx).right = singleExpression(6);
						}
						break;
					case 14:
						{
						_localctx = new CoalesceExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((CoalesceExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1733;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1734;
						((CoalesceExpressionDuplicateContext)_localctx).op = Match(NullCoalesce);
						State = 1735;
						((CoalesceExpressionDuplicateContext)_localctx).right = singleExpression(4);
						}
						break;
					case 15:
						{
						_localctx = new TernaryExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((TernaryExpressionDuplicateContext)_localctx).ternCond = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1736;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1740;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1737;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1742;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1743;
						Match(QuestionMark);
						State = 1747;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1744;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1749;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1750;
						((TernaryExpressionDuplicateContext)_localctx).ternTrue = expression(0);
						State = 1754;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1751;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1756;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1757;
						Match(Colon);
						State = 1761;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1758;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1763;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1764;
						((TernaryExpressionDuplicateContext)_localctx).ternFalse = singleExpression(3);
						}
						break;
					case 16:
						{
						_localctx = new PostIncrementExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((PostIncrementExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1766;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1767;
						Match(PlusPlus);
						}
						break;
					case 17:
						{
						_localctx = new PostDecreaseExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((PostDecreaseExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1768;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1769;
						Match(MinusMinus);
						}
						break;
					case 18:
						{
						_localctx = new ContainExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((ContainExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1770;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						{
						State = 1774;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1771;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1776;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1777;
						((ContainExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 52428801L) != 0)) ) {
							((ContainExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1781;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1778;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1783;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1784;
						((ContainExpressionDuplicateContext)_localctx).right = primaryExpression(0);
						}
						break;
					}
					} 
				}
				State = 1789;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,237,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
	 
		public PrimaryExpressionContext() { }
		public virtual void CopyFrom(PrimaryExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MapLiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapLiteralContext mapLiteral() {
			return GetRuleContext<MapLiteralContext>(0);
		}
		public MapLiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarRefExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public VarRefExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarRefExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DynamicIdentifierExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DynamicIdentifierContext dynamicIdentifier() {
			return GetRuleContext<DynamicIdentifierContext>(0);
		}
		public DynamicIdentifierExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDotExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberIdentifierContext memberIdentifier() {
			return GetRuleContext<MemberIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MainParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		public MemberDotExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberIndexArgumentsContext memberIndexArguments() {
			return GetRuleContext<MemberIndexArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		public MemberIndexExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctionCallExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		return primaryExpression(0);
	}

	private PrimaryExpressionContext primaryExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, _parentState);
		PrimaryExpressionContext _prevctx = _localctx;
		int _startState = 166;
		EnterRecursionRule(_localctx, 166, RULE_primaryExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1803;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				{
				_localctx = new VarRefExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1791;
				Match(BitAnd);
				State = 1792;
				primaryExpression(8);
				}
				break;
			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1793;
				identifier();
				}
				break;
			case 3:
				{
				_localctx = new DynamicIdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1794;
				dynamicIdentifier();
				}
				break;
			case 4:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1795;
				literal();
				}
				break;
			case 5:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1796;
				arrayLiteral();
				}
				break;
			case 6:
				{
				_localctx = new MapLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1797;
				mapLiteral();
				}
				break;
			case 7:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1798;
				objectLiteral();
				}
				break;
			case 8:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1799;
				Match(OpenParen);
				State = 1800;
				expressionSequence();
				State = 1801;
				Match(CloseParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1821;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,242,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1819;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
					case 1:
						{
						_localctx = new MemberDotExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 1805;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1806;
						_la = TokenStream.LA(1);
						if ( !(_la==QuestionMarkDot || _la==Dot) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1807;
						memberIdentifier();
						}
						break;
					case 2:
						{
						_localctx = new FunctionCallExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 1808;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1809;
						Match(OpenParen);
						State = 1811;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738021042818L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843009213693951L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 11L) != 0)) {
							{
							State = 1810;
							arguments();
							}
						}

						State = 1813;
						Match(CloseParen);
						}
						break;
					case 3:
						{
						_localctx = new MemberIndexExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 1814;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1816;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==QuestionMarkDot) {
							{
							State = 1815;
							Match(QuestionMarkDot);
							}
						}

						State = 1818;
						memberIndexArguments();
						}
						break;
					}
					} 
				}
				State = 1823;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,242,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MemberDotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MainParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		public MemberDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDotContext memberDot() {
		MemberDotContext _localctx = new MemberDotContext(Context, State);
		EnterRule(_localctx, 168, RULE_memberDot);
		int _la;
		try {
			State = 1850;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1825;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1824;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1827;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EOL || _la==WS );
				State = 1829;
				Match(Dot);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1830;
				Match(Dot);
				State = 1834;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1831;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1836;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1837;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1842;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1843;
				Match(QuestionMarkDot);
				State = 1847;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1844;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1849;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DynamicIdentifierContext dynamicIdentifier() {
			return GetRuleContext<DynamicIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public MemberIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberIdentifierContext memberIdentifier() {
		MemberIdentifierContext _localctx = new MemberIdentifierContext(Context, State);
		EnterRule(_localctx, 170, RULE_memberIdentifier);
		try {
			State = 1856;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1852;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1853;
				dynamicIdentifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1854;
				keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1855;
				literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext[] propertyName() {
			return GetRuleContexts<PropertyNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName(int i) {
			return GetRuleContext<PropertyNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext[] dereference() {
			return GetRuleContexts<DereferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference(int i) {
			return GetRuleContext<DereferenceContext>(i);
		}
		public DynamicIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicIdentifierContext dynamicIdentifier() {
		DynamicIdentifierContext _localctx = new DynamicIdentifierContext(Context, State);
		EnterRule(_localctx, 172, RULE_dynamicIdentifier);
		try {
			int _alt;
			State = 1875;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Parse:
			case Reg:
			case Read:
			case Files:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1858;
				propertyName();
				State = 1859;
				dereference();
				State = 1864;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,250,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 1862;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NullLiteral:
						case Unset:
						case True:
						case False:
						case DecimalLiteral:
						case HexIntegerLiteral:
						case OctalIntegerLiteral:
						case OctalIntegerLiteral2:
						case BinaryIntegerLiteral:
						case Break:
						case Do:
						case Instanceof:
						case Switch:
						case Case:
						case Default:
						case Else:
						case Catch:
						case Finally:
						case Return:
						case Continue:
						case For:
						case While:
						case Parse:
						case Reg:
						case Read:
						case Files:
						case Loop:
						case Until:
						case This:
						case If:
						case Throw:
						case Delete:
						case In:
						case Try:
						case Yield:
						case Is:
						case Contains:
						case VerbalAnd:
						case VerbalNot:
						case VerbalOr:
						case Goto:
						case Get:
						case Set:
						case Class:
						case Enum:
						case Extends:
						case Super:
						case Base:
						case Export:
						case Import:
						case From:
						case As:
						case Async:
						case Await:
						case Static:
						case Global:
						case Local:
						case Identifier:
						case StringLiteral:
							{
							State = 1860;
							propertyName();
							}
							break;
						case DerefStart:
							{
							State = 1861;
							dereference();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 1866;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,250,Context);
				}
				}
				break;
			case DerefStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1867;
				dereference();
				State = 1872;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 1870;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NullLiteral:
						case Unset:
						case True:
						case False:
						case DecimalLiteral:
						case HexIntegerLiteral:
						case OctalIntegerLiteral:
						case OctalIntegerLiteral2:
						case BinaryIntegerLiteral:
						case Break:
						case Do:
						case Instanceof:
						case Switch:
						case Case:
						case Default:
						case Else:
						case Catch:
						case Finally:
						case Return:
						case Continue:
						case For:
						case While:
						case Parse:
						case Reg:
						case Read:
						case Files:
						case Loop:
						case Until:
						case This:
						case If:
						case Throw:
						case Delete:
						case In:
						case Try:
						case Yield:
						case Is:
						case Contains:
						case VerbalAnd:
						case VerbalNot:
						case VerbalOr:
						case Goto:
						case Get:
						case Set:
						case Class:
						case Enum:
						case Extends:
						case Super:
						case Base:
						case Export:
						case Import:
						case From:
						case As:
						case Async:
						case Await:
						case Static:
						case Global:
						case Local:
						case Identifier:
						case StringLiteral:
							{
							State = 1868;
							propertyName();
							}
							break;
						case DerefStart:
							{
							State = 1869;
							dereference();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 1874;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 174, RULE_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1877;
			Match(Assign);
			State = 1878;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableContext assignable() {
		AssignableContext _localctx = new AssignableContext(Context, State);
		EnterRule(_localctx, 176, RULE_assignable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1880;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 178, RULE_objectLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1882;
			Match(OpenBrace);
			State = 1886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1883;
				s();
				}
				}
				State = 1888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1909;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DerefStart || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843009213693951L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 1889;
				propertyAssignment();
				State = 1900;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1893;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 1890;
							Match(WS);
							}
							}
							State = 1895;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1896;
						Match(Comma);
						State = 1897;
						propertyAssignment();
						}
						} 
					}
					State = 1902;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
				}
				State = 1906;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1903;
					s();
					}
					}
					State = 1908;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1911;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadPrefixContext functionHeadPrefix() {
			return GetRuleContext<FunctionHeadPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeadContext functionHead() {
		FunctionHeadContext _localctx = new FunctionHeadContext(Context, State);
		EnterRule(_localctx, 180, RULE_functionHead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1914;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
			case 1:
				{
				State = 1913;
				functionHeadPrefix();
				}
				break;
			}
			State = 1916;
			identifierName();
			State = 1917;
			Match(OpenParen);
			State = 1919;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & 306245874173345793L) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 1100383518799L) != 0)) {
				{
				State = 1918;
				formalParameterList();
				}
			}

			State = 1921;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeadPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Async() { return GetTokens(MainParser.Async); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async(int i) {
			return GetToken(MainParser.Async, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Static() { return GetTokens(MainParser.Static); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static(int i) {
			return GetToken(MainParser.Static, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public FunctionHeadPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHeadPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHeadPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeadPrefixContext functionHeadPrefix() {
		FunctionHeadPrefixContext _localctx = new FunctionHeadPrefixContext(Context, State);
		EnterRule(_localctx, 182, RULE_functionHeadPrefix);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1930;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1923;
					_la = TokenStream.LA(1);
					if ( !(_la==Async || _la==Static) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1927;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1924;
						Match(WS);
						}
						}
						State = 1929;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1932;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,262,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadPrefixContext functionHeadPrefix() {
			return GetRuleContext<FunctionHeadPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionExpressionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionExpressionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpressionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionHeadContext functionExpressionHead() {
		FunctionExpressionHeadContext _localctx = new FunctionExpressionHeadContext(Context, State);
		EnterRule(_localctx, 184, RULE_functionExpressionHead);
		int _la;
		try {
			State = 1943;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1934;
				functionHead();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1936;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Async || _la==Static) {
					{
					State = 1935;
					functionHeadPrefix();
					}
				}

				State = 1938;
				Match(OpenParen);
				State = 1940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & 306245874173345793L) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 1100383518799L) != 0)) {
					{
					State = 1939;
					formalParameterList();
					}
				}

				State = 1942;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FatArrowExpressionHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadPrefixContext functionHeadPrefix() {
			return GetRuleContext<FunctionHeadPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpressionHeadContext functionExpressionHead() {
			return GetRuleContext<FunctionExpressionHeadContext>(0);
		}
		public FatArrowExpressionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fatArrowExpressionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFatArrowExpressionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FatArrowExpressionHeadContext fatArrowExpressionHead() {
		FatArrowExpressionHeadContext _localctx = new FatArrowExpressionHeadContext(Context, State);
		EnterRule(_localctx, 186, RULE_fatArrowExpressionHead);
		int _la;
		try {
			State = 1963;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1949;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843009213685775L) != 0) || _la==Identifier) {
					{
					State = 1946;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
					case 1:
						{
						State = 1945;
						functionHeadPrefix();
						}
						break;
					}
					State = 1948;
					identifierName();
					}
				}

				State = 1951;
				Match(Multiply);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1953;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
				case 1:
					{
					State = 1952;
					functionHeadPrefix();
					}
					break;
				}
				State = 1956;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BitAnd) {
					{
					State = 1955;
					Match(BitAnd);
					}
				}

				State = 1958;
				identifierName();
				State = 1960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QuestionMark) {
					{
					State = 1959;
					Match(QuestionMark);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1962;
				functionExpressionHead();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 188, RULE_functionBody);
		int _la;
		try {
			int _alt;
			State = 1984;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Arrow:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1965;
				Match(Arrow);
				State = 1966;
				expression(0);
				}
				break;
			case OpenBrace:
			case EOL:
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1970;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1967;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1972;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1973;
				Match(OpenBrace);
				State = 1977;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,273,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1974;
						s();
						}
						} 
					}
					State = 1979;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,273,Context);
				}
				State = 1981;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
				case 1:
					{
					State = 1980;
					statementList();
					}
					break;
				}
				State = 1983;
				Match(CloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(MainParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(MainParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(MainParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(MainParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(MainParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivideAssign() { return GetToken(MainParser.IntegerDivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConcatenateAssign() { return GetToken(MainParser.ConcatenateAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(MainParser.BitOrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(MainParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(MainParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(MainParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(MainParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogicalAssign() { return GetToken(MainParser.RightShiftLogicalAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PowerAssign() { return GetToken(MainParser.PowerAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullishCoalescingAssign() { return GetToken(MainParser.NullishCoalescingAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 190, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1986;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 9006924376834049L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BigintLiteralContext bigintLiteral() {
			return GetRuleContext<BigintLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(MainParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 192, RULE_literal);
		int _la;
		try {
			State = 1992;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1988;
				boolean();
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1989;
				numericLiteral();
				}
				break;
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1990;
				bigintLiteral();
				}
				break;
			case NullLiteral:
			case Unset:
			case StringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1991;
				_la = TokenStream.LA(1);
				if ( !(_la==NullLiteral || _la==Unset || _la==StringLiteral) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(MainParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(MainParser.False, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 194, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1994;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(MainParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(MainParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral() { return GetToken(MainParser.OctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral2() { return GetToken(MainParser.OctalIntegerLiteral2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryIntegerLiteral() { return GetToken(MainParser.BinaryIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 196, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1996;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BigintLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigDecimalIntegerLiteral() { return GetToken(MainParser.BigDecimalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigHexIntegerLiteral() { return GetToken(MainParser.BigHexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigOctalIntegerLiteral() { return GetToken(MainParser.BigOctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigBinaryIntegerLiteral() { return GetToken(MainParser.BigBinaryIntegerLiteral, 0); }
		public BigintLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bigintLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBigintLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BigintLiteralContext bigintLiteral() {
		BigintLiteralContext _localctx = new BigintLiteralContext(Context, State);
		EnterRule(_localctx, 198, RULE_bigintLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1998;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(MainParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 200, RULE_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2000;
			Match(Get);
			State = 2001;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(MainParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 202, RULE_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2003;
			Match(Set);
			State = 2004;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 204, RULE_identifierName);
		try {
			State = 2008;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2006;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2007;
				reservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(MainParser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(MainParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(MainParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(MainParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Base() { return GetToken(MainParser.Base, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(MainParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(MainParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(MainParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MainParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(MainParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(MainParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Parse() { return GetToken(MainParser.Parse, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Reg() { return GetToken(MainParser.Reg, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Read() { return GetToken(MainParser.Read, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Files() { return GetToken(MainParser.Files, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 206, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2010;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 58511616085606401L) != 0) || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 208, RULE_reservedWord);
		try {
			State = 2015;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2012;
				keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2013;
				Match(Unset);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2014;
				boolean();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(MainParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(MainParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MainParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MainParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MainParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MainParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(MainParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(MainParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MainParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(MainParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(MainParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(MainParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(MainParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(MainParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(MainParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(MainParser.Contains, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(MainParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(MainParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(MainParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 210, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2017;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 1142243045026942977L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(MainParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public SContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SContext s() {
		SContext _localctx = new SContext(Context, State);
		EnterRule(_localctx, 212, RULE_s);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2019;
			_la = TokenStream.LA(1);
			if ( !(_la==EOL || _la==WS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MainParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 214, RULE_eos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2021;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==EOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 32: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		case 35: return untilProduction_sempred((UntilProductionContext)_localctx, predIndex);
		case 36: return elseProduction_sempred((ElseProductionContext)_localctx, predIndex);
		case 37: return iterationStatement_sempred((IterationStatementContext)_localctx, predIndex);
		case 55: return finallyProduction_sempred((FinallyProductionContext)_localctx, predIndex);
		case 81: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 82: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 83: return primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return InputStream.LA(1) != MainLexer.OpenBrace && !this.isFunctionCallStatement();
		}
		return true;
	}
	private bool untilProduction_sempred(UntilProductionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return !this.second(Until);
		}
		return true;
	}
	private bool elseProduction_sempred(ElseProductionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return !this.second(Else);
		}
		return true;
	}
	private bool iterationStatement_sempred(IterationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return this.isValidLoopExpression();
		}
		return true;
	}
	private bool finallyProduction_sempred(FinallyProductionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return !this.second(Finally);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 25);
		case 6: return Precpred(Context, 20);
		case 7: return Precpred(Context, 19);
		case 8: return Precpred(Context, 18);
		case 9: return Precpred(Context, 17);
		case 10: return Precpred(Context, 16);
		case 11: return Precpred(Context, 15);
		case 12: return Precpred(Context, 14);
		case 13: return Precpred(Context, 13);
		case 14: return Precpred(Context, 12);
		case 15: return Precpred(Context, 11);
		case 16: return Precpred(Context, 8);
		case 17: return Precpred(Context, 7);
		case 18: return Precpred(Context, 6);
		case 19: return Precpred(Context, 5);
		case 20: return Precpred(Context, 29);
		case 21: return Precpred(Context, 28);
		case 22: return Precpred(Context, 10);
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return Precpred(Context, 23);
		case 24: return Precpred(Context, 18);
		case 25: return Precpred(Context, 17);
		case 26: return Precpred(Context, 16);
		case 27: return Precpred(Context, 15);
		case 28: return Precpred(Context, 14);
		case 29: return Precpred(Context, 13);
		case 30: return Precpred(Context, 12);
		case 31: return Precpred(Context, 11);
		case 32: return Precpred(Context, 10);
		case 33: return Precpred(Context, 9);
		case 34: return Precpred(Context, 6);
		case 35: return Precpred(Context, 5);
		case 36: return Precpred(Context, 4);
		case 37: return Precpred(Context, 3);
		case 38: return Precpred(Context, 27);
		case 39: return Precpred(Context, 26);
		case 40: return Precpred(Context, 8);
		}
		return true;
	}
	private bool primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Precpred(Context, 11);
		case 42: return Precpred(Context, 10);
		case 43: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,178,2024,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,1,0,1,0,1,0,1,0,3,0,221,8,0,1,1,4,
		1,224,8,1,11,1,12,1,225,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,248,8,2,1,3,1,3,3,3,252,8,3,1,3,
		1,3,1,3,3,3,257,8,3,1,3,1,3,1,3,3,3,262,8,3,1,3,1,3,1,3,3,3,267,8,3,3,
		3,269,8,3,1,4,1,4,1,5,1,5,1,5,5,5,276,8,5,10,5,12,5,279,9,5,1,5,5,5,282,
		8,5,10,5,12,5,285,9,5,1,5,1,5,3,5,289,8,5,1,5,1,5,3,5,293,8,5,1,5,3,5,
		296,8,5,1,6,1,6,1,7,1,7,1,7,5,7,303,8,7,10,7,12,7,306,9,7,1,7,5,7,309,
		8,7,10,7,12,7,312,9,7,1,7,1,7,3,7,316,8,7,1,8,1,8,1,8,1,8,5,8,322,8,8,
		10,8,12,8,325,9,8,3,8,327,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,3,8,344,8,8,1,9,1,9,5,9,348,8,9,10,9,12,9,351,9,9,
		1,9,3,9,354,8,9,1,9,1,9,1,10,1,10,1,10,4,10,361,8,10,11,10,12,10,362,1,
		11,1,11,5,11,367,8,11,10,11,12,11,370,9,11,1,11,3,11,373,8,11,1,12,1,12,
		5,12,377,8,12,10,12,12,12,380,9,12,1,12,1,12,1,13,1,13,5,13,386,8,13,10,
		13,12,13,389,9,13,1,13,1,13,1,14,1,14,5,14,395,8,14,10,14,12,14,398,9,
		14,1,14,1,14,1,15,3,15,403,8,15,1,15,1,15,3,15,407,8,15,1,15,1,15,1,15,
		3,15,412,8,15,1,16,1,16,1,16,5,16,417,8,16,10,16,12,16,420,9,16,1,16,1,
		16,5,16,424,8,16,10,16,12,16,427,9,16,1,16,1,16,5,16,431,8,16,10,16,12,
		16,434,9,16,1,16,3,16,437,8,16,3,16,439,8,16,1,16,1,16,1,17,1,17,1,17,
		3,17,446,8,17,1,18,1,18,3,18,450,8,18,1,19,1,19,1,20,1,20,5,20,456,8,20,
		10,20,12,20,459,9,20,1,20,1,20,1,21,1,21,3,21,465,8,21,1,21,1,21,3,21,
		469,8,21,1,22,1,22,1,22,1,23,1,23,1,23,3,23,477,8,23,1,24,1,24,3,24,481,
		8,24,1,24,1,24,3,24,485,8,24,1,24,1,24,1,24,3,24,490,8,24,1,25,1,25,1,
		25,1,25,1,25,3,25,497,8,25,3,25,499,8,25,1,26,1,26,1,26,5,26,504,8,26,
		10,26,12,26,507,9,26,1,26,1,26,5,26,511,8,26,10,26,12,26,514,9,26,1,26,
		1,26,5,26,518,8,26,10,26,12,26,521,9,26,1,26,3,26,524,8,26,3,26,526,8,
		26,1,26,1,26,1,27,1,27,1,27,3,27,533,8,27,1,28,1,28,3,28,537,8,28,1,29,
		1,29,5,29,541,8,29,10,29,12,29,544,9,29,1,29,1,29,5,29,548,8,29,10,29,
		12,29,551,9,29,1,30,1,30,1,30,1,30,1,30,3,30,558,8,30,1,31,1,31,4,31,562,
		8,31,11,31,12,31,563,1,31,3,31,567,8,31,1,32,1,32,1,32,1,33,1,33,5,33,
		574,8,33,10,33,12,33,577,9,33,1,33,1,33,5,33,581,8,33,10,33,12,33,584,
		9,33,1,33,1,33,1,33,1,34,4,34,590,8,34,11,34,12,34,591,1,34,1,34,3,34,
		596,8,34,1,35,1,35,1,35,5,35,601,8,35,10,35,12,35,604,9,35,1,35,1,35,3,
		35,608,8,35,1,36,1,36,1,36,5,36,613,8,36,10,36,12,36,616,9,36,1,36,1,36,
		3,36,620,8,36,1,37,1,37,1,37,5,37,625,8,37,10,37,12,37,628,9,37,1,37,1,
		37,5,37,632,8,37,10,37,12,37,635,9,37,1,37,1,37,3,37,639,8,37,5,37,641,
		8,37,10,37,12,37,644,9,37,1,37,5,37,647,8,37,10,37,12,37,650,9,37,1,37,
		1,37,1,37,1,37,1,37,1,37,1,37,5,37,659,8,37,10,37,12,37,662,9,37,1,37,
		1,37,5,37,666,8,37,10,37,12,37,669,9,37,3,37,671,8,37,1,37,1,37,1,37,1,
		37,1,37,1,37,5,37,679,8,37,10,37,12,37,682,9,37,1,37,1,37,5,37,686,8,37,
		10,37,12,37,689,9,37,1,37,1,37,1,37,1,37,1,37,1,37,5,37,697,8,37,10,37,
		12,37,700,9,37,1,37,1,37,5,37,704,8,37,10,37,12,37,707,9,37,1,37,1,37,
		1,37,1,37,3,37,713,8,37,1,38,3,38,716,8,38,1,38,5,38,719,8,38,10,38,12,
		38,722,9,38,1,38,1,38,3,38,726,8,38,5,38,728,8,38,10,38,12,38,731,9,38,
		1,38,5,38,734,8,38,10,38,12,38,737,9,38,1,38,1,38,5,38,741,8,38,10,38,
		12,38,744,9,38,1,38,1,38,1,38,3,38,749,8,38,1,38,5,38,752,8,38,10,38,12,
		38,755,9,38,1,38,1,38,3,38,759,8,38,5,38,761,8,38,10,38,12,38,764,9,38,
		1,38,5,38,767,8,38,10,38,12,38,770,9,38,1,38,1,38,5,38,774,8,38,10,38,
		12,38,777,9,38,1,38,1,38,1,38,3,38,782,8,38,1,39,1,39,5,39,786,8,39,10,
		39,12,39,789,9,39,1,39,1,39,1,39,1,39,1,39,3,39,796,8,39,1,40,1,40,5,40,
		800,8,40,10,40,12,40,803,9,40,1,40,1,40,1,40,1,40,1,40,3,40,810,8,40,1,
		41,1,41,5,41,814,8,41,10,41,12,41,817,9,41,1,41,3,41,820,8,41,1,42,1,42,
		5,42,824,8,42,10,42,12,42,827,9,42,1,42,3,42,830,8,42,1,43,1,43,5,43,834,
		8,43,10,43,12,43,837,9,43,1,43,3,43,840,8,43,1,43,5,43,843,8,43,10,43,
		12,43,846,9,43,1,43,1,43,3,43,850,8,43,1,43,5,43,853,8,43,10,43,12,43,
		856,9,43,1,43,1,43,1,44,1,44,5,44,862,8,44,10,44,12,44,865,9,44,1,44,3,
		44,868,8,44,1,44,1,44,3,44,872,8,44,3,44,874,8,44,1,44,1,44,1,45,4,45,
		879,8,45,11,45,12,45,880,1,46,1,46,5,46,885,8,46,10,46,12,46,888,9,46,
		1,46,1,46,5,46,892,8,46,10,46,12,46,895,9,46,1,46,1,46,5,46,899,8,46,10,
		46,12,46,902,9,46,1,46,1,46,3,46,906,8,46,1,47,1,47,5,47,910,8,47,10,47,
		12,47,913,9,47,1,47,1,47,5,47,917,8,47,10,47,12,47,920,9,47,1,47,1,47,
		3,47,924,8,47,1,48,1,48,1,48,1,49,1,49,5,49,931,8,49,10,49,12,49,934,9,
		49,1,49,1,49,1,49,5,49,939,8,49,10,49,12,49,942,9,49,1,49,1,49,1,49,1,
		49,3,49,948,8,49,1,50,1,50,5,50,952,8,50,10,50,12,50,955,9,50,1,50,3,50,
		958,8,50,1,51,1,51,5,51,962,8,51,10,51,12,51,965,9,51,1,51,1,51,5,51,969,
		8,51,10,51,12,51,972,9,51,1,51,1,51,1,51,1,52,1,52,1,52,5,52,980,8,52,
		10,52,12,52,983,9,52,1,52,1,52,5,52,987,8,52,10,52,12,52,990,9,52,3,52,
		992,8,52,1,52,1,52,1,53,1,53,5,53,998,8,53,10,53,12,53,1001,9,53,1,53,
		3,53,1004,8,53,1,53,5,53,1007,8,53,10,53,12,53,1010,9,53,1,53,3,53,1013,
		8,53,1,53,1,53,1,53,5,53,1018,8,53,10,53,12,53,1021,9,53,1,53,3,53,1024,
		8,53,1,53,5,53,1027,8,53,10,53,12,53,1030,9,53,1,53,3,53,1033,8,53,1,53,
		1,53,1,53,5,53,1038,8,53,10,53,12,53,1041,9,53,1,53,1,53,1,53,5,53,1046,
		8,53,10,53,12,53,1049,9,53,1,53,1,53,1,53,5,53,1054,8,53,10,53,12,53,1057,
		9,53,1,53,1,53,1,53,5,53,1062,8,53,10,53,12,53,1065,9,53,1,53,1,53,1,53,
		1,53,3,53,1071,8,53,1,54,1,54,5,54,1075,8,54,10,54,12,54,1078,9,54,1,54,
		1,54,5,54,1082,8,54,10,54,12,54,1085,9,54,1,55,1,55,1,55,5,55,1090,8,55,
		10,55,12,55,1093,9,55,1,55,1,55,3,55,1097,8,55,1,56,1,56,1,56,1,57,1,57,
		5,57,1104,8,57,10,57,12,57,1107,9,57,1,57,1,57,4,57,1111,8,57,11,57,12,
		57,1112,1,57,1,57,4,57,1117,8,57,11,57,12,57,1118,1,57,3,57,1122,8,57,
		1,57,5,57,1125,8,57,10,57,12,57,1128,9,57,1,57,1,57,1,58,1,58,1,58,5,58,
		1135,8,58,10,58,12,58,1138,9,58,1,59,1,59,1,59,1,59,1,59,5,59,1145,8,59,
		10,59,12,59,1148,9,59,1,59,1,59,1,60,1,60,1,60,5,60,1155,8,60,10,60,12,
		60,1158,9,60,3,60,1160,8,60,1,60,1,60,1,60,5,60,1165,8,60,10,60,12,60,
		1168,9,60,3,60,1170,8,60,1,60,1,60,5,60,1174,8,60,10,60,12,60,1177,9,60,
		1,60,1,60,5,60,1181,8,60,10,60,12,60,1184,9,60,1,60,3,60,1187,8,60,1,61,
		1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,5,62,1198,8,62,10,62,12,62,1201,
		9,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,4,62,1211,8,62,11,62,12,62,
		1212,1,62,1,62,3,62,1217,8,62,1,63,1,63,1,63,1,63,3,63,1223,8,63,1,63,
		5,63,1226,8,63,10,63,12,63,1229,9,63,1,63,1,63,3,63,1233,8,63,1,64,1,64,
		1,64,1,65,1,65,1,65,1,66,1,66,1,66,5,66,1244,8,66,10,66,12,66,1247,9,66,
		1,66,1,66,1,66,1,67,1,67,5,67,1254,8,67,10,67,12,67,1257,9,67,1,67,1,67,
		5,67,1261,8,67,10,67,12,67,1264,9,67,1,67,1,67,1,68,3,68,1269,8,68,1,68,
		1,68,1,68,1,68,3,68,1275,8,68,1,69,1,69,3,69,1279,8,69,1,69,3,69,1282,
		8,69,1,70,1,70,5,70,1286,8,70,10,70,12,70,1289,9,70,1,70,1,70,5,70,1293,
		8,70,10,70,12,70,1296,9,70,3,70,1298,8,70,1,70,1,70,1,71,1,71,5,71,1304,
		8,71,10,71,12,71,1307,9,71,1,71,1,71,5,71,1311,8,71,10,71,12,71,1314,9,
		71,1,71,1,71,1,72,5,72,1319,8,72,10,72,12,72,1322,9,72,1,72,5,72,1325,
		8,72,10,72,12,72,1328,9,72,1,72,1,72,5,72,1332,8,72,10,72,12,72,1335,9,
		72,1,72,1,72,3,72,1339,8,72,5,72,1341,8,72,10,72,12,72,1344,9,72,1,73,
		1,73,1,73,1,73,1,74,1,74,5,74,1352,8,74,10,74,12,74,1355,9,74,1,74,1,74,
		5,74,1359,8,74,10,74,12,74,1362,9,74,1,74,1,74,1,75,1,75,1,75,1,75,3,75,
		1370,8,75,1,76,1,76,1,76,1,76,1,77,1,77,5,77,1378,8,77,10,77,12,77,1381,
		9,77,1,77,1,77,3,77,1385,8,77,5,77,1387,8,77,10,77,12,77,1390,9,77,1,77,
		5,77,1393,8,77,10,77,12,77,1396,9,77,1,77,1,77,3,77,1400,8,77,4,77,1402,
		8,77,11,77,12,77,1403,3,77,1406,8,77,1,78,1,78,3,78,1410,8,78,1,79,1,79,
		5,79,1414,8,79,10,79,12,79,1417,9,79,1,79,1,79,5,79,1421,8,79,10,79,12,
		79,1424,9,79,1,80,1,80,5,80,1428,8,80,10,80,12,80,1431,9,80,1,80,1,80,
		5,80,1435,8,80,10,80,12,80,1438,9,80,3,80,1440,8,80,1,80,1,80,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,1453,8,81,10,81,12,81,1456,9,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,1465,8,81,10,81,12,81,1468,9,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,1481,8,81,
		10,81,12,81,1484,9,81,1,81,1,81,1,81,3,81,1489,8,81,1,81,1,81,1,81,1,81,
		1,81,1,81,5,81,1497,8,81,10,81,12,81,1500,9,81,1,81,1,81,1,81,1,81,5,81,
		1506,8,81,10,81,12,81,1509,9,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,1517,
		8,81,10,81,12,81,1520,9,81,1,81,1,81,5,81,1524,8,81,10,81,12,81,1527,9,
		81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,4,81,1539,8,81,11,
		81,12,81,1540,3,81,1543,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
		81,1,81,1,81,1,81,1,81,3,81,1558,8,81,1,81,1,81,1,81,1,81,3,81,1564,8,
		81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,1572,8,81,10,81,12,81,1575,9,81,
		1,81,1,81,5,81,1579,8,81,10,81,12,81,1582,9,81,1,81,1,81,5,81,1586,8,81,
		10,81,12,81,1589,9,81,1,81,1,81,5,81,1593,8,81,10,81,12,81,1596,9,81,1,
		81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,1606,8,81,10,81,12,81,1609,
		9,81,1,81,1,81,5,81,1613,8,81,10,81,12,81,1616,9,81,1,81,5,81,1619,8,81,
		10,81,12,81,1622,9,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,
		1633,8,82,10,82,12,82,1636,9,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,
		1645,8,82,10,82,12,82,1648,9,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1656,
		8,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1664,8,82,10,82,12,82,1667,9,82,
		1,82,1,82,1,82,1,82,5,82,1673,8,82,10,82,12,82,1676,9,82,1,82,1,82,1,82,
		1,82,1,82,1,82,5,82,1684,8,82,10,82,12,82,1687,9,82,1,82,1,82,5,82,1691,
		8,82,10,82,12,82,1694,9,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,4,82,1706,8,82,11,82,12,82,1707,3,82,1710,8,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1725,8,82,1,82,1,82,
		1,82,1,82,3,82,1731,8,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1739,8,82,
		10,82,12,82,1742,9,82,1,82,1,82,5,82,1746,8,82,10,82,12,82,1749,9,82,1,
		82,1,82,5,82,1753,8,82,10,82,12,82,1756,9,82,1,82,1,82,5,82,1760,8,82,
		10,82,12,82,1763,9,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1773,
		8,82,10,82,12,82,1776,9,82,1,82,1,82,5,82,1780,8,82,10,82,12,82,1783,9,
		82,1,82,5,82,1786,8,82,10,82,12,82,1789,9,82,1,83,1,83,1,83,1,83,1,83,
		1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1804,8,83,1,83,1,83,1,83,
		1,83,1,83,1,83,3,83,1812,8,83,1,83,1,83,1,83,3,83,1817,8,83,1,83,5,83,
		1820,8,83,10,83,12,83,1823,9,83,1,84,4,84,1826,8,84,11,84,12,84,1827,1,
		84,1,84,1,84,5,84,1833,8,84,10,84,12,84,1836,9,84,1,84,5,84,1839,8,84,
		10,84,12,84,1842,9,84,1,84,1,84,5,84,1846,8,84,10,84,12,84,1849,9,84,3,
		84,1851,8,84,1,85,1,85,1,85,1,85,3,85,1857,8,85,1,86,1,86,1,86,1,86,5,
		86,1863,8,86,10,86,12,86,1866,9,86,1,86,1,86,1,86,5,86,1871,8,86,10,86,
		12,86,1874,9,86,3,86,1876,8,86,1,87,1,87,1,87,1,88,1,88,1,89,1,89,5,89,
		1885,8,89,10,89,12,89,1888,9,89,1,89,1,89,5,89,1892,8,89,10,89,12,89,1895,
		9,89,1,89,1,89,5,89,1899,8,89,10,89,12,89,1902,9,89,1,89,5,89,1905,8,89,
		10,89,12,89,1908,9,89,3,89,1910,8,89,1,89,1,89,1,90,3,90,1915,8,90,1,90,
		1,90,1,90,3,90,1920,8,90,1,90,1,90,1,91,1,91,5,91,1926,8,91,10,91,12,91,
		1929,9,91,4,91,1931,8,91,11,91,12,91,1932,1,92,1,92,3,92,1937,8,92,1,92,
		1,92,3,92,1941,8,92,1,92,3,92,1944,8,92,1,93,3,93,1947,8,93,1,93,3,93,
		1950,8,93,1,93,1,93,3,93,1954,8,93,1,93,3,93,1957,8,93,1,93,1,93,3,93,
		1961,8,93,1,93,3,93,1964,8,93,1,94,1,94,1,94,5,94,1969,8,94,10,94,12,94,
		1972,9,94,1,94,1,94,5,94,1976,8,94,10,94,12,94,1979,9,94,1,94,3,94,1982,
		8,94,1,94,3,94,1985,8,94,1,95,1,95,1,96,1,96,1,96,1,96,3,96,1993,8,96,
		1,97,1,97,1,98,1,98,1,99,1,99,1,100,1,100,1,100,1,101,1,101,1,101,1,102,
		1,102,3,102,2009,8,102,1,103,1,103,1,104,1,104,1,104,3,104,2016,8,104,
		1,105,1,105,1,106,1,106,1,107,1,107,1,107,0,3,162,164,166,108,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
		56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
		174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
		210,212,214,0,23,1,0,140,141,1,0,126,128,3,0,106,106,125,125,134,134,1,
		0,22,23,1,0,94,97,1,0,136,137,2,0,15,15,28,28,1,0,28,30,1,0,24,25,1,0,
		35,37,1,0,38,41,1,0,42,45,3,0,83,83,104,104,107,108,2,0,16,16,20,20,2,
		0,124,124,126,126,2,0,14,14,52,66,2,0,68,69,135,135,1,0,70,71,1,0,72,76,
		1,0,77,80,8,0,68,68,82,82,86,86,94,97,100,100,113,119,122,123,134,134,
		9,0,69,69,81,81,83,85,87,93,98,99,101,112,118,118,120,121,123,128,1,1,
		136,136,2296,0,220,1,0,0,0,2,223,1,0,0,0,4,247,1,0,0,0,6,268,1,0,0,0,8,
		270,1,0,0,0,10,272,1,0,0,0,12,297,1,0,0,0,14,299,1,0,0,0,16,343,1,0,0,
		0,18,345,1,0,0,0,20,360,1,0,0,0,22,364,1,0,0,0,24,374,1,0,0,0,26,383,1,
		0,0,0,28,392,1,0,0,0,30,411,1,0,0,0,32,413,1,0,0,0,34,442,1,0,0,0,36,449,
		1,0,0,0,38,451,1,0,0,0,40,453,1,0,0,0,42,464,1,0,0,0,44,470,1,0,0,0,46,
		473,1,0,0,0,48,489,1,0,0,0,50,498,1,0,0,0,52,500,1,0,0,0,54,529,1,0,0,
		0,56,536,1,0,0,0,58,538,1,0,0,0,60,552,1,0,0,0,62,559,1,0,0,0,64,568,1,
		0,0,0,66,571,1,0,0,0,68,595,1,0,0,0,70,607,1,0,0,0,72,619,1,0,0,0,74,712,
		1,0,0,0,76,781,1,0,0,0,78,783,1,0,0,0,80,797,1,0,0,0,82,811,1,0,0,0,84,
		821,1,0,0,0,86,831,1,0,0,0,88,859,1,0,0,0,90,878,1,0,0,0,92,882,1,0,0,
		0,94,907,1,0,0,0,96,925,1,0,0,0,98,947,1,0,0,0,100,949,1,0,0,0,102,959,
		1,0,0,0,104,976,1,0,0,0,106,1070,1,0,0,0,108,1072,1,0,0,0,110,1096,1,0,
		0,0,112,1098,1,0,0,0,114,1101,1,0,0,0,116,1131,1,0,0,0,118,1139,1,0,0,
		0,120,1186,1,0,0,0,122,1188,1,0,0,0,124,1216,1,0,0,0,126,1232,1,0,0,0,
		128,1234,1,0,0,0,130,1237,1,0,0,0,132,1240,1,0,0,0,134,1262,1,0,0,0,136,
		1268,1,0,0,0,138,1281,1,0,0,0,140,1283,1,0,0,0,142,1301,1,0,0,0,144,1326,
		1,0,0,0,146,1345,1,0,0,0,148,1349,1,0,0,0,150,1369,1,0,0,0,152,1371,1,
		0,0,0,154,1405,1,0,0,0,156,1407,1,0,0,0,158,1411,1,0,0,0,160,1425,1,0,
		0,0,162,1488,1,0,0,0,164,1655,1,0,0,0,166,1803,1,0,0,0,168,1850,1,0,0,
		0,170,1856,1,0,0,0,172,1875,1,0,0,0,174,1877,1,0,0,0,176,1880,1,0,0,0,
		178,1882,1,0,0,0,180,1914,1,0,0,0,182,1930,1,0,0,0,184,1943,1,0,0,0,186,
		1963,1,0,0,0,188,1984,1,0,0,0,190,1986,1,0,0,0,192,1992,1,0,0,0,194,1994,
		1,0,0,0,196,1996,1,0,0,0,198,1998,1,0,0,0,200,2000,1,0,0,0,202,2003,1,
		0,0,0,204,2008,1,0,0,0,206,2010,1,0,0,0,208,2015,1,0,0,0,210,2017,1,0,
		0,0,212,2019,1,0,0,0,214,2021,1,0,0,0,216,217,3,2,1,0,217,218,5,0,0,1,
		218,221,1,0,0,0,219,221,5,0,0,1,220,216,1,0,0,0,220,219,1,0,0,0,221,1,
		1,0,0,0,222,224,3,4,2,0,223,222,1,0,0,0,224,225,1,0,0,0,225,223,1,0,0,
		0,225,226,1,0,0,0,226,3,1,0,0,0,227,228,3,114,57,0,228,229,3,214,107,0,
		229,248,1,0,0,0,230,231,3,6,3,0,231,232,3,214,107,0,232,248,1,0,0,0,233,
		234,3,8,4,0,234,235,3,214,107,0,235,248,1,0,0,0,236,237,3,10,5,0,237,238,
		3,214,107,0,238,248,1,0,0,0,239,240,3,14,7,0,240,241,3,214,107,0,241,248,
		1,0,0,0,242,243,3,16,8,0,243,244,3,214,107,0,244,248,1,0,0,0,245,248,5,
		137,0,0,246,248,5,136,0,0,247,227,1,0,0,0,247,230,1,0,0,0,247,233,1,0,
		0,0,247,236,1,0,0,0,247,239,1,0,0,0,247,242,1,0,0,0,247,245,1,0,0,0,247,
		246,1,0,0,0,248,5,1,0,0,0,249,251,5,129,0,0,250,252,3,164,82,0,251,250,
		1,0,0,0,251,252,1,0,0,0,252,269,1,0,0,0,253,269,5,133,0,0,254,256,5,130,
		0,0,255,257,3,196,98,0,256,255,1,0,0,0,256,257,1,0,0,0,257,269,1,0,0,0,
		258,261,5,132,0,0,259,262,3,196,98,0,260,262,3,194,97,0,261,259,1,0,0,
		0,261,260,1,0,0,0,261,262,1,0,0,0,262,269,1,0,0,0,263,266,5,131,0,0,264,
		267,3,196,98,0,265,267,3,194,97,0,266,264,1,0,0,0,266,265,1,0,0,0,266,
		267,1,0,0,0,267,269,1,0,0,0,268,249,1,0,0,0,268,253,1,0,0,0,268,254,1,
		0,0,0,268,258,1,0,0,0,268,263,1,0,0,0,269,7,1,0,0,0,270,271,5,5,0,0,271,
		9,1,0,0,0,272,277,5,4,0,0,273,274,5,136,0,0,274,276,5,4,0,0,275,273,1,
		0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,283,1,0,0,0,
		279,277,1,0,0,0,280,282,5,137,0,0,281,280,1,0,0,0,282,285,1,0,0,0,283,
		281,1,0,0,0,283,284,1,0,0,0,284,295,1,0,0,0,285,283,1,0,0,0,286,296,3,
		12,6,0,287,289,5,136,0,0,288,287,1,0,0,0,288,289,1,0,0,0,289,290,1,0,0,
		0,290,296,3,112,56,0,291,293,5,136,0,0,292,291,1,0,0,0,292,293,1,0,0,0,
		293,294,1,0,0,0,294,296,3,16,8,0,295,286,1,0,0,0,295,288,1,0,0,0,295,292,
		1,0,0,0,296,11,1,0,0,0,297,298,7,0,0,0,298,13,1,0,0,0,299,304,5,6,0,0,
		300,301,5,136,0,0,301,303,5,6,0,0,302,300,1,0,0,0,303,306,1,0,0,0,304,
		302,1,0,0,0,304,305,1,0,0,0,305,310,1,0,0,0,306,304,1,0,0,0,307,309,3,
		212,106,0,308,307,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,
		0,0,311,315,1,0,0,0,312,310,1,0,0,0,313,316,3,112,56,0,314,316,3,16,8,
		0,315,313,1,0,0,0,315,314,1,0,0,0,316,15,1,0,0,0,317,344,3,22,11,0,318,
		344,3,66,33,0,319,323,3,96,48,0,320,322,3,212,106,0,321,320,1,0,0,0,322,
		325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,327,1,0,0,0,325,323,1,
		0,0,0,326,319,1,0,0,0,326,327,1,0,0,0,327,328,1,0,0,0,328,344,3,74,37,
		0,329,344,3,18,9,0,330,344,3,64,32,0,331,344,3,62,31,0,332,344,3,78,39,
		0,333,344,3,80,40,0,334,344,3,82,41,0,335,344,3,84,42,0,336,344,3,96,48,
		0,337,344,3,98,49,0,338,344,3,86,43,0,339,344,3,100,50,0,340,344,3,102,
		51,0,341,344,3,24,12,0,342,344,3,26,13,0,343,317,1,0,0,0,343,318,1,0,0,
		0,343,326,1,0,0,0,343,329,1,0,0,0,343,330,1,0,0,0,343,331,1,0,0,0,343,
		332,1,0,0,0,343,333,1,0,0,0,343,334,1,0,0,0,343,335,1,0,0,0,343,336,1,
		0,0,0,343,337,1,0,0,0,343,338,1,0,0,0,343,339,1,0,0,0,343,340,1,0,0,0,
		343,341,1,0,0,0,343,342,1,0,0,0,344,17,1,0,0,0,345,349,5,11,0,0,346,348,
		3,212,106,0,347,346,1,0,0,0,348,351,1,0,0,0,349,347,1,0,0,0,349,350,1,
		0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,352,354,3,20,10,0,353,352,1,0,0,
		0,353,354,1,0,0,0,354,355,1,0,0,0,355,356,5,12,0,0,356,19,1,0,0,0,357,
		358,3,16,8,0,358,359,5,136,0,0,359,361,1,0,0,0,360,357,1,0,0,0,361,362,
		1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,21,1,0,0,0,364,372,7,1,0,0,
		365,367,5,137,0,0,366,365,1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,
		369,1,0,0,0,369,371,1,0,0,0,370,368,1,0,0,0,371,373,3,58,29,0,372,368,
		1,0,0,0,372,373,1,0,0,0,373,23,1,0,0,0,374,378,5,125,0,0,375,377,5,137,
		0,0,376,375,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,
		381,1,0,0,0,380,378,1,0,0,0,381,382,3,164,82,0,382,25,1,0,0,0,383,387,
		5,103,0,0,384,386,5,137,0,0,385,384,1,0,0,0,386,389,1,0,0,0,387,385,1,
		0,0,0,387,388,1,0,0,0,388,390,1,0,0,0,389,387,1,0,0,0,390,391,3,164,82,
		0,391,27,1,0,0,0,392,396,5,121,0,0,393,395,5,137,0,0,394,393,1,0,0,0,395,
		398,1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,399,1,0,0,0,398,396,1,
		0,0,0,399,400,3,30,15,0,400,29,1,0,0,0,401,403,3,40,20,0,402,401,1,0,0,
		0,402,403,1,0,0,0,403,406,1,0,0,0,404,407,3,42,21,0,405,407,3,32,16,0,
		406,404,1,0,0,0,406,405,1,0,0,0,407,408,1,0,0,0,408,409,3,44,22,0,409,
		412,1,0,0,0,410,412,5,135,0,0,411,402,1,0,0,0,411,410,1,0,0,0,412,31,1,
		0,0,0,413,425,5,11,0,0,414,418,3,34,17,0,415,417,5,137,0,0,416,415,1,0,
		0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,
		418,1,0,0,0,421,422,5,13,0,0,422,424,1,0,0,0,423,414,1,0,0,0,424,427,1,
		0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,438,1,0,0,0,427,425,1,0,0,0,
		428,436,3,34,17,0,429,431,5,137,0,0,430,429,1,0,0,0,431,434,1,0,0,0,432,
		430,1,0,0,0,432,433,1,0,0,0,433,435,1,0,0,0,434,432,1,0,0,0,435,437,5,
		13,0,0,436,432,1,0,0,0,436,437,1,0,0,0,437,439,1,0,0,0,438,428,1,0,0,0,
		438,439,1,0,0,0,439,440,1,0,0,0,440,441,5,12,0,0,441,33,1,0,0,0,442,445,
		3,36,18,0,443,444,5,123,0,0,444,446,3,38,19,0,445,443,1,0,0,0,445,446,
		1,0,0,0,446,35,1,0,0,0,447,450,3,204,102,0,448,450,5,135,0,0,449,447,1,
		0,0,0,449,448,1,0,0,0,450,37,1,0,0,0,451,452,7,2,0,0,452,39,1,0,0,0,453,
		457,3,46,23,0,454,456,5,137,0,0,455,454,1,0,0,0,456,459,1,0,0,0,457,455,
		1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,457,1,0,0,0,460,461,5,13,0,
		0,461,41,1,0,0,0,462,465,5,28,0,0,463,465,3,204,102,0,464,462,1,0,0,0,
		464,463,1,0,0,0,465,468,1,0,0,0,466,467,5,123,0,0,467,469,3,204,102,0,
		468,466,1,0,0,0,468,469,1,0,0,0,469,43,1,0,0,0,470,471,5,122,0,0,471,472,
		5,135,0,0,472,45,1,0,0,0,473,476,3,204,102,0,474,475,5,123,0,0,475,477,
		3,204,102,0,476,474,1,0,0,0,476,477,1,0,0,0,477,47,1,0,0,0,478,480,5,120,
		0,0,479,481,5,86,0,0,480,479,1,0,0,0,480,481,1,0,0,0,481,484,1,0,0,0,482,
		485,3,50,25,0,483,485,3,56,28,0,484,482,1,0,0,0,484,483,1,0,0,0,485,490,
		1,0,0,0,486,487,5,120,0,0,487,488,5,86,0,0,488,490,3,164,82,0,489,478,
		1,0,0,0,489,486,1,0,0,0,490,49,1,0,0,0,491,492,3,42,21,0,492,493,3,44,
		22,0,493,499,1,0,0,0,494,496,3,52,26,0,495,497,3,44,22,0,496,495,1,0,0,
		0,496,497,1,0,0,0,497,499,1,0,0,0,498,491,1,0,0,0,498,494,1,0,0,0,499,
		51,1,0,0,0,500,512,5,11,0,0,501,505,3,54,27,0,502,504,5,137,0,0,503,502,
		1,0,0,0,504,507,1,0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,508,1,0,0,
		0,507,505,1,0,0,0,508,509,5,13,0,0,509,511,1,0,0,0,510,501,1,0,0,0,511,
		514,1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,513,525,1,0,0,0,514,512,1,
		0,0,0,515,523,3,54,27,0,516,518,5,137,0,0,517,516,1,0,0,0,518,521,1,0,
		0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,522,1,0,0,0,521,519,1,0,0,0,522,
		524,5,13,0,0,523,519,1,0,0,0,523,524,1,0,0,0,524,526,1,0,0,0,525,515,1,
		0,0,0,525,526,1,0,0,0,526,527,1,0,0,0,527,528,5,12,0,0,528,53,1,0,0,0,
		529,532,3,36,18,0,530,531,5,123,0,0,531,533,3,36,18,0,532,530,1,0,0,0,
		532,533,1,0,0,0,533,55,1,0,0,0,534,537,3,114,57,0,535,537,3,112,56,0,536,
		534,1,0,0,0,536,535,1,0,0,0,537,57,1,0,0,0,538,549,3,60,30,0,539,541,5,
		137,0,0,540,539,1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,
		0,543,545,1,0,0,0,544,542,1,0,0,0,545,546,5,13,0,0,546,548,3,60,30,0,547,
		542,1,0,0,0,548,551,1,0,0,0,549,547,1,0,0,0,549,550,1,0,0,0,550,59,1,0,
		0,0,551,549,1,0,0,0,552,557,3,176,88,0,553,554,3,190,95,0,554,555,3,162,
		81,0,555,558,1,0,0,0,556,558,7,3,0,0,557,553,1,0,0,0,557,556,1,0,0,0,557,
		558,1,0,0,0,558,61,1,0,0,0,559,566,3,166,83,0,560,562,5,137,0,0,561,560,
		1,0,0,0,562,563,1,0,0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,565,1,0,0,
		0,565,567,3,154,77,0,566,561,1,0,0,0,566,567,1,0,0,0,567,63,1,0,0,0,568,
		569,4,32,0,0,569,570,3,158,79,0,570,65,1,0,0,0,571,575,5,101,0,0,572,574,
		3,212,106,0,573,572,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,575,576,1,
		0,0,0,576,578,1,0,0,0,577,575,1,0,0,0,578,582,3,164,82,0,579,581,5,137,
		0,0,580,579,1,0,0,0,581,584,1,0,0,0,582,580,1,0,0,0,582,583,1,0,0,0,583,
		585,1,0,0,0,584,582,1,0,0,0,585,586,3,68,34,0,586,587,3,72,36,0,587,67,
		1,0,0,0,588,590,5,136,0,0,589,588,1,0,0,0,590,591,1,0,0,0,591,589,1,0,
		0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,596,3,16,8,0,594,596,3,18,9,0,
		595,589,1,0,0,0,595,594,1,0,0,0,596,69,1,0,0,0,597,598,5,136,0,0,598,602,
		5,99,0,0,599,601,3,212,106,0,600,599,1,0,0,0,601,604,1,0,0,0,602,600,1,
		0,0,0,602,603,1,0,0,0,603,605,1,0,0,0,604,602,1,0,0,0,605,608,3,164,82,
		0,606,608,4,35,1,0,607,597,1,0,0,0,607,606,1,0,0,0,608,71,1,0,0,0,609,
		610,5,136,0,0,610,614,5,87,0,0,611,613,3,212,106,0,612,611,1,0,0,0,613,
		616,1,0,0,0,614,612,1,0,0,0,614,615,1,0,0,0,615,617,1,0,0,0,616,614,1,
		0,0,0,617,620,3,16,8,0,618,620,4,36,2,0,619,609,1,0,0,0,619,618,1,0,0,
		0,620,73,1,0,0,0,621,622,5,98,0,0,622,626,7,4,0,0,623,625,5,137,0,0,624,
		623,1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,629,1,
		0,0,0,628,626,1,0,0,0,629,642,3,164,82,0,630,632,5,137,0,0,631,630,1,0,
		0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,634,1,0,0,0,634,636,1,0,0,0,635,
		633,1,0,0,0,636,638,5,13,0,0,637,639,3,164,82,0,638,637,1,0,0,0,638,639,
		1,0,0,0,639,641,1,0,0,0,640,633,1,0,0,0,641,644,1,0,0,0,642,640,1,0,0,
		0,642,643,1,0,0,0,643,648,1,0,0,0,644,642,1,0,0,0,645,647,5,137,0,0,646,
		645,1,0,0,0,647,650,1,0,0,0,648,646,1,0,0,0,648,649,1,0,0,0,649,651,1,
		0,0,0,650,648,1,0,0,0,651,652,3,68,34,0,652,653,3,70,35,0,653,654,3,72,
		36,0,654,713,1,0,0,0,655,656,4,37,3,0,656,660,5,98,0,0,657,659,5,137,0,
		0,658,657,1,0,0,0,659,662,1,0,0,0,660,658,1,0,0,0,660,661,1,0,0,0,661,
		670,1,0,0,0,662,660,1,0,0,0,663,667,3,164,82,0,664,666,5,137,0,0,665,664,
		1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,671,1,0,0,
		0,669,667,1,0,0,0,670,663,1,0,0,0,670,671,1,0,0,0,671,672,1,0,0,0,672,
		673,3,68,34,0,673,674,3,70,35,0,674,675,3,72,36,0,675,713,1,0,0,0,676,
		680,5,93,0,0,677,679,5,137,0,0,678,677,1,0,0,0,679,682,1,0,0,0,680,678,
		1,0,0,0,680,681,1,0,0,0,681,683,1,0,0,0,682,680,1,0,0,0,683,687,3,164,
		82,0,684,686,5,137,0,0,685,684,1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,0,
		687,688,1,0,0,0,688,690,1,0,0,0,689,687,1,0,0,0,690,691,3,68,34,0,691,
		692,3,70,35,0,692,693,3,72,36,0,693,713,1,0,0,0,694,698,5,92,0,0,695,697,
		5,137,0,0,696,695,1,0,0,0,697,700,1,0,0,0,698,696,1,0,0,0,698,699,1,0,
		0,0,699,701,1,0,0,0,700,698,1,0,0,0,701,705,3,76,38,0,702,704,5,137,0,
		0,703,702,1,0,0,0,704,707,1,0,0,0,705,703,1,0,0,0,705,706,1,0,0,0,706,
		708,1,0,0,0,707,705,1,0,0,0,708,709,3,68,34,0,709,710,3,70,35,0,710,711,
		3,72,36,0,711,713,1,0,0,0,712,621,1,0,0,0,712,655,1,0,0,0,712,676,1,0,
		0,0,712,694,1,0,0,0,713,75,1,0,0,0,714,716,3,176,88,0,715,714,1,0,0,0,
		715,716,1,0,0,0,716,729,1,0,0,0,717,719,5,137,0,0,718,717,1,0,0,0,719,
		722,1,0,0,0,720,718,1,0,0,0,720,721,1,0,0,0,721,723,1,0,0,0,722,720,1,
		0,0,0,723,725,5,13,0,0,724,726,3,176,88,0,725,724,1,0,0,0,725,726,1,0,
		0,0,726,728,1,0,0,0,727,720,1,0,0,0,728,731,1,0,0,0,729,727,1,0,0,0,729,
		730,1,0,0,0,730,735,1,0,0,0,731,729,1,0,0,0,732,734,5,137,0,0,733,732,
		1,0,0,0,734,737,1,0,0,0,735,733,1,0,0,0,735,736,1,0,0,0,736,738,1,0,0,
		0,737,735,1,0,0,0,738,742,5,104,0,0,739,741,5,137,0,0,740,739,1,0,0,0,
		741,744,1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,745,1,0,0,0,744,742,
		1,0,0,0,745,782,3,164,82,0,746,748,5,9,0,0,747,749,3,176,88,0,748,747,
		1,0,0,0,748,749,1,0,0,0,749,762,1,0,0,0,750,752,5,137,0,0,751,750,1,0,
		0,0,752,755,1,0,0,0,753,751,1,0,0,0,753,754,1,0,0,0,754,756,1,0,0,0,755,
		753,1,0,0,0,756,758,5,13,0,0,757,759,3,176,88,0,758,757,1,0,0,0,758,759,
		1,0,0,0,759,761,1,0,0,0,760,753,1,0,0,0,761,764,1,0,0,0,762,760,1,0,0,
		0,762,763,1,0,0,0,763,768,1,0,0,0,764,762,1,0,0,0,765,767,7,5,0,0,766,
		765,1,0,0,0,767,770,1,0,0,0,768,766,1,0,0,0,768,769,1,0,0,0,769,771,1,
		0,0,0,770,768,1,0,0,0,771,775,5,104,0,0,772,774,7,5,0,0,773,772,1,0,0,
		0,774,777,1,0,0,0,775,773,1,0,0,0,775,776,1,0,0,0,776,778,1,0,0,0,777,
		775,1,0,0,0,778,779,3,164,82,0,779,780,5,10,0,0,780,782,1,0,0,0,781,715,
		1,0,0,0,781,746,1,0,0,0,782,77,1,0,0,0,783,787,5,91,0,0,784,786,5,137,
		0,0,785,784,1,0,0,0,786,789,1,0,0,0,787,785,1,0,0,0,787,788,1,0,0,0,788,
		795,1,0,0,0,789,787,1,0,0,0,790,796,3,150,75,0,791,792,5,9,0,0,792,793,
		3,150,75,0,793,794,5,10,0,0,794,796,1,0,0,0,795,790,1,0,0,0,795,791,1,
		0,0,0,795,796,1,0,0,0,796,79,1,0,0,0,797,801,5,81,0,0,798,800,5,137,0,
		0,799,798,1,0,0,0,800,803,1,0,0,0,801,799,1,0,0,0,801,802,1,0,0,0,802,
		809,1,0,0,0,803,801,1,0,0,0,804,805,5,9,0,0,805,806,3,150,75,0,806,807,
		5,10,0,0,807,810,1,0,0,0,808,810,3,150,75,0,809,804,1,0,0,0,809,808,1,
		0,0,0,809,810,1,0,0,0,810,81,1,0,0,0,811,815,5,90,0,0,812,814,5,137,0,
		0,813,812,1,0,0,0,814,817,1,0,0,0,815,813,1,0,0,0,815,816,1,0,0,0,816,
		819,1,0,0,0,817,815,1,0,0,0,818,820,3,162,81,0,819,818,1,0,0,0,819,820,
		1,0,0,0,820,83,1,0,0,0,821,825,5,106,0,0,822,824,5,137,0,0,823,822,1,0,
		0,0,824,827,1,0,0,0,825,823,1,0,0,0,825,826,1,0,0,0,826,829,1,0,0,0,827,
		825,1,0,0,0,828,830,3,162,81,0,829,828,1,0,0,0,829,830,1,0,0,0,830,85,
		1,0,0,0,831,835,5,84,0,0,832,834,5,137,0,0,833,832,1,0,0,0,834,837,1,0,
		0,0,835,833,1,0,0,0,835,836,1,0,0,0,836,839,1,0,0,0,837,835,1,0,0,0,838,
		840,3,164,82,0,839,838,1,0,0,0,839,840,1,0,0,0,840,849,1,0,0,0,841,843,
		5,137,0,0,842,841,1,0,0,0,843,846,1,0,0,0,844,842,1,0,0,0,844,845,1,0,
		0,0,845,847,1,0,0,0,846,844,1,0,0,0,847,848,5,13,0,0,848,850,3,192,96,
		0,849,844,1,0,0,0,849,850,1,0,0,0,850,854,1,0,0,0,851,853,3,212,106,0,
		852,851,1,0,0,0,853,856,1,0,0,0,854,852,1,0,0,0,854,855,1,0,0,0,855,857,
		1,0,0,0,856,854,1,0,0,0,857,858,3,88,44,0,858,87,1,0,0,0,859,863,5,11,
		0,0,860,862,3,212,106,0,861,860,1,0,0,0,862,865,1,0,0,0,863,861,1,0,0,
		0,863,864,1,0,0,0,864,867,1,0,0,0,865,863,1,0,0,0,866,868,3,90,45,0,867,
		866,1,0,0,0,867,868,1,0,0,0,868,873,1,0,0,0,869,871,3,94,47,0,870,872,
		3,90,45,0,871,870,1,0,0,0,871,872,1,0,0,0,872,874,1,0,0,0,873,869,1,0,
		0,0,873,874,1,0,0,0,874,875,1,0,0,0,875,876,5,12,0,0,876,89,1,0,0,0,877,
		879,3,92,46,0,878,877,1,0,0,0,879,880,1,0,0,0,880,878,1,0,0,0,880,881,
		1,0,0,0,881,91,1,0,0,0,882,886,5,85,0,0,883,885,5,137,0,0,884,883,1,0,
		0,0,885,888,1,0,0,0,886,884,1,0,0,0,886,887,1,0,0,0,887,889,1,0,0,0,888,
		886,1,0,0,0,889,893,3,158,79,0,890,892,5,137,0,0,891,890,1,0,0,0,892,895,
		1,0,0,0,893,891,1,0,0,0,893,894,1,0,0,0,894,896,1,0,0,0,895,893,1,0,0,
		0,896,905,5,17,0,0,897,899,3,212,106,0,898,897,1,0,0,0,899,902,1,0,0,0,
		900,898,1,0,0,0,900,901,1,0,0,0,901,903,1,0,0,0,902,900,1,0,0,0,903,906,
		3,20,10,0,904,906,5,136,0,0,905,900,1,0,0,0,905,904,1,0,0,0,906,93,1,0,
		0,0,907,911,5,86,0,0,908,910,5,137,0,0,909,908,1,0,0,0,910,913,1,0,0,0,
		911,909,1,0,0,0,911,912,1,0,0,0,912,914,1,0,0,0,913,911,1,0,0,0,914,923,
		5,17,0,0,915,917,3,212,106,0,916,915,1,0,0,0,917,920,1,0,0,0,918,916,1,
		0,0,0,918,919,1,0,0,0,919,921,1,0,0,0,920,918,1,0,0,0,921,924,3,20,10,
		0,922,924,5,136,0,0,923,918,1,0,0,0,923,922,1,0,0,0,924,95,1,0,0,0,925,
		926,5,134,0,0,926,927,5,17,0,0,927,97,1,0,0,0,928,932,5,112,0,0,929,931,
		5,137,0,0,930,929,1,0,0,0,931,934,1,0,0,0,932,930,1,0,0,0,932,933,1,0,
		0,0,933,935,1,0,0,0,934,932,1,0,0,0,935,948,3,150,75,0,936,940,5,112,0,
		0,937,939,5,137,0,0,938,937,1,0,0,0,939,942,1,0,0,0,940,938,1,0,0,0,940,
		941,1,0,0,0,941,943,1,0,0,0,942,940,1,0,0,0,943,944,5,9,0,0,944,945,3,
		150,75,0,945,946,5,10,0,0,946,948,1,0,0,0,947,928,1,0,0,0,947,936,1,0,
		0,0,948,99,1,0,0,0,949,953,5,102,0,0,950,952,5,137,0,0,951,950,1,0,0,0,
		952,955,1,0,0,0,953,951,1,0,0,0,953,954,1,0,0,0,954,957,1,0,0,0,955,953,
		1,0,0,0,956,958,3,164,82,0,957,956,1,0,0,0,957,958,1,0,0,0,958,101,1,0,
		0,0,959,963,5,105,0,0,960,962,3,212,106,0,961,960,1,0,0,0,962,965,1,0,
		0,0,963,961,1,0,0,0,963,964,1,0,0,0,964,966,1,0,0,0,965,963,1,0,0,0,966,
		970,3,16,8,0,967,969,3,104,52,0,968,967,1,0,0,0,969,972,1,0,0,0,970,968,
		1,0,0,0,970,971,1,0,0,0,971,973,1,0,0,0,972,970,1,0,0,0,973,974,3,72,36,
		0,974,975,3,110,55,0,975,103,1,0,0,0,976,977,5,136,0,0,977,981,5,88,0,
		0,978,980,5,137,0,0,979,978,1,0,0,0,980,983,1,0,0,0,981,979,1,0,0,0,981,
		982,1,0,0,0,982,991,1,0,0,0,983,981,1,0,0,0,984,988,3,106,53,0,985,987,
		5,137,0,0,986,985,1,0,0,0,987,990,1,0,0,0,988,986,1,0,0,0,988,989,1,0,
		0,0,989,992,1,0,0,0,990,988,1,0,0,0,991,984,1,0,0,0,991,992,1,0,0,0,992,
		993,1,0,0,0,993,994,3,68,34,0,994,105,1,0,0,0,995,1003,3,108,54,0,996,
		998,5,137,0,0,997,996,1,0,0,0,998,1001,1,0,0,0,999,997,1,0,0,0,999,1000,
		1,0,0,0,1000,1002,1,0,0,0,1001,999,1,0,0,0,1002,1004,5,123,0,0,1003,999,
		1,0,0,0,1003,1004,1,0,0,0,1004,1012,1,0,0,0,1005,1007,5,137,0,0,1006,1005,
		1,0,0,0,1007,1010,1,0,0,0,1008,1006,1,0,0,0,1008,1009,1,0,0,0,1009,1011,
		1,0,0,0,1010,1008,1,0,0,0,1011,1013,3,206,103,0,1012,1008,1,0,0,0,1012,
		1013,1,0,0,0,1013,1071,1,0,0,0,1014,1015,5,9,0,0,1015,1023,3,108,54,0,
		1016,1018,5,137,0,0,1017,1016,1,0,0,0,1018,1021,1,0,0,0,1019,1017,1,0,
		0,0,1019,1020,1,0,0,0,1020,1022,1,0,0,0,1021,1019,1,0,0,0,1022,1024,5,
		123,0,0,1023,1019,1,0,0,0,1023,1024,1,0,0,0,1024,1032,1,0,0,0,1025,1027,
		5,137,0,0,1026,1025,1,0,0,0,1027,1030,1,0,0,0,1028,1026,1,0,0,0,1028,1029,
		1,0,0,0,1029,1031,1,0,0,0,1030,1028,1,0,0,0,1031,1033,3,206,103,0,1032,
		1028,1,0,0,0,1032,1033,1,0,0,0,1033,1034,1,0,0,0,1034,1035,5,10,0,0,1035,
		1071,1,0,0,0,1036,1038,5,137,0,0,1037,1036,1,0,0,0,1038,1041,1,0,0,0,1039,
		1037,1,0,0,0,1039,1040,1,0,0,0,1040,1042,1,0,0,0,1041,1039,1,0,0,0,1042,
		1043,5,123,0,0,1043,1047,1,0,0,0,1044,1046,5,137,0,0,1045,1044,1,0,0,0,
		1046,1049,1,0,0,0,1047,1045,1,0,0,0,1047,1048,1,0,0,0,1048,1050,1,0,0,
		0,1049,1047,1,0,0,0,1050,1071,3,206,103,0,1051,1055,5,9,0,0,1052,1054,
		5,137,0,0,1053,1052,1,0,0,0,1054,1057,1,0,0,0,1055,1053,1,0,0,0,1055,1056,
		1,0,0,0,1056,1058,1,0,0,0,1057,1055,1,0,0,0,1058,1059,5,123,0,0,1059,1063,
		1,0,0,0,1060,1062,5,137,0,0,1061,1060,1,0,0,0,1062,1065,1,0,0,0,1063,1061,
		1,0,0,0,1063,1064,1,0,0,0,1064,1066,1,0,0,0,1065,1063,1,0,0,0,1066,1067,
		3,206,103,0,1067,1068,1,0,0,0,1068,1069,5,10,0,0,1069,1071,1,0,0,0,1070,
		995,1,0,0,0,1070,1014,1,0,0,0,1070,1039,1,0,0,0,1070,1051,1,0,0,0,1071,
		107,1,0,0,0,1072,1083,3,206,103,0,1073,1075,5,137,0,0,1074,1073,1,0,0,
		0,1075,1078,1,0,0,0,1076,1074,1,0,0,0,1076,1077,1,0,0,0,1077,1079,1,0,
		0,0,1078,1076,1,0,0,0,1079,1080,5,13,0,0,1080,1082,3,206,103,0,1081,1076,
		1,0,0,0,1082,1085,1,0,0,0,1083,1081,1,0,0,0,1083,1084,1,0,0,0,1084,109,
		1,0,0,0,1085,1083,1,0,0,0,1086,1087,5,136,0,0,1087,1091,5,89,0,0,1088,
		1090,3,212,106,0,1089,1088,1,0,0,0,1090,1093,1,0,0,0,1091,1089,1,0,0,0,
		1091,1092,1,0,0,0,1092,1094,1,0,0,0,1093,1091,1,0,0,0,1094,1097,3,16,8,
		0,1095,1097,4,55,4,0,1096,1086,1,0,0,0,1096,1095,1,0,0,0,1097,111,1,0,
		0,0,1098,1099,3,180,90,0,1099,1100,3,188,94,0,1100,113,1,0,0,0,1101,1105,
		5,115,0,0,1102,1104,5,137,0,0,1103,1102,1,0,0,0,1104,1107,1,0,0,0,1105,
		1103,1,0,0,0,1105,1106,1,0,0,0,1106,1108,1,0,0,0,1107,1105,1,0,0,0,1108,
		1121,3,206,103,0,1109,1111,5,137,0,0,1110,1109,1,0,0,0,1111,1112,1,0,0,
		0,1112,1110,1,0,0,0,1112,1113,1,0,0,0,1113,1114,1,0,0,0,1114,1116,5,117,
		0,0,1115,1117,5,137,0,0,1116,1115,1,0,0,0,1117,1118,1,0,0,0,1118,1116,
		1,0,0,0,1118,1119,1,0,0,0,1119,1120,1,0,0,0,1120,1122,3,116,58,0,1121,
		1110,1,0,0,0,1121,1122,1,0,0,0,1122,1126,1,0,0,0,1123,1125,3,212,106,0,
		1124,1123,1,0,0,0,1125,1128,1,0,0,0,1126,1124,1,0,0,0,1126,1127,1,0,0,
		0,1127,1129,1,0,0,0,1128,1126,1,0,0,0,1129,1130,3,118,59,0,1130,115,1,
		0,0,0,1131,1136,3,206,103,0,1132,1133,5,20,0,0,1133,1135,3,206,103,0,1134,
		1132,1,0,0,0,1135,1138,1,0,0,0,1136,1134,1,0,0,0,1136,1137,1,0,0,0,1137,
		117,1,0,0,0,1138,1136,1,0,0,0,1139,1146,5,11,0,0,1140,1141,3,120,60,0,
		1141,1142,5,136,0,0,1142,1145,1,0,0,0,1143,1145,5,136,0,0,1144,1140,1,
		0,0,0,1144,1143,1,0,0,0,1145,1148,1,0,0,0,1146,1144,1,0,0,0,1146,1147,
		1,0,0,0,1147,1149,1,0,0,0,1148,1146,1,0,0,0,1149,1150,5,12,0,0,1150,119,
		1,0,0,0,1151,1187,3,122,61,0,1152,1156,5,126,0,0,1153,1155,5,137,0,0,1154,
		1153,1,0,0,0,1155,1158,1,0,0,0,1156,1154,1,0,0,0,1156,1157,1,0,0,0,1157,
		1160,1,0,0,0,1158,1156,1,0,0,0,1159,1152,1,0,0,0,1159,1160,1,0,0,0,1160,
		1161,1,0,0,0,1161,1187,3,124,62,0,1162,1166,5,126,0,0,1163,1165,5,137,
		0,0,1164,1163,1,0,0,0,1165,1168,1,0,0,0,1166,1164,1,0,0,0,1166,1167,1,
		0,0,0,1167,1170,1,0,0,0,1168,1166,1,0,0,0,1169,1162,1,0,0,0,1169,1170,
		1,0,0,0,1170,1171,1,0,0,0,1171,1182,3,132,66,0,1172,1174,5,137,0,0,1173,
		1172,1,0,0,0,1174,1177,1,0,0,0,1175,1173,1,0,0,0,1175,1176,1,0,0,0,1176,
		1178,1,0,0,0,1177,1175,1,0,0,0,1178,1179,5,13,0,0,1179,1181,3,132,66,0,
		1180,1175,1,0,0,0,1181,1184,1,0,0,0,1182,1180,1,0,0,0,1182,1183,1,0,0,
		0,1183,1187,1,0,0,0,1184,1182,1,0,0,0,1185,1187,3,114,57,0,1186,1151,1,
		0,0,0,1186,1159,1,0,0,0,1186,1169,1,0,0,0,1186,1185,1,0,0,0,1187,121,1,
		0,0,0,1188,1189,3,180,90,0,1189,1190,3,188,94,0,1190,123,1,0,0,0,1191,
		1192,3,126,63,0,1192,1193,5,67,0,0,1193,1194,3,162,81,0,1194,1217,1,0,
		0,0,1195,1199,3,126,63,0,1196,1198,3,212,106,0,1197,1196,1,0,0,0,1198,
		1201,1,0,0,0,1199,1197,1,0,0,0,1199,1200,1,0,0,0,1200,1202,1,0,0,0,1201,
		1199,1,0,0,0,1202,1210,5,11,0,0,1203,1204,3,128,64,0,1204,1205,5,136,0,
		0,1205,1211,1,0,0,0,1206,1207,3,130,65,0,1207,1208,5,136,0,0,1208,1211,
		1,0,0,0,1209,1211,5,136,0,0,1210,1203,1,0,0,0,1210,1206,1,0,0,0,1210,1209,
		1,0,0,0,1211,1212,1,0,0,0,1212,1210,1,0,0,0,1212,1213,1,0,0,0,1213,1214,
		1,0,0,0,1214,1215,5,12,0,0,1215,1217,1,0,0,0,1216,1191,1,0,0,0,1216,1195,
		1,0,0,0,1217,125,1,0,0,0,1218,1233,3,150,75,0,1219,1220,3,150,75,0,1220,
		1222,5,7,0,0,1221,1223,3,134,67,0,1222,1221,1,0,0,0,1222,1223,1,0,0,0,
		1223,1227,1,0,0,0,1224,1226,3,212,106,0,1225,1224,1,0,0,0,1226,1229,1,
		0,0,0,1227,1225,1,0,0,0,1227,1228,1,0,0,0,1228,1230,1,0,0,0,1229,1227,
		1,0,0,0,1230,1231,5,8,0,0,1231,1233,1,0,0,0,1232,1218,1,0,0,0,1232,1219,
		1,0,0,0,1233,127,1,0,0,0,1234,1235,5,113,0,0,1235,1236,3,188,94,0,1236,
		129,1,0,0,0,1237,1238,5,114,0,0,1238,1239,3,188,94,0,1239,131,1,0,0,0,
		1240,1245,3,150,75,0,1241,1242,5,20,0,0,1242,1244,3,150,75,0,1243,1241,
		1,0,0,0,1244,1247,1,0,0,0,1245,1243,1,0,0,0,1245,1246,1,0,0,0,1246,1248,
		1,0,0,0,1247,1245,1,0,0,0,1248,1249,5,14,0,0,1249,1250,3,162,81,0,1250,
		133,1,0,0,0,1251,1255,3,136,68,0,1252,1254,5,137,0,0,1253,1252,1,0,0,0,
		1254,1257,1,0,0,0,1255,1253,1,0,0,0,1255,1256,1,0,0,0,1256,1258,1,0,0,
		0,1257,1255,1,0,0,0,1258,1259,5,13,0,0,1259,1261,1,0,0,0,1260,1251,1,0,
		0,0,1261,1264,1,0,0,0,1262,1260,1,0,0,0,1262,1263,1,0,0,0,1263,1265,1,
		0,0,0,1264,1262,1,0,0,0,1265,1266,3,138,69,0,1266,135,1,0,0,0,1267,1269,
		5,47,0,0,1268,1267,1,0,0,0,1268,1269,1,0,0,0,1269,1270,1,0,0,0,1270,1274,
		3,206,103,0,1271,1272,5,14,0,0,1272,1275,3,162,81,0,1273,1275,5,15,0,0,
		1274,1271,1,0,0,0,1274,1273,1,0,0,0,1274,1275,1,0,0,0,1275,137,1,0,0,0,
		1276,1282,3,136,68,0,1277,1279,3,206,103,0,1278,1277,1,0,0,0,1278,1279,
		1,0,0,0,1279,1280,1,0,0,0,1280,1282,5,28,0,0,1281,1276,1,0,0,0,1281,1278,
		1,0,0,0,1282,139,1,0,0,0,1283,1287,5,7,0,0,1284,1286,7,5,0,0,1285,1284,
		1,0,0,0,1286,1289,1,0,0,0,1287,1285,1,0,0,0,1287,1288,1,0,0,0,1288,1297,
		1,0,0,0,1289,1287,1,0,0,0,1290,1294,3,154,77,0,1291,1293,7,5,0,0,1292,
		1291,1,0,0,0,1293,1296,1,0,0,0,1294,1292,1,0,0,0,1294,1295,1,0,0,0,1295,
		1298,1,0,0,0,1296,1294,1,0,0,0,1297,1290,1,0,0,0,1297,1298,1,0,0,0,1298,
		1299,1,0,0,0,1299,1300,5,8,0,0,1300,141,1,0,0,0,1301,1305,5,7,0,0,1302,
		1304,7,5,0,0,1303,1302,1,0,0,0,1304,1307,1,0,0,0,1305,1303,1,0,0,0,1305,
		1306,1,0,0,0,1306,1308,1,0,0,0,1307,1305,1,0,0,0,1308,1312,3,144,72,0,
		1309,1311,7,5,0,0,1310,1309,1,0,0,0,1311,1314,1,0,0,0,1312,1310,1,0,0,
		0,1312,1313,1,0,0,0,1313,1315,1,0,0,0,1314,1312,1,0,0,0,1315,1316,5,8,
		0,0,1316,143,1,0,0,0,1317,1319,5,137,0,0,1318,1317,1,0,0,0,1319,1322,1,
		0,0,0,1320,1318,1,0,0,0,1320,1321,1,0,0,0,1321,1323,1,0,0,0,1322,1320,
		1,0,0,0,1323,1325,5,13,0,0,1324,1320,1,0,0,0,1325,1328,1,0,0,0,1326,1324,
		1,0,0,0,1326,1327,1,0,0,0,1327,1329,1,0,0,0,1328,1326,1,0,0,0,1329,1342,
		3,146,73,0,1330,1332,5,137,0,0,1331,1330,1,0,0,0,1332,1335,1,0,0,0,1333,
		1331,1,0,0,0,1333,1334,1,0,0,0,1334,1336,1,0,0,0,1335,1333,1,0,0,0,1336,
		1338,5,13,0,0,1337,1339,3,146,73,0,1338,1337,1,0,0,0,1338,1339,1,0,0,0,
		1339,1341,1,0,0,0,1340,1333,1,0,0,0,1341,1344,1,0,0,0,1342,1340,1,0,0,
		0,1342,1343,1,0,0,0,1343,145,1,0,0,0,1344,1342,1,0,0,0,1345,1346,3,162,
		81,0,1346,1347,5,17,0,0,1347,1348,3,162,81,0,1348,147,1,0,0,0,1349,1353,
		3,170,85,0,1350,1352,7,5,0,0,1351,1350,1,0,0,0,1352,1355,1,0,0,0,1353,
		1351,1,0,0,0,1353,1354,1,0,0,0,1354,1356,1,0,0,0,1355,1353,1,0,0,0,1356,
		1360,5,17,0,0,1357,1359,7,5,0,0,1358,1357,1,0,0,0,1359,1362,1,0,0,0,1360,
		1358,1,0,0,0,1360,1361,1,0,0,0,1361,1363,1,0,0,0,1362,1360,1,0,0,0,1363,
		1364,3,162,81,0,1364,149,1,0,0,0,1365,1370,3,206,103,0,1366,1370,3,208,
		104,0,1367,1370,5,135,0,0,1368,1370,3,196,98,0,1369,1365,1,0,0,0,1369,
		1366,1,0,0,0,1369,1367,1,0,0,0,1369,1368,1,0,0,0,1370,151,1,0,0,0,1371,
		1372,5,1,0,0,1372,1373,3,162,81,0,1373,1374,5,2,0,0,1374,153,1,0,0,0,1375,
		1388,3,156,78,0,1376,1378,5,137,0,0,1377,1376,1,0,0,0,1378,1381,1,0,0,
		0,1379,1377,1,0,0,0,1379,1380,1,0,0,0,1380,1382,1,0,0,0,1381,1379,1,0,
		0,0,1382,1384,5,13,0,0,1383,1385,3,156,78,0,1384,1383,1,0,0,0,1384,1385,
		1,0,0,0,1385,1387,1,0,0,0,1386,1379,1,0,0,0,1387,1390,1,0,0,0,1388,1386,
		1,0,0,0,1388,1389,1,0,0,0,1389,1406,1,0,0,0,1390,1388,1,0,0,0,1391,1393,
		5,137,0,0,1392,1391,1,0,0,0,1393,1396,1,0,0,0,1394,1392,1,0,0,0,1394,1395,
		1,0,0,0,1395,1397,1,0,0,0,1396,1394,1,0,0,0,1397,1399,5,13,0,0,1398,1400,
		3,156,78,0,1399,1398,1,0,0,0,1399,1400,1,0,0,0,1400,1402,1,0,0,0,1401,
		1394,1,0,0,0,1402,1403,1,0,0,0,1403,1401,1,0,0,0,1403,1404,1,0,0,0,1404,
		1406,1,0,0,0,1405,1375,1,0,0,0,1405,1401,1,0,0,0,1406,155,1,0,0,0,1407,
		1409,3,162,81,0,1408,1410,7,6,0,0,1409,1408,1,0,0,0,1409,1410,1,0,0,0,
		1410,157,1,0,0,0,1411,1422,3,162,81,0,1412,1414,5,137,0,0,1413,1412,1,
		0,0,0,1414,1417,1,0,0,0,1415,1413,1,0,0,0,1415,1416,1,0,0,0,1416,1418,
		1,0,0,0,1417,1415,1,0,0,0,1418,1419,5,13,0,0,1419,1421,3,162,81,0,1420,
		1415,1,0,0,0,1421,1424,1,0,0,0,1422,1420,1,0,0,0,1422,1423,1,0,0,0,1423,
		159,1,0,0,0,1424,1422,1,0,0,0,1425,1429,5,7,0,0,1426,1428,3,212,106,0,
		1427,1426,1,0,0,0,1428,1431,1,0,0,0,1429,1427,1,0,0,0,1429,1430,1,0,0,
		0,1430,1439,1,0,0,0,1431,1429,1,0,0,0,1432,1436,3,154,77,0,1433,1435,3,
		212,106,0,1434,1433,1,0,0,0,1435,1438,1,0,0,0,1436,1434,1,0,0,0,1436,1437,
		1,0,0,0,1437,1440,1,0,0,0,1438,1436,1,0,0,0,1439,1432,1,0,0,0,1439,1440,
		1,0,0,0,1440,1441,1,0,0,0,1441,1442,5,8,0,0,1442,161,1,0,0,0,1443,1444,
		6,81,-1,0,1444,1445,5,22,0,0,1445,1489,3,162,81,27,1446,1447,5,23,0,0,
		1447,1489,3,162,81,26,1448,1449,5,25,0,0,1449,1489,3,162,81,24,1450,1454,
		5,27,0,0,1451,1453,5,137,0,0,1452,1451,1,0,0,0,1453,1456,1,0,0,0,1454,
		1452,1,0,0,0,1454,1455,1,0,0,0,1455,1457,1,0,0,0,1456,1454,1,0,0,0,1457,
		1489,3,162,81,23,1458,1459,5,24,0,0,1459,1489,3,162,81,22,1460,1461,5,
		26,0,0,1461,1489,3,162,81,21,1462,1466,5,110,0,0,1463,1465,5,137,0,0,1464,
		1463,1,0,0,0,1465,1468,1,0,0,0,1466,1464,1,0,0,0,1466,1467,1,0,0,0,1467,
		1469,1,0,0,0,1468,1466,1,0,0,0,1469,1489,3,162,81,9,1470,1471,3,166,83,
		0,1471,1472,3,190,95,0,1472,1473,3,162,81,4,1473,1489,1,0,0,0,1474,1475,
		3,186,93,0,1475,1476,5,67,0,0,1476,1477,3,162,81,3,1477,1489,1,0,0,0,1478,
		1482,3,184,92,0,1479,1481,7,5,0,0,1480,1479,1,0,0,0,1481,1484,1,0,0,0,
		1482,1480,1,0,0,0,1482,1483,1,0,0,0,1483,1485,1,0,0,0,1484,1482,1,0,0,
		0,1485,1486,3,18,9,0,1486,1489,1,0,0,0,1487,1489,3,166,83,0,1488,1443,
		1,0,0,0,1488,1446,1,0,0,0,1488,1448,1,0,0,0,1488,1450,1,0,0,0,1488,1458,
		1,0,0,0,1488,1460,1,0,0,0,1488,1462,1,0,0,0,1488,1470,1,0,0,0,1488,1474,
		1,0,0,0,1488,1478,1,0,0,0,1488,1487,1,0,0,0,1489,1620,1,0,0,0,1490,1491,
		10,25,0,0,1491,1492,5,32,0,0,1492,1619,3,162,81,25,1493,1494,10,20,0,0,
		1494,1498,7,7,0,0,1495,1497,7,5,0,0,1496,1495,1,0,0,0,1497,1500,1,0,0,
		0,1498,1496,1,0,0,0,1498,1499,1,0,0,0,1499,1501,1,0,0,0,1500,1498,1,0,
		0,0,1501,1619,3,162,81,21,1502,1503,10,19,0,0,1503,1507,7,8,0,0,1504,1506,
		7,5,0,0,1505,1504,1,0,0,0,1506,1509,1,0,0,0,1507,1505,1,0,0,0,1507,1508,
		1,0,0,0,1508,1510,1,0,0,0,1509,1507,1,0,0,0,1510,1619,3,162,81,20,1511,
		1512,10,18,0,0,1512,1513,7,9,0,0,1513,1619,3,162,81,19,1514,1518,10,17,
		0,0,1515,1517,7,5,0,0,1516,1515,1,0,0,0,1517,1520,1,0,0,0,1518,1516,1,
		0,0,0,1518,1519,1,0,0,0,1519,1521,1,0,0,0,1520,1518,1,0,0,0,1521,1525,
		5,47,0,0,1522,1524,7,5,0,0,1523,1522,1,0,0,0,1524,1527,1,0,0,0,1525,1523,
		1,0,0,0,1525,1526,1,0,0,0,1526,1528,1,0,0,0,1527,1525,1,0,0,0,1528,1619,
		3,162,81,18,1529,1530,10,16,0,0,1530,1531,5,48,0,0,1531,1619,3,162,81,
		17,1532,1533,10,15,0,0,1533,1534,5,49,0,0,1534,1619,3,162,81,16,1535,1542,
		10,14,0,0,1536,1543,5,21,0,0,1537,1539,5,137,0,0,1538,1537,1,0,0,0,1539,
		1540,1,0,0,0,1540,1538,1,0,0,0,1540,1541,1,0,0,0,1541,1543,1,0,0,0,1542,
		1536,1,0,0,0,1542,1538,1,0,0,0,1543,1544,1,0,0,0,1544,1619,3,162,81,15,
		1545,1546,10,13,0,0,1546,1547,5,46,0,0,1547,1619,3,162,81,14,1548,1549,
		10,12,0,0,1549,1550,7,10,0,0,1550,1619,3,162,81,13,1551,1552,10,11,0,0,
		1552,1553,7,11,0,0,1553,1619,3,162,81,12,1554,1557,10,8,0,0,1555,1558,
		5,50,0,0,1556,1558,5,109,0,0,1557,1555,1,0,0,0,1557,1556,1,0,0,0,1558,
		1559,1,0,0,0,1559,1619,3,162,81,9,1560,1563,10,7,0,0,1561,1564,5,51,0,
		0,1562,1564,5,111,0,0,1563,1561,1,0,0,0,1563,1562,1,0,0,0,1564,1565,1,
		0,0,0,1565,1619,3,162,81,8,1566,1567,10,6,0,0,1567,1568,5,33,0,0,1568,
		1619,3,162,81,6,1569,1573,10,5,0,0,1570,1572,7,5,0,0,1571,1570,1,0,0,0,
		1572,1575,1,0,0,0,1573,1571,1,0,0,0,1573,1574,1,0,0,0,1574,1576,1,0,0,
		0,1575,1573,1,0,0,0,1576,1580,5,15,0,0,1577,1579,7,5,0,0,1578,1577,1,0,
		0,0,1579,1582,1,0,0,0,1580,1578,1,0,0,0,1580,1581,1,0,0,0,1581,1583,1,
		0,0,0,1582,1580,1,0,0,0,1583,1587,3,162,81,0,1584,1586,7,5,0,0,1585,1584,
		1,0,0,0,1586,1589,1,0,0,0,1587,1585,1,0,0,0,1587,1588,1,0,0,0,1588,1590,
		1,0,0,0,1589,1587,1,0,0,0,1590,1594,5,17,0,0,1591,1593,7,5,0,0,1592,1591,
		1,0,0,0,1593,1596,1,0,0,0,1594,1592,1,0,0,0,1594,1595,1,0,0,0,1595,1597,
		1,0,0,0,1596,1594,1,0,0,0,1597,1598,3,162,81,5,1598,1619,1,0,0,0,1599,
		1600,10,29,0,0,1600,1619,5,22,0,0,1601,1602,10,28,0,0,1602,1619,5,23,0,
		0,1603,1607,10,10,0,0,1604,1606,7,5,0,0,1605,1604,1,0,0,0,1606,1609,1,
		0,0,0,1607,1605,1,0,0,0,1607,1608,1,0,0,0,1608,1610,1,0,0,0,1609,1607,
		1,0,0,0,1610,1614,7,12,0,0,1611,1613,7,5,0,0,1612,1611,1,0,0,0,1613,1616,
		1,0,0,0,1614,1612,1,0,0,0,1614,1615,1,0,0,0,1615,1617,1,0,0,0,1616,1614,
		1,0,0,0,1617,1619,3,166,83,0,1618,1490,1,0,0,0,1618,1493,1,0,0,0,1618,
		1502,1,0,0,0,1618,1511,1,0,0,0,1618,1514,1,0,0,0,1618,1529,1,0,0,0,1618,
		1532,1,0,0,0,1618,1535,1,0,0,0,1618,1545,1,0,0,0,1618,1548,1,0,0,0,1618,
		1551,1,0,0,0,1618,1554,1,0,0,0,1618,1560,1,0,0,0,1618,1566,1,0,0,0,1618,
		1569,1,0,0,0,1618,1599,1,0,0,0,1618,1601,1,0,0,0,1618,1603,1,0,0,0,1619,
		1622,1,0,0,0,1620,1618,1,0,0,0,1620,1621,1,0,0,0,1621,163,1,0,0,0,1622,
		1620,1,0,0,0,1623,1624,6,82,-1,0,1624,1625,5,22,0,0,1625,1656,3,164,82,
		25,1626,1627,5,23,0,0,1627,1656,3,164,82,24,1628,1629,5,25,0,0,1629,1656,
		3,164,82,22,1630,1634,5,27,0,0,1631,1633,5,137,0,0,1632,1631,1,0,0,0,1633,
		1636,1,0,0,0,1634,1632,1,0,0,0,1634,1635,1,0,0,0,1635,1637,1,0,0,0,1636,
		1634,1,0,0,0,1637,1656,3,164,82,21,1638,1639,5,24,0,0,1639,1656,3,164,
		82,20,1640,1641,5,26,0,0,1641,1656,3,164,82,19,1642,1646,5,110,0,0,1643,
		1645,5,137,0,0,1644,1643,1,0,0,0,1645,1648,1,0,0,0,1646,1644,1,0,0,0,1646,
		1647,1,0,0,0,1647,1649,1,0,0,0,1648,1646,1,0,0,0,1649,1656,3,164,82,7,
		1650,1651,3,166,83,0,1651,1652,3,190,95,0,1652,1653,3,164,82,2,1653,1656,
		1,0,0,0,1654,1656,3,166,83,0,1655,1623,1,0,0,0,1655,1626,1,0,0,0,1655,
		1628,1,0,0,0,1655,1630,1,0,0,0,1655,1638,1,0,0,0,1655,1640,1,0,0,0,1655,
		1642,1,0,0,0,1655,1650,1,0,0,0,1655,1654,1,0,0,0,1656,1787,1,0,0,0,1657,
		1658,10,23,0,0,1658,1659,5,32,0,0,1659,1786,3,164,82,23,1660,1661,10,18,
		0,0,1661,1665,7,7,0,0,1662,1664,7,5,0,0,1663,1662,1,0,0,0,1664,1667,1,
		0,0,0,1665,1663,1,0,0,0,1665,1666,1,0,0,0,1666,1668,1,0,0,0,1667,1665,
		1,0,0,0,1668,1786,3,164,82,19,1669,1670,10,17,0,0,1670,1674,7,8,0,0,1671,
		1673,7,5,0,0,1672,1671,1,0,0,0,1673,1676,1,0,0,0,1674,1672,1,0,0,0,1674,
		1675,1,0,0,0,1675,1677,1,0,0,0,1676,1674,1,0,0,0,1677,1786,3,164,82,18,
		1678,1679,10,16,0,0,1679,1680,7,9,0,0,1680,1786,3,164,82,17,1681,1685,
		10,15,0,0,1682,1684,7,5,0,0,1683,1682,1,0,0,0,1684,1687,1,0,0,0,1685,1683,
		1,0,0,0,1685,1686,1,0,0,0,1686,1688,1,0,0,0,1687,1685,1,0,0,0,1688,1692,
		5,47,0,0,1689,1691,7,5,0,0,1690,1689,1,0,0,0,1691,1694,1,0,0,0,1692,1690,
		1,0,0,0,1692,1693,1,0,0,0,1693,1695,1,0,0,0,1694,1692,1,0,0,0,1695,1786,
		3,164,82,16,1696,1697,10,14,0,0,1697,1698,5,48,0,0,1698,1786,3,164,82,
		15,1699,1700,10,13,0,0,1700,1701,5,49,0,0,1701,1786,3,164,82,14,1702,1709,
		10,12,0,0,1703,1710,5,21,0,0,1704,1706,5,137,0,0,1705,1704,1,0,0,0,1706,
		1707,1,0,0,0,1707,1705,1,0,0,0,1707,1708,1,0,0,0,1708,1710,1,0,0,0,1709,
		1703,1,0,0,0,1709,1705,1,0,0,0,1710,1711,1,0,0,0,1711,1786,3,164,82,13,
		1712,1713,10,11,0,0,1713,1714,5,46,0,0,1714,1786,3,164,82,12,1715,1716,
		10,10,0,0,1716,1717,7,10,0,0,1717,1786,3,164,82,11,1718,1719,10,9,0,0,
		1719,1720,7,11,0,0,1720,1786,3,164,82,10,1721,1724,10,6,0,0,1722,1725,
		5,50,0,0,1723,1725,5,109,0,0,1724,1722,1,0,0,0,1724,1723,1,0,0,0,1725,
		1726,1,0,0,0,1726,1786,3,164,82,7,1727,1730,10,5,0,0,1728,1731,5,51,0,
		0,1729,1731,5,111,0,0,1730,1728,1,0,0,0,1730,1729,1,0,0,0,1731,1732,1,
		0,0,0,1732,1786,3,164,82,6,1733,1734,10,4,0,0,1734,1735,5,33,0,0,1735,
		1786,3,164,82,4,1736,1740,10,3,0,0,1737,1739,7,5,0,0,1738,1737,1,0,0,0,
		1739,1742,1,0,0,0,1740,1738,1,0,0,0,1740,1741,1,0,0,0,1741,1743,1,0,0,
		0,1742,1740,1,0,0,0,1743,1747,5,15,0,0,1744,1746,7,5,0,0,1745,1744,1,0,
		0,0,1746,1749,1,0,0,0,1747,1745,1,0,0,0,1747,1748,1,0,0,0,1748,1750,1,
		0,0,0,1749,1747,1,0,0,0,1750,1754,3,162,81,0,1751,1753,7,5,0,0,1752,1751,
		1,0,0,0,1753,1756,1,0,0,0,1754,1752,1,0,0,0,1754,1755,1,0,0,0,1755,1757,
		1,0,0,0,1756,1754,1,0,0,0,1757,1761,5,17,0,0,1758,1760,7,5,0,0,1759,1758,
		1,0,0,0,1760,1763,1,0,0,0,1761,1759,1,0,0,0,1761,1762,1,0,0,0,1762,1764,
		1,0,0,0,1763,1761,1,0,0,0,1764,1765,3,164,82,3,1765,1786,1,0,0,0,1766,
		1767,10,27,0,0,1767,1786,5,22,0,0,1768,1769,10,26,0,0,1769,1786,5,23,0,
		0,1770,1774,10,8,0,0,1771,1773,7,5,0,0,1772,1771,1,0,0,0,1773,1776,1,0,
		0,0,1774,1772,1,0,0,0,1774,1775,1,0,0,0,1775,1777,1,0,0,0,1776,1774,1,
		0,0,0,1777,1781,7,12,0,0,1778,1780,7,5,0,0,1779,1778,1,0,0,0,1780,1783,
		1,0,0,0,1781,1779,1,0,0,0,1781,1782,1,0,0,0,1782,1784,1,0,0,0,1783,1781,
		1,0,0,0,1784,1786,3,166,83,0,1785,1657,1,0,0,0,1785,1660,1,0,0,0,1785,
		1669,1,0,0,0,1785,1678,1,0,0,0,1785,1681,1,0,0,0,1785,1696,1,0,0,0,1785,
		1699,1,0,0,0,1785,1702,1,0,0,0,1785,1712,1,0,0,0,1785,1715,1,0,0,0,1785,
		1718,1,0,0,0,1785,1721,1,0,0,0,1785,1727,1,0,0,0,1785,1733,1,0,0,0,1785,
		1736,1,0,0,0,1785,1766,1,0,0,0,1785,1768,1,0,0,0,1785,1770,1,0,0,0,1786,
		1789,1,0,0,0,1787,1785,1,0,0,0,1787,1788,1,0,0,0,1788,165,1,0,0,0,1789,
		1787,1,0,0,0,1790,1791,6,83,-1,0,1791,1792,5,47,0,0,1792,1804,3,166,83,
		8,1793,1804,3,206,103,0,1794,1804,3,172,86,0,1795,1804,3,192,96,0,1796,
		1804,3,140,70,0,1797,1804,3,142,71,0,1798,1804,3,178,89,0,1799,1800,5,
		9,0,0,1800,1801,3,158,79,0,1801,1802,5,10,0,0,1802,1804,1,0,0,0,1803,1790,
		1,0,0,0,1803,1793,1,0,0,0,1803,1794,1,0,0,0,1803,1795,1,0,0,0,1803,1796,
		1,0,0,0,1803,1797,1,0,0,0,1803,1798,1,0,0,0,1803,1799,1,0,0,0,1804,1821,
		1,0,0,0,1805,1806,10,11,0,0,1806,1807,7,13,0,0,1807,1820,3,170,85,0,1808,
		1809,10,10,0,0,1809,1811,5,9,0,0,1810,1812,3,154,77,0,1811,1810,1,0,0,
		0,1811,1812,1,0,0,0,1812,1813,1,0,0,0,1813,1820,5,10,0,0,1814,1816,10,
		9,0,0,1815,1817,5,16,0,0,1816,1815,1,0,0,0,1816,1817,1,0,0,0,1817,1818,
		1,0,0,0,1818,1820,3,160,80,0,1819,1805,1,0,0,0,1819,1808,1,0,0,0,1819,
		1814,1,0,0,0,1820,1823,1,0,0,0,1821,1819,1,0,0,0,1821,1822,1,0,0,0,1822,
		167,1,0,0,0,1823,1821,1,0,0,0,1824,1826,7,5,0,0,1825,1824,1,0,0,0,1826,
		1827,1,0,0,0,1827,1825,1,0,0,0,1827,1828,1,0,0,0,1828,1829,1,0,0,0,1829,
		1851,5,20,0,0,1830,1834,5,20,0,0,1831,1833,7,5,0,0,1832,1831,1,0,0,0,1833,
		1836,1,0,0,0,1834,1832,1,0,0,0,1834,1835,1,0,0,0,1835,1851,1,0,0,0,1836,
		1834,1,0,0,0,1837,1839,7,5,0,0,1838,1837,1,0,0,0,1839,1842,1,0,0,0,1840,
		1838,1,0,0,0,1840,1841,1,0,0,0,1841,1843,1,0,0,0,1842,1840,1,0,0,0,1843,
		1847,5,16,0,0,1844,1846,7,5,0,0,1845,1844,1,0,0,0,1846,1849,1,0,0,0,1847,
		1845,1,0,0,0,1847,1848,1,0,0,0,1848,1851,1,0,0,0,1849,1847,1,0,0,0,1850,
		1825,1,0,0,0,1850,1830,1,0,0,0,1850,1840,1,0,0,0,1851,169,1,0,0,0,1852,
		1857,3,206,103,0,1853,1857,3,172,86,0,1854,1857,3,210,105,0,1855,1857,
		3,192,96,0,1856,1852,1,0,0,0,1856,1853,1,0,0,0,1856,1854,1,0,0,0,1856,
		1855,1,0,0,0,1857,171,1,0,0,0,1858,1859,3,150,75,0,1859,1864,3,152,76,
		0,1860,1863,3,150,75,0,1861,1863,3,152,76,0,1862,1860,1,0,0,0,1862,1861,
		1,0,0,0,1863,1866,1,0,0,0,1864,1862,1,0,0,0,1864,1865,1,0,0,0,1865,1876,
		1,0,0,0,1866,1864,1,0,0,0,1867,1872,3,152,76,0,1868,1871,3,150,75,0,1869,
		1871,3,152,76,0,1870,1868,1,0,0,0,1870,1869,1,0,0,0,1871,1874,1,0,0,0,
		1872,1870,1,0,0,0,1872,1873,1,0,0,0,1873,1876,1,0,0,0,1874,1872,1,0,0,
		0,1875,1858,1,0,0,0,1875,1867,1,0,0,0,1876,173,1,0,0,0,1877,1878,5,14,
		0,0,1878,1879,3,162,81,0,1879,175,1,0,0,0,1880,1881,3,206,103,0,1881,177,
		1,0,0,0,1882,1886,5,11,0,0,1883,1885,3,212,106,0,1884,1883,1,0,0,0,1885,
		1888,1,0,0,0,1886,1884,1,0,0,0,1886,1887,1,0,0,0,1887,1909,1,0,0,0,1888,
		1886,1,0,0,0,1889,1900,3,148,74,0,1890,1892,5,137,0,0,1891,1890,1,0,0,
		0,1892,1895,1,0,0,0,1893,1891,1,0,0,0,1893,1894,1,0,0,0,1894,1896,1,0,
		0,0,1895,1893,1,0,0,0,1896,1897,5,13,0,0,1897,1899,3,148,74,0,1898,1893,
		1,0,0,0,1899,1902,1,0,0,0,1900,1898,1,0,0,0,1900,1901,1,0,0,0,1901,1906,
		1,0,0,0,1902,1900,1,0,0,0,1903,1905,3,212,106,0,1904,1903,1,0,0,0,1905,
		1908,1,0,0,0,1906,1904,1,0,0,0,1906,1907,1,0,0,0,1907,1910,1,0,0,0,1908,
		1906,1,0,0,0,1909,1889,1,0,0,0,1909,1910,1,0,0,0,1910,1911,1,0,0,0,1911,
		1912,5,12,0,0,1912,179,1,0,0,0,1913,1915,3,182,91,0,1914,1913,1,0,0,0,
		1914,1915,1,0,0,0,1915,1916,1,0,0,0,1916,1917,3,204,102,0,1917,1919,5,
		9,0,0,1918,1920,3,134,67,0,1919,1918,1,0,0,0,1919,1920,1,0,0,0,1920,1921,
		1,0,0,0,1921,1922,5,10,0,0,1922,181,1,0,0,0,1923,1927,7,14,0,0,1924,1926,
		5,137,0,0,1925,1924,1,0,0,0,1926,1929,1,0,0,0,1927,1925,1,0,0,0,1927,1928,
		1,0,0,0,1928,1931,1,0,0,0,1929,1927,1,0,0,0,1930,1923,1,0,0,0,1931,1932,
		1,0,0,0,1932,1930,1,0,0,0,1932,1933,1,0,0,0,1933,183,1,0,0,0,1934,1944,
		3,180,90,0,1935,1937,3,182,91,0,1936,1935,1,0,0,0,1936,1937,1,0,0,0,1937,
		1938,1,0,0,0,1938,1940,5,9,0,0,1939,1941,3,134,67,0,1940,1939,1,0,0,0,
		1940,1941,1,0,0,0,1941,1942,1,0,0,0,1942,1944,5,10,0,0,1943,1934,1,0,0,
		0,1943,1936,1,0,0,0,1944,185,1,0,0,0,1945,1947,3,182,91,0,1946,1945,1,
		0,0,0,1946,1947,1,0,0,0,1947,1948,1,0,0,0,1948,1950,3,204,102,0,1949,1946,
		1,0,0,0,1949,1950,1,0,0,0,1950,1951,1,0,0,0,1951,1964,5,28,0,0,1952,1954,
		3,182,91,0,1953,1952,1,0,0,0,1953,1954,1,0,0,0,1954,1956,1,0,0,0,1955,
		1957,5,47,0,0,1956,1955,1,0,0,0,1956,1957,1,0,0,0,1957,1958,1,0,0,0,1958,
		1960,3,204,102,0,1959,1961,5,15,0,0,1960,1959,1,0,0,0,1960,1961,1,0,0,
		0,1961,1964,1,0,0,0,1962,1964,3,184,92,0,1963,1949,1,0,0,0,1963,1953,1,
		0,0,0,1963,1962,1,0,0,0,1964,187,1,0,0,0,1965,1966,5,67,0,0,1966,1985,
		3,162,81,0,1967,1969,7,5,0,0,1968,1967,1,0,0,0,1969,1972,1,0,0,0,1970,
		1968,1,0,0,0,1970,1971,1,0,0,0,1971,1973,1,0,0,0,1972,1970,1,0,0,0,1973,
		1977,5,11,0,0,1974,1976,3,212,106,0,1975,1974,1,0,0,0,1976,1979,1,0,0,
		0,1977,1975,1,0,0,0,1977,1978,1,0,0,0,1978,1981,1,0,0,0,1979,1977,1,0,
		0,0,1980,1982,3,20,10,0,1981,1980,1,0,0,0,1981,1982,1,0,0,0,1982,1983,
		1,0,0,0,1983,1985,5,12,0,0,1984,1965,1,0,0,0,1984,1970,1,0,0,0,1985,189,
		1,0,0,0,1986,1987,7,15,0,0,1987,191,1,0,0,0,1988,1993,3,194,97,0,1989,
		1993,3,196,98,0,1990,1993,3,198,99,0,1991,1993,7,16,0,0,1992,1988,1,0,
		0,0,1992,1989,1,0,0,0,1992,1990,1,0,0,0,1992,1991,1,0,0,0,1993,193,1,0,
		0,0,1994,1995,7,17,0,0,1995,195,1,0,0,0,1996,1997,7,18,0,0,1997,197,1,
		0,0,0,1998,1999,7,19,0,0,1999,199,1,0,0,0,2000,2001,5,113,0,0,2001,2002,
		3,150,75,0,2002,201,1,0,0,0,2003,2004,5,114,0,0,2004,2005,3,150,75,0,2005,
		203,1,0,0,0,2006,2009,3,206,103,0,2007,2009,3,208,104,0,2008,2006,1,0,
		0,0,2008,2007,1,0,0,0,2009,205,1,0,0,0,2010,2011,7,20,0,0,2011,207,1,0,
		0,0,2012,2016,3,210,105,0,2013,2016,5,69,0,0,2014,2016,3,194,97,0,2015,
		2012,1,0,0,0,2015,2013,1,0,0,0,2015,2014,1,0,0,0,2016,209,1,0,0,0,2017,
		2018,7,21,0,0,2018,211,1,0,0,0,2019,2020,7,5,0,0,2020,213,1,0,0,0,2021,
		2022,7,22,0,0,2022,215,1,0,0,0,279,220,225,247,251,256,261,266,268,277,
		283,288,292,295,304,310,315,323,326,343,349,353,362,368,372,378,387,396,
		402,406,411,418,425,432,436,438,445,449,457,464,468,476,480,484,489,496,
		498,505,512,519,523,525,532,536,542,549,557,563,566,575,582,591,595,602,
		607,614,619,626,633,638,642,648,660,667,670,680,687,698,705,712,715,720,
		725,729,735,742,748,753,758,762,768,775,781,787,795,801,809,815,819,825,
		829,835,839,844,849,854,863,867,871,873,880,886,893,900,905,911,918,923,
		932,940,947,953,957,963,970,981,988,991,999,1003,1008,1012,1019,1023,1028,
		1032,1039,1047,1055,1063,1070,1076,1083,1091,1096,1105,1112,1118,1121,
		1126,1136,1144,1146,1156,1159,1166,1169,1175,1182,1186,1199,1210,1212,
		1216,1222,1227,1232,1245,1255,1262,1268,1274,1278,1281,1287,1294,1297,
		1305,1312,1320,1326,1333,1338,1342,1353,1360,1369,1379,1384,1388,1394,
		1399,1403,1405,1409,1415,1422,1429,1436,1439,1454,1466,1482,1488,1498,
		1507,1518,1525,1540,1542,1557,1563,1573,1580,1587,1594,1607,1614,1618,
		1620,1634,1646,1655,1665,1674,1685,1692,1707,1709,1724,1730,1740,1747,
		1754,1761,1774,1781,1785,1787,1803,1811,1816,1819,1821,1827,1834,1840,
		1847,1850,1856,1862,1864,1870,1872,1875,1886,1893,1900,1906,1909,1914,
		1919,1927,1932,1936,1940,1943,1946,1949,1953,1956,1960,1963,1970,1977,
		1981,1984,1992,2008,2015
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
