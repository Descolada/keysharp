product := "Prod"
color := "Red"

x := 
(
123
)

If (x = 123)
	FileAppend, pass, *
else
	FileAppend, fail, *

Var := "
(
A line of text.
By default, the hard carriage return (Enter) between the previous line and this one will be stored.
	This line is indented with a tab; by default, that tab will also be stored.
Additionally, "quote marks" are automatically escaped when appropriate.
)"

ProductIsAvailable := (Color = "Red") ?
	false : ; We don't have any red products, so don't bother calling the function.
	ProductIsAvailableInColor(Product, Color)

If (ProductIsAvailable == false)
	FileAppend, pass, *
else
	FileAppend, fail, *

ProductIsAvailable := (Color = "Green")
	? false  ; We don't have any red products, so don't bother calling the function.
	: ProductIsAvailableInColor(Product, Color)

If (ProductIsAvailable == 123)
	FileAppend, pass, *
else
	FileAppend, fail, *

if (Color = "Red" or Color = "Green"  or Color = "Blue"   ; Comment.
	or Color = "Black" or Color = "Gray" or Color = "White"   ; Comment.
	and ProductIsAvailableInColor(Product, Color))   ; Comment.
{
	FileAppend, pass, *
}
else
	FileAppend, fail, *

arr :=  ; The assignment operator causes continuation.
[  ; Brackets enclose the following two lines.
  "item 1",
  "item 2",
]

if (arr[1] == "item 1")
	FileAppend, pass, *
else
	FileAppend, fail, *

ProductIsAvailableInColor(a, b)
{
	return 123
}
	
	#Persistent
Print(obj, quote:=False, end:="`n")
{
    static _ := DllCall("AllocConsole"), cout := FileOpen("CONOUT$", "w")
    , escapes := [["``", "``" "``"], ["""", """"""], ["`b", "``b"]
    , ["`f", "``f"], ["`r", "``r"], ["`n", "``n"], ["`t", "``t"]]
    if IsObject(obj) {
        for k in obj
            is_array := k == A_Index
        until !is_array
        cout.Write(is_array ? "[" : "{")
        for k, v in obj {
            cout.Write(A_Index > 1 ? ", " : "")
            is_array ? _ : Print(k, 1, "") cout.Write(": ")
            Print(v, 1, "")
        } return cout.Write(( is_array ? "]" : "}") end), end ? cout.__Handle : _
    } if (!quote || ObjGetCapacity([obj], 1) == "")
        return cout.Write(obj . end), end ? cout.__Handle : _
    for k, v in escapes
        obj := StrReplace(obj, v[1], v[2])
    while RegExMatch(obj, "O)[^\x20-\x7e]", m)
        obj := StrReplace(obj, m[0], Format(""" Chr({:04d}) """, Ord(m[0])))
    return cout.Write("""" obj """" . end), end ? cout.__Handle : _
}

Print(obj, quote:=False, end:="`n")
{
static _ := DllCall("AllocConsole"), cout := FileOpen("CONOUT$", "w")
    , escapes := [["``", "``" "``"], ["""", """"""], ["`b", "``b"]
    , ["`f", "``f"], ["`r", "``r"], ["`n", "``n"], ["`t", "``t"]]

if IsObject(obj)
{
        for k in obj
            is_array := k == A_Index
        until !is_array


        cout.Write(is_array ? "[" : "{")

for k, v in obj
{
             cout.Write(A_Index > 1 ? ", " : "")
             _ = is_array ? _ : Print(k, 1, "") cout.Write(": ")
            ; Print(v, 1, "")
}
/*
return cout.Write(( is_array ? "]" : "}") end), end ? cout.__Handle : _

*/
}

}

x := 123
y := 456
z := 789

a := x == 123 ? "" : y := 10 z := 20

if (x = 1) {
x := 999
}

::btw::
{
	x := 123
    MsgBox('You typed "btw".')
}

:X:~mb::MsgBox

::text1::
(
Any text between the top and bottom parentheses is treated literally.
By default, the hard carriage return (Enter) between the previous line and this one is also preserved.
    By default, the indentation (tab) to the left of this line is preserved.
)

::ha:ha::hello ;

::btw::by the way
::btw:: by the way.

