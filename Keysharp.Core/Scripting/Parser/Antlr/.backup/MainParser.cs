//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/minip/source/repos/Keysharp_clone/Keysharp.Core/Scripting/Parser/Antlr/MainParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MainParser : MainParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DerefStart=1, DerefEnd=2, OpenParenNoWS=3, DerefContinuation=4, IdentifierContinuation=5, 
		OpenBracketWithWS=6, MultiLineComment=7, SingleLineComment=8, RegularExpressionLiteral=9, 
		HotstringTrigger=10, RemapKey=11, HotkeyTrigger=12, OpenBracket=13, CloseBracket=14, 
		OpenParen=15, CloseParen=16, OpenBrace=17, CloseBrace=18, SemiColon=19, 
		Comma=20, Assign=21, QuestionMark=22, QuestionMarkDot=23, Colon=24, DoubleColon=25, 
		Ellipsis=26, DotConcat=27, Dot=28, PlusPlus=29, MinusMinus=30, Plus=31, 
		Minus=32, BitNot=33, Not=34, Multiply=35, Divide=36, IntegerDivide=37, 
		Modulus=38, Power=39, NullCoalesce=40, Hashtag=41, RightShiftArithmetic=42, 
		LeftShiftArithmetic=43, RightShiftLogical=44, LessThan=45, MoreThan=46, 
		LessThanEquals=47, GreaterThanEquals=48, Equals_=49, NotEquals=50, IdentityEquals=51, 
		IdentityNotEquals=52, RegExMatch=53, BitAnd=54, BitXOr=55, BitOr=56, And=57, 
		Or=58, MultiplyAssign=59, DivideAssign=60, ModulusAssign=61, PlusAssign=62, 
		MinusAssign=63, LeftShiftArithmeticAssign=64, RightShiftArithmeticAssign=65, 
		RightShiftLogicalAssign=66, IntegerDivideAssign=67, ConcatenateAssign=68, 
		BitAndAssign=69, BitXorAssign=70, BitOrAssign=71, PowerAssign=72, NullishCoalescingAssign=73, 
		Arrow=74, NullLiteral=75, Unset=76, BooleanLiteral=77, DecimalLiteral=78, 
		HexIntegerLiteral=79, OctalIntegerLiteral=80, OctalIntegerLiteral2=81, 
		BinaryIntegerLiteral=82, BigHexIntegerLiteral=83, BigOctalIntegerLiteral=84, 
		BigBinaryIntegerLiteral=85, BigDecimalIntegerLiteral=86, Break=87, Do=88, 
		Instanceof=89, Switch=90, Case=91, Default=92, Else=93, Catch=94, Finally=95, 
		Return=96, Continue=97, For=98, While=99, LoopParse=100, LoopReg=101, 
		LoopRead=102, LoopFiles=103, Loop=104, Until=105, Parse=106, This=107, 
		If=108, Throw=109, Delete=110, In=111, Try=112, Yield=113, Is=114, Contains=115, 
		VerbalAnd=116, VerbalNot=117, VerbalOr=118, Goto=119, Class=120, Enum=121, 
		Extends=122, Super=123, Base=124, Export=125, Import=126, From=127, As=128, 
		Async=129, Await=130, Static=131, Global=132, Local=133, Include=134, 
		IncludeAgain=135, HotIf=136, HotIfTimeout=137, ClipboardTimeout=138, DllLoad=139, 
		ErrorStdOut=140, InputLevel=141, MaxThreads=142, MaxThreadsBuffer=143, 
		MaxThreadsPerHotkey=144, NoTrayIcon=145, Requires=146, SingleInstance=147, 
		SuspendExempt=148, UseHook=149, Warn=150, WinActivateForce=151, HotstringOptions=152, 
		AssemblyTitle=153, AssemblyDescription=154, AssemblyConfiguration=155, 
		AssemblyCompany=156, AssemblyProduct=157, AssemblyCopyright=158, AssemblyTrademark=159, 
		AssemblyVersion=160, Identifier=161, MultilineStringLiteral=162, StringLiteral=163, 
		WhiteSpaces=164, IgnoreEOL=165, EOL=166, UnexpectedCharacter=167, HotstringWhitespaces=168, 
		HotstringExpansion=169, HotstringUnexpectedCharacter=170, DirectiveWhitespaces=171, 
		DirectiveContent=172, DirectiveUnexpectedCharacter=173;
	public const int
		RULE_program = 0, RULE_sourceElements = 1, RULE_sourceElement = 2, RULE_generalDirective = 3, 
		RULE_positionalDirective = 4, RULE_remap = 5, RULE_hotstring = 6, RULE_hotkey = 7, 
		RULE_statement = 8, RULE_block = 9, RULE_statementList = 10, RULE_variableStatement = 11, 
		RULE_importStatement = 12, RULE_importFromBlock = 13, RULE_importModuleItems = 14, 
		RULE_importAliasName = 15, RULE_moduleExportName = 16, RULE_importedBinding = 17, 
		RULE_importDefault = 18, RULE_importNamespace = 19, RULE_importFrom = 20, 
		RULE_aliasName = 21, RULE_exportStatement = 22, RULE_exportFromBlock = 23, 
		RULE_exportModuleItems = 24, RULE_exportAliasName = 25, RULE_declaration = 26, 
		RULE_variableDeclarationList = 27, RULE_variableDeclaration = 28, RULE_functionStatement = 29, 
		RULE_expressionStatement = 30, RULE_ifStatement = 31, RULE_iterationStatement = 32, 
		RULE_forInParameters = 33, RULE_continueStatement = 34, RULE_breakStatement = 35, 
		RULE_returnStatement = 36, RULE_yieldStatement = 37, RULE_switchStatement = 38, 
		RULE_caseBlock = 39, RULE_caseClauses = 40, RULE_caseClause = 41, RULE_defaultClause = 42, 
		RULE_labelledStatement = 43, RULE_gotoStatement = 44, RULE_throwStatement = 45, 
		RULE_tryStatement = 46, RULE_catchProduction = 47, RULE_catchAssignable = 48, 
		RULE_elseProduction = 49, RULE_finallyProduction = 50, RULE_functionDeclaration = 51, 
		RULE_classDeclaration = 52, RULE_classTail = 53, RULE_classElement = 54, 
		RULE_methodDefinition = 55, RULE_propertyDefinition = 56, RULE_classPropertyName = 57, 
		RULE_propertyGetterDefinition = 58, RULE_propertySetterDefinition = 59, 
		RULE_fieldDefinition = 60, RULE_formalParameterList = 61, RULE_formalParameterArg = 62, 
		RULE_lastFormalParameterArg = 63, RULE_functionBody = 64, RULE_arrayLiteral = 65, 
		RULE_arrayElementList = 66, RULE_arrayElement = 67, RULE_mapLiteral = 68, 
		RULE_mapElementList = 69, RULE_mapElement = 70, RULE_propertyAssignment = 71, 
		RULE_dynamicPropertyName = 72, RULE_propertyName = 73, RULE_derefContinuation = 74, 
		RULE_dereference = 75, RULE_arguments = 76, RULE_argument = 77, RULE_expressionSequence = 78, 
		RULE_singleExpressionConcatenation = 79, RULE_functionCallArguments = 80, 
		RULE_memberIndexArguments = 81, RULE_singleExpression = 82, RULE_primary = 83, 
		RULE_memberIdentifier = 84, RULE_dynamicIdentifier = 85, RULE_initializer = 86, 
		RULE_assignable = 87, RULE_objectLiteral = 88, RULE_lambdaFunction = 89, 
		RULE_lambdaFunctionBody = 90, RULE_assignmentOperator = 91, RULE_literal = 92, 
		RULE_boolean = 93, RULE_numericLiteral = 94, RULE_bigintLiteral = 95, 
		RULE_getter = 96, RULE_setter = 97, RULE_identifierName = 98, RULE_identifier = 99, 
		RULE_reservedWord = 100, RULE_openParen = 101, RULE_keyword = 102, RULE_eos = 103;
	public static readonly string[] ruleNames = {
		"program", "sourceElements", "sourceElement", "generalDirective", "positionalDirective", 
		"remap", "hotstring", "hotkey", "statement", "block", "statementList", 
		"variableStatement", "importStatement", "importFromBlock", "importModuleItems", 
		"importAliasName", "moduleExportName", "importedBinding", "importDefault", 
		"importNamespace", "importFrom", "aliasName", "exportStatement", "exportFromBlock", 
		"exportModuleItems", "exportAliasName", "declaration", "variableDeclarationList", 
		"variableDeclaration", "functionStatement", "expressionStatement", "ifStatement", 
		"iterationStatement", "forInParameters", "continueStatement", "breakStatement", 
		"returnStatement", "yieldStatement", "switchStatement", "caseBlock", "caseClauses", 
		"caseClause", "defaultClause", "labelledStatement", "gotoStatement", "throwStatement", 
		"tryStatement", "catchProduction", "catchAssignable", "elseProduction", 
		"finallyProduction", "functionDeclaration", "classDeclaration", "classTail", 
		"classElement", "methodDefinition", "propertyDefinition", "classPropertyName", 
		"propertyGetterDefinition", "propertySetterDefinition", "fieldDefinition", 
		"formalParameterList", "formalParameterArg", "lastFormalParameterArg", 
		"functionBody", "arrayLiteral", "arrayElementList", "arrayElement", "mapLiteral", 
		"mapElementList", "mapElement", "propertyAssignment", "dynamicPropertyName", 
		"propertyName", "derefContinuation", "dereference", "arguments", "argument", 
		"expressionSequence", "singleExpressionConcatenation", "functionCallArguments", 
		"memberIndexArguments", "singleExpression", "primary", "memberIdentifier", 
		"dynamicIdentifier", "initializer", "assignable", "objectLiteral", "lambdaFunction", 
		"lambdaFunctionBody", "assignmentOperator", "literal", "boolean", "numericLiteral", 
		"bigintLiteral", "getter", "setter", "identifierName", "identifier", "reservedWord", 
		"openParen", "keyword", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "','", "':='", 
		"'?'", "'?.'", "':'", "'::'", "'...'", null, "'.'", "'++'", "'--'", "'+'", 
		"'-'", "'~'", "'!'", "'*'", "'/'", "'//'", "'%'", "'**'", "'??'", "'#'", 
		"'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='", "'='", "'!='", 
		"'=='", "'!=='", "'~='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'*='", 
		"'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", "'//='", "'.='", 
		"'&='", "'^='", "'|='", "'**='", "'??='", "'=>'", "'null'", "'unset'", 
		null, null, null, null, null, null, null, null, null, null, "'break'", 
		"'do'", "'instanceof'", "'switch'", "'case'", "'default'", "'else'", "'catch'", 
		"'finally'", "'return'", "'continue'", "'for'", "'while'", "'loop parse'", 
		"'loop reg'", "'loop read'", "'loop files'", "'loop'", "'until'", "'parse'", 
		"'this'", "'if'", "'throw'", "'delete'", "'in'", "'try'", "'yield'", "'is'", 
		"'contains'", "'and'", "'not'", "'or'", "'goto'", "'class'", "'enum'", 
		"'extends'", "'super'", "'base'", "'export'", "'import'", "'from'", "'as'", 
		"'async'", "'await'", "'static'", "'global'", "'local'", "'#include'", 
		"'#includeagain'", "'#hotif'", "'#hotiftimeout'", "'#clipboardtimeout'", 
		"'#dllload'", "'#errorstdout'", "'#inputlevel'", "'#maxthreads'", "'#maxthreadsbuffer'", 
		"'#maxthreadsperhotkey'", "'#notrayicon'", "'#requires'", "'#singleinstance'", 
		"'#suspendexempt'", "'#usehook'", "'#warn'", "'#winactivateforce'", null, 
		"'#assemblytitle'", "'#assemblydescription'", "'#assemblyconfiguration'", 
		"'#assemblycompany'", "'#assemblyproduct'", "'#assemblycopyright'", "'#assemblytrademark'", 
		"'#assemblyversion'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DerefStart", "DerefEnd", "OpenParenNoWS", "DerefContinuation", 
		"IdentifierContinuation", "OpenBracketWithWS", "MultiLineComment", "SingleLineComment", 
		"RegularExpressionLiteral", "HotstringTrigger", "RemapKey", "HotkeyTrigger", 
		"OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "QuestionMarkDot", 
		"Colon", "DoubleColon", "Ellipsis", "DotConcat", "Dot", "PlusPlus", "MinusMinus", 
		"Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", "IntegerDivide", 
		"Modulus", "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", 
		"LeftShiftArithmetic", "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", 
		"GreaterThanEquals", "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
		"RegExMatch", "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
		"DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", 
		"RightShiftArithmeticAssign", "RightShiftLogicalAssign", "IntegerDivideAssign", 
		"ConcatenateAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", "PowerAssign", 
		"NullishCoalescingAssign", "Arrow", "NullLiteral", "Unset", "BooleanLiteral", 
		"DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", 
		"BinaryIntegerLiteral", "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
		"BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", "Break", "Do", 
		"Instanceof", "Switch", "Case", "Default", "Else", "Catch", "Finally", 
		"Return", "Continue", "For", "While", "LoopParse", "LoopReg", "LoopRead", 
		"LoopFiles", "Loop", "Until", "Parse", "This", "If", "Throw", "Delete", 
		"In", "Try", "Yield", "Is", "Contains", "VerbalAnd", "VerbalNot", "VerbalOr", 
		"Goto", "Class", "Enum", "Extends", "Super", "Base", "Export", "Import", 
		"From", "As", "Async", "Await", "Static", "Global", "Local", "Include", 
		"IncludeAgain", "HotIf", "HotIfTimeout", "ClipboardTimeout", "DllLoad", 
		"ErrorStdOut", "InputLevel", "MaxThreads", "MaxThreadsBuffer", "MaxThreadsPerHotkey", 
		"NoTrayIcon", "Requires", "SingleInstance", "SuspendExempt", "UseHook", 
		"Warn", "WinActivateForce", "HotstringOptions", "AssemblyTitle", "AssemblyDescription", 
		"AssemblyConfiguration", "AssemblyCompany", "AssemblyProduct", "AssemblyCopyright", 
		"AssemblyTrademark", "AssemblyVersion", "Identifier", "MultilineStringLiteral", 
		"StringLiteral", "WhiteSpaces", "IgnoreEOL", "EOL", "UnexpectedCharacter", 
		"HotstringWhitespaces", "HotstringExpansion", "HotstringUnexpectedCharacter", 
		"DirectiveWhitespaces", "DirectiveContent", "DirectiveUnexpectedCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MainParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MainParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MainParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MainParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MainParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			sourceElements();
			State = 209;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 211;
					sourceElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 214;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralDirectiveContext generalDirective() {
			return GetRuleContext<GeneralDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionalDirectiveContext positionalDirective() {
			return GetRuleContext<PositionalDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemapContext remap() {
			return GetRuleContext<RemapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotstringContext hotstring() {
			return GetRuleContext<HotstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotkeyContext hotkey() {
			return GetRuleContext<HotkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sourceElement);
		try {
			int _alt;
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216;
				classDeclaration();
				State = 217;
				eos();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219;
				functionDeclaration();
				State = 220;
				eos();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 222;
				generalDirective();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 223;
				positionalDirective();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 224;
				remap();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 225;
				hotstring();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 226;
				hotkey();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 227;
				statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 229;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 228;
						Match(EOL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 231;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralDirectiveContext : ParserRuleContext {
		public GeneralDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalDirective; } }
	 
		public GeneralDirectiveContext() { }
		public virtual void CopyFrom(GeneralDirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssemblyDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveContent() { return GetToken(MainParser.DirectiveContent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyTitle() { return GetToken(MainParser.AssemblyTitle, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyDescription() { return GetToken(MainParser.AssemblyDescription, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyConfiguration() { return GetToken(MainParser.AssemblyConfiguration, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyCompany() { return GetToken(MainParser.AssemblyCompany, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyProduct() { return GetToken(MainParser.AssemblyProduct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyCopyright() { return GetToken(MainParser.AssemblyCopyright, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyTrademark() { return GetToken(MainParser.AssemblyTrademark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyVersion() { return GetToken(MainParser.AssemblyVersion, 0); }
		public AssemblyDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClipboardTimeoutDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ClipboardTimeout() { return GetToken(MainParser.ClipboardTimeout, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClipboardTimeoutDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClipboardTimeoutDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxThreadsBufferDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MaxThreadsBuffer() { return GetToken(MainParser.MaxThreadsBuffer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public MaxThreadsBufferDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxThreadsBufferDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleInstanceDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SingleInstance() { return GetToken(MainParser.SingleInstance, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveContent() { return GetToken(MainParser.DirectiveContent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public SingleInstanceDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleInstanceDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ErrorStdOutDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ErrorStdOut() { return GetToken(MainParser.ErrorStdOut, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveContent() { return GetToken(MainParser.DirectiveContent, 0); }
		public ErrorStdOutDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStdOutDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoTrayIconDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NoTrayIcon() { return GetToken(MainParser.NoTrayIcon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public NoTrayIconDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoTrayIconDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RequiresDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Requires() { return GetToken(MainParser.Requires, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveContent() { return GetToken(MainParser.DirectiveContent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public RequiresDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiresDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WinActivateForceDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WinActivateForce() { return GetToken(MainParser.WinActivateForce, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public WinActivateForceDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWinActivateForceDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DllLoadDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DllLoad() { return GetToken(MainParser.DllLoad, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveContent() { return GetToken(MainParser.DirectiveContent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DllLoadDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDllLoadDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HotIfTimeoutDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotIfTimeout() { return GetToken(MainParser.HotIfTimeout, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public HotIfTimeoutDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotIfTimeoutDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxThreadsPerHotkeyDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MaxThreadsPerHotkey() { return GetToken(MainParser.MaxThreadsPerHotkey, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public MaxThreadsPerHotkeyDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxThreadsPerHotkeyDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncludeDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Include() { return GetToken(MainParser.Include, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveContent() { return GetToken(MainParser.DirectiveContent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IncludeDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxThreadsDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MaxThreads() { return GetToken(MainParser.MaxThreads, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public MaxThreadsDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxThreadsDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncludeAgainDirectiveContext : GeneralDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IncludeAgain() { return GetToken(MainParser.IncludeAgain, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveContent() { return GetToken(MainParser.DirectiveContent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IncludeAgainDirectiveContext(GeneralDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeAgainDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralDirectiveContext generalDirective() {
		GeneralDirectiveContext _localctx = new GeneralDirectiveContext(Context, State);
		EnterRule(_localctx, 6, RULE_generalDirective);
		int _la;
		try {
			State = 284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ClipboardTimeout:
				_localctx = new ClipboardTimeoutDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				Match(ClipboardTimeout);
				State = 236;
				numericLiteral();
				State = 237;
				eos();
				}
				break;
			case DllLoad:
				_localctx = new DllLoadDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 239;
				Match(DllLoad);
				State = 240;
				Match(DirectiveContent);
				State = 241;
				eos();
				}
				break;
			case ErrorStdOut:
				_localctx = new ErrorStdOutDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 242;
				Match(ErrorStdOut);
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DirectiveContent) {
					{
					State = 243;
					Match(DirectiveContent);
					}
				}

				State = 246;
				eos();
				}
				break;
			case HotIfTimeout:
				_localctx = new HotIfTimeoutDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 247;
				Match(HotIfTimeout);
				State = 248;
				numericLiteral();
				State = 249;
				eos();
				}
				break;
			case Include:
				_localctx = new IncludeDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 251;
				Match(Include);
				State = 252;
				Match(DirectiveContent);
				State = 253;
				eos();
				}
				break;
			case IncludeAgain:
				_localctx = new IncludeAgainDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 254;
				Match(IncludeAgain);
				State = 255;
				Match(DirectiveContent);
				State = 256;
				eos();
				}
				break;
			case MaxThreads:
				_localctx = new MaxThreadsDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 257;
				Match(MaxThreads);
				State = 258;
				numericLiteral();
				State = 259;
				eos();
				}
				break;
			case MaxThreadsBuffer:
				_localctx = new MaxThreadsBufferDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 261;
				Match(MaxThreadsBuffer);
				State = 264;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
					{
					State = 262;
					numericLiteral();
					}
					break;
				case BooleanLiteral:
					{
					State = 263;
					boolean();
					}
					break;
				case Eof:
				case EOL:
					break;
				default:
					break;
				}
				State = 266;
				eos();
				}
				break;
			case MaxThreadsPerHotkey:
				_localctx = new MaxThreadsPerHotkeyDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 267;
				Match(MaxThreadsPerHotkey);
				State = 268;
				numericLiteral();
				State = 269;
				eos();
				}
				break;
			case NoTrayIcon:
				_localctx = new NoTrayIconDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 271;
				Match(NoTrayIcon);
				State = 272;
				eos();
				}
				break;
			case Requires:
				_localctx = new RequiresDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 273;
				Match(Requires);
				State = 274;
				Match(DirectiveContent);
				State = 275;
				eos();
				}
				break;
			case SingleInstance:
				_localctx = new SingleInstanceDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 276;
				Match(SingleInstance);
				State = 277;
				Match(DirectiveContent);
				State = 278;
				eos();
				}
				break;
			case WinActivateForce:
				_localctx = new WinActivateForceDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 279;
				Match(WinActivateForce);
				State = 280;
				eos();
				}
				break;
			case AssemblyTitle:
			case AssemblyDescription:
			case AssemblyConfiguration:
			case AssemblyCompany:
			case AssemblyProduct:
			case AssemblyCopyright:
			case AssemblyTrademark:
			case AssemblyVersion:
				_localctx = new AssemblyDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 281;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & 255L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 282;
				Match(DirectiveContent);
				State = 283;
				eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionalDirectiveContext : ParserRuleContext {
		public PositionalDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionalDirective; } }
	 
		public PositionalDirectiveContext() { }
		public virtual void CopyFrom(PositionalDirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HotstringDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringOptions() { return GetToken(MainParser.HotstringOptions, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public HotstringDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstringDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InputLevelDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InputLevel() { return GetToken(MainParser.InputLevel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public InputLevelDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputLevelDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuspendExemptDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SuspendExempt() { return GetToken(MainParser.SuspendExempt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public SuspendExemptDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuspendExemptDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UseHookDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UseHook() { return GetToken(MainParser.UseHook, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public UseHookDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseHookDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HotIfDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotIf() { return GetToken(MainParser.HotIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public HotIfDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotIfDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionalDirectiveContext positionalDirective() {
		PositionalDirectiveContext _localctx = new PositionalDirectiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_positionalDirective);
		int _la;
		try {
			State = 310;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HotIf:
				_localctx = new HotIfDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 286;
				Match(HotIf);
				State = 288;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 287;
					singleExpression(0);
					}
					break;
				}
				State = 290;
				eos();
				}
				break;
			case HotstringOptions:
				_localctx = new HotstringDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 291;
				Match(HotstringOptions);
				State = 292;
				eos();
				}
				break;
			case InputLevel:
				_localctx = new InputLevelDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 293;
				Match(InputLevel);
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 31L) != 0)) {
					{
					State = 294;
					numericLiteral();
					}
				}

				State = 297;
				eos();
				}
				break;
			case UseHook:
				_localctx = new UseHookDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 298;
				Match(UseHook);
				State = 301;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
					{
					State = 299;
					numericLiteral();
					}
					break;
				case BooleanLiteral:
					{
					State = 300;
					boolean();
					}
					break;
				case Eof:
				case EOL:
					break;
				default:
					break;
				}
				State = 303;
				eos();
				}
				break;
			case SuspendExempt:
				_localctx = new SuspendExemptDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 304;
				Match(SuspendExempt);
				State = 307;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
					{
					State = 305;
					numericLiteral();
					}
					break;
				case BooleanLiteral:
					{
					State = 306;
					boolean();
					}
					break;
				case Eof:
				case EOL:
					break;
				default:
					break;
				}
				State = 309;
				eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotkeyTrigger() { return GetToken(MainParser.HotkeyTrigger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RemapKey() { return GetToken(MainParser.RemapKey, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public RemapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remap; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemapContext remap() {
		RemapContext _localctx = new RemapContext(Context, State);
		EnterRule(_localctx, 10, RULE_remap);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(HotkeyTrigger);
			State = 313;
			Match(RemapKey);
			State = 314;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotstringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HotstringTrigger() { return GetTokens(MainParser.HotstringTrigger); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringTrigger(int i) {
			return GetToken(MainParser.HotstringTrigger, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringExpansion() { return GetToken(MainParser.HotstringExpansion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public HotstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotstring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotstringContext hotstring() {
		HotstringContext _localctx = new HotstringContext(Context, State);
		EnterRule(_localctx, 12, RULE_hotstring);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(HotstringTrigger);
			State = 321;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 317;
					Match(EOL);
					State = 318;
					Match(HotstringTrigger);
					}
					} 
				}
				State = 323;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 324;
				Match(HotstringExpansion);
				State = 325;
				eos();
				}
				break;
			case 2:
				{
				State = 326;
				functionDeclaration();
				State = 327;
				eos();
				}
				break;
			case 3:
				{
				State = 329;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotkeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HotkeyTrigger() { return GetTokens(MainParser.HotkeyTrigger); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotkeyTrigger(int i) {
			return GetToken(MainParser.HotkeyTrigger, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public HotkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotkey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotkey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotkeyContext hotkey() {
		HotkeyContext _localctx = new HotkeyContext(Context, State);
		EnterRule(_localctx, 14, RULE_hotkey);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			Match(HotkeyTrigger);
			State = 337;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 333;
					Match(EOL);
					State = 334;
					Match(HotkeyTrigger);
					}
					} 
				}
				State = 339;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 343;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 340;
					Match(EOL);
					}
					} 
				}
				State = 345;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 346;
				functionDeclaration();
				State = 347;
				eos();
				}
				break;
			case 2:
				{
				State = 349;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelledStatementContext labelledStatement() {
			return GetRuleContext<LabelledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		int _la;
		try {
			State = 394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352;
				block();
				State = 354;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 353;
					eos();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356;
				classDeclaration();
				State = 357;
				eos();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 359;
				variableStatement();
				State = 360;
				eos();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 362;
				expressionStatement();
				State = 363;
				eos();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 365;
				ifStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 366;
					labelledStatement();
					State = 367;
					Match(EOL);
					}
				}

				State = 371;
				iterationStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 372;
				continueStatement();
				State = 373;
				eos();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 375;
				breakStatement();
				State = 376;
				eos();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 378;
				returnStatement();
				State = 379;
				eos();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 381;
				labelledStatement();
				State = 382;
				eos();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 384;
				gotoStatement();
				State = 385;
				eos();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 387;
				switchStatement();
				State = 388;
				eos();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 390;
				throwStatement();
				State = 391;
				eos();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 393;
				tryStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 396;
				Match(EOL);
				}
				}
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 402;
			Match(OpenBrace);
			State = 404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 403;
				statementList();
				}
				break;
			}
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 406;
				Match(EOL);
				}
				}
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 412;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 20, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 414;
					statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 417;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(MainParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(MainParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public VariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStatementContext variableStatement() {
		VariableStatementContext _localctx = new VariableStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_variableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenBracketWithWS || _la==OpenBrace || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 42681270273L) != 0) || _la==Identifier) {
				{
				State = 420;
				variableDeclarationList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(MainParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromBlockContext importFromBlock() {
			return GetRuleContext<ImportFromBlockContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			Match(Import);
			State = 424;
			importFromBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportModuleItemsContext importModuleItems() {
			return GetRuleContext<ImportModuleItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDefaultContext importDefault() {
			return GetRuleContext<ImportDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ImportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromBlockContext importFromBlock() {
		ImportFromBlockContext _localctx = new ImportFromBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_importFromBlock);
		try {
			State = 436;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
			case Multiply:
			case NullLiteral:
			case Unset:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 427;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 426;
					importDefault();
					}
					break;
				}
				State = 431;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Multiply:
				case NullLiteral:
				case Unset:
				case BooleanLiteral:
				case Break:
				case Do:
				case Instanceof:
				case Switch:
				case Case:
				case Default:
				case Else:
				case Catch:
				case Finally:
				case Return:
				case Continue:
				case For:
				case While:
				case Loop:
				case Until:
				case This:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case Yield:
				case Is:
				case Contains:
				case VerbalAnd:
				case VerbalNot:
				case VerbalOr:
				case Goto:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Base:
				case Export:
				case Import:
				case From:
				case As:
				case Async:
				case Await:
				case Static:
				case Global:
				case Local:
				case Identifier:
					{
					State = 429;
					importNamespace();
					}
					break;
				case OpenBrace:
					{
					State = 430;
					importModuleItems();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 433;
				importFrom();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasNameContext[] importAliasName() {
			return GetRuleContexts<ImportAliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasNameContext importAliasName(int i) {
			return GetRuleContext<ImportAliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public ImportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importModuleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportModuleItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportModuleItemsContext importModuleItems() {
		ImportModuleItemsContext _localctx = new ImportModuleItemsContext(Context, State);
		EnterRule(_localctx, 28, RULE_importModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			Match(OpenBrace);
			State = 444;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 439;
					importAliasName();
					State = 440;
					Match(Comma);
					}
					} 
				}
				State = 446;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 576460749652619271L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 447;
				importAliasName();
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 448;
					Match(Comma);
					}
				}

				}
			}

			State = 453;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext moduleExportName() {
			return GetRuleContext<ModuleExportNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportedBindingContext importedBinding() {
			return GetRuleContext<ImportedBindingContext>(0);
		}
		public ImportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasNameContext importAliasName() {
		ImportAliasNameContext _localctx = new ImportAliasNameContext(Context, State);
		EnterRule(_localctx, 30, RULE_importAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			moduleExportName();
			State = 458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 456;
				Match(As);
				State = 457;
				importedBinding();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleExportNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ModuleExportNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleExportName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleExportName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleExportNameContext moduleExportName() {
		ModuleExportNameContext _localctx = new ModuleExportNameContext(Context, State);
		EnterRule(_localctx, 32, RULE_moduleExportName);
		try {
			State = 462;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case Unset:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 460;
				identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 461;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportedBindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		public ImportedBindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importedBinding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportedBinding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportedBindingContext importedBinding() {
		ImportedBindingContext _localctx = new ImportedBindingContext(Context, State);
		EnterRule(_localctx, 34, RULE_importedBinding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 281474976841729L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext aliasName() {
			return GetRuleContext<AliasNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		public ImportDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefaultContext importDefault() {
		ImportDefaultContext _localctx = new ImportDefaultContext(Context, State);
		EnterRule(_localctx, 36, RULE_importDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			aliasName();
			State = 467;
			Match(Comma);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public ImportNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportNamespaceContext importNamespace() {
		ImportNamespaceContext _localctx = new ImportNamespaceContext(Context, State);
		EnterRule(_localctx, 38, RULE_importNamespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
				{
				State = 469;
				Match(Multiply);
				}
				break;
			case NullLiteral:
			case Unset:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				{
				State = 470;
				identifierName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 473;
				Match(As);
				State = 474;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(MainParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ImportFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromContext importFrom() {
		ImportFromContext _localctx = new ImportFromContext(Context, State);
		EnterRule(_localctx, 40, RULE_importFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			Match(From);
			State = 478;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public AliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasNameContext aliasName() {
		AliasNameContext _localctx = new AliasNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_aliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			identifierName();
			State = 483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 481;
				Match(As);
				State = 482;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
	 
		public ExportStatementContext() { }
		public virtual void CopyFrom(ExportStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExportDefaultDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ExportDefaultDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDefaultDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExportDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExportFromBlockContext exportFromBlock() {
			return GetRuleContext<ExportFromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		public ExportDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_exportStatement);
		try {
			State = 496;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				_localctx = new ExportDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 485;
				Match(Export);
				State = 487;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 486;
					Match(Default);
					}
					break;
				}
				State = 491;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 489;
					exportFromBlock();
					}
					break;
				case 2:
					{
					State = 490;
					declaration();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ExportDefaultDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 493;
				Match(Export);
				State = 494;
				Match(Default);
				State = 495;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportModuleItemsContext exportModuleItems() {
			return GetRuleContext<ExportModuleItemsContext>(0);
		}
		public ExportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportFromBlockContext exportFromBlock() {
		ExportFromBlockContext _localctx = new ExportFromBlockContext(Context, State);
		EnterRule(_localctx, 46, RULE_exportFromBlock);
		int _la;
		try {
			State = 505;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
			case NullLiteral:
			case Unset:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 498;
				importNamespace();
				State = 499;
				importFrom();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 501;
				exportModuleItems();
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==From) {
					{
					State = 502;
					importFrom();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExportAliasNameContext[] exportAliasName() {
			return GetRuleContexts<ExportAliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportAliasNameContext exportAliasName(int i) {
			return GetRuleContext<ExportAliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public ExportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportModuleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportModuleItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportModuleItemsContext exportModuleItems() {
		ExportModuleItemsContext _localctx = new ExportModuleItemsContext(Context, State);
		EnterRule(_localctx, 48, RULE_exportModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			Match(OpenBrace);
			State = 513;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 508;
					exportAliasName();
					State = 509;
					Match(Comma);
					}
					} 
				}
				State = 515;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			State = 520;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 576460749652619271L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 516;
				exportAliasName();
				State = 518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 517;
					Match(Comma);
					}
				}

				}
			}

			State = 522;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportAliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext[] moduleExportName() {
			return GetRuleContexts<ModuleExportNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext moduleExportName(int i) {
			return GetRuleContext<ModuleExportNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public ExportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportAliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportAliasNameContext exportAliasName() {
		ExportAliasNameContext _localctx = new ExportAliasNameContext(Context, State);
		EnterRule(_localctx, 50, RULE_exportAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			moduleExportName();
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 525;
				Match(As);
				State = 526;
				moduleExportName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_declaration);
		try {
			State = 531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 529;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 530;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 54, RULE_variableDeclarationList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			variableDeclaration();
			State = 544;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 537;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==EOL) {
						{
						{
						State = 534;
						Match(EOL);
						}
						}
						State = 539;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 540;
					Match(Comma);
					State = 541;
					variableDeclaration();
					}
					} 
				}
				State = 546;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			assignable();
			State = 551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & 9006924376834049L) != 0)) {
				{
				State = 548;
				assignmentOperator();
				State = 549;
				singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStatementContext functionStatement() {
		FunctionStatementContext _localctx = new FunctionStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_functionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			if (!(this.isBOS())) throw new FailedPredicateException(this, "this.isBOS()");
			State = 554;
			singleExpression(0);
			State = 555;
			if (!(!this.isPrevCloseParen())) throw new FailedPredicateException(this, "!this.isPrevCloseParen()");
			State = 557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 556;
				arguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			expressionSequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MainParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			Match(If);
			State = 562;
			singleExpression(0);
			State = 566;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 563;
					Match(EOL);
					}
					} 
				}
				State = 568;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			State = 569;
			statement();
			State = 584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL) {
					{
					{
					State = 570;
					Match(EOL);
					}
					}
					State = 575;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 576;
				Match(Else);
				State = 580;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 577;
						Match(EOL);
						}
						} 
					}
					State = 582;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				}
				State = 583;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopReadStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopRead() { return GetToken(MainParser.LoopRead, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		public LoopReadStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopParseStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopParse() { return GetToken(MainParser.LoopParse, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		public LoopParseStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopParseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopFilesStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopFiles() { return GetToken(MainParser.LoopFiles, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		public LoopFilesStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopFilesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopRegStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopReg() { return GetToken(MainParser.LoopReg, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		public LoopRegStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopRegStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		public LoopStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MainParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MainParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForInParametersContext forInParameters() {
			return GetRuleContext<ForInParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_iterationStatement);
		int _la;
		try {
			int _alt;
			State = 766;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Loop:
				_localctx = new LoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 586;
				Match(Loop);
				State = 588;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
				case 1:
					{
					State = 587;
					singleExpression(0);
					}
					break;
				}
				State = 593;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 590;
						Match(EOL);
						}
						} 
					}
					State = 595;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
				}
				State = 596;
				statement();
				State = 601;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 597;
					Match(Until);
					State = 598;
					singleExpression(0);
					State = 599;
					Match(EOL);
					}
					break;
				}
				State = 605;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 603;
					Match(Else);
					State = 604;
					statement();
					}
					break;
				}
				}
				break;
			case LoopFiles:
				_localctx = new LoopFilesStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 607;
				Match(LoopFiles);
				State = 608;
				singleExpression(0);
				State = 617;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 612;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==EOL) {
						{
						{
						State = 609;
						Match(EOL);
						}
						}
						State = 614;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 615;
					Match(Comma);
					State = 616;
					singleExpression(0);
					}
					break;
				}
				State = 622;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 619;
						Match(EOL);
						}
						} 
					}
					State = 624;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
				}
				State = 625;
				statement();
				State = 630;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 626;
					Match(Until);
					State = 627;
					singleExpression(0);
					State = 628;
					Match(EOL);
					}
					break;
				}
				State = 634;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					State = 632;
					Match(Else);
					State = 633;
					statement();
					}
					break;
				}
				}
				break;
			case LoopRead:
				_localctx = new LoopReadStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 636;
				Match(LoopRead);
				State = 637;
				singleExpression(0);
				State = 646;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 641;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==EOL) {
						{
						{
						State = 638;
						Match(EOL);
						}
						}
						State = 643;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 644;
					Match(Comma);
					State = 645;
					singleExpression(0);
					}
					break;
				}
				State = 651;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 648;
						Match(EOL);
						}
						} 
					}
					State = 653;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				}
				State = 654;
				statement();
				State = 659;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 655;
					Match(Until);
					State = 656;
					singleExpression(0);
					State = 657;
					Match(EOL);
					}
					break;
				}
				State = 663;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
				case 1:
					{
					State = 661;
					Match(Else);
					State = 662;
					statement();
					}
					break;
				}
				}
				break;
			case LoopReg:
				_localctx = new LoopRegStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 665;
				Match(LoopReg);
				State = 666;
				singleExpression(0);
				State = 675;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 670;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==EOL) {
						{
						{
						State = 667;
						Match(EOL);
						}
						}
						State = 672;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 673;
					Match(Comma);
					State = 674;
					singleExpression(0);
					}
					break;
				}
				State = 680;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 677;
						Match(EOL);
						}
						} 
					}
					State = 682;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				}
				State = 683;
				statement();
				State = 688;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 684;
					Match(Until);
					State = 685;
					singleExpression(0);
					State = 686;
					Match(EOL);
					}
					break;
				}
				State = 692;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 690;
					Match(Else);
					State = 691;
					statement();
					}
					break;
				}
				}
				break;
			case LoopParse:
				_localctx = new LoopParseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 694;
				Match(LoopParse);
				State = 695;
				singleExpression(0);
				State = 708;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 699;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL) {
							{
							{
							State = 696;
							Match(EOL);
							}
							}
							State = 701;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 702;
						Match(Comma);
						State = 704;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
						case 1:
							{
							State = 703;
							singleExpression(0);
							}
							break;
						}
						}
						} 
					}
					State = 710;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
				}
				State = 714;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 711;
						Match(EOL);
						}
						} 
					}
					State = 716;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
				}
				State = 717;
				statement();
				State = 722;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 718;
					Match(Until);
					State = 719;
					singleExpression(0);
					State = 720;
					Match(EOL);
					}
					break;
				}
				State = 726;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
				case 1:
					{
					State = 724;
					Match(Else);
					State = 725;
					statement();
					}
					break;
				}
				}
				break;
			case While:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 728;
				Match(While);
				State = 729;
				singleExpression(0);
				State = 733;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 730;
						Match(EOL);
						}
						} 
					}
					State = 735;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
				}
				State = 736;
				statement();
				State = 741;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 737;
					Match(Until);
					State = 738;
					singleExpression(0);
					State = 739;
					Match(EOL);
					}
					break;
				}
				State = 745;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
				case 1:
					{
					State = 743;
					Match(Else);
					State = 744;
					statement();
					}
					break;
				}
				}
				break;
			case For:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 747;
				Match(For);
				State = 748;
				forInParameters();
				State = 752;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 749;
						Match(EOL);
						}
						} 
					}
					State = 754;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
				}
				State = 755;
				statement();
				State = 760;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
				case 1:
					{
					State = 756;
					Match(Until);
					State = 757;
					singleExpression(0);
					State = 758;
					Match(EOL);
					}
					break;
				}
				State = 764;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
				case 1:
					{
					State = 762;
					Match(Else);
					State = 763;
					statement();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext[] assignable() {
			return GetRuleContexts<AssignableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable(int i) {
			return GetRuleContext<AssignableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenParenContext openParen() {
			return GetRuleContext<OpenParenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ForInParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInParametersContext forInParameters() {
		ForInParametersContext _localctx = new ForInParametersContext(Context, State);
		EnterRule(_localctx, 66, RULE_forInParameters);
		int _la;
		try {
			State = 811;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracketWithWS:
			case OpenBrace:
			case Comma:
			case Default:
			case This:
			case In:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case From:
			case Identifier:
			case EOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenBracketWithWS || _la==OpenBrace || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 42681270273L) != 0) || _la==Identifier) {
					{
					State = 768;
					assignable();
					}
				}

				State = 783;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma || _la==EOL) {
					{
					{
					State = 774;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==EOL) {
						{
						{
						State = 771;
						Match(EOL);
						}
						}
						State = 776;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 777;
					Match(Comma);
					State = 779;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OpenBracketWithWS || _la==OpenBrace || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 42681270273L) != 0) || _la==Identifier) {
						{
						State = 778;
						assignable();
						}
					}

					}
					}
					State = 785;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 786;
				Match(In);
				State = 787;
				singleExpression(0);
				}
				break;
			case OpenParenNoWS:
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 788;
				openParen();
				State = 790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenBracketWithWS || _la==OpenBrace || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 42681270273L) != 0) || _la==Identifier) {
					{
					State = 789;
					assignable();
					}
				}

				State = 804;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma || _la==EOL) {
					{
					{
					State = 795;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==EOL) {
						{
						{
						State = 792;
						Match(EOL);
						}
						}
						State = 797;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 798;
					Match(Comma);
					State = 800;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OpenBracketWithWS || _la==OpenBrace || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 42681270273L) != 0) || _la==Identifier) {
						{
						State = 799;
						assignable();
						}
					}

					}
					}
					State = 806;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 807;
				Match(In);
				State = 808;
				singleExpression(0);
				State = 809;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(MainParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenParenContext openParen() {
			return GetRuleContext<OpenParenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_continueStatement);
		int _la;
		try {
			State = 824;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 813;
				Match(Continue);
				State = 815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 571147905172107519L) != 0) || _la==Identifier || _la==StringLiteral) {
					{
					State = 814;
					propertyName();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 817;
				Match(Continue);
				State = 822;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenParenNoWS || _la==OpenParen) {
					{
					State = 818;
					openParen();
					State = 819;
					propertyName();
					State = 820;
					Match(CloseParen);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MainParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenParenContext openParen() {
			return GetRuleContext<OpenParenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_breakStatement);
		int _la;
		try {
			State = 837;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 826;
				Match(Break);
				State = 828;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 571147905172107519L) != 0) || _la==Identifier || _la==StringLiteral) {
					{
					State = 827;
					propertyName();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 830;
				Match(Break);
				State = 835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenParenNoWS || _la==OpenParen) {
					{
					State = 831;
					openParen();
					State = 832;
					propertyName();
					State = 833;
					Match(CloseParen);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MainParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			Match(Return);
			State = 841;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 840;
				singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_yieldStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 843;
			Match(Yield);
			State = 846;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 844;
				if (!(this.notEOL())) throw new FailedPredicateException(this, "this.notEOL()");
				State = 845;
				singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(MainParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 848;
			Match(Switch);
			State = 850;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 849;
				singleExpression(0);
				}
				break;
			}
			State = 854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 852;
				Match(Comma);
				State = 853;
				literal();
				}
			}

			State = 859;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 856;
				Match(EOL);
				}
				}
				State = 861;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 862;
			caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext[] caseClauses() {
			return GetRuleContexts<CaseClausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext caseClauses(int i) {
			return GetRuleContext<CaseClausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 78, RULE_caseBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 864;
			Match(OpenBrace);
			State = 866;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Case) {
				{
				State = 865;
				caseClauses();
				}
			}

			State = 884;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				{
				State = 871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL) {
					{
					{
					State = 868;
					Match(EOL);
					}
					}
					State = 873;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 874;
				defaultClause();
				State = 878;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 875;
						Match(EOL);
						}
						} 
					}
					State = 880;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
				}
				State = 882;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Case) {
					{
					State = 881;
					caseClauses();
					}
				}

				}
				break;
			}
			State = 889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 886;
				Match(EOL);
				}
				}
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 892;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 80, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 895;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 894;
				caseClause();
				}
				}
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(MainParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 82, RULE_caseClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 899;
			Match(Case);
			State = 900;
			expressionSequence();
			State = 901;
			Match(Colon);
			State = 905;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 902;
					Match(EOL);
					}
					} 
				}
				State = 907;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			}
			State = 909;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				{
				State = 908;
				statementList();
				}
				break;
			}
			State = 914;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 911;
					Match(EOL);
					}
					} 
				}
				State = 916;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 84, RULE_defaultClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 917;
			Match(Default);
			State = 918;
			Match(Colon);
			State = 922;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 919;
					Match(EOL);
					}
					} 
				}
				State = 924;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			}
			State = 926;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 925;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		public LabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelledStatementContext labelledStatement() {
		LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_labelledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 928;
			Match(Identifier);
			State = 929;
			Match(Colon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(MainParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenParenContext openParen() {
			return GetRuleContext<OpenParenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_gotoStatement);
		try {
			State = 938;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 931;
				Match(Goto);
				State = 932;
				propertyName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 933;
				Match(Goto);
				State = 934;
				openParen();
				State = 935;
				propertyName();
				State = 936;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(MainParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 940;
			Match(Throw);
			State = 941;
			if (!(this.notEOL())) throw new FailedPredicateException(this, "this.notEOL()");
			State = 942;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(MainParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext[] catchProduction() {
			return GetRuleContexts<CatchProductionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext catchProduction(int i) {
			return GetRuleContext<CatchProductionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_tryStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 944;
			Match(Try);
			State = 948;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 945;
					Match(EOL);
					}
					} 
				}
				State = 950;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			}
			State = 951;
			statement();
			State = 955;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 952;
					Match(EOL);
					}
					} 
				}
				State = 957;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			}
			State = 961;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 958;
					catchProduction();
					}
					} 
				}
				State = 963;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			}
			State = 965;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 964;
				elseProduction();
				}
				break;
			}
			State = 968;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 967;
				finallyProduction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(MainParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchAssignableContext catchAssignable() {
			return GetRuleContext<CatchAssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 94, RULE_catchProduction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 970;
			Match(Catch);
			State = 972;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				{
				State = 971;
				catchAssignable();
				}
				break;
			}
			State = 977;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,124,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 974;
					Match(EOL);
					}
					} 
				}
				State = 979;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,124,Context);
			}
			State = 980;
			statement();
			State = 984;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 981;
					Match(EOL);
					}
					} 
				}
				State = 986;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchAssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenParenContext openParen() {
			return GetRuleContext<OpenParenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public CatchAssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchAssignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchAssignable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchAssignableContext catchAssignable() {
		CatchAssignableContext _localctx = new CatchAssignableContext(Context, State);
		EnterRule(_localctx, 96, RULE_catchAssignable);
		int _la;
		try {
			State = 1006;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case As:
				EnterOuterAlt(_localctx, 1);
				{
				State = 987;
				Match(As);
				State = 988;
				identifier();
				}
				break;
			case OpenBracketWithWS:
			case OpenBrace:
			case Default:
			case This:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case From:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 989;
				assignable();
				State = 994;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
				case 1:
					{
					State = 991;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==As) {
						{
						State = 990;
						Match(As);
						}
					}

					State = 993;
					identifier();
					}
					break;
				}
				}
				break;
			case OpenParenNoWS:
			case OpenParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 996;
				openParen();
				State = 997;
				assignable();
				State = 1002;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 111400747009L) != 0) || _la==Identifier) {
					{
					State = 999;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==As) {
						{
						State = 998;
						Match(As);
						}
					}

					State = 1001;
					identifier();
					}
				}

				State = 1004;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ElseProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseProductionContext elseProduction() {
		ElseProductionContext _localctx = new ElseProductionContext(Context, State);
		EnterRule(_localctx, 98, RULE_elseProduction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008;
			Match(Else);
			State = 1009;
			statement();
			State = 1013;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1010;
					Match(EOL);
					}
					} 
				}
				State = 1015;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(MainParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 100, RULE_finallyProduction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1016;
			Match(Finally);
			State = 1017;
			statement();
			State = 1021;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,132,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1018;
					Match(EOL);
					}
					} 
				}
				State = 1023;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,132,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenNoWS() { return GetToken(MainParser.OpenParenNoWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaFunctionBodyContext lambdaFunctionBody() {
			return GetRuleContext<LambdaFunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 102, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1025;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Async) {
				{
				State = 1024;
				Match(Async);
				}
			}

			State = 1027;
			identifier();
			State = 1028;
			Match(OpenParenNoWS);
			State = 1030;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014432870400064L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 42681270273L) != 0) || _la==Identifier) {
				{
				State = 1029;
				formalParameterList();
				}
			}

			State = 1032;
			Match(CloseParen);
			State = 1033;
			lambdaFunctionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MainParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 104, RULE_classDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035;
			Match(Class);
			State = 1036;
			identifier();
			State = 1037;
			classTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(MainParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext[] classElement() {
			return GetRuleContexts<ClassElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext classElement(int i) {
			return GetRuleContext<ClassElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MainParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MainParser.Dot, i);
		}
		public ClassTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTailContext classTail() {
		ClassTailContext _localctx = new ClassTailContext(Context, State);
		EnterRule(_localctx, 106, RULE_classTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1048;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extends) {
				{
				State = 1039;
				Match(Extends);
				State = 1040;
				identifier();
				State = 1045;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Dot) {
					{
					{
					State = 1041;
					Match(Dot);
					State = 1042;
					identifier();
					}
					}
					State = 1047;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1053;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 1050;
				Match(EOL);
				}
				}
				State = 1055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1056;
			Match(OpenBrace);
			State = 1060;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 576460749652619519L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				{
				State = 1057;
				classElement();
				}
				}
				State = 1062;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1066;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 1063;
				Match(EOL);
				}
				}
				State = 1068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1069;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementContext : ParserRuleContext {
		public ClassElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElement; } }
	 
		public ClassElementContext() { }
		public virtual void CopyFrom(ClassElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public NestedClassDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassFieldDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ClassFieldDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassMethodDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ClassMethodDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassPropertyDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDefinitionContext propertyDefinition() {
			return GetRuleContext<PropertyDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ClassPropertyDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementContext classElement() {
		ClassElementContext _localctx = new ClassElementContext(Context, State);
		EnterRule(_localctx, 108, RULE_classElement);
		int _la;
		try {
			int _alt;
			State = 1104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				_localctx = new ClassMethodDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1072;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
				case 1:
					{
					State = 1071;
					Match(Static);
					}
					break;
				}
				State = 1074;
				methodDefinition();
				State = 1076;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1075;
						Match(EOL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1078;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				_localctx = new ClassPropertyDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1081;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Static) {
					{
					State = 1080;
					Match(Static);
					}
				}

				State = 1083;
				propertyDefinition();
				State = 1085;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1084;
						Match(EOL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1087;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 3:
				_localctx = new ClassFieldDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1090;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
				case 1:
					{
					State = 1089;
					Match(Static);
					}
					break;
				}
				State = 1092;
				fieldDefinition();
				State = 1094;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1093;
						Match(EOL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1096;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 4:
				_localctx = new NestedClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1098;
				classDeclaration();
				State = 1100;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1099;
						Match(EOL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1102;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenNoWS() { return GetToken(MainParser.OpenParenNoWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaFunctionBodyContext lambdaFunctionBody() {
			return GetRuleContext<LambdaFunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
		EnterRule(_localctx, 110, RULE_methodDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				{
				State = 1106;
				Match(Async);
				}
				break;
			}
			State = 1109;
			propertyName();
			State = 1110;
			Match(OpenParenNoWS);
			State = 1112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014432870400064L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 42681270273L) != 0) || _la==Identifier) {
				{
				State = 1111;
				formalParameterList();
				}
			}

			State = 1114;
			Match(CloseParen);
			State = 1115;
			lambdaFunctionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassPropertyNameContext classPropertyName() {
			return GetRuleContext<ClassPropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyGetterDefinitionContext[] propertyGetterDefinition() {
			return GetRuleContexts<PropertyGetterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyGetterDefinitionContext propertyGetterDefinition(int i) {
			return GetRuleContext<PropertyGetterDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySetterDefinitionContext[] propertySetterDefinition() {
			return GetRuleContexts<PropertySetterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySetterDefinitionContext propertySetterDefinition(int i) {
			return GetRuleContext<PropertySetterDefinitionContext>(i);
		}
		public PropertyDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefinitionContext propertyDefinition() {
		PropertyDefinitionContext _localctx = new PropertyDefinitionContext(Context, State);
		EnterRule(_localctx, 112, RULE_propertyDefinition);
		int _la;
		try {
			int _alt;
			State = 1143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1117;
				classPropertyName();
				State = 1118;
				Match(Arrow);
				State = 1119;
				singleExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1121;
				classPropertyName();
				State = 1125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL) {
					{
					{
					State = 1122;
					Match(EOL);
					}
					}
					State = 1127;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1128;
				Match(OpenBrace);
				State = 1133;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 1131;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
						case 1:
							{
							State = 1129;
							propertyGetterDefinition();
							}
							break;
						case 2:
							{
							State = 1130;
							propertySetterDefinition();
							}
							break;
						}
						} 
					}
					State = 1135;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
				}
				State = 1136;
				Match(CloseBrace);
				State = 1140;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1137;
						Match(EOL);
						}
						} 
					}
					State = 1142;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassPropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		public ClassPropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classPropertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassPropertyNameContext classPropertyName() {
		ClassPropertyNameContext _localctx = new ClassPropertyNameContext(Context, State);
		EnterRule(_localctx, 114, RULE_classPropertyName);
		try {
			State = 1151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1145;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1146;
				identifier();
				State = 1147;
				Match(OpenBracket);
				State = 1148;
				formalParameterList();
				State = 1149;
				Match(CloseBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaFunctionBodyContext lambdaFunctionBody() {
			return GetRuleContext<LambdaFunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public PropertyGetterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetterDefinitionContext propertyGetterDefinition() {
		PropertyGetterDefinitionContext _localctx = new PropertyGetterDefinitionContext(Context, State);
		EnterRule(_localctx, 116, RULE_propertyGetterDefinition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1153;
			if (!(this.n("get"))) throw new FailedPredicateException(this, "this.n(\"get\")");
			State = 1154;
			identifier();
			State = 1155;
			lambdaFunctionBody();
			State = 1159;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1156;
					Match(EOL);
					}
					} 
				}
				State = 1161;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaFunctionBodyContext lambdaFunctionBody() {
			return GetRuleContext<LambdaFunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public PropertySetterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetterDefinitionContext propertySetterDefinition() {
		PropertySetterDefinitionContext _localctx = new PropertySetterDefinitionContext(Context, State);
		EnterRule(_localctx, 118, RULE_propertySetterDefinition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1162;
			if (!(this.n("set"))) throw new FailedPredicateException(this, "this.n(\"set\")");
			State = 1163;
			identifier();
			State = 1164;
			lambdaFunctionBody();
			State = 1168;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,157,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1165;
					Match(EOL);
					}
					} 
				}
				State = 1170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,157,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext[] propertyName() {
			return GetRuleContexts<PropertyNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName(int i) {
			return GetRuleContext<PropertyNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Assign() { return GetTokens(MainParser.Assign); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign(int i) {
			return GetToken(MainParser.Assign, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 120, RULE_fieldDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1171;
			propertyName();
			State = 1186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				{
				State = 1176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1172;
						Match(Assign);
						State = 1173;
						propertyName();
						}
						} 
					}
					State = 1178;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
				}
				State = 1182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL) {
					{
					{
					State = 1179;
					Match(EOL);
					}
					}
					State = 1184;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1185;
				initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterArgContext lastFormalParameterArg() {
			return GetRuleContext<LastFormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext[] formalParameterArg() {
			return GetRuleContexts<FormalParameterArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg(int i) {
			return GetRuleContext<FormalParameterArgContext>(i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 122, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1194;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014398509613120L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 42681270273L) != 0) || _la==Identifier) {
						{
						State = 1188;
						formalParameterArg();
						}
					}

					State = 1191;
					Match(Comma);
					}
					} 
				}
				State = 1196;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			}
			State = 1197;
			lastFormalParameterArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterArgContext formalParameterArg() {
		FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
		EnterRule(_localctx, 124, RULE_formalParameterArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BitAnd) {
				{
				State = 1199;
				Match(BitAnd);
				}
			}

			State = 1202;
			assignable();
			State = 1206;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				{
				State = 1203;
				Match(Assign);
				State = 1204;
				singleExpression(0);
				}
				break;
			case QuestionMark:
				{
				State = 1205;
				Match(QuestionMark);
				}
				break;
			case CloseBracket:
			case CloseParen:
			case Comma:
			case Multiply:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg() {
			return GetRuleContext<FormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		public LastFormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterArgContext lastFormalParameterArg() {
		LastFormalParameterArgContext _localctx = new LastFormalParameterArgContext(Context, State);
		EnterRule(_localctx, 126, RULE_lastFormalParameterArg);
		int _la;
		try {
			State = 1213;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracketWithWS:
			case OpenBrace:
			case BitAnd:
			case Default:
			case This:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case From:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1208;
				formalParameterArg();
				State = 1210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 1209;
					Match(Multiply);
					}
				}

				}
				break;
			case Multiply:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1212;
				Match(Multiply);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 128, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 1215;
				Match(EOL);
				}
				}
				State = 1220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1221;
			Match(OpenBrace);
			State = 1223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				{
				State = 1222;
				statementList();
				}
				break;
			}
			State = 1225;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracketWithWS() { return GetToken(MainParser.OpenBracketWithWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementListContext arrayElementList() {
			return GetRuleContext<ArrayElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 130, RULE_arrayLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1227;
			Match(OpenBracketWithWS);
			State = 1228;
			arrayElementList();
			State = 1229;
			Match(CloseBracket);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		public ArrayElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementListContext arrayElementList() {
		ArrayElementListContext _localctx = new ArrayElementListContext(Context, State);
		EnterRule(_localctx, 132, RULE_arrayElementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1237;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1232;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
					case 1:
						{
						State = 1231;
						arrayElement();
						}
						break;
					}
					State = 1234;
					Match(Comma);
					}
					} 
				}
				State = 1239;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			}
			State = 1241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				{
				State = 1240;
				arrayElement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(Context, State);
		EnterRule(_localctx, 134, RULE_arrayElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243;
			singleExpression(0);
			State = 1245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply) {
				{
				State = 1244;
				Match(Multiply);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MapElementListContext mapElementList() {
			return GetRuleContext<MapElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		public MapLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapLiteralContext mapLiteral() {
		MapLiteralContext _localctx = new MapLiteralContext(Context, State);
		EnterRule(_localctx, 136, RULE_mapLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1247;
			Match(OpenBracket);
			State = 1248;
			mapElementList();
			State = 1249;
			Match(CloseBracket);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapElementContext[] mapElement() {
			return GetRuleContexts<MapElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapElementContext mapElement(int i) {
			return GetRuleContext<MapElementContext>(i);
		}
		public MapElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapElementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapElementListContext mapElementList() {
		MapElementListContext _localctx = new MapElementListContext(Context, State);
		EnterRule(_localctx, 138, RULE_mapElementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1257;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1252;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
					case 1:
						{
						State = 1251;
						mapElement();
						}
						break;
					}
					State = 1254;
					Match(Comma);
					}
					} 
				}
				State = 1259;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public MapElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapElementContext mapElement() {
		MapElementContext _localctx = new MapElementContext(Context, State);
		EnterRule(_localctx, 140, RULE_mapElement);
		int _la;
		try {
			int _alt;
			State = 1280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1260;
				singleExpression(0);
				State = 1262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 1261;
					Match(Multiply);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1264;
				singleExpression(0);
				State = 1268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL) {
					{
					{
					State = 1265;
					Match(EOL);
					}
					}
					State = 1270;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1271;
				Match(Colon);
				State = 1275;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1272;
						Match(EOL);
						}
						} 
					}
					State = 1277;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
				}
				State = 1278;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public DynamicPropertyNameContext dynamicPropertyName() {
			return GetRuleContext<DynamicPropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertySetterContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenNoWS() { return GetToken(MainParser.OpenParenNoWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg() {
			return GetRuleContext<FormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertySetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyGetterContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenNoWS() { return GetToken(MainParser.OpenParenNoWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertyGetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionPropertyContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenNoWS() { return GetToken(MainParser.OpenParenNoWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionPropertyContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 142, RULE_propertyAssignment);
		int _la;
		try {
			int _alt;
			State = 1323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				_localctx = new PropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1282;
				dynamicPropertyName();
				State = 1286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL) {
					{
					{
					State = 1283;
					Match(EOL);
					}
					}
					State = 1288;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1289;
				Match(Colon);
				State = 1293;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1290;
						Match(EOL);
						}
						} 
					}
					State = 1295;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
				}
				State = 1296;
				singleExpression(0);
				}
				break;
			case 2:
				_localctx = new FunctionPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1299;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
				case 1:
					{
					State = 1298;
					Match(Async);
					}
					break;
				}
				State = 1302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 1301;
					Match(Multiply);
					}
				}

				State = 1304;
				propertyName();
				State = 1305;
				Match(OpenParenNoWS);
				State = 1307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014432870400064L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 42681270273L) != 0) || _la==Identifier) {
					{
					State = 1306;
					formalParameterList();
					}
				}

				State = 1309;
				Match(CloseParen);
				State = 1310;
				functionBody();
				}
				break;
			case 3:
				_localctx = new PropertyGetterContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1312;
				getter();
				State = 1313;
				Match(OpenParenNoWS);
				State = 1314;
				Match(CloseParen);
				State = 1315;
				functionBody();
				}
				break;
			case 4:
				_localctx = new PropertySetterContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1317;
				setter();
				State = 1318;
				Match(OpenParenNoWS);
				State = 1319;
				formalParameterArg();
				State = 1320;
				Match(CloseParen);
				State = 1321;
				functionBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicPropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference() {
			return GetRuleContext<DereferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerefContinuationContext[] derefContinuation() {
			return GetRuleContexts<DerefContinuationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerefContinuationContext derefContinuation(int i) {
			return GetRuleContext<DerefContinuationContext>(i);
		}
		public DynamicPropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicPropertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicPropertyNameContext dynamicPropertyName() {
		DynamicPropertyNameContext _localctx = new DynamicPropertyNameContext(Context, State);
		EnterRule(_localctx, 144, RULE_dynamicPropertyName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1327;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case Unset:
			case BooleanLiteral:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Super:
			case Export:
			case Import:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
			case StringLiteral:
				{
				State = 1325;
				propertyName();
				}
				break;
			case DerefStart:
				{
				State = 1326;
				dereference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DerefContinuation || _la==IdentifierContinuation) {
				{
				{
				State = 1329;
				derefContinuation();
				}
				}
				State = 1334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 146, RULE_propertyName);
		try {
			State = 1339;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1335;
				Match(Identifier);
				}
				break;
			case NullLiteral:
			case Unset:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Super:
			case Export:
			case Import:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1336;
				reservedWord();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1337;
				Match(StringLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1338;
				numericLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerefContinuationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefContinuation() { return GetToken(MainParser.DerefContinuation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefEnd() { return GetToken(MainParser.DerefEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentifierContinuation() { return GetToken(MainParser.IdentifierContinuation, 0); }
		public DerefContinuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derefContinuation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerefContinuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerefContinuationContext derefContinuation() {
		DerefContinuationContext _localctx = new DerefContinuationContext(Context, State);
		EnterRule(_localctx, 148, RULE_derefContinuation);
		try {
			State = 1346;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DerefContinuation:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1341;
				Match(DerefContinuation);
				State = 1342;
				singleExpression(0);
				State = 1343;
				Match(DerefEnd);
				}
				break;
			case IdentifierContinuation:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1345;
				Match(IdentifierContinuation);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DereferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefStart() { return GetToken(MainParser.DerefStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefEnd() { return GetToken(MainParser.DerefEnd, 0); }
		public DereferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dereference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDereference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DereferenceContext dereference() {
		DereferenceContext _localctx = new DereferenceContext(Context, State);
		EnterRule(_localctx, 150, RULE_dereference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1348;
			Match(DerefStart);
			State = 1349;
			singleExpression(0);
			State = 1350;
			Match(DerefEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 152, RULE_arguments);
		int _la;
		try {
			State = 1370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1352;
				argument();
				State = 1359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1353;
					Match(Comma);
					State = 1355;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
					case 1:
						{
						State = 1354;
						argument();
						}
						break;
					}
					}
					}
					State = 1361;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1362;
					Match(Comma);
					State = 1364;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
					case 1:
						{
						State = 1363;
						argument();
						}
						break;
					}
					}
					}
					State = 1368;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 154, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1372;
			singleExpression(0);
			State = 1374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply) {
				{
				State = 1373;
				Match(Multiply);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 156, RULE_expressionSequence);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1376;
			singleExpression(0);
			State = 1388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 1383;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,196,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1377;
						Match(Comma);
						State = 1379;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
						case 1:
							{
							State = 1378;
							singleExpression(0);
							}
							break;
						}
						}
						} 
					}
					State = 1385;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,196,Context);
				}
				State = 1386;
				Match(Comma);
				State = 1387;
				singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionConcatenationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public SingleExpressionConcatenationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpressionConcatenation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleExpressionConcatenation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionConcatenationContext singleExpressionConcatenation() {
		SingleExpressionConcatenationContext _localctx = new SingleExpressionConcatenationContext(Context, State);
		EnterRule(_localctx, 158, RULE_singleExpressionConcatenation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1390;
			if (!(!this.isBOS())) throw new FailedPredicateException(this, "!this.isBOS()");
			State = 1391;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenNoWS() { return GetToken(MainParser.OpenParenNoWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctionCallArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallArgumentsContext functionCallArguments() {
		FunctionCallArgumentsContext _localctx = new FunctionCallArgumentsContext(Context, State);
		EnterRule(_localctx, 160, RULE_functionCallArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1393;
			Match(OpenParenNoWS);
			State = 1395;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				{
				State = 1394;
				arguments();
				}
				break;
			}
			State = 1397;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberIndexArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public MemberIndexArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberIndexArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberIndexArgumentsContext memberIndexArguments() {
		MemberIndexArgumentsContext _localctx = new MemberIndexArgumentsContext(Context, State);
		EnterRule(_localctx, 162, RULE_memberIndexArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1399;
			if (!(!this.isPrevWS())) throw new FailedPredicateException(this, "!this.isPrevWS()");
			State = 1400;
			Match(OpenBracket);
			State = 1402;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				{
				State = 1401;
				expressionSequence();
				}
				break;
			}
			State = 1404;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TernaryExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public TernaryExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MainParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		public LogicalAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(MainParser.Power, 0); }
		public PowerExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		public InExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MainParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		public LogicalOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(MainParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public NotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegExMatchExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegExMatch() { return GetToken(MainParser.RegExMatch, 0); }
		public RegExMatchExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegExMatchExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecreaseExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AwaitExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public AwaitExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwaitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaFunctionContext lambdaFunction() {
			return GetRuleContext<LambdaFunctionContext>(0);
		}
		public FunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecreaseExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		public PostDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstanceofExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		public InstanceofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryPlusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(MainParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public DeleteExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(MainParser.BitXOr, 0); }
		public BitXOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotConcatenateExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DotConcat() { return GetToken(MainParser.DotConcat, 0); }
		public DotConcatenateExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotConcatenateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(MainParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(MainParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(MainParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityNotEquals() { return GetToken(MainParser.IdentityNotEquals, 0); }
		public EqualityExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(MainParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivide() { return GetToken(MainParser.IntegerDivide, 0); }
		public MultiplicativeExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitShiftExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(MainParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(MainParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogical() { return GetToken(MainParser.RightShiftLogical, 0); }
		public BitShiftExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		public AdditiveExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(MainParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(MainParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(MainParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(MainParser.GreaterThanEquals, 0); }
		public RelationalExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		public PostIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContainsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(MainParser.Contains, 0); }
		public ContainsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitNotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(MainParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public BitNotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarRefExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VarRefExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarRefExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		public IsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		public BitAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImplicitConcatenateExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ImplicitConcatenateExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitConcatenateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(MainParser.BitOr, 0); }
		public BitOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentOperatorExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public AssignmentOperatorExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperatorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(MainParser.NullCoalesce, 0); }
		public CoalesceExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 164;
		EnterRecursionRule(_localctx, 164, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1407;
				lambdaFunction();
				}
				break;
			case 2:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1408;
				primary(0);
				}
				break;
			case 3:
				{
				_localctx = new DeleteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1409;
				Match(Delete);
				State = 1410;
				singleExpression(30);
				}
				break;
			case 4:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1411;
				Match(PlusPlus);
				State = 1412;
				singleExpression(29);
				}
				break;
			case 5:
				{
				_localctx = new PreDecreaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1413;
				Match(MinusMinus);
				State = 1414;
				singleExpression(28);
				}
				break;
			case 6:
				{
				_localctx = new VarRefExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1415;
				Match(BitAnd);
				State = 1416;
				singleExpression(26);
				}
				break;
			case 7:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1417;
				Match(Minus);
				State = 1418;
				singleExpression(25);
				}
				break;
			case 8:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1419;
				Match(Plus);
				State = 1420;
				singleExpression(24);
				}
				break;
			case 9:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1421;
				Match(BitNot);
				State = 1422;
				singleExpression(23);
				}
				break;
			case 10:
				{
				_localctx = new AwaitExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1423;
				Match(Await);
				State = 1424;
				singleExpression(22);
				}
				break;
			case 11:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1425;
				_la = TokenStream.LA(1);
				if ( !(_la==Not || _la==VerbalNot) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1429;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1426;
						Match(EOL);
						}
						} 
					}
					State = 1431;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
				}
				State = 1432;
				singleExpression(6);
				}
				break;
			case 12:
				{
				_localctx = new AssignmentOperatorExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1433;
				primary(0);
				State = 1434;
				assignmentOperator();
				State = 1435;
				singleExpression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1519;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,205,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1517;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
					case 1:
						{
						_localctx = new PowerExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1439;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1440;
						Match(Power);
						State = 1441;
						singleExpression(27);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1442;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1443;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1444;
						singleExpression(22);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1445;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1446;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1447;
						singleExpression(21);
						}
						break;
					case 4:
						{
						_localctx = new BitShiftExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1448;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1449;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30786325577728L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1450;
						singleExpression(20);
						}
						break;
					case 5:
						{
						_localctx = new BitAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1451;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1452;
						Match(BitAnd);
						State = 1453;
						singleExpression(19);
						}
						break;
					case 6:
						{
						_localctx = new BitXOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1454;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1455;
						Match(BitXOr);
						State = 1456;
						singleExpression(18);
						}
						break;
					case 7:
						{
						_localctx = new BitOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1457;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1458;
						Match(BitOr);
						State = 1459;
						singleExpression(17);
						}
						break;
					case 8:
						{
						_localctx = new DotConcatenateExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1460;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1461;
						Match(DotConcat);
						State = 1462;
						singleExpression(16);
						}
						break;
					case 9:
						{
						_localctx = new ImplicitConcatenateExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1463;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1464;
						singleExpression(15);
						}
						break;
					case 10:
						{
						_localctx = new RegExMatchExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1465;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1466;
						Match(RegExMatch);
						State = 1467;
						singleExpression(14);
						}
						break;
					case 11:
						{
						_localctx = new RelationalExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1468;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1469;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 527765581332480L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1470;
						singleExpression(13);
						}
						break;
					case 12:
						{
						_localctx = new EqualityExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1471;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1472;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8444249301319680L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1473;
						singleExpression(12);
						}
						break;
					case 13:
						{
						_localctx = new InstanceofExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1474;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1475;
						Match(Instanceof);
						State = 1476;
						singleExpression(11);
						}
						break;
					case 14:
						{
						_localctx = new IsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1477;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1478;
						Match(Is);
						State = 1479;
						singleExpression(10);
						}
						break;
					case 15:
						{
						_localctx = new InExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1480;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1481;
						Match(In);
						State = 1482;
						singleExpression(9);
						}
						break;
					case 16:
						{
						_localctx = new ContainsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1483;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1484;
						Match(Contains);
						State = 1485;
						singleExpression(8);
						}
						break;
					case 17:
						{
						_localctx = new LogicalAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1486;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1487;
						_la = TokenStream.LA(1);
						if ( !(_la==And || _la==VerbalAnd) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1488;
						singleExpression(6);
						}
						break;
					case 18:
						{
						_localctx = new LogicalOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1489;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1490;
						_la = TokenStream.LA(1);
						if ( !(_la==Or || _la==VerbalOr) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1491;
						singleExpression(5);
						}
						break;
					case 19:
						{
						_localctx = new CoalesceExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1492;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1493;
						Match(NullCoalesce);
						State = 1494;
						singleExpression(4);
						}
						break;
					case 20:
						{
						_localctx = new TernaryExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1495;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1496;
						Match(QuestionMark);
						State = 1497;
						singleExpression(0);
						State = 1501;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL) {
							{
							{
							State = 1498;
							Match(EOL);
							}
							}
							State = 1503;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1504;
						Match(Colon);
						State = 1508;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1505;
								Match(EOL);
								}
								} 
							}
							State = 1510;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
						}
						State = 1511;
						singleExpression(3);
						}
						break;
					case 21:
						{
						_localctx = new PostIncrementExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1513;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 1514;
						Match(PlusPlus);
						}
						break;
					case 22:
						{
						_localctx = new PostDecreaseExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1515;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 1516;
						Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 1521;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,205,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(MainParser.This, 0); }
		public ThisExpressionContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BaseExpressionContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Base() { return GetToken(MainParser.Base, 0); }
		public BaseExpressionContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DynamicIdentifierExpressionContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public DynamicIdentifierContext dynamicIdentifier() {
			return GetRuleContext<DynamicIdentifierContext>(0);
		}
		public DynamicIdentifierExpressionContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDotExpressionContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MainParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberIdentifierContext memberIdentifier() {
			return GetRuleContext<MemberIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public MemberDotExpressionContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexExpressionContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberIndexArgumentsContext memberIndexArguments() {
			return GetRuleContext<MemberIndexArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		public MemberIndexExpressionContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuperExpressionContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(MainParser.Super, 0); }
		public SuperExpressionContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgumentsContext functionCallArguments() {
			return GetRuleContext<FunctionCallArgumentsContext>(0);
		}
		public FunctionCallExpressionContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		return primary(0);
	}

	private PrimaryContext primary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryContext _localctx = new PrimaryContext(Context, _parentState);
		PrimaryContext _prevctx = _localctx;
		int _startState = 166;
		EnterRecursionRule(_localctx, 166, RULE_primary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1523;
				Match(This);
				}
				break;
			case 2:
				{
				_localctx = new SuperExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1524;
				Match(Super);
				}
				break;
			case 3:
				{
				_localctx = new BaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1525;
				Match(Base);
				}
				break;
			case 4:
				{
				_localctx = new DynamicIdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1526;
				dynamicIdentifier();
				}
				break;
			case 5:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1527;
				identifier();
				}
				break;
			case 6:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1528;
				literal();
				}
				break;
			case 7:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1529;
				arrayLiteral();
				}
				break;
			case 8:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1530;
				objectLiteral();
				}
				break;
			case 9:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1531;
				Match(OpenParen);
				State = 1532;
				expressionSequence();
				State = 1533;
				Match(CloseParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1552;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1550;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
					case 1:
						{
						_localctx = new FunctionCallExpressionContext(new PrimaryContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primary);
						State = 1537;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1538;
						functionCallArguments();
						}
						break;
					case 2:
						{
						_localctx = new MemberDotExpressionContext(new PrimaryContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primary);
						State = 1539;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1541;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==QuestionMark) {
							{
							State = 1540;
							Match(QuestionMark);
							}
						}

						State = 1543;
						Match(Dot);
						State = 1544;
						memberIdentifier();
						}
						break;
					case 3:
						{
						_localctx = new MemberIndexExpressionContext(new PrimaryContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primary);
						State = 1545;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1547;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
						case 1:
							{
							State = 1546;
							Match(QuestionMarkDot);
							}
							break;
						}
						State = 1549;
						memberIndexArguments();
						}
						break;
					}
					} 
				}
				State = 1554;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MemberIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DynamicIdentifierContext dynamicIdentifier() {
			return GetRuleContext<DynamicIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public MemberIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberIdentifierContext memberIdentifier() {
		MemberIdentifierContext _localctx = new MemberIdentifierContext(Context, State);
		EnterRule(_localctx, 168, RULE_memberIdentifier);
		try {
			State = 1558;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1555;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1556;
				dynamicIdentifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1557;
				reservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerefContinuationContext[] derefContinuation() {
			return GetRuleContexts<DerefContinuationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerefContinuationContext derefContinuation(int i) {
			return GetRuleContext<DerefContinuationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference() {
			return GetRuleContext<DereferenceContext>(0);
		}
		public DynamicIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicIdentifierContext dynamicIdentifier() {
		DynamicIdentifierContext _localctx = new DynamicIdentifierContext(Context, State);
		EnterRule(_localctx, 170, RULE_dynamicIdentifier);
		try {
			int _alt;
			State = 1573;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Default:
			case This:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case From:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1560;
				identifier();
				State = 1562;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1561;
						derefContinuation();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1564;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case DerefStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1566;
				dereference();
				State = 1570;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,213,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1567;
						derefContinuation();
						}
						} 
					}
					State = 1572;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,213,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 172, RULE_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1575;
			Match(Assign);
			State = 1576;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public AssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableContext assignable() {
		AssignableContext _localctx = new AssignableContext(Context, State);
		EnterRule(_localctx, 174, RULE_assignable);
		try {
			State = 1581;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Default:
			case This:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case From:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1578;
				identifier();
				}
				break;
			case OpenBracketWithWS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1579;
				arrayLiteral();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1580;
				objectLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 176, RULE_objectLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1583;
			Match(OpenBrace);
			State = 1598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
			case 1:
				{
				State = 1584;
				propertyAssignment();
				State = 1589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1585;
					Match(Comma);
					State = 1586;
					propertyAssignment();
					}
					}
					State = 1591;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL) {
					{
					{
					State = 1592;
					Match(EOL);
					}
					}
					State = 1597;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 1600;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaFunctionContext : ParserRuleContext {
		public LambdaFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaFunction; } }
	 
		public LambdaFunctionContext() { }
		public virtual void CopyFrom(LambdaFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedLambdaFunctionContext : LambdaFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public NamedLambdaFunctionContext(LambdaFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedLambdaFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnonymousLambdaFunctionContext : LambdaFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaFunctionBodyContext lambdaFunctionBody() {
			return GetRuleContext<LambdaFunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public AnonymousLambdaFunctionContext(LambdaFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousLambdaFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnonymousFatArrowLambdaFunctionContext : LambdaFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public AnonymousFatArrowLambdaFunctionContext(LambdaFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousFatArrowLambdaFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaFunctionContext lambdaFunction() {
		LambdaFunctionContext _localctx = new LambdaFunctionContext(Context, State);
		EnterRule(_localctx, 178, RULE_lambdaFunction);
		int _la;
		try {
			State = 1631;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,226,Context) ) {
			case 1:
				_localctx = new NamedLambdaFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1602;
				if (!(this.isFunctionDeclarationExpressionAllowed())) throw new FailedPredicateException(this, "this.isFunctionDeclarationExpressionAllowed()");
				State = 1603;
				functionDeclaration();
				}
				break;
			case 2:
				_localctx = new AnonymousLambdaFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1605;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Async) {
					{
					State = 1604;
					Match(Async);
					}
				}

				State = 1607;
				Match(OpenParen);
				State = 1609;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014432870400064L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 42681270273L) != 0) || _la==Identifier) {
					{
					State = 1608;
					formalParameterList();
					}
				}

				State = 1611;
				Match(CloseParen);
				State = 1612;
				lambdaFunctionBody();
				}
				break;
			case 3:
				_localctx = new AnonymousFatArrowLambdaFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Async) {
					{
					State = 1613;
					Match(Async);
					}
				}

				State = 1627;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
				case 1:
					{
					State = 1617;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OpenBracketWithWS || _la==OpenBrace || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 42681270273L) != 0) || _la==Identifier) {
						{
						State = 1616;
						assignable();
						}
					}

					State = 1619;
					Match(Multiply);
					}
					break;
				case 2:
					{
					State = 1621;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BitAnd) {
						{
						State = 1620;
						Match(BitAnd);
						}
					}

					State = 1623;
					assignable();
					State = 1625;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==QuestionMark) {
						{
						State = 1624;
						Match(QuestionMark);
						}
					}

					}
					break;
				}
				State = 1629;
				Match(Arrow);
				State = 1630;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaFunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public LambdaFunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaFunctionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaFunctionBodyContext lambdaFunctionBody() {
		LambdaFunctionBodyContext _localctx = new LambdaFunctionBodyContext(Context, State);
		EnterRule(_localctx, 180, RULE_lambdaFunctionBody);
		try {
			State = 1636;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Arrow:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1633;
				Match(Arrow);
				State = 1634;
				singleExpression(0);
				}
				break;
			case OpenBrace:
			case EOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1635;
				functionBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(MainParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(MainParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(MainParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(MainParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(MainParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivideAssign() { return GetToken(MainParser.IntegerDivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConcatenateAssign() { return GetToken(MainParser.ConcatenateAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(MainParser.BitOrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(MainParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(MainParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(MainParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(MainParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogicalAssign() { return GetToken(MainParser.RightShiftLogicalAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PowerAssign() { return GetToken(MainParser.PowerAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullishCoalescingAssign() { return GetToken(MainParser.NullishCoalescingAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 182, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1638;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & 9006924376834049L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BigintLiteralContext bigintLiteral() {
			return GetRuleContext<BigintLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(MainParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultilineStringLiteral() { return GetToken(MainParser.MultilineStringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegularExpressionLiteral() { return GetToken(MainParser.RegularExpressionLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 184, RULE_literal);
		int _la;
		try {
			State = 1644;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1640;
				boolean();
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1641;
				numericLiteral();
				}
				break;
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1642;
				bigintLiteral();
				}
				break;
			case RegularExpressionLiteral:
			case NullLiteral:
			case Unset:
			case MultilineStringLiteral:
			case StringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1643;
				_la = TokenStream.LA(1);
				if ( !(_la==RegularExpressionLiteral || _la==NullLiteral || _la==Unset || _la==MultilineStringLiteral || _la==StringLiteral) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(MainParser.BooleanLiteral, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 186, RULE_boolean);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1646;
			Match(BooleanLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(MainParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(MainParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral() { return GetToken(MainParser.OctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral2() { return GetToken(MainParser.OctalIntegerLiteral2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryIntegerLiteral() { return GetToken(MainParser.BinaryIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 188, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1648;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BigintLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigDecimalIntegerLiteral() { return GetToken(MainParser.BigDecimalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigHexIntegerLiteral() { return GetToken(MainParser.BigHexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigOctalIntegerLiteral() { return GetToken(MainParser.BigOctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigBinaryIntegerLiteral() { return GetToken(MainParser.BigBinaryIntegerLiteral, 0); }
		public BigintLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bigintLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBigintLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BigintLiteralContext bigintLiteral() {
		BigintLiteralContext _localctx = new BigintLiteralContext(Context, State);
		EnterRule(_localctx, 190, RULE_bigintLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 192, RULE_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1652;
			if (!(this.n("get"))) throw new FailedPredicateException(this, "this.n(\"get\")");
			State = 1653;
			identifier();
			State = 1654;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 194, RULE_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1656;
			if (!(this.n("set"))) throw new FailedPredicateException(this, "this.n(\"set\")");
			State = 1657;
			identifier();
			State = 1658;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 196, RULE_identifierName);
		try {
			State = 1662;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,229,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1660;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1661;
				reservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(MainParser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MainParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(MainParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(MainParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(MainParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Base() { return GetToken(MainParser.Base, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(MainParser.From, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 198, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1664;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 42681270273L) != 0) || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(MainParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 200, RULE_reservedWord);
		try {
			State = 1670;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1666;
				keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1667;
				Match(NullLiteral);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1668;
				Match(Unset);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1669;
				boolean();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenParenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenNoWS() { return GetToken(MainParser.OpenParenNoWS, 0); }
		public OpenParenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openParen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenParen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenParenContext openParen() {
		OpenParenContext _localctx = new OpenParenContext(Context, State);
		EnterRule(_localctx, 202, RULE_openParen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1672;
			_la = TokenStream.LA(1);
			if ( !(_la==OpenParenNoWS || _la==OpenParen) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(MainParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(MainParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MainParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MainParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(MainParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MainParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MainParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(MainParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(MainParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MainParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(MainParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(MainParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(MainParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(MainParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(MainParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(MainParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(MainParser.Contains, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(MainParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(MainParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(MainParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 204, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1674;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 285573952586053633L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MainParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 206, RULE_eos);
		try {
			int _alt;
			State = 1682;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1677;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1676;
						Match(EOL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1679;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,231,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1681;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 29: return functionStatement_sempred((FunctionStatementContext)_localctx, predIndex);
		case 37: return yieldStatement_sempred((YieldStatementContext)_localctx, predIndex);
		case 45: return throwStatement_sempred((ThrowStatementContext)_localctx, predIndex);
		case 58: return propertyGetterDefinition_sempred((PropertyGetterDefinitionContext)_localctx, predIndex);
		case 59: return propertySetterDefinition_sempred((PropertySetterDefinitionContext)_localctx, predIndex);
		case 79: return singleExpressionConcatenation_sempred((SingleExpressionConcatenationContext)_localctx, predIndex);
		case 81: return memberIndexArguments_sempred((MemberIndexArgumentsContext)_localctx, predIndex);
		case 82: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 83: return primary_sempred((PrimaryContext)_localctx, predIndex);
		case 89: return lambdaFunction_sempred((LambdaFunctionContext)_localctx, predIndex);
		case 96: return getter_sempred((GetterContext)_localctx, predIndex);
		case 97: return setter_sempred((SetterContext)_localctx, predIndex);
		}
		return true;
	}
	private bool functionStatement_sempred(FunctionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.isBOS();
		case 1: return !this.isPrevCloseParen();
		}
		return true;
	}
	private bool yieldStatement_sempred(YieldStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return this.notEOL();
		}
		return true;
	}
	private bool throwStatement_sempred(ThrowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return this.notEOL();
		}
		return true;
	}
	private bool propertyGetterDefinition_sempred(PropertyGetterDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return this.n("get");
		}
		return true;
	}
	private bool propertySetterDefinition_sempred(PropertySetterDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return this.n("set");
		}
		return true;
	}
	private bool singleExpressionConcatenation_sempred(SingleExpressionConcatenationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return !this.isBOS();
		}
		return true;
	}
	private bool memberIndexArguments_sempred(MemberIndexArgumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return !this.isPrevWS();
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 27);
		case 9: return Precpred(Context, 21);
		case 10: return Precpred(Context, 20);
		case 11: return Precpred(Context, 19);
		case 12: return Precpred(Context, 18);
		case 13: return Precpred(Context, 17);
		case 14: return Precpred(Context, 16);
		case 15: return Precpred(Context, 15);
		case 16: return Precpred(Context, 14);
		case 17: return Precpred(Context, 13);
		case 18: return Precpred(Context, 12);
		case 19: return Precpred(Context, 11);
		case 20: return Precpred(Context, 10);
		case 21: return Precpred(Context, 9);
		case 22: return Precpred(Context, 8);
		case 23: return Precpred(Context, 7);
		case 24: return Precpred(Context, 5);
		case 25: return Precpred(Context, 4);
		case 26: return Precpred(Context, 3);
		case 27: return Precpred(Context, 2);
		case 28: return Precpred(Context, 32);
		case 29: return Precpred(Context, 31);
		}
		return true;
	}
	private bool primary_sempred(PrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return Precpred(Context, 12);
		case 31: return Precpred(Context, 11);
		case 32: return Precpred(Context, 10);
		}
		return true;
	}
	private bool lambdaFunction_sempred(LambdaFunctionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return this.isFunctionDeclarationExpressionAllowed();
		}
		return true;
	}
	private bool getter_sempred(GetterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return this.n("get");
		}
		return true;
	}
	private bool setter_sempred(SetterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return this.n("set");
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,173,1685,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,1,0,1,0,1,0,
		1,1,4,1,213,8,1,11,1,12,1,214,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,4,2,230,8,2,11,2,12,2,231,3,2,234,8,2,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,3,3,245,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,265,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,285,8,3,1,4,1,4,3,4,289,
		8,4,1,4,1,4,1,4,1,4,1,4,3,4,296,8,4,1,4,1,4,1,4,1,4,3,4,302,8,4,1,4,1,
		4,1,4,1,4,3,4,308,8,4,1,4,3,4,311,8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,5,6,
		320,8,6,10,6,12,6,323,9,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,331,8,6,1,7,1,7,
		1,7,5,7,336,8,7,10,7,12,7,339,9,7,1,7,5,7,342,8,7,10,7,12,7,345,9,7,1,
		7,1,7,1,7,1,7,3,7,351,8,7,1,8,1,8,3,8,355,8,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,370,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,395,
		8,8,1,9,5,9,398,8,9,10,9,12,9,401,9,9,1,9,1,9,3,9,405,8,9,1,9,5,9,408,
		8,9,10,9,12,9,411,9,9,1,9,1,9,1,10,4,10,416,8,10,11,10,12,10,417,1,11,
		1,11,3,11,422,8,11,1,12,1,12,1,12,1,13,3,13,428,8,13,1,13,1,13,3,13,432,
		8,13,1,13,1,13,1,13,3,13,437,8,13,1,14,1,14,1,14,1,14,5,14,443,8,14,10,
		14,12,14,446,9,14,1,14,1,14,3,14,450,8,14,3,14,452,8,14,1,14,1,14,1,15,
		1,15,1,15,3,15,459,8,15,1,16,1,16,3,16,463,8,16,1,17,1,17,1,18,1,18,1,
		18,1,19,1,19,3,19,472,8,19,1,19,1,19,3,19,476,8,19,1,20,1,20,1,20,1,21,
		1,21,1,21,3,21,484,8,21,1,22,1,22,3,22,488,8,22,1,22,1,22,3,22,492,8,22,
		1,22,1,22,1,22,3,22,497,8,22,1,23,1,23,1,23,1,23,1,23,3,23,504,8,23,3,
		23,506,8,23,1,24,1,24,1,24,1,24,5,24,512,8,24,10,24,12,24,515,9,24,1,24,
		1,24,3,24,519,8,24,3,24,521,8,24,1,24,1,24,1,25,1,25,1,25,3,25,528,8,25,
		1,26,1,26,3,26,532,8,26,1,27,1,27,5,27,536,8,27,10,27,12,27,539,9,27,1,
		27,1,27,5,27,543,8,27,10,27,12,27,546,9,27,1,28,1,28,1,28,1,28,3,28,552,
		8,28,1,29,1,29,1,29,1,29,3,29,558,8,29,1,30,1,30,1,31,1,31,1,31,5,31,565,
		8,31,10,31,12,31,568,9,31,1,31,1,31,5,31,572,8,31,10,31,12,31,575,9,31,
		1,31,1,31,5,31,579,8,31,10,31,12,31,582,9,31,1,31,3,31,585,8,31,1,32,1,
		32,3,32,589,8,32,1,32,5,32,592,8,32,10,32,12,32,595,9,32,1,32,1,32,1,32,
		1,32,1,32,3,32,602,8,32,1,32,1,32,3,32,606,8,32,1,32,1,32,1,32,5,32,611,
		8,32,10,32,12,32,614,9,32,1,32,1,32,3,32,618,8,32,1,32,5,32,621,8,32,10,
		32,12,32,624,9,32,1,32,1,32,1,32,1,32,1,32,3,32,631,8,32,1,32,1,32,3,32,
		635,8,32,1,32,1,32,1,32,5,32,640,8,32,10,32,12,32,643,9,32,1,32,1,32,3,
		32,647,8,32,1,32,5,32,650,8,32,10,32,12,32,653,9,32,1,32,1,32,1,32,1,32,
		1,32,3,32,660,8,32,1,32,1,32,3,32,664,8,32,1,32,1,32,1,32,5,32,669,8,32,
		10,32,12,32,672,9,32,1,32,1,32,3,32,676,8,32,1,32,5,32,679,8,32,10,32,
		12,32,682,9,32,1,32,1,32,1,32,1,32,1,32,3,32,689,8,32,1,32,1,32,3,32,693,
		8,32,1,32,1,32,1,32,5,32,698,8,32,10,32,12,32,701,9,32,1,32,1,32,3,32,
		705,8,32,5,32,707,8,32,10,32,12,32,710,9,32,1,32,5,32,713,8,32,10,32,12,
		32,716,9,32,1,32,1,32,1,32,1,32,1,32,3,32,723,8,32,1,32,1,32,3,32,727,
		8,32,1,32,1,32,1,32,5,32,732,8,32,10,32,12,32,735,9,32,1,32,1,32,1,32,
		1,32,1,32,3,32,742,8,32,1,32,1,32,3,32,746,8,32,1,32,1,32,1,32,5,32,751,
		8,32,10,32,12,32,754,9,32,1,32,1,32,1,32,1,32,1,32,3,32,761,8,32,1,32,
		1,32,3,32,765,8,32,3,32,767,8,32,1,33,3,33,770,8,33,1,33,5,33,773,8,33,
		10,33,12,33,776,9,33,1,33,1,33,3,33,780,8,33,5,33,782,8,33,10,33,12,33,
		785,9,33,1,33,1,33,1,33,1,33,3,33,791,8,33,1,33,5,33,794,8,33,10,33,12,
		33,797,9,33,1,33,1,33,3,33,801,8,33,5,33,803,8,33,10,33,12,33,806,9,33,
		1,33,1,33,1,33,1,33,3,33,812,8,33,1,34,1,34,3,34,816,8,34,1,34,1,34,1,
		34,1,34,1,34,3,34,823,8,34,3,34,825,8,34,1,35,1,35,3,35,829,8,35,1,35,
		1,35,1,35,1,35,1,35,3,35,836,8,35,3,35,838,8,35,1,36,1,36,3,36,842,8,36,
		1,37,1,37,1,37,3,37,847,8,37,1,38,1,38,3,38,851,8,38,1,38,1,38,3,38,855,
		8,38,1,38,5,38,858,8,38,10,38,12,38,861,9,38,1,38,1,38,1,39,1,39,3,39,
		867,8,39,1,39,5,39,870,8,39,10,39,12,39,873,9,39,1,39,1,39,5,39,877,8,
		39,10,39,12,39,880,9,39,1,39,3,39,883,8,39,3,39,885,8,39,1,39,5,39,888,
		8,39,10,39,12,39,891,9,39,1,39,1,39,1,40,4,40,896,8,40,11,40,12,40,897,
		1,41,1,41,1,41,1,41,5,41,904,8,41,10,41,12,41,907,9,41,1,41,3,41,910,8,
		41,1,41,5,41,913,8,41,10,41,12,41,916,9,41,1,42,1,42,1,42,5,42,921,8,42,
		10,42,12,42,924,9,42,1,42,3,42,927,8,42,1,43,1,43,1,43,1,44,1,44,1,44,
		1,44,1,44,1,44,1,44,3,44,939,8,44,1,45,1,45,1,45,1,45,1,46,1,46,5,46,947,
		8,46,10,46,12,46,950,9,46,1,46,1,46,5,46,954,8,46,10,46,12,46,957,9,46,
		1,46,5,46,960,8,46,10,46,12,46,963,9,46,1,46,3,46,966,8,46,1,46,3,46,969,
		8,46,1,47,1,47,3,47,973,8,47,1,47,5,47,976,8,47,10,47,12,47,979,9,47,1,
		47,1,47,5,47,983,8,47,10,47,12,47,986,9,47,1,48,1,48,1,48,1,48,3,48,992,
		8,48,1,48,3,48,995,8,48,1,48,1,48,1,48,3,48,1000,8,48,1,48,3,48,1003,8,
		48,1,48,1,48,3,48,1007,8,48,1,49,1,49,1,49,5,49,1012,8,49,10,49,12,49,
		1015,9,49,1,50,1,50,1,50,5,50,1020,8,50,10,50,12,50,1023,9,50,1,51,3,51,
		1026,8,51,1,51,1,51,1,51,3,51,1031,8,51,1,51,1,51,1,51,1,52,1,52,1,52,
		1,52,1,53,1,53,1,53,1,53,5,53,1044,8,53,10,53,12,53,1047,9,53,3,53,1049,
		8,53,1,53,5,53,1052,8,53,10,53,12,53,1055,9,53,1,53,1,53,5,53,1059,8,53,
		10,53,12,53,1062,9,53,1,53,5,53,1065,8,53,10,53,12,53,1068,9,53,1,53,1,
		53,1,54,3,54,1073,8,54,1,54,1,54,4,54,1077,8,54,11,54,12,54,1078,1,54,
		3,54,1082,8,54,1,54,1,54,4,54,1086,8,54,11,54,12,54,1087,1,54,3,54,1091,
		8,54,1,54,1,54,4,54,1095,8,54,11,54,12,54,1096,1,54,1,54,4,54,1101,8,54,
		11,54,12,54,1102,3,54,1105,8,54,1,55,3,55,1108,8,55,1,55,1,55,1,55,3,55,
		1113,8,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,5,56,1124,8,56,
		10,56,12,56,1127,9,56,1,56,1,56,1,56,5,56,1132,8,56,10,56,12,56,1135,9,
		56,1,56,1,56,5,56,1139,8,56,10,56,12,56,1142,9,56,3,56,1144,8,56,1,57,
		1,57,1,57,1,57,1,57,1,57,3,57,1152,8,57,1,58,1,58,1,58,1,58,5,58,1158,
		8,58,10,58,12,58,1161,9,58,1,59,1,59,1,59,1,59,5,59,1167,8,59,10,59,12,
		59,1170,9,59,1,60,1,60,1,60,5,60,1175,8,60,10,60,12,60,1178,9,60,1,60,
		5,60,1181,8,60,10,60,12,60,1184,9,60,1,60,3,60,1187,8,60,1,61,3,61,1190,
		8,61,1,61,5,61,1193,8,61,10,61,12,61,1196,9,61,1,61,1,61,1,62,3,62,1201,
		8,62,1,62,1,62,1,62,1,62,3,62,1207,8,62,1,63,1,63,3,63,1211,8,63,1,63,
		3,63,1214,8,63,1,64,5,64,1217,8,64,10,64,12,64,1220,9,64,1,64,1,64,3,64,
		1224,8,64,1,64,1,64,1,65,1,65,1,65,1,65,1,66,3,66,1233,8,66,1,66,5,66,
		1236,8,66,10,66,12,66,1239,9,66,1,66,3,66,1242,8,66,1,67,1,67,3,67,1246,
		8,67,1,68,1,68,1,68,1,68,1,69,3,69,1253,8,69,1,69,5,69,1256,8,69,10,69,
		12,69,1259,9,69,1,70,1,70,3,70,1263,8,70,1,70,1,70,5,70,1267,8,70,10,70,
		12,70,1270,9,70,1,70,1,70,5,70,1274,8,70,10,70,12,70,1277,9,70,1,70,1,
		70,3,70,1281,8,70,1,71,1,71,5,71,1285,8,71,10,71,12,71,1288,9,71,1,71,
		1,71,5,71,1292,8,71,10,71,12,71,1295,9,71,1,71,1,71,1,71,3,71,1300,8,71,
		1,71,3,71,1303,8,71,1,71,1,71,1,71,3,71,1308,8,71,1,71,1,71,1,71,1,71,
		1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1324,8,71,1,72,
		1,72,3,72,1328,8,72,1,72,5,72,1331,8,72,10,72,12,72,1334,9,72,1,73,1,73,
		1,73,1,73,3,73,1340,8,73,1,74,1,74,1,74,1,74,1,74,3,74,1347,8,74,1,75,
		1,75,1,75,1,75,1,76,1,76,1,76,3,76,1356,8,76,5,76,1358,8,76,10,76,12,76,
		1361,9,76,1,76,1,76,3,76,1365,8,76,4,76,1367,8,76,11,76,12,76,1368,3,76,
		1371,8,76,1,77,1,77,3,77,1375,8,77,1,78,1,78,1,78,3,78,1380,8,78,5,78,
		1382,8,78,10,78,12,78,1385,9,78,1,78,1,78,3,78,1389,8,78,1,79,1,79,1,79,
		1,80,1,80,3,80,1396,8,80,1,80,1,80,1,81,1,81,1,81,3,81,1403,8,81,1,81,
		1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1428,8,82,10,82,12,82,1431,
		9,82,1,82,1,82,1,82,1,82,1,82,3,82,1438,8,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,
		1500,8,82,10,82,12,82,1503,9,82,1,82,1,82,5,82,1507,8,82,10,82,12,82,1510,
		9,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1518,8,82,10,82,12,82,1521,9,82,
		1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,
		1536,8,83,1,83,1,83,1,83,1,83,3,83,1542,8,83,1,83,1,83,1,83,1,83,3,83,
		1548,8,83,1,83,5,83,1551,8,83,10,83,12,83,1554,9,83,1,84,1,84,1,84,3,84,
		1559,8,84,1,85,1,85,4,85,1563,8,85,11,85,12,85,1564,1,85,1,85,5,85,1569,
		8,85,10,85,12,85,1572,9,85,3,85,1574,8,85,1,86,1,86,1,86,1,87,1,87,1,87,
		3,87,1582,8,87,1,88,1,88,1,88,1,88,5,88,1588,8,88,10,88,12,88,1591,9,88,
		1,88,5,88,1594,8,88,10,88,12,88,1597,9,88,3,88,1599,8,88,1,88,1,88,1,89,
		1,89,1,89,3,89,1606,8,89,1,89,1,89,3,89,1610,8,89,1,89,1,89,1,89,3,89,
		1615,8,89,1,89,3,89,1618,8,89,1,89,1,89,3,89,1622,8,89,1,89,1,89,3,89,
		1626,8,89,3,89,1628,8,89,1,89,1,89,3,89,1632,8,89,1,90,1,90,1,90,3,90,
		1637,8,90,1,91,1,91,1,92,1,92,1,92,1,92,3,92,1645,8,92,1,93,1,93,1,94,
		1,94,1,95,1,95,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,98,1,98,3,98,
		1663,8,98,1,99,1,99,1,100,1,100,1,100,1,100,3,100,1671,8,100,1,101,1,101,
		1,102,1,102,1,103,4,103,1678,8,103,11,103,12,103,1679,1,103,3,103,1683,
		8,103,1,103,0,2,164,166,104,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
		32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
		80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
		156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
		192,194,196,198,200,202,204,206,0,18,1,0,153,160,1,0,131,133,3,0,113,113,
		130,130,161,161,2,0,34,34,117,117,1,0,35,37,1,0,31,32,1,0,42,44,1,0,45,
		48,1,0,49,52,2,0,57,57,116,116,2,0,58,58,118,118,2,0,21,21,59,73,3,0,9,
		9,75,76,162,163,1,0,78,82,1,0,83,86,5,0,92,92,107,107,120,124,127,127,
		161,161,2,0,3,3,15,15,8,0,76,76,87,91,93,99,104,105,108,119,123,123,125,
		126,128,133,1909,0,208,1,0,0,0,2,212,1,0,0,0,4,233,1,0,0,0,6,284,1,0,0,
		0,8,310,1,0,0,0,10,312,1,0,0,0,12,316,1,0,0,0,14,332,1,0,0,0,16,394,1,
		0,0,0,18,399,1,0,0,0,20,415,1,0,0,0,22,419,1,0,0,0,24,423,1,0,0,0,26,436,
		1,0,0,0,28,438,1,0,0,0,30,455,1,0,0,0,32,462,1,0,0,0,34,464,1,0,0,0,36,
		466,1,0,0,0,38,471,1,0,0,0,40,477,1,0,0,0,42,480,1,0,0,0,44,496,1,0,0,
		0,46,505,1,0,0,0,48,507,1,0,0,0,50,524,1,0,0,0,52,531,1,0,0,0,54,533,1,
		0,0,0,56,547,1,0,0,0,58,553,1,0,0,0,60,559,1,0,0,0,62,561,1,0,0,0,64,766,
		1,0,0,0,66,811,1,0,0,0,68,824,1,0,0,0,70,837,1,0,0,0,72,839,1,0,0,0,74,
		843,1,0,0,0,76,848,1,0,0,0,78,864,1,0,0,0,80,895,1,0,0,0,82,899,1,0,0,
		0,84,917,1,0,0,0,86,928,1,0,0,0,88,938,1,0,0,0,90,940,1,0,0,0,92,944,1,
		0,0,0,94,970,1,0,0,0,96,1006,1,0,0,0,98,1008,1,0,0,0,100,1016,1,0,0,0,
		102,1025,1,0,0,0,104,1035,1,0,0,0,106,1048,1,0,0,0,108,1104,1,0,0,0,110,
		1107,1,0,0,0,112,1143,1,0,0,0,114,1151,1,0,0,0,116,1153,1,0,0,0,118,1162,
		1,0,0,0,120,1171,1,0,0,0,122,1194,1,0,0,0,124,1200,1,0,0,0,126,1213,1,
		0,0,0,128,1218,1,0,0,0,130,1227,1,0,0,0,132,1237,1,0,0,0,134,1243,1,0,
		0,0,136,1247,1,0,0,0,138,1257,1,0,0,0,140,1280,1,0,0,0,142,1323,1,0,0,
		0,144,1327,1,0,0,0,146,1339,1,0,0,0,148,1346,1,0,0,0,150,1348,1,0,0,0,
		152,1370,1,0,0,0,154,1372,1,0,0,0,156,1376,1,0,0,0,158,1390,1,0,0,0,160,
		1393,1,0,0,0,162,1399,1,0,0,0,164,1437,1,0,0,0,166,1535,1,0,0,0,168,1558,
		1,0,0,0,170,1573,1,0,0,0,172,1575,1,0,0,0,174,1581,1,0,0,0,176,1583,1,
		0,0,0,178,1631,1,0,0,0,180,1636,1,0,0,0,182,1638,1,0,0,0,184,1644,1,0,
		0,0,186,1646,1,0,0,0,188,1648,1,0,0,0,190,1650,1,0,0,0,192,1652,1,0,0,
		0,194,1656,1,0,0,0,196,1662,1,0,0,0,198,1664,1,0,0,0,200,1670,1,0,0,0,
		202,1672,1,0,0,0,204,1674,1,0,0,0,206,1682,1,0,0,0,208,209,3,2,1,0,209,
		210,5,0,0,1,210,1,1,0,0,0,211,213,3,4,2,0,212,211,1,0,0,0,213,214,1,0,
		0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,3,1,0,0,0,216,217,3,104,52,0,217,
		218,3,206,103,0,218,234,1,0,0,0,219,220,3,102,51,0,220,221,3,206,103,0,
		221,234,1,0,0,0,222,234,3,6,3,0,223,234,3,8,4,0,224,234,3,10,5,0,225,234,
		3,12,6,0,226,234,3,14,7,0,227,234,3,16,8,0,228,230,5,166,0,0,229,228,1,
		0,0,0,230,231,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,
		233,216,1,0,0,0,233,219,1,0,0,0,233,222,1,0,0,0,233,223,1,0,0,0,233,224,
		1,0,0,0,233,225,1,0,0,0,233,226,1,0,0,0,233,227,1,0,0,0,233,229,1,0,0,
		0,234,5,1,0,0,0,235,236,5,138,0,0,236,237,3,188,94,0,237,238,3,206,103,
		0,238,285,1,0,0,0,239,240,5,139,0,0,240,241,5,172,0,0,241,285,3,206,103,
		0,242,244,5,140,0,0,243,245,5,172,0,0,244,243,1,0,0,0,244,245,1,0,0,0,
		245,246,1,0,0,0,246,285,3,206,103,0,247,248,5,137,0,0,248,249,3,188,94,
		0,249,250,3,206,103,0,250,285,1,0,0,0,251,252,5,134,0,0,252,253,5,172,
		0,0,253,285,3,206,103,0,254,255,5,135,0,0,255,256,5,172,0,0,256,285,3,
		206,103,0,257,258,5,142,0,0,258,259,3,188,94,0,259,260,3,206,103,0,260,
		285,1,0,0,0,261,264,5,143,0,0,262,265,3,188,94,0,263,265,3,186,93,0,264,
		262,1,0,0,0,264,263,1,0,0,0,264,265,1,0,0,0,265,266,1,0,0,0,266,285,3,
		206,103,0,267,268,5,144,0,0,268,269,3,188,94,0,269,270,3,206,103,0,270,
		285,1,0,0,0,271,272,5,145,0,0,272,285,3,206,103,0,273,274,5,146,0,0,274,
		275,5,172,0,0,275,285,3,206,103,0,276,277,5,147,0,0,277,278,5,172,0,0,
		278,285,3,206,103,0,279,280,5,151,0,0,280,285,3,206,103,0,281,282,7,0,
		0,0,282,283,5,172,0,0,283,285,3,206,103,0,284,235,1,0,0,0,284,239,1,0,
		0,0,284,242,1,0,0,0,284,247,1,0,0,0,284,251,1,0,0,0,284,254,1,0,0,0,284,
		257,1,0,0,0,284,261,1,0,0,0,284,267,1,0,0,0,284,271,1,0,0,0,284,273,1,
		0,0,0,284,276,1,0,0,0,284,279,1,0,0,0,284,281,1,0,0,0,285,7,1,0,0,0,286,
		288,5,136,0,0,287,289,3,164,82,0,288,287,1,0,0,0,288,289,1,0,0,0,289,290,
		1,0,0,0,290,311,3,206,103,0,291,292,5,152,0,0,292,311,3,206,103,0,293,
		295,5,141,0,0,294,296,3,188,94,0,295,294,1,0,0,0,295,296,1,0,0,0,296,297,
		1,0,0,0,297,311,3,206,103,0,298,301,5,149,0,0,299,302,3,188,94,0,300,302,
		3,186,93,0,301,299,1,0,0,0,301,300,1,0,0,0,301,302,1,0,0,0,302,303,1,0,
		0,0,303,311,3,206,103,0,304,307,5,148,0,0,305,308,3,188,94,0,306,308,3,
		186,93,0,307,305,1,0,0,0,307,306,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,
		0,309,311,3,206,103,0,310,286,1,0,0,0,310,291,1,0,0,0,310,293,1,0,0,0,
		310,298,1,0,0,0,310,304,1,0,0,0,311,9,1,0,0,0,312,313,5,12,0,0,313,314,
		5,11,0,0,314,315,3,206,103,0,315,11,1,0,0,0,316,321,5,10,0,0,317,318,5,
		166,0,0,318,320,5,10,0,0,319,317,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,
		0,321,322,1,0,0,0,322,330,1,0,0,0,323,321,1,0,0,0,324,325,5,169,0,0,325,
		331,3,206,103,0,326,327,3,102,51,0,327,328,3,206,103,0,328,331,1,0,0,0,
		329,331,3,16,8,0,330,324,1,0,0,0,330,326,1,0,0,0,330,329,1,0,0,0,331,13,
		1,0,0,0,332,337,5,12,0,0,333,334,5,166,0,0,334,336,5,12,0,0,335,333,1,
		0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,343,1,0,0,0,
		339,337,1,0,0,0,340,342,5,166,0,0,341,340,1,0,0,0,342,345,1,0,0,0,343,
		341,1,0,0,0,343,344,1,0,0,0,344,350,1,0,0,0,345,343,1,0,0,0,346,347,3,
		102,51,0,347,348,3,206,103,0,348,351,1,0,0,0,349,351,3,16,8,0,350,346,
		1,0,0,0,350,349,1,0,0,0,351,15,1,0,0,0,352,354,3,18,9,0,353,355,3,206,
		103,0,354,353,1,0,0,0,354,355,1,0,0,0,355,395,1,0,0,0,356,357,3,104,52,
		0,357,358,3,206,103,0,358,395,1,0,0,0,359,360,3,22,11,0,360,361,3,206,
		103,0,361,395,1,0,0,0,362,363,3,60,30,0,363,364,3,206,103,0,364,395,1,
		0,0,0,365,395,3,62,31,0,366,367,3,86,43,0,367,368,5,166,0,0,368,370,1,
		0,0,0,369,366,1,0,0,0,369,370,1,0,0,0,370,371,1,0,0,0,371,395,3,64,32,
		0,372,373,3,68,34,0,373,374,3,206,103,0,374,395,1,0,0,0,375,376,3,70,35,
		0,376,377,3,206,103,0,377,395,1,0,0,0,378,379,3,72,36,0,379,380,3,206,
		103,0,380,395,1,0,0,0,381,382,3,86,43,0,382,383,3,206,103,0,383,395,1,
		0,0,0,384,385,3,88,44,0,385,386,3,206,103,0,386,395,1,0,0,0,387,388,3,
		76,38,0,388,389,3,206,103,0,389,395,1,0,0,0,390,391,3,90,45,0,391,392,
		3,206,103,0,392,395,1,0,0,0,393,395,3,92,46,0,394,352,1,0,0,0,394,356,
		1,0,0,0,394,359,1,0,0,0,394,362,1,0,0,0,394,365,1,0,0,0,394,369,1,0,0,
		0,394,372,1,0,0,0,394,375,1,0,0,0,394,378,1,0,0,0,394,381,1,0,0,0,394,
		384,1,0,0,0,394,387,1,0,0,0,394,390,1,0,0,0,394,393,1,0,0,0,395,17,1,0,
		0,0,396,398,5,166,0,0,397,396,1,0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,
		399,400,1,0,0,0,400,402,1,0,0,0,401,399,1,0,0,0,402,404,5,17,0,0,403,405,
		3,20,10,0,404,403,1,0,0,0,404,405,1,0,0,0,405,409,1,0,0,0,406,408,5,166,
		0,0,407,406,1,0,0,0,408,411,1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,
		412,1,0,0,0,411,409,1,0,0,0,412,413,5,18,0,0,413,19,1,0,0,0,414,416,3,
		16,8,0,415,414,1,0,0,0,416,417,1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,
		418,21,1,0,0,0,419,421,7,1,0,0,420,422,3,54,27,0,421,420,1,0,0,0,421,422,
		1,0,0,0,422,23,1,0,0,0,423,424,5,126,0,0,424,425,3,26,13,0,425,25,1,0,
		0,0,426,428,3,36,18,0,427,426,1,0,0,0,427,428,1,0,0,0,428,431,1,0,0,0,
		429,432,3,38,19,0,430,432,3,28,14,0,431,429,1,0,0,0,431,430,1,0,0,0,432,
		433,1,0,0,0,433,434,3,40,20,0,434,437,1,0,0,0,435,437,5,163,0,0,436,427,
		1,0,0,0,436,435,1,0,0,0,437,27,1,0,0,0,438,444,5,17,0,0,439,440,3,30,15,
		0,440,441,5,20,0,0,441,443,1,0,0,0,442,439,1,0,0,0,443,446,1,0,0,0,444,
		442,1,0,0,0,444,445,1,0,0,0,445,451,1,0,0,0,446,444,1,0,0,0,447,449,3,
		30,15,0,448,450,5,20,0,0,449,448,1,0,0,0,449,450,1,0,0,0,450,452,1,0,0,
		0,451,447,1,0,0,0,451,452,1,0,0,0,452,453,1,0,0,0,453,454,5,18,0,0,454,
		29,1,0,0,0,455,458,3,32,16,0,456,457,5,128,0,0,457,459,3,34,17,0,458,456,
		1,0,0,0,458,459,1,0,0,0,459,31,1,0,0,0,460,463,3,196,98,0,461,463,5,163,
		0,0,462,460,1,0,0,0,462,461,1,0,0,0,463,33,1,0,0,0,464,465,7,2,0,0,465,
		35,1,0,0,0,466,467,3,42,21,0,467,468,5,20,0,0,468,37,1,0,0,0,469,472,5,
		35,0,0,470,472,3,196,98,0,471,469,1,0,0,0,471,470,1,0,0,0,472,475,1,0,
		0,0,473,474,5,128,0,0,474,476,3,196,98,0,475,473,1,0,0,0,475,476,1,0,0,
		0,476,39,1,0,0,0,477,478,5,127,0,0,478,479,5,163,0,0,479,41,1,0,0,0,480,
		483,3,196,98,0,481,482,5,128,0,0,482,484,3,196,98,0,483,481,1,0,0,0,483,
		484,1,0,0,0,484,43,1,0,0,0,485,487,5,125,0,0,486,488,5,92,0,0,487,486,
		1,0,0,0,487,488,1,0,0,0,488,491,1,0,0,0,489,492,3,46,23,0,490,492,3,52,
		26,0,491,489,1,0,0,0,491,490,1,0,0,0,492,497,1,0,0,0,493,494,5,125,0,0,
		494,495,5,92,0,0,495,497,3,164,82,0,496,485,1,0,0,0,496,493,1,0,0,0,497,
		45,1,0,0,0,498,499,3,38,19,0,499,500,3,40,20,0,500,506,1,0,0,0,501,503,
		3,48,24,0,502,504,3,40,20,0,503,502,1,0,0,0,503,504,1,0,0,0,504,506,1,
		0,0,0,505,498,1,0,0,0,505,501,1,0,0,0,506,47,1,0,0,0,507,513,5,17,0,0,
		508,509,3,50,25,0,509,510,5,20,0,0,510,512,1,0,0,0,511,508,1,0,0,0,512,
		515,1,0,0,0,513,511,1,0,0,0,513,514,1,0,0,0,514,520,1,0,0,0,515,513,1,
		0,0,0,516,518,3,50,25,0,517,519,5,20,0,0,518,517,1,0,0,0,518,519,1,0,0,
		0,519,521,1,0,0,0,520,516,1,0,0,0,520,521,1,0,0,0,521,522,1,0,0,0,522,
		523,5,18,0,0,523,49,1,0,0,0,524,527,3,32,16,0,525,526,5,128,0,0,526,528,
		3,32,16,0,527,525,1,0,0,0,527,528,1,0,0,0,528,51,1,0,0,0,529,532,3,104,
		52,0,530,532,3,102,51,0,531,529,1,0,0,0,531,530,1,0,0,0,532,53,1,0,0,0,
		533,544,3,56,28,0,534,536,5,166,0,0,535,534,1,0,0,0,536,539,1,0,0,0,537,
		535,1,0,0,0,537,538,1,0,0,0,538,540,1,0,0,0,539,537,1,0,0,0,540,541,5,
		20,0,0,541,543,3,56,28,0,542,537,1,0,0,0,543,546,1,0,0,0,544,542,1,0,0,
		0,544,545,1,0,0,0,545,55,1,0,0,0,546,544,1,0,0,0,547,551,3,174,87,0,548,
		549,3,182,91,0,549,550,3,164,82,0,550,552,1,0,0,0,551,548,1,0,0,0,551,
		552,1,0,0,0,552,57,1,0,0,0,553,554,4,29,0,0,554,555,3,164,82,0,555,557,
		4,29,1,0,556,558,3,152,76,0,557,556,1,0,0,0,557,558,1,0,0,0,558,59,1,0,
		0,0,559,560,3,156,78,0,560,61,1,0,0,0,561,562,5,108,0,0,562,566,3,164,
		82,0,563,565,5,166,0,0,564,563,1,0,0,0,565,568,1,0,0,0,566,564,1,0,0,0,
		566,567,1,0,0,0,567,569,1,0,0,0,568,566,1,0,0,0,569,584,3,16,8,0,570,572,
		5,166,0,0,571,570,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,1,0,
		0,0,574,576,1,0,0,0,575,573,1,0,0,0,576,580,5,93,0,0,577,579,5,166,0,0,
		578,577,1,0,0,0,579,582,1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,583,
		1,0,0,0,582,580,1,0,0,0,583,585,3,16,8,0,584,573,1,0,0,0,584,585,1,0,0,
		0,585,63,1,0,0,0,586,588,5,104,0,0,587,589,3,164,82,0,588,587,1,0,0,0,
		588,589,1,0,0,0,589,593,1,0,0,0,590,592,5,166,0,0,591,590,1,0,0,0,592,
		595,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,596,1,0,0,0,595,593,1,
		0,0,0,596,601,3,16,8,0,597,598,5,105,0,0,598,599,3,164,82,0,599,600,5,
		166,0,0,600,602,1,0,0,0,601,597,1,0,0,0,601,602,1,0,0,0,602,605,1,0,0,
		0,603,604,5,93,0,0,604,606,3,16,8,0,605,603,1,0,0,0,605,606,1,0,0,0,606,
		767,1,0,0,0,607,608,5,103,0,0,608,617,3,164,82,0,609,611,5,166,0,0,610,
		609,1,0,0,0,611,614,1,0,0,0,612,610,1,0,0,0,612,613,1,0,0,0,613,615,1,
		0,0,0,614,612,1,0,0,0,615,616,5,20,0,0,616,618,3,164,82,0,617,612,1,0,
		0,0,617,618,1,0,0,0,618,622,1,0,0,0,619,621,5,166,0,0,620,619,1,0,0,0,
		621,624,1,0,0,0,622,620,1,0,0,0,622,623,1,0,0,0,623,625,1,0,0,0,624,622,
		1,0,0,0,625,630,3,16,8,0,626,627,5,105,0,0,627,628,3,164,82,0,628,629,
		5,166,0,0,629,631,1,0,0,0,630,626,1,0,0,0,630,631,1,0,0,0,631,634,1,0,
		0,0,632,633,5,93,0,0,633,635,3,16,8,0,634,632,1,0,0,0,634,635,1,0,0,0,
		635,767,1,0,0,0,636,637,5,102,0,0,637,646,3,164,82,0,638,640,5,166,0,0,
		639,638,1,0,0,0,640,643,1,0,0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,644,
		1,0,0,0,643,641,1,0,0,0,644,645,5,20,0,0,645,647,3,164,82,0,646,641,1,
		0,0,0,646,647,1,0,0,0,647,651,1,0,0,0,648,650,5,166,0,0,649,648,1,0,0,
		0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,654,1,0,0,0,653,
		651,1,0,0,0,654,659,3,16,8,0,655,656,5,105,0,0,656,657,3,164,82,0,657,
		658,5,166,0,0,658,660,1,0,0,0,659,655,1,0,0,0,659,660,1,0,0,0,660,663,
		1,0,0,0,661,662,5,93,0,0,662,664,3,16,8,0,663,661,1,0,0,0,663,664,1,0,
		0,0,664,767,1,0,0,0,665,666,5,101,0,0,666,675,3,164,82,0,667,669,5,166,
		0,0,668,667,1,0,0,0,669,672,1,0,0,0,670,668,1,0,0,0,670,671,1,0,0,0,671,
		673,1,0,0,0,672,670,1,0,0,0,673,674,5,20,0,0,674,676,3,164,82,0,675,670,
		1,0,0,0,675,676,1,0,0,0,676,680,1,0,0,0,677,679,5,166,0,0,678,677,1,0,
		0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,683,1,0,0,0,682,
		680,1,0,0,0,683,688,3,16,8,0,684,685,5,105,0,0,685,686,3,164,82,0,686,
		687,5,166,0,0,687,689,1,0,0,0,688,684,1,0,0,0,688,689,1,0,0,0,689,692,
		1,0,0,0,690,691,5,93,0,0,691,693,3,16,8,0,692,690,1,0,0,0,692,693,1,0,
		0,0,693,767,1,0,0,0,694,695,5,100,0,0,695,708,3,164,82,0,696,698,5,166,
		0,0,697,696,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,699,700,1,0,0,0,700,
		702,1,0,0,0,701,699,1,0,0,0,702,704,5,20,0,0,703,705,3,164,82,0,704,703,
		1,0,0,0,704,705,1,0,0,0,705,707,1,0,0,0,706,699,1,0,0,0,707,710,1,0,0,
		0,708,706,1,0,0,0,708,709,1,0,0,0,709,714,1,0,0,0,710,708,1,0,0,0,711,
		713,5,166,0,0,712,711,1,0,0,0,713,716,1,0,0,0,714,712,1,0,0,0,714,715,
		1,0,0,0,715,717,1,0,0,0,716,714,1,0,0,0,717,722,3,16,8,0,718,719,5,105,
		0,0,719,720,3,164,82,0,720,721,5,166,0,0,721,723,1,0,0,0,722,718,1,0,0,
		0,722,723,1,0,0,0,723,726,1,0,0,0,724,725,5,93,0,0,725,727,3,16,8,0,726,
		724,1,0,0,0,726,727,1,0,0,0,727,767,1,0,0,0,728,729,5,99,0,0,729,733,3,
		164,82,0,730,732,5,166,0,0,731,730,1,0,0,0,732,735,1,0,0,0,733,731,1,0,
		0,0,733,734,1,0,0,0,734,736,1,0,0,0,735,733,1,0,0,0,736,741,3,16,8,0,737,
		738,5,105,0,0,738,739,3,164,82,0,739,740,5,166,0,0,740,742,1,0,0,0,741,
		737,1,0,0,0,741,742,1,0,0,0,742,745,1,0,0,0,743,744,5,93,0,0,744,746,3,
		16,8,0,745,743,1,0,0,0,745,746,1,0,0,0,746,767,1,0,0,0,747,748,5,98,0,
		0,748,752,3,66,33,0,749,751,5,166,0,0,750,749,1,0,0,0,751,754,1,0,0,0,
		752,750,1,0,0,0,752,753,1,0,0,0,753,755,1,0,0,0,754,752,1,0,0,0,755,760,
		3,16,8,0,756,757,5,105,0,0,757,758,3,164,82,0,758,759,5,166,0,0,759,761,
		1,0,0,0,760,756,1,0,0,0,760,761,1,0,0,0,761,764,1,0,0,0,762,763,5,93,0,
		0,763,765,3,16,8,0,764,762,1,0,0,0,764,765,1,0,0,0,765,767,1,0,0,0,766,
		586,1,0,0,0,766,607,1,0,0,0,766,636,1,0,0,0,766,665,1,0,0,0,766,694,1,
		0,0,0,766,728,1,0,0,0,766,747,1,0,0,0,767,65,1,0,0,0,768,770,3,174,87,
		0,769,768,1,0,0,0,769,770,1,0,0,0,770,783,1,0,0,0,771,773,5,166,0,0,772,
		771,1,0,0,0,773,776,1,0,0,0,774,772,1,0,0,0,774,775,1,0,0,0,775,777,1,
		0,0,0,776,774,1,0,0,0,777,779,5,20,0,0,778,780,3,174,87,0,779,778,1,0,
		0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,774,1,0,0,0,782,785,1,0,0,0,783,
		781,1,0,0,0,783,784,1,0,0,0,784,786,1,0,0,0,785,783,1,0,0,0,786,787,5,
		111,0,0,787,812,3,164,82,0,788,790,3,202,101,0,789,791,3,174,87,0,790,
		789,1,0,0,0,790,791,1,0,0,0,791,804,1,0,0,0,792,794,5,166,0,0,793,792,
		1,0,0,0,794,797,1,0,0,0,795,793,1,0,0,0,795,796,1,0,0,0,796,798,1,0,0,
		0,797,795,1,0,0,0,798,800,5,20,0,0,799,801,3,174,87,0,800,799,1,0,0,0,
		800,801,1,0,0,0,801,803,1,0,0,0,802,795,1,0,0,0,803,806,1,0,0,0,804,802,
		1,0,0,0,804,805,1,0,0,0,805,807,1,0,0,0,806,804,1,0,0,0,807,808,5,111,
		0,0,808,809,3,164,82,0,809,810,5,16,0,0,810,812,1,0,0,0,811,769,1,0,0,
		0,811,788,1,0,0,0,812,67,1,0,0,0,813,815,5,97,0,0,814,816,3,146,73,0,815,
		814,1,0,0,0,815,816,1,0,0,0,816,825,1,0,0,0,817,822,5,97,0,0,818,819,3,
		202,101,0,819,820,3,146,73,0,820,821,5,16,0,0,821,823,1,0,0,0,822,818,
		1,0,0,0,822,823,1,0,0,0,823,825,1,0,0,0,824,813,1,0,0,0,824,817,1,0,0,
		0,825,69,1,0,0,0,826,828,5,87,0,0,827,829,3,146,73,0,828,827,1,0,0,0,828,
		829,1,0,0,0,829,838,1,0,0,0,830,835,5,87,0,0,831,832,3,202,101,0,832,833,
		3,146,73,0,833,834,5,16,0,0,834,836,1,0,0,0,835,831,1,0,0,0,835,836,1,
		0,0,0,836,838,1,0,0,0,837,826,1,0,0,0,837,830,1,0,0,0,838,71,1,0,0,0,839,
		841,5,96,0,0,840,842,3,164,82,0,841,840,1,0,0,0,841,842,1,0,0,0,842,73,
		1,0,0,0,843,846,5,113,0,0,844,845,4,37,2,0,845,847,3,164,82,0,846,844,
		1,0,0,0,846,847,1,0,0,0,847,75,1,0,0,0,848,850,5,90,0,0,849,851,3,164,
		82,0,850,849,1,0,0,0,850,851,1,0,0,0,851,854,1,0,0,0,852,853,5,20,0,0,
		853,855,3,184,92,0,854,852,1,0,0,0,854,855,1,0,0,0,855,859,1,0,0,0,856,
		858,5,166,0,0,857,856,1,0,0,0,858,861,1,0,0,0,859,857,1,0,0,0,859,860,
		1,0,0,0,860,862,1,0,0,0,861,859,1,0,0,0,862,863,3,78,39,0,863,77,1,0,0,
		0,864,866,5,17,0,0,865,867,3,80,40,0,866,865,1,0,0,0,866,867,1,0,0,0,867,
		884,1,0,0,0,868,870,5,166,0,0,869,868,1,0,0,0,870,873,1,0,0,0,871,869,
		1,0,0,0,871,872,1,0,0,0,872,874,1,0,0,0,873,871,1,0,0,0,874,878,3,84,42,
		0,875,877,5,166,0,0,876,875,1,0,0,0,877,880,1,0,0,0,878,876,1,0,0,0,878,
		879,1,0,0,0,879,882,1,0,0,0,880,878,1,0,0,0,881,883,3,80,40,0,882,881,
		1,0,0,0,882,883,1,0,0,0,883,885,1,0,0,0,884,871,1,0,0,0,884,885,1,0,0,
		0,885,889,1,0,0,0,886,888,5,166,0,0,887,886,1,0,0,0,888,891,1,0,0,0,889,
		887,1,0,0,0,889,890,1,0,0,0,890,892,1,0,0,0,891,889,1,0,0,0,892,893,5,
		18,0,0,893,79,1,0,0,0,894,896,3,82,41,0,895,894,1,0,0,0,896,897,1,0,0,
		0,897,895,1,0,0,0,897,898,1,0,0,0,898,81,1,0,0,0,899,900,5,91,0,0,900,
		901,3,156,78,0,901,905,5,24,0,0,902,904,5,166,0,0,903,902,1,0,0,0,904,
		907,1,0,0,0,905,903,1,0,0,0,905,906,1,0,0,0,906,909,1,0,0,0,907,905,1,
		0,0,0,908,910,3,20,10,0,909,908,1,0,0,0,909,910,1,0,0,0,910,914,1,0,0,
		0,911,913,5,166,0,0,912,911,1,0,0,0,913,916,1,0,0,0,914,912,1,0,0,0,914,
		915,1,0,0,0,915,83,1,0,0,0,916,914,1,0,0,0,917,918,5,92,0,0,918,922,5,
		24,0,0,919,921,5,166,0,0,920,919,1,0,0,0,921,924,1,0,0,0,922,920,1,0,0,
		0,922,923,1,0,0,0,923,926,1,0,0,0,924,922,1,0,0,0,925,927,3,20,10,0,926,
		925,1,0,0,0,926,927,1,0,0,0,927,85,1,0,0,0,928,929,5,161,0,0,929,930,5,
		24,0,0,930,87,1,0,0,0,931,932,5,119,0,0,932,939,3,146,73,0,933,934,5,119,
		0,0,934,935,3,202,101,0,935,936,3,146,73,0,936,937,5,16,0,0,937,939,1,
		0,0,0,938,931,1,0,0,0,938,933,1,0,0,0,939,89,1,0,0,0,940,941,5,109,0,0,
		941,942,4,45,3,0,942,943,3,164,82,0,943,91,1,0,0,0,944,948,5,112,0,0,945,
		947,5,166,0,0,946,945,1,0,0,0,947,950,1,0,0,0,948,946,1,0,0,0,948,949,
		1,0,0,0,949,951,1,0,0,0,950,948,1,0,0,0,951,955,3,16,8,0,952,954,5,166,
		0,0,953,952,1,0,0,0,954,957,1,0,0,0,955,953,1,0,0,0,955,956,1,0,0,0,956,
		961,1,0,0,0,957,955,1,0,0,0,958,960,3,94,47,0,959,958,1,0,0,0,960,963,
		1,0,0,0,961,959,1,0,0,0,961,962,1,0,0,0,962,965,1,0,0,0,963,961,1,0,0,
		0,964,966,3,98,49,0,965,964,1,0,0,0,965,966,1,0,0,0,966,968,1,0,0,0,967,
		969,3,100,50,0,968,967,1,0,0,0,968,969,1,0,0,0,969,93,1,0,0,0,970,972,
		5,94,0,0,971,973,3,96,48,0,972,971,1,0,0,0,972,973,1,0,0,0,973,977,1,0,
		0,0,974,976,5,166,0,0,975,974,1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,
		977,978,1,0,0,0,978,980,1,0,0,0,979,977,1,0,0,0,980,984,3,16,8,0,981,983,
		5,166,0,0,982,981,1,0,0,0,983,986,1,0,0,0,984,982,1,0,0,0,984,985,1,0,
		0,0,985,95,1,0,0,0,986,984,1,0,0,0,987,988,5,128,0,0,988,1007,3,198,99,
		0,989,994,3,174,87,0,990,992,5,128,0,0,991,990,1,0,0,0,991,992,1,0,0,0,
		992,993,1,0,0,0,993,995,3,198,99,0,994,991,1,0,0,0,994,995,1,0,0,0,995,
		1007,1,0,0,0,996,997,3,202,101,0,997,1002,3,174,87,0,998,1000,5,128,0,
		0,999,998,1,0,0,0,999,1000,1,0,0,0,1000,1001,1,0,0,0,1001,1003,3,198,99,
		0,1002,999,1,0,0,0,1002,1003,1,0,0,0,1003,1004,1,0,0,0,1004,1005,5,16,
		0,0,1005,1007,1,0,0,0,1006,987,1,0,0,0,1006,989,1,0,0,0,1006,996,1,0,0,
		0,1007,97,1,0,0,0,1008,1009,5,93,0,0,1009,1013,3,16,8,0,1010,1012,5,166,
		0,0,1011,1010,1,0,0,0,1012,1015,1,0,0,0,1013,1011,1,0,0,0,1013,1014,1,
		0,0,0,1014,99,1,0,0,0,1015,1013,1,0,0,0,1016,1017,5,95,0,0,1017,1021,3,
		16,8,0,1018,1020,5,166,0,0,1019,1018,1,0,0,0,1020,1023,1,0,0,0,1021,1019,
		1,0,0,0,1021,1022,1,0,0,0,1022,101,1,0,0,0,1023,1021,1,0,0,0,1024,1026,
		5,129,0,0,1025,1024,1,0,0,0,1025,1026,1,0,0,0,1026,1027,1,0,0,0,1027,1028,
		3,198,99,0,1028,1030,5,3,0,0,1029,1031,3,122,61,0,1030,1029,1,0,0,0,1030,
		1031,1,0,0,0,1031,1032,1,0,0,0,1032,1033,5,16,0,0,1033,1034,3,180,90,0,
		1034,103,1,0,0,0,1035,1036,5,120,0,0,1036,1037,3,198,99,0,1037,1038,3,
		106,53,0,1038,105,1,0,0,0,1039,1040,5,122,0,0,1040,1045,3,198,99,0,1041,
		1042,5,28,0,0,1042,1044,3,198,99,0,1043,1041,1,0,0,0,1044,1047,1,0,0,0,
		1045,1043,1,0,0,0,1045,1046,1,0,0,0,1046,1049,1,0,0,0,1047,1045,1,0,0,
		0,1048,1039,1,0,0,0,1048,1049,1,0,0,0,1049,1053,1,0,0,0,1050,1052,5,166,
		0,0,1051,1050,1,0,0,0,1052,1055,1,0,0,0,1053,1051,1,0,0,0,1053,1054,1,
		0,0,0,1054,1056,1,0,0,0,1055,1053,1,0,0,0,1056,1060,5,17,0,0,1057,1059,
		3,108,54,0,1058,1057,1,0,0,0,1059,1062,1,0,0,0,1060,1058,1,0,0,0,1060,
		1061,1,0,0,0,1061,1066,1,0,0,0,1062,1060,1,0,0,0,1063,1065,5,166,0,0,1064,
		1063,1,0,0,0,1065,1068,1,0,0,0,1066,1064,1,0,0,0,1066,1067,1,0,0,0,1067,
		1069,1,0,0,0,1068,1066,1,0,0,0,1069,1070,5,18,0,0,1070,107,1,0,0,0,1071,
		1073,5,131,0,0,1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,1074,1,0,0,0,1074,
		1076,3,110,55,0,1075,1077,5,166,0,0,1076,1075,1,0,0,0,1077,1078,1,0,0,
		0,1078,1076,1,0,0,0,1078,1079,1,0,0,0,1079,1105,1,0,0,0,1080,1082,5,131,
		0,0,1081,1080,1,0,0,0,1081,1082,1,0,0,0,1082,1083,1,0,0,0,1083,1085,3,
		112,56,0,1084,1086,5,166,0,0,1085,1084,1,0,0,0,1086,1087,1,0,0,0,1087,
		1085,1,0,0,0,1087,1088,1,0,0,0,1088,1105,1,0,0,0,1089,1091,5,131,0,0,1090,
		1089,1,0,0,0,1090,1091,1,0,0,0,1091,1092,1,0,0,0,1092,1094,3,120,60,0,
		1093,1095,5,166,0,0,1094,1093,1,0,0,0,1095,1096,1,0,0,0,1096,1094,1,0,
		0,0,1096,1097,1,0,0,0,1097,1105,1,0,0,0,1098,1100,3,104,52,0,1099,1101,
		5,166,0,0,1100,1099,1,0,0,0,1101,1102,1,0,0,0,1102,1100,1,0,0,0,1102,1103,
		1,0,0,0,1103,1105,1,0,0,0,1104,1072,1,0,0,0,1104,1081,1,0,0,0,1104,1090,
		1,0,0,0,1104,1098,1,0,0,0,1105,109,1,0,0,0,1106,1108,5,129,0,0,1107,1106,
		1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,1109,1110,3,146,73,0,1110,
		1112,5,3,0,0,1111,1113,3,122,61,0,1112,1111,1,0,0,0,1112,1113,1,0,0,0,
		1113,1114,1,0,0,0,1114,1115,5,16,0,0,1115,1116,3,180,90,0,1116,111,1,0,
		0,0,1117,1118,3,114,57,0,1118,1119,5,74,0,0,1119,1120,3,164,82,0,1120,
		1144,1,0,0,0,1121,1125,3,114,57,0,1122,1124,5,166,0,0,1123,1122,1,0,0,
		0,1124,1127,1,0,0,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,1128,1,0,
		0,0,1127,1125,1,0,0,0,1128,1133,5,17,0,0,1129,1132,3,116,58,0,1130,1132,
		3,118,59,0,1131,1129,1,0,0,0,1131,1130,1,0,0,0,1132,1135,1,0,0,0,1133,
		1131,1,0,0,0,1133,1134,1,0,0,0,1134,1136,1,0,0,0,1135,1133,1,0,0,0,1136,
		1140,5,18,0,0,1137,1139,5,166,0,0,1138,1137,1,0,0,0,1139,1142,1,0,0,0,
		1140,1138,1,0,0,0,1140,1141,1,0,0,0,1141,1144,1,0,0,0,1142,1140,1,0,0,
		0,1143,1117,1,0,0,0,1143,1121,1,0,0,0,1144,113,1,0,0,0,1145,1152,3,198,
		99,0,1146,1147,3,198,99,0,1147,1148,5,13,0,0,1148,1149,3,122,61,0,1149,
		1150,5,14,0,0,1150,1152,1,0,0,0,1151,1145,1,0,0,0,1151,1146,1,0,0,0,1152,
		115,1,0,0,0,1153,1154,4,58,4,0,1154,1155,3,198,99,0,1155,1159,3,180,90,
		0,1156,1158,5,166,0,0,1157,1156,1,0,0,0,1158,1161,1,0,0,0,1159,1157,1,
		0,0,0,1159,1160,1,0,0,0,1160,117,1,0,0,0,1161,1159,1,0,0,0,1162,1163,4,
		59,5,0,1163,1164,3,198,99,0,1164,1168,3,180,90,0,1165,1167,5,166,0,0,1166,
		1165,1,0,0,0,1167,1170,1,0,0,0,1168,1166,1,0,0,0,1168,1169,1,0,0,0,1169,
		119,1,0,0,0,1170,1168,1,0,0,0,1171,1186,3,146,73,0,1172,1173,5,21,0,0,
		1173,1175,3,146,73,0,1174,1172,1,0,0,0,1175,1178,1,0,0,0,1176,1174,1,0,
		0,0,1176,1177,1,0,0,0,1177,1182,1,0,0,0,1178,1176,1,0,0,0,1179,1181,5,
		166,0,0,1180,1179,1,0,0,0,1181,1184,1,0,0,0,1182,1180,1,0,0,0,1182,1183,
		1,0,0,0,1183,1185,1,0,0,0,1184,1182,1,0,0,0,1185,1187,3,172,86,0,1186,
		1176,1,0,0,0,1186,1187,1,0,0,0,1187,121,1,0,0,0,1188,1190,3,124,62,0,1189,
		1188,1,0,0,0,1189,1190,1,0,0,0,1190,1191,1,0,0,0,1191,1193,5,20,0,0,1192,
		1189,1,0,0,0,1193,1196,1,0,0,0,1194,1192,1,0,0,0,1194,1195,1,0,0,0,1195,
		1197,1,0,0,0,1196,1194,1,0,0,0,1197,1198,3,126,63,0,1198,123,1,0,0,0,1199,
		1201,5,54,0,0,1200,1199,1,0,0,0,1200,1201,1,0,0,0,1201,1202,1,0,0,0,1202,
		1206,3,174,87,0,1203,1204,5,21,0,0,1204,1207,3,164,82,0,1205,1207,5,22,
		0,0,1206,1203,1,0,0,0,1206,1205,1,0,0,0,1206,1207,1,0,0,0,1207,125,1,0,
		0,0,1208,1210,3,124,62,0,1209,1211,5,35,0,0,1210,1209,1,0,0,0,1210,1211,
		1,0,0,0,1211,1214,1,0,0,0,1212,1214,5,35,0,0,1213,1208,1,0,0,0,1213,1212,
		1,0,0,0,1214,127,1,0,0,0,1215,1217,5,166,0,0,1216,1215,1,0,0,0,1217,1220,
		1,0,0,0,1218,1216,1,0,0,0,1218,1219,1,0,0,0,1219,1221,1,0,0,0,1220,1218,
		1,0,0,0,1221,1223,5,17,0,0,1222,1224,3,20,10,0,1223,1222,1,0,0,0,1223,
		1224,1,0,0,0,1224,1225,1,0,0,0,1225,1226,5,18,0,0,1226,129,1,0,0,0,1227,
		1228,5,6,0,0,1228,1229,3,132,66,0,1229,1230,5,14,0,0,1230,131,1,0,0,0,
		1231,1233,3,134,67,0,1232,1231,1,0,0,0,1232,1233,1,0,0,0,1233,1234,1,0,
		0,0,1234,1236,5,20,0,0,1235,1232,1,0,0,0,1236,1239,1,0,0,0,1237,1235,1,
		0,0,0,1237,1238,1,0,0,0,1238,1241,1,0,0,0,1239,1237,1,0,0,0,1240,1242,
		3,134,67,0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,133,1,0,0,0,1243,1245,
		3,164,82,0,1244,1246,5,35,0,0,1245,1244,1,0,0,0,1245,1246,1,0,0,0,1246,
		135,1,0,0,0,1247,1248,5,13,0,0,1248,1249,3,138,69,0,1249,1250,5,14,0,0,
		1250,137,1,0,0,0,1251,1253,3,140,70,0,1252,1251,1,0,0,0,1252,1253,1,0,
		0,0,1253,1254,1,0,0,0,1254,1256,5,20,0,0,1255,1252,1,0,0,0,1256,1259,1,
		0,0,0,1257,1255,1,0,0,0,1257,1258,1,0,0,0,1258,139,1,0,0,0,1259,1257,1,
		0,0,0,1260,1262,3,164,82,0,1261,1263,5,35,0,0,1262,1261,1,0,0,0,1262,1263,
		1,0,0,0,1263,1281,1,0,0,0,1264,1268,3,164,82,0,1265,1267,5,166,0,0,1266,
		1265,1,0,0,0,1267,1270,1,0,0,0,1268,1266,1,0,0,0,1268,1269,1,0,0,0,1269,
		1271,1,0,0,0,1270,1268,1,0,0,0,1271,1275,5,24,0,0,1272,1274,5,166,0,0,
		1273,1272,1,0,0,0,1274,1277,1,0,0,0,1275,1273,1,0,0,0,1275,1276,1,0,0,
		0,1276,1278,1,0,0,0,1277,1275,1,0,0,0,1278,1279,3,164,82,0,1279,1281,1,
		0,0,0,1280,1260,1,0,0,0,1280,1264,1,0,0,0,1281,141,1,0,0,0,1282,1286,3,
		144,72,0,1283,1285,5,166,0,0,1284,1283,1,0,0,0,1285,1288,1,0,0,0,1286,
		1284,1,0,0,0,1286,1287,1,0,0,0,1287,1289,1,0,0,0,1288,1286,1,0,0,0,1289,
		1293,5,24,0,0,1290,1292,5,166,0,0,1291,1290,1,0,0,0,1292,1295,1,0,0,0,
		1293,1291,1,0,0,0,1293,1294,1,0,0,0,1294,1296,1,0,0,0,1295,1293,1,0,0,
		0,1296,1297,3,164,82,0,1297,1324,1,0,0,0,1298,1300,5,129,0,0,1299,1298,
		1,0,0,0,1299,1300,1,0,0,0,1300,1302,1,0,0,0,1301,1303,5,35,0,0,1302,1301,
		1,0,0,0,1302,1303,1,0,0,0,1303,1304,1,0,0,0,1304,1305,3,146,73,0,1305,
		1307,5,3,0,0,1306,1308,3,122,61,0,1307,1306,1,0,0,0,1307,1308,1,0,0,0,
		1308,1309,1,0,0,0,1309,1310,5,16,0,0,1310,1311,3,128,64,0,1311,1324,1,
		0,0,0,1312,1313,3,192,96,0,1313,1314,5,3,0,0,1314,1315,5,16,0,0,1315,1316,
		3,128,64,0,1316,1324,1,0,0,0,1317,1318,3,194,97,0,1318,1319,5,3,0,0,1319,
		1320,3,124,62,0,1320,1321,5,16,0,0,1321,1322,3,128,64,0,1322,1324,1,0,
		0,0,1323,1282,1,0,0,0,1323,1299,1,0,0,0,1323,1312,1,0,0,0,1323,1317,1,
		0,0,0,1324,143,1,0,0,0,1325,1328,3,146,73,0,1326,1328,3,150,75,0,1327,
		1325,1,0,0,0,1327,1326,1,0,0,0,1328,1332,1,0,0,0,1329,1331,3,148,74,0,
		1330,1329,1,0,0,0,1331,1334,1,0,0,0,1332,1330,1,0,0,0,1332,1333,1,0,0,
		0,1333,145,1,0,0,0,1334,1332,1,0,0,0,1335,1340,5,161,0,0,1336,1340,3,200,
		100,0,1337,1340,5,163,0,0,1338,1340,3,188,94,0,1339,1335,1,0,0,0,1339,
		1336,1,0,0,0,1339,1337,1,0,0,0,1339,1338,1,0,0,0,1340,147,1,0,0,0,1341,
		1342,5,4,0,0,1342,1343,3,164,82,0,1343,1344,5,2,0,0,1344,1347,1,0,0,0,
		1345,1347,5,5,0,0,1346,1341,1,0,0,0,1346,1345,1,0,0,0,1347,149,1,0,0,0,
		1348,1349,5,1,0,0,1349,1350,3,164,82,0,1350,1351,5,2,0,0,1351,151,1,0,
		0,0,1352,1359,3,154,77,0,1353,1355,5,20,0,0,1354,1356,3,154,77,0,1355,
		1354,1,0,0,0,1355,1356,1,0,0,0,1356,1358,1,0,0,0,1357,1353,1,0,0,0,1358,
		1361,1,0,0,0,1359,1357,1,0,0,0,1359,1360,1,0,0,0,1360,1371,1,0,0,0,1361,
		1359,1,0,0,0,1362,1364,5,20,0,0,1363,1365,3,154,77,0,1364,1363,1,0,0,0,
		1364,1365,1,0,0,0,1365,1367,1,0,0,0,1366,1362,1,0,0,0,1367,1368,1,0,0,
		0,1368,1366,1,0,0,0,1368,1369,1,0,0,0,1369,1371,1,0,0,0,1370,1352,1,0,
		0,0,1370,1366,1,0,0,0,1371,153,1,0,0,0,1372,1374,3,164,82,0,1373,1375,
		5,35,0,0,1374,1373,1,0,0,0,1374,1375,1,0,0,0,1375,155,1,0,0,0,1376,1388,
		3,164,82,0,1377,1379,5,20,0,0,1378,1380,3,164,82,0,1379,1378,1,0,0,0,1379,
		1380,1,0,0,0,1380,1382,1,0,0,0,1381,1377,1,0,0,0,1382,1385,1,0,0,0,1383,
		1381,1,0,0,0,1383,1384,1,0,0,0,1384,1386,1,0,0,0,1385,1383,1,0,0,0,1386,
		1387,5,20,0,0,1387,1389,3,164,82,0,1388,1383,1,0,0,0,1388,1389,1,0,0,0,
		1389,157,1,0,0,0,1390,1391,4,79,6,0,1391,1392,3,164,82,0,1392,159,1,0,
		0,0,1393,1395,5,3,0,0,1394,1396,3,152,76,0,1395,1394,1,0,0,0,1395,1396,
		1,0,0,0,1396,1397,1,0,0,0,1397,1398,5,16,0,0,1398,161,1,0,0,0,1399,1400,
		4,81,7,0,1400,1402,5,13,0,0,1401,1403,3,156,78,0,1402,1401,1,0,0,0,1402,
		1403,1,0,0,0,1403,1404,1,0,0,0,1404,1405,5,14,0,0,1405,163,1,0,0,0,1406,
		1407,6,82,-1,0,1407,1438,3,178,89,0,1408,1438,3,166,83,0,1409,1410,5,110,
		0,0,1410,1438,3,164,82,30,1411,1412,5,29,0,0,1412,1438,3,164,82,29,1413,
		1414,5,30,0,0,1414,1438,3,164,82,28,1415,1416,5,54,0,0,1416,1438,3,164,
		82,26,1417,1418,5,32,0,0,1418,1438,3,164,82,25,1419,1420,5,31,0,0,1420,
		1438,3,164,82,24,1421,1422,5,33,0,0,1422,1438,3,164,82,23,1423,1424,5,
		130,0,0,1424,1438,3,164,82,22,1425,1429,7,3,0,0,1426,1428,5,166,0,0,1427,
		1426,1,0,0,0,1428,1431,1,0,0,0,1429,1427,1,0,0,0,1429,1430,1,0,0,0,1430,
		1432,1,0,0,0,1431,1429,1,0,0,0,1432,1438,3,164,82,6,1433,1434,3,166,83,
		0,1434,1435,3,182,91,0,1435,1436,3,164,82,1,1436,1438,1,0,0,0,1437,1406,
		1,0,0,0,1437,1408,1,0,0,0,1437,1409,1,0,0,0,1437,1411,1,0,0,0,1437,1413,
		1,0,0,0,1437,1415,1,0,0,0,1437,1417,1,0,0,0,1437,1419,1,0,0,0,1437,1421,
		1,0,0,0,1437,1423,1,0,0,0,1437,1425,1,0,0,0,1437,1433,1,0,0,0,1438,1519,
		1,0,0,0,1439,1440,10,27,0,0,1440,1441,5,39,0,0,1441,1518,3,164,82,27,1442,
		1443,10,21,0,0,1443,1444,7,4,0,0,1444,1518,3,164,82,22,1445,1446,10,20,
		0,0,1446,1447,7,5,0,0,1447,1518,3,164,82,21,1448,1449,10,19,0,0,1449,1450,
		7,6,0,0,1450,1518,3,164,82,20,1451,1452,10,18,0,0,1452,1453,5,54,0,0,1453,
		1518,3,164,82,19,1454,1455,10,17,0,0,1455,1456,5,55,0,0,1456,1518,3,164,
		82,18,1457,1458,10,16,0,0,1458,1459,5,56,0,0,1459,1518,3,164,82,17,1460,
		1461,10,15,0,0,1461,1462,5,27,0,0,1462,1518,3,164,82,16,1463,1464,10,14,
		0,0,1464,1518,3,164,82,15,1465,1466,10,13,0,0,1466,1467,5,53,0,0,1467,
		1518,3,164,82,14,1468,1469,10,12,0,0,1469,1470,7,7,0,0,1470,1518,3,164,
		82,13,1471,1472,10,11,0,0,1472,1473,7,8,0,0,1473,1518,3,164,82,12,1474,
		1475,10,10,0,0,1475,1476,5,89,0,0,1476,1518,3,164,82,11,1477,1478,10,9,
		0,0,1478,1479,5,114,0,0,1479,1518,3,164,82,10,1480,1481,10,8,0,0,1481,
		1482,5,111,0,0,1482,1518,3,164,82,9,1483,1484,10,7,0,0,1484,1485,5,115,
		0,0,1485,1518,3,164,82,8,1486,1487,10,5,0,0,1487,1488,7,9,0,0,1488,1518,
		3,164,82,6,1489,1490,10,4,0,0,1490,1491,7,10,0,0,1491,1518,3,164,82,5,
		1492,1493,10,3,0,0,1493,1494,5,40,0,0,1494,1518,3,164,82,4,1495,1496,10,
		2,0,0,1496,1497,5,22,0,0,1497,1501,3,164,82,0,1498,1500,5,166,0,0,1499,
		1498,1,0,0,0,1500,1503,1,0,0,0,1501,1499,1,0,0,0,1501,1502,1,0,0,0,1502,
		1504,1,0,0,0,1503,1501,1,0,0,0,1504,1508,5,24,0,0,1505,1507,5,166,0,0,
		1506,1505,1,0,0,0,1507,1510,1,0,0,0,1508,1506,1,0,0,0,1508,1509,1,0,0,
		0,1509,1511,1,0,0,0,1510,1508,1,0,0,0,1511,1512,3,164,82,3,1512,1518,1,
		0,0,0,1513,1514,10,32,0,0,1514,1518,5,29,0,0,1515,1516,10,31,0,0,1516,
		1518,5,30,0,0,1517,1439,1,0,0,0,1517,1442,1,0,0,0,1517,1445,1,0,0,0,1517,
		1448,1,0,0,0,1517,1451,1,0,0,0,1517,1454,1,0,0,0,1517,1457,1,0,0,0,1517,
		1460,1,0,0,0,1517,1463,1,0,0,0,1517,1465,1,0,0,0,1517,1468,1,0,0,0,1517,
		1471,1,0,0,0,1517,1474,1,0,0,0,1517,1477,1,0,0,0,1517,1480,1,0,0,0,1517,
		1483,1,0,0,0,1517,1486,1,0,0,0,1517,1489,1,0,0,0,1517,1492,1,0,0,0,1517,
		1495,1,0,0,0,1517,1513,1,0,0,0,1517,1515,1,0,0,0,1518,1521,1,0,0,0,1519,
		1517,1,0,0,0,1519,1520,1,0,0,0,1520,165,1,0,0,0,1521,1519,1,0,0,0,1522,
		1523,6,83,-1,0,1523,1536,5,107,0,0,1524,1536,5,123,0,0,1525,1536,5,124,
		0,0,1526,1536,3,170,85,0,1527,1536,3,198,99,0,1528,1536,3,184,92,0,1529,
		1536,3,130,65,0,1530,1536,3,176,88,0,1531,1532,5,15,0,0,1532,1533,3,156,
		78,0,1533,1534,5,16,0,0,1534,1536,1,0,0,0,1535,1522,1,0,0,0,1535,1524,
		1,0,0,0,1535,1525,1,0,0,0,1535,1526,1,0,0,0,1535,1527,1,0,0,0,1535,1528,
		1,0,0,0,1535,1529,1,0,0,0,1535,1530,1,0,0,0,1535,1531,1,0,0,0,1536,1552,
		1,0,0,0,1537,1538,10,12,0,0,1538,1551,3,160,80,0,1539,1541,10,11,0,0,1540,
		1542,5,22,0,0,1541,1540,1,0,0,0,1541,1542,1,0,0,0,1542,1543,1,0,0,0,1543,
		1544,5,28,0,0,1544,1551,3,168,84,0,1545,1547,10,10,0,0,1546,1548,5,23,
		0,0,1547,1546,1,0,0,0,1547,1548,1,0,0,0,1548,1549,1,0,0,0,1549,1551,3,
		162,81,0,1550,1537,1,0,0,0,1550,1539,1,0,0,0,1550,1545,1,0,0,0,1551,1554,
		1,0,0,0,1552,1550,1,0,0,0,1552,1553,1,0,0,0,1553,167,1,0,0,0,1554,1552,
		1,0,0,0,1555,1559,3,198,99,0,1556,1559,3,170,85,0,1557,1559,3,200,100,
		0,1558,1555,1,0,0,0,1558,1556,1,0,0,0,1558,1557,1,0,0,0,1559,169,1,0,0,
		0,1560,1562,3,198,99,0,1561,1563,3,148,74,0,1562,1561,1,0,0,0,1563,1564,
		1,0,0,0,1564,1562,1,0,0,0,1564,1565,1,0,0,0,1565,1574,1,0,0,0,1566,1570,
		3,150,75,0,1567,1569,3,148,74,0,1568,1567,1,0,0,0,1569,1572,1,0,0,0,1570,
		1568,1,0,0,0,1570,1571,1,0,0,0,1571,1574,1,0,0,0,1572,1570,1,0,0,0,1573,
		1560,1,0,0,0,1573,1566,1,0,0,0,1574,171,1,0,0,0,1575,1576,5,21,0,0,1576,
		1577,3,164,82,0,1577,173,1,0,0,0,1578,1582,3,198,99,0,1579,1582,3,130,
		65,0,1580,1582,3,176,88,0,1581,1578,1,0,0,0,1581,1579,1,0,0,0,1581,1580,
		1,0,0,0,1582,175,1,0,0,0,1583,1598,5,17,0,0,1584,1589,3,142,71,0,1585,
		1586,5,20,0,0,1586,1588,3,142,71,0,1587,1585,1,0,0,0,1588,1591,1,0,0,0,
		1589,1587,1,0,0,0,1589,1590,1,0,0,0,1590,1595,1,0,0,0,1591,1589,1,0,0,
		0,1592,1594,5,166,0,0,1593,1592,1,0,0,0,1594,1597,1,0,0,0,1595,1593,1,
		0,0,0,1595,1596,1,0,0,0,1596,1599,1,0,0,0,1597,1595,1,0,0,0,1598,1584,
		1,0,0,0,1598,1599,1,0,0,0,1599,1600,1,0,0,0,1600,1601,5,18,0,0,1601,177,
		1,0,0,0,1602,1603,4,89,33,0,1603,1632,3,102,51,0,1604,1606,5,129,0,0,1605,
		1604,1,0,0,0,1605,1606,1,0,0,0,1606,1607,1,0,0,0,1607,1609,5,15,0,0,1608,
		1610,3,122,61,0,1609,1608,1,0,0,0,1609,1610,1,0,0,0,1610,1611,1,0,0,0,
		1611,1612,5,16,0,0,1612,1632,3,180,90,0,1613,1615,5,129,0,0,1614,1613,
		1,0,0,0,1614,1615,1,0,0,0,1615,1627,1,0,0,0,1616,1618,3,174,87,0,1617,
		1616,1,0,0,0,1617,1618,1,0,0,0,1618,1619,1,0,0,0,1619,1628,5,35,0,0,1620,
		1622,5,54,0,0,1621,1620,1,0,0,0,1621,1622,1,0,0,0,1622,1623,1,0,0,0,1623,
		1625,3,174,87,0,1624,1626,5,22,0,0,1625,1624,1,0,0,0,1625,1626,1,0,0,0,
		1626,1628,1,0,0,0,1627,1617,1,0,0,0,1627,1621,1,0,0,0,1628,1629,1,0,0,
		0,1629,1630,5,74,0,0,1630,1632,3,164,82,0,1631,1602,1,0,0,0,1631,1605,
		1,0,0,0,1631,1614,1,0,0,0,1632,179,1,0,0,0,1633,1634,5,74,0,0,1634,1637,
		3,164,82,0,1635,1637,3,128,64,0,1636,1633,1,0,0,0,1636,1635,1,0,0,0,1637,
		181,1,0,0,0,1638,1639,7,11,0,0,1639,183,1,0,0,0,1640,1645,3,186,93,0,1641,
		1645,3,188,94,0,1642,1645,3,190,95,0,1643,1645,7,12,0,0,1644,1640,1,0,
		0,0,1644,1641,1,0,0,0,1644,1642,1,0,0,0,1644,1643,1,0,0,0,1645,185,1,0,
		0,0,1646,1647,5,77,0,0,1647,187,1,0,0,0,1648,1649,7,13,0,0,1649,189,1,
		0,0,0,1650,1651,7,14,0,0,1651,191,1,0,0,0,1652,1653,4,96,34,0,1653,1654,
		3,198,99,0,1654,1655,3,146,73,0,1655,193,1,0,0,0,1656,1657,4,97,35,0,1657,
		1658,3,198,99,0,1658,1659,3,146,73,0,1659,195,1,0,0,0,1660,1663,3,198,
		99,0,1661,1663,3,200,100,0,1662,1660,1,0,0,0,1662,1661,1,0,0,0,1663,197,
		1,0,0,0,1664,1665,7,15,0,0,1665,199,1,0,0,0,1666,1671,3,204,102,0,1667,
		1671,5,75,0,0,1668,1671,5,76,0,0,1669,1671,3,186,93,0,1670,1666,1,0,0,
		0,1670,1667,1,0,0,0,1670,1668,1,0,0,0,1670,1669,1,0,0,0,1671,201,1,0,0,
		0,1672,1673,7,16,0,0,1673,203,1,0,0,0,1674,1675,7,17,0,0,1675,205,1,0,
		0,0,1676,1678,5,166,0,0,1677,1676,1,0,0,0,1678,1679,1,0,0,0,1679,1677,
		1,0,0,0,1679,1680,1,0,0,0,1680,1683,1,0,0,0,1681,1683,5,0,0,1,1682,1677,
		1,0,0,0,1682,1681,1,0,0,0,1683,207,1,0,0,0,233,214,231,233,244,264,284,
		288,295,301,307,310,321,330,337,343,350,354,369,394,399,404,409,417,421,
		427,431,436,444,449,451,458,462,471,475,483,487,491,496,503,505,513,518,
		520,527,531,537,544,551,557,566,573,580,584,588,593,601,605,612,617,622,
		630,634,641,646,651,659,663,670,675,680,688,692,699,704,708,714,722,726,
		733,741,745,752,760,764,766,769,774,779,783,790,795,800,804,811,815,822,
		824,828,835,837,841,846,850,854,859,866,871,878,882,884,889,897,905,909,
		914,922,926,938,948,955,961,965,968,972,977,984,991,994,999,1002,1006,
		1013,1021,1025,1030,1045,1048,1053,1060,1066,1072,1078,1081,1087,1090,
		1096,1102,1104,1107,1112,1125,1131,1133,1140,1143,1151,1159,1168,1176,
		1182,1186,1189,1194,1200,1206,1210,1213,1218,1223,1232,1237,1241,1245,
		1252,1257,1262,1268,1275,1280,1286,1293,1299,1302,1307,1323,1327,1332,
		1339,1346,1355,1359,1364,1368,1370,1374,1379,1383,1388,1395,1402,1429,
		1437,1501,1508,1517,1519,1535,1541,1547,1550,1552,1558,1564,1570,1573,
		1581,1589,1595,1598,1605,1609,1614,1617,1621,1625,1627,1631,1636,1644,
		1662,1670,1679,1682
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
