//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/minip/source/repos/Keysharp_clone/Keysharp.Core/Scripting/Parser/Antlr/MainParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MainParser : MainParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DerefStart=1, DerefEnd=2, SingleLineBlockComment=3, HotstringTrigger=4, 
		RemapKey=5, HotkeyTrigger=6, OpenBracket=7, CloseBracket=8, OpenParen=9, 
		CloseParen=10, OpenBrace=11, CloseBrace=12, Comma=13, Assign=14, QuestionMark=15, 
		QuestionMarkDot=16, Colon=17, DoubleColon=18, Ellipsis=19, Dot=20, ConcatDot=21, 
		PlusPlus=22, MinusMinus=23, Plus=24, Minus=25, BitNot=26, Not=27, Multiply=28, 
		Divide=29, IntegerDivide=30, Modulus=31, Power=32, NullCoalesce=33, Hashtag=34, 
		RightShiftArithmetic=35, LeftShiftArithmetic=36, RightShiftLogical=37, 
		LessThan=38, MoreThan=39, LessThanEquals=40, GreaterThanEquals=41, Equals_=42, 
		NotEquals=43, IdentityEquals=44, IdentityNotEquals=45, RegExMatch=46, 
		BitAnd=47, BitXOr=48, BitOr=49, And=50, Or=51, MultiplyAssign=52, DivideAssign=53, 
		ModulusAssign=54, PlusAssign=55, MinusAssign=56, LeftShiftArithmeticAssign=57, 
		RightShiftArithmeticAssign=58, RightShiftLogicalAssign=59, IntegerDivideAssign=60, 
		ConcatenateAssign=61, BitAndAssign=62, BitXorAssign=63, BitOrAssign=64, 
		PowerAssign=65, NullishCoalescingAssign=66, Arrow=67, NullLiteral=68, 
		Unset=69, True=70, False=71, DecimalLiteral=72, HexIntegerLiteral=73, 
		OctalIntegerLiteral=74, OctalIntegerLiteral2=75, BinaryIntegerLiteral=76, 
		BigHexIntegerLiteral=77, BigOctalIntegerLiteral=78, BigBinaryIntegerLiteral=79, 
		BigDecimalIntegerLiteral=80, Break=81, Do=82, Instanceof=83, Switch=84, 
		Case=85, Default=86, Else=87, Catch=88, Finally=89, Return=90, Continue=91, 
		For=92, While=93, LoopParse=94, LoopReg=95, LoopRead=96, LoopFiles=97, 
		Loop=98, Until=99, This=100, If=101, Throw=102, Delete=103, In=104, Try=105, 
		Yield=106, Is=107, Contains=108, VerbalAnd=109, VerbalNot=110, VerbalOr=111, 
		Goto=112, Get=113, Set=114, Class=115, Enum=116, Extends=117, Super=118, 
		Base=119, Export=120, Import=121, From=122, As=123, Async=124, Await=125, 
		Static=126, Global=127, Local=128, HotIf=129, InputLevel=130, SuspendExempt=131, 
		UseHook=132, HotstringOptions=133, Identifier=134, StringLiteral=135, 
		EOL=136, WS=137, UnexpectedCharacter=138, HotstringWhitespaces=139, HotstringMultiLineExpansion=140, 
		HotstringSingleLineExpansion=141, HotstringUnexpectedCharacter=142, DirectiveWhitespaces=143, 
		DirectiveContent=144, DirectiveUnexpectedCharacter=145, PreprocessorDirectiveWS=146, 
		Digits=147, Define=148, Undef=149, ElIf=150, EndIf=151, Line=152, Error=153, 
		Warning=154, Region=155, EndRegion=156, Pragma=157, Nullable=158, Include=159, 
		IncludeAgain=160, DllLoad=161, Requires=162, SingleInstance=163, Persistent=164, 
		Warn=165, NoDynamicVars=166, ErrorStdOut=167, ClipboardTimeout=168, HotIfTimeout=169, 
		MaxThreads=170, MaxThreadsBuffer=171, MaxThreadsPerHotkey=172, Assembly=173, 
		DirectiveHidden=174, ConditionalSymbol=175, DirectiveSingleLineComment=176, 
		DirectiveNewline=177, Text=178;
	public const int
		RULE_program = 0, RULE_sourceElements = 1, RULE_sourceElement = 2, RULE_positionalDirective = 3, 
		RULE_remap = 4, RULE_hotstring = 5, RULE_hotstringExpansion = 6, RULE_hotkey = 7, 
		RULE_statement = 8, RULE_block = 9, RULE_statementList = 10, RULE_variableStatement = 11, 
		RULE_awaitStatement = 12, RULE_deleteStatement = 13, RULE_importStatement = 14, 
		RULE_importFromBlock = 15, RULE_importModuleItems = 16, RULE_importAliasName = 17, 
		RULE_moduleExportName = 18, RULE_importedBinding = 19, RULE_importDefault = 20, 
		RULE_importNamespace = 21, RULE_importFrom = 22, RULE_aliasName = 23, 
		RULE_exportStatement = 24, RULE_exportFromBlock = 25, RULE_exportModuleItems = 26, 
		RULE_exportAliasName = 27, RULE_declaration = 28, RULE_variableDeclarationList = 29, 
		RULE_variableDeclaration = 30, RULE_functionStatement = 31, RULE_expressionStatement = 32, 
		RULE_ifStatement = 33, RULE_flowBlock = 34, RULE_untilProduction = 35, 
		RULE_elseProduction = 36, RULE_iterationStatement = 37, RULE_forInParameters = 38, 
		RULE_continueStatement = 39, RULE_breakStatement = 40, RULE_returnStatement = 41, 
		RULE_yieldStatement = 42, RULE_switchStatement = 43, RULE_caseBlock = 44, 
		RULE_caseClauses = 45, RULE_caseClause = 46, RULE_defaultClause = 47, 
		RULE_labelledStatement = 48, RULE_gotoStatement = 49, RULE_throwStatement = 50, 
		RULE_tryStatement = 51, RULE_catchProduction = 52, RULE_catchAssignable = 53, 
		RULE_catchClasses = 54, RULE_finallyProduction = 55, RULE_functionDeclaration = 56, 
		RULE_classDeclaration = 57, RULE_classExtensionName = 58, RULE_classTail = 59, 
		RULE_classElement = 60, RULE_methodDefinition = 61, RULE_propertyDefinition = 62, 
		RULE_classPropertyName = 63, RULE_propertyGetterDefinition = 64, RULE_propertySetterDefinition = 65, 
		RULE_fieldDefinition = 66, RULE_formalParameterList = 67, RULE_formalParameterArg = 68, 
		RULE_lastFormalParameterArg = 69, RULE_arrayLiteral = 70, RULE_mapLiteral = 71, 
		RULE_mapElementList = 72, RULE_mapElement = 73, RULE_propertyAssignment = 74, 
		RULE_propertyName = 75, RULE_dereference = 76, RULE_arguments = 77, RULE_argument = 78, 
		RULE_expressionSequence = 79, RULE_memberIndexArguments = 80, RULE_expression = 81, 
		RULE_singleExpression = 82, RULE_operatorExpression = 83, RULE_primaryExpression = 84, 
		RULE_memberDot = 85, RULE_memberIdentifier = 86, RULE_dynamicIdentifier = 87, 
		RULE_initializer = 88, RULE_assignable = 89, RULE_objectLiteral = 90, 
		RULE_functionHead = 91, RULE_functionHeadPrefix = 92, RULE_functionExpressionHead = 93, 
		RULE_fatArrowExpressionHead = 94, RULE_functionBody = 95, RULE_assignmentOperator = 96, 
		RULE_literal = 97, RULE_boolean = 98, RULE_numericLiteral = 99, RULE_bigintLiteral = 100, 
		RULE_getter = 101, RULE_setter = 102, RULE_identifierName = 103, RULE_identifier = 104, 
		RULE_reservedWord = 105, RULE_keyword = 106, RULE_s = 107, RULE_eos = 108;
	public static readonly string[] ruleNames = {
		"program", "sourceElements", "sourceElement", "positionalDirective", "remap", 
		"hotstring", "hotstringExpansion", "hotkey", "statement", "block", "statementList", 
		"variableStatement", "awaitStatement", "deleteStatement", "importStatement", 
		"importFromBlock", "importModuleItems", "importAliasName", "moduleExportName", 
		"importedBinding", "importDefault", "importNamespace", "importFrom", "aliasName", 
		"exportStatement", "exportFromBlock", "exportModuleItems", "exportAliasName", 
		"declaration", "variableDeclarationList", "variableDeclaration", "functionStatement", 
		"expressionStatement", "ifStatement", "flowBlock", "untilProduction", 
		"elseProduction", "iterationStatement", "forInParameters", "continueStatement", 
		"breakStatement", "returnStatement", "yieldStatement", "switchStatement", 
		"caseBlock", "caseClauses", "caseClause", "defaultClause", "labelledStatement", 
		"gotoStatement", "throwStatement", "tryStatement", "catchProduction", 
		"catchAssignable", "catchClasses", "finallyProduction", "functionDeclaration", 
		"classDeclaration", "classExtensionName", "classTail", "classElement", 
		"methodDefinition", "propertyDefinition", "classPropertyName", "propertyGetterDefinition", 
		"propertySetterDefinition", "fieldDefinition", "formalParameterList", 
		"formalParameterArg", "lastFormalParameterArg", "arrayLiteral", "mapLiteral", 
		"mapElementList", "mapElement", "propertyAssignment", "propertyName", 
		"dereference", "arguments", "argument", "expressionSequence", "memberIndexArguments", 
		"expression", "singleExpression", "operatorExpression", "primaryExpression", 
		"memberDot", "memberIdentifier", "dynamicIdentifier", "initializer", "assignable", 
		"objectLiteral", "functionHead", "functionHeadPrefix", "functionExpressionHead", 
		"fatArrowExpressionHead", "functionBody", "assignmentOperator", "literal", 
		"boolean", "numericLiteral", "bigintLiteral", "getter", "setter", "identifierName", 
		"identifier", "reservedWord", "keyword", "s", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'['", "']'", "'('", "')'", 
		"'{'", "'}'", "','", "':='", "'?'", "'?.'", "':'", "'::'", "'...'", "'.'", 
		null, "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", "'//'", 
		"'%'", "'**'", "'??'", null, "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", 
		"'>='", "'='", "'!='", "'=='", "'!=='", "'~='", "'&'", "'^'", "'|'", "'&&'", 
		"'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", 
		"'//='", "'.='", "'&='", "'^='", "'|='", "'**='", "'??='", "'=>'", "'null'", 
		"'unset'", "'true'", "'false'", null, null, null, null, null, null, null, 
		null, null, "'break'", "'do'", "'instanceof'", "'switch'", "'case'", "'default'", 
		"'else'", "'catch'", "'finally'", "'return'", "'continue'", "'for'", "'while'", 
		null, null, null, null, null, "'until'", "'this'", "'if'", "'throw'", 
		"'delete'", "'in'", "'try'", "'yield'", "'is'", "'contains'", "'and'", 
		"'not'", "'or'", "'goto'", "'get'", "'set'", "'class'", "'enum'", "'extends'", 
		"'super'", "'base'", "'export'", "'import'", "'from'", "'as'", "'async'", 
		"'await'", "'static'", "'global'", "'local'", "'#hotif'", "'#inputlevel'", 
		"'#suspendexempt'", "'#usehook'", null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "'define'", "'undef'", 
		"'elif'", "'endif'", "'line'", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'nodynamicvars'", "'errorstdout'", 
		null, null, null, null, null, null, "'hidden'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DerefStart", "DerefEnd", "SingleLineBlockComment", "HotstringTrigger", 
		"RemapKey", "HotkeyTrigger", "OpenBracket", "CloseBracket", "OpenParen", 
		"CloseParen", "OpenBrace", "CloseBrace", "Comma", "Assign", "QuestionMark", 
		"QuestionMarkDot", "Colon", "DoubleColon", "Ellipsis", "Dot", "ConcatDot", 
		"PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", 
		"Divide", "IntegerDivide", "Modulus", "Power", "NullCoalesce", "Hashtag", 
		"RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", "LessThan", 
		"MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_", "NotEquals", 
		"IdentityEquals", "IdentityNotEquals", "RegExMatch", "BitAnd", "BitXOr", 
		"BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
		"PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
		"RightShiftLogicalAssign", "IntegerDivideAssign", "ConcatenateAssign", 
		"BitAndAssign", "BitXorAssign", "BitOrAssign", "PowerAssign", "NullishCoalescingAssign", 
		"Arrow", "NullLiteral", "Unset", "True", "False", "DecimalLiteral", "HexIntegerLiteral", 
		"OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
		"BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", 
		"BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Switch", "Case", 
		"Default", "Else", "Catch", "Finally", "Return", "Continue", "For", "While", 
		"LoopParse", "LoopReg", "LoopRead", "LoopFiles", "Loop", "Until", "This", 
		"If", "Throw", "Delete", "In", "Try", "Yield", "Is", "Contains", "VerbalAnd", 
		"VerbalNot", "VerbalOr", "Goto", "Get", "Set", "Class", "Enum", "Extends", 
		"Super", "Base", "Export", "Import", "From", "As", "Async", "Await", "Static", 
		"Global", "Local", "HotIf", "InputLevel", "SuspendExempt", "UseHook", 
		"HotstringOptions", "Identifier", "StringLiteral", "EOL", "WS", "UnexpectedCharacter", 
		"HotstringWhitespaces", "HotstringMultiLineExpansion", "HotstringSingleLineExpansion", 
		"HotstringUnexpectedCharacter", "DirectiveWhitespaces", "DirectiveContent", 
		"DirectiveUnexpectedCharacter", "PreprocessorDirectiveWS", "Digits", "Define", 
		"Undef", "ElIf", "EndIf", "Line", "Error", "Warning", "Region", "EndRegion", 
		"Pragma", "Nullable", "Include", "IncludeAgain", "DllLoad", "Requires", 
		"SingleInstance", "Persistent", "Warn", "NoDynamicVars", "ErrorStdOut", 
		"ClipboardTimeout", "HotIfTimeout", "MaxThreads", "MaxThreadsBuffer", 
		"MaxThreadsPerHotkey", "Assembly", "DirectiveHidden", "ConditionalSymbol", 
		"DirectiveSingleLineComment", "DirectiveNewline", "Text"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MainParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MainParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MainParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MainParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MainParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				sourceElements();
				State = 219;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 224;
					sourceElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 227;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionalDirectiveContext positionalDirective() {
			return GetRuleContext<PositionalDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemapContext remap() {
			return GetRuleContext<RemapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotstringContext hotstring() {
			return GetRuleContext<HotstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotkeyContext hotkey() {
			return GetRuleContext<HotkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(MainParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sourceElement);
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229;
				classDeclaration();
				State = 230;
				eos();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232;
				positionalDirective();
				State = 233;
				eos();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 235;
				remap();
				State = 236;
				eos();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 238;
				hotstring();
				State = 239;
				eos();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 241;
				hotkey();
				State = 242;
				eos();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 244;
				statement();
				State = 245;
				eos();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 247;
				Match(WS);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 248;
				Match(EOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionalDirectiveContext : ParserRuleContext {
		public PositionalDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionalDirective; } }
	 
		public PositionalDirectiveContext() { }
		public virtual void CopyFrom(PositionalDirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HotstringDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringOptions() { return GetToken(MainParser.HotstringOptions, 0); }
		public HotstringDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstringDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InputLevelDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InputLevel() { return GetToken(MainParser.InputLevel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public InputLevelDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputLevelDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuspendExemptDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SuspendExempt() { return GetToken(MainParser.SuspendExempt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public SuspendExemptDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuspendExemptDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UseHookDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UseHook() { return GetToken(MainParser.UseHook, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public UseHookDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseHookDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HotIfDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotIf() { return GetToken(MainParser.HotIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public HotIfDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotIfDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionalDirectiveContext positionalDirective() {
		PositionalDirectiveContext _localctx = new PositionalDirectiveContext(Context, State);
		EnterRule(_localctx, 6, RULE_positionalDirective);
		int _la;
		try {
			State = 270;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HotIf:
				_localctx = new HotIfDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 251;
				Match(HotIf);
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140737752599170L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207060991L) != 0) || _la==Identifier || _la==StringLiteral) {
					{
					State = 252;
					singleExpression(0);
					}
				}

				}
				break;
			case HotstringOptions:
				_localctx = new HotstringDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 255;
				Match(HotstringOptions);
				}
				break;
			case InputLevel:
				_localctx = new InputLevelDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 256;
				Match(InputLevel);
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 31L) != 0)) {
					{
					State = 257;
					numericLiteral();
					}
				}

				}
				break;
			case UseHook:
				_localctx = new UseHookDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 260;
				Match(UseHook);
				State = 263;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
					{
					State = 261;
					numericLiteral();
					}
					break;
				case True:
				case False:
					{
					State = 262;
					boolean();
					}
					break;
				case Eof:
				case EOL:
					break;
				default:
					break;
				}
				}
				break;
			case SuspendExempt:
				_localctx = new SuspendExemptDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 265;
				Match(SuspendExempt);
				State = 268;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
					{
					State = 266;
					numericLiteral();
					}
					break;
				case True:
				case False:
					{
					State = 267;
					boolean();
					}
					break;
				case Eof:
				case EOL:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RemapKey() { return GetToken(MainParser.RemapKey, 0); }
		public RemapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remap; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemapContext remap() {
		RemapContext _localctx = new RemapContext(Context, State);
		EnterRule(_localctx, 8, RULE_remap);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			Match(RemapKey);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotstringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HotstringTrigger() { return GetTokens(MainParser.HotstringTrigger); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringTrigger(int i) {
			return GetToken(MainParser.HotstringTrigger, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotstringExpansionContext hotstringExpansion() {
			return GetRuleContext<HotstringExpansionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public HotstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotstring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotstringContext hotstring() {
		HotstringContext _localctx = new HotstringContext(Context, State);
		EnterRule(_localctx, 10, RULE_hotstring);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(HotstringTrigger);
			State = 279;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 275;
					Match(EOL);
					State = 276;
					Match(HotstringTrigger);
					}
					} 
				}
				State = 281;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 285;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 282;
					Match(WS);
					}
					} 
				}
				State = 287;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 288;
				hotstringExpansion();
				}
				break;
			case 2:
				{
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EOL) {
					{
					State = 289;
					Match(EOL);
					}
				}

				State = 292;
				functionDeclaration();
				}
				break;
			case 3:
				{
				State = 294;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 293;
					Match(EOL);
					}
					break;
				}
				State = 296;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotstringExpansionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringSingleLineExpansion() { return GetToken(MainParser.HotstringSingleLineExpansion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringMultiLineExpansion() { return GetToken(MainParser.HotstringMultiLineExpansion, 0); }
		public HotstringExpansionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotstringExpansion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstringExpansion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotstringExpansionContext hotstringExpansion() {
		HotstringExpansionContext _localctx = new HotstringExpansionContext(Context, State);
		EnterRule(_localctx, 12, RULE_hotstringExpansion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			_la = TokenStream.LA(1);
			if ( !(_la==HotstringMultiLineExpansion || _la==HotstringSingleLineExpansion) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotkeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HotkeyTrigger() { return GetTokens(MainParser.HotkeyTrigger); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotkeyTrigger(int i) {
			return GetToken(MainParser.HotkeyTrigger, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public HotkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotkey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotkey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotkeyContext hotkey() {
		HotkeyContext _localctx = new HotkeyContext(Context, State);
		EnterRule(_localctx, 14, RULE_hotkey);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(HotkeyTrigger);
			State = 306;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 302;
					Match(EOL);
					State = 303;
					Match(HotkeyTrigger);
					}
					} 
				}
				State = 308;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 312;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 309;
					s();
					}
					} 
				}
				State = 314;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 315;
				functionDeclaration();
				}
				break;
			case 2:
				{
				State = 316;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelledStatementContext labelledStatement() {
			return GetRuleContext<LabelledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStatementContext functionStatement() {
			return GetRuleContext<FunctionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AwaitStatementContext awaitStatement() {
			return GetRuleContext<AwaitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		int _la;
		try {
			State = 345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 319;
				variableStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 320;
				ifStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 321;
					labelledStatement();
					State = 325;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==EOL || _la==WS) {
						{
						{
						State = 322;
						s();
						}
						}
						State = 327;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 330;
				iterationStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 331;
				expressionStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 332;
				functionStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 333;
				continueStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 334;
				breakStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 335;
				returnStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 336;
				yieldStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 337;
				labelledStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 338;
				gotoStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 339;
				switchStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 340;
				throwStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 341;
				tryStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 342;
				awaitStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 343;
				deleteStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 344;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(OpenBrace);
			State = 351;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 348;
					s();
					}
					} 
				}
				State = 353;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 354;
				statementList();
				}
				break;
			}
			State = 357;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 20, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 359;
					statement();
					State = 360;
					Match(EOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 364;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(MainParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(MainParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public VariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStatementContext variableStatement() {
		VariableStatementContext _localctx = new VariableStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_variableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 367;
					Match(WS);
					}
					}
					State = 372;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 373;
				variableDeclarationList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwaitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public AwaitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awaitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwaitStatementContext awaitStatement() {
		AwaitStatementContext _localctx = new AwaitStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_awaitStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(Await);
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 377;
				Match(WS);
				}
				}
				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 383;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(MainParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_deleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			Match(Delete);
			State = 389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 386;
				Match(WS);
				}
				}
				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 392;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(MainParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromBlockContext importFromBlock() {
			return GetRuleContext<ImportFromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_importStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			Match(Import);
			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 395;
				Match(WS);
				}
				}
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 401;
			importFromBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportModuleItemsContext importModuleItems() {
			return GetRuleContext<ImportModuleItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDefaultContext importDefault() {
			return GetRuleContext<ImportDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ImportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromBlockContext importFromBlock() {
		ImportFromBlockContext _localctx = new ImportFromBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_importFromBlock);
		try {
			State = 413;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
			case Multiply:
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 404;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 403;
					importDefault();
					}
					break;
				}
				State = 408;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Multiply:
				case NullLiteral:
				case Unset:
				case True:
				case False:
				case Break:
				case Do:
				case Instanceof:
				case Switch:
				case Case:
				case Default:
				case Else:
				case Catch:
				case Finally:
				case Return:
				case Continue:
				case For:
				case While:
				case Loop:
				case Until:
				case This:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case Yield:
				case Is:
				case Contains:
				case VerbalAnd:
				case VerbalNot:
				case VerbalOr:
				case Goto:
				case Get:
				case Set:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Base:
				case Export:
				case Import:
				case From:
				case As:
				case Async:
				case Await:
				case Static:
				case Global:
				case Local:
				case Identifier:
					{
					State = 406;
					importNamespace();
					}
					break;
				case OpenBrace:
					{
					State = 407;
					importModuleItems();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 410;
				importFrom();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 412;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasNameContext[] importAliasName() {
			return GetRuleContexts<ImportAliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasNameContext importAliasName(int i) {
			return GetRuleContext<ImportAliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ImportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importModuleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportModuleItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportModuleItemsContext importModuleItems() {
		ImportModuleItemsContext _localctx = new ImportModuleItemsContext(Context, State);
		EnterRule(_localctx, 32, RULE_importModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(OpenBrace);
			State = 427;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 416;
					importAliasName();
					State = 420;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 417;
						Match(WS);
						}
						}
						State = 422;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 423;
					Match(Comma);
					}
					} 
				}
				State = 429;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207052815L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 430;
				importAliasName();
				State = 438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma || _la==WS) {
					{
					State = 434;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 431;
						Match(WS);
						}
						}
						State = 436;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 437;
					Match(Comma);
					}
				}

				}
			}

			State = 442;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext moduleExportName() {
			return GetRuleContext<ModuleExportNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportedBindingContext importedBinding() {
			return GetRuleContext<ImportedBindingContext>(0);
		}
		public ImportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasNameContext importAliasName() {
		ImportAliasNameContext _localctx = new ImportAliasNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_importAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			moduleExportName();
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 445;
				Match(As);
				State = 446;
				importedBinding();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleExportNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ModuleExportNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleExportName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleExportName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleExportNameContext moduleExportName() {
		ModuleExportNameContext _localctx = new ModuleExportNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_moduleExportName);
		try {
			State = 451;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 449;
				identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 450;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportedBindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		public ImportedBindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importedBinding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportedBinding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportedBindingContext importedBinding() {
		ImportedBindingContext _localctx = new ImportedBindingContext(Context, State);
		EnterRule(_localctx, 38, RULE_importedBinding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 268959745L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext aliasName() {
			return GetRuleContext<AliasNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ImportDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefaultContext importDefault() {
		ImportDefaultContext _localctx = new ImportDefaultContext(Context, State);
		EnterRule(_localctx, 40, RULE_importDefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			aliasName();
			State = 459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 456;
				Match(WS);
				}
				}
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 462;
			Match(Comma);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public ImportNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportNamespaceContext importNamespace() {
		ImportNamespaceContext _localctx = new ImportNamespaceContext(Context, State);
		EnterRule(_localctx, 42, RULE_importNamespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
				{
				State = 464;
				Match(Multiply);
				}
				break;
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				{
				State = 465;
				identifierName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 468;
				Match(As);
				State = 469;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(MainParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ImportFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromContext importFrom() {
		ImportFromContext _localctx = new ImportFromContext(Context, State);
		EnterRule(_localctx, 44, RULE_importFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			Match(From);
			State = 473;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public AliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasNameContext aliasName() {
		AliasNameContext _localctx = new AliasNameContext(Context, State);
		EnterRule(_localctx, 46, RULE_aliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			identifierName();
			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 476;
				Match(As);
				State = 477;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
	 
		public ExportStatementContext() { }
		public virtual void CopyFrom(ExportStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExportDefaultDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ExportDefaultDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDefaultDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExportDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExportFromBlockContext exportFromBlock() {
			return GetRuleContext<ExportFromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		public ExportDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_exportStatement);
		try {
			State = 491;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				_localctx = new ExportDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 480;
				Match(Export);
				State = 482;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 481;
					Match(Default);
					}
					break;
				}
				State = 486;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 484;
					exportFromBlock();
					}
					break;
				case 2:
					{
					State = 485;
					declaration();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ExportDefaultDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 488;
				Match(Export);
				State = 489;
				Match(Default);
				State = 490;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportModuleItemsContext exportModuleItems() {
			return GetRuleContext<ExportModuleItemsContext>(0);
		}
		public ExportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportFromBlockContext exportFromBlock() {
		ExportFromBlockContext _localctx = new ExportFromBlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_exportFromBlock);
		int _la;
		try {
			State = 500;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 493;
				importNamespace();
				State = 494;
				importFrom();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 496;
				exportModuleItems();
				State = 498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==From) {
					{
					State = 497;
					importFrom();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExportAliasNameContext[] exportAliasName() {
			return GetRuleContexts<ExportAliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportAliasNameContext exportAliasName(int i) {
			return GetRuleContext<ExportAliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ExportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportModuleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportModuleItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportModuleItemsContext exportModuleItems() {
		ExportModuleItemsContext _localctx = new ExportModuleItemsContext(Context, State);
		EnterRule(_localctx, 52, RULE_exportModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			Match(OpenBrace);
			State = 514;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 503;
					exportAliasName();
					State = 507;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 504;
						Match(WS);
						}
						}
						State = 509;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 510;
					Match(Comma);
					}
					} 
				}
				State = 516;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207052815L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 517;
				exportAliasName();
				State = 525;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma || _la==WS) {
					{
					State = 521;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 518;
						Match(WS);
						}
						}
						State = 523;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 524;
					Match(Comma);
					}
				}

				}
			}

			State = 529;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportAliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext[] moduleExportName() {
			return GetRuleContexts<ModuleExportNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext moduleExportName(int i) {
			return GetRuleContext<ModuleExportNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public ExportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportAliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportAliasNameContext exportAliasName() {
		ExportAliasNameContext _localctx = new ExportAliasNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_exportAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			moduleExportName();
			State = 534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 532;
				Match(As);
				State = 533;
				moduleExportName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_declaration);
		try {
			State = 538;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 536;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 537;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 58, RULE_variableDeclarationList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			variableDeclaration();
			State = 551;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 544;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 541;
						Match(WS);
						}
						}
						State = 546;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 547;
					Match(Comma);
					State = 548;
					variableDeclaration();
					}
					} 
				}
				State = 553;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 60, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			assignable();
			State = 559;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 555;
				assignmentOperator();
				State = 556;
				expression(0);
				}
				break;
			case 2:
				{
				State = 558;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PlusPlus || _la==MinusMinus) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public FunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStatementContext functionStatement() {
		FunctionStatementContext _localctx = new FunctionStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_functionStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			primaryExpression(0);
			State = 568;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 563;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 562;
						Match(WS);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 565;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 567;
				arguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			if (!(!this.isFunctionCallStatement())) throw new FailedPredicateException(this, "!this.isFunctionCallStatement()");
			State = 571;
			expressionSequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MainParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			Match(If);
			State = 577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 574;
				Match(WS);
				}
				}
				State = 579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 580;
			singleExpression(0);
			State = 584;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 581;
				Match(WS);
				}
				}
				State = 586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 587;
			flowBlock();
			State = 588;
			elseProduction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlowBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FlowBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flowBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlowBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlowBlockContext flowBlock() {
		FlowBlockContext _localctx = new FlowBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_flowBlock);
		try {
			int _alt;
			State = 597;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 591;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 590;
						Match(EOL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 593;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 595;
				statement();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 596;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public UntilProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilProductionContext untilProduction() {
		UntilProductionContext _localctx = new UntilProductionContext(Context, State);
		EnterRule(_localctx, 70, RULE_untilProduction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			Match(EOL);
			State = 600;
			Match(Until);
			State = 604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 601;
				s();
				}
				}
				State = 606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 607;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public ElseProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseProductionContext elseProduction() {
		ElseProductionContext _localctx = new ElseProductionContext(Context, State);
		EnterRule(_localctx, 72, RULE_elseProduction);
		try {
			int _alt;
			State = 619;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 609;
				Match(EOL);
				State = 610;
				Match(Else);
				State = 614;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 611;
						s();
						}
						} 
					}
					State = 616;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
				}
				State = 617;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 618;
				if (!(!this.second(Else))) throw new FailedPredicateException(this, "!this.second(Else)");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopReadStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopRead() { return GetToken(MainParser.LoopRead, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		public LoopReadStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopParseStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopParse() { return GetToken(MainParser.LoopParse, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		public LoopParseStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopParseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopFilesStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopFiles() { return GetToken(MainParser.LoopFiles, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		public LoopFilesStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopFilesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopRegStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopReg() { return GetToken(MainParser.LoopReg, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		public LoopRegStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopRegStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		public LoopStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MainParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MainParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForInParametersContext forInParameters() {
			return GetRuleContext<ForInParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_iterationStatement);
		int _la;
		try {
			int _alt;
			State = 808;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Loop:
				_localctx = new LoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 621;
				Match(Loop);
				State = 625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 622;
					Match(WS);
					}
					}
					State = 627;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 635;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
				case 1:
					{
					State = 628;
					singleExpression(0);
					State = 632;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 629;
						Match(WS);
						}
						}
						State = 634;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 637;
				flowBlock();
				State = 639;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 638;
					untilProduction();
					}
					break;
				}
				State = 641;
				elseProduction();
				}
				break;
			case LoopFiles:
				_localctx = new LoopFilesStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 643;
				Match(LoopFiles);
				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 644;
					Match(WS);
					}
					}
					State = 649;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 650;
				singleExpression(0);
				State = 659;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 654;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 651;
						Match(WS);
						}
						}
						State = 656;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 657;
					Match(Comma);
					State = 658;
					singleExpression(0);
					}
					break;
				}
				State = 664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 661;
					Match(WS);
					}
					}
					State = 666;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 667;
				flowBlock();
				State = 669;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 668;
					untilProduction();
					}
					break;
				}
				State = 671;
				elseProduction();
				}
				break;
			case LoopRead:
				_localctx = new LoopReadStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 673;
				Match(LoopRead);
				State = 677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 674;
					Match(WS);
					}
					}
					State = 679;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 680;
				singleExpression(0);
				State = 689;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 684;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 681;
						Match(WS);
						}
						}
						State = 686;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 687;
					Match(Comma);
					State = 688;
					singleExpression(0);
					}
					break;
				}
				State = 694;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 691;
					Match(WS);
					}
					}
					State = 696;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 697;
				flowBlock();
				State = 699;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
				case 1:
					{
					State = 698;
					untilProduction();
					}
					break;
				}
				State = 701;
				elseProduction();
				}
				break;
			case LoopReg:
				_localctx = new LoopRegStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 703;
				Match(LoopReg);
				State = 707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 704;
					Match(WS);
					}
					}
					State = 709;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 710;
				singleExpression(0);
				State = 719;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
				case 1:
					{
					State = 714;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 711;
						Match(WS);
						}
						}
						State = 716;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 717;
					Match(Comma);
					State = 718;
					singleExpression(0);
					}
					break;
				}
				State = 724;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 721;
					Match(WS);
					}
					}
					State = 726;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 727;
				flowBlock();
				State = 729;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
				case 1:
					{
					State = 728;
					untilProduction();
					}
					break;
				}
				State = 731;
				elseProduction();
				}
				break;
			case LoopParse:
				_localctx = new LoopParseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 733;
				Match(LoopParse);
				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 734;
					Match(WS);
					}
					}
					State = 739;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 740;
				singleExpression(0);
				State = 753;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 744;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 741;
							Match(WS);
							}
							}
							State = 746;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 747;
						Match(Comma);
						State = 749;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
						case 1:
							{
							State = 748;
							singleExpression(0);
							}
							break;
						}
						}
						} 
					}
					State = 755;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
				}
				State = 759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 756;
					Match(WS);
					}
					}
					State = 761;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 762;
				flowBlock();
				State = 764;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
				case 1:
					{
					State = 763;
					untilProduction();
					}
					break;
				}
				State = 766;
				elseProduction();
				}
				break;
			case While:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 768;
				Match(While);
				State = 772;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 769;
					Match(WS);
					}
					}
					State = 774;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 775;
				singleExpression(0);
				State = 779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 776;
					Match(WS);
					}
					}
					State = 781;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 782;
				flowBlock();
				State = 784;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
				case 1:
					{
					State = 783;
					untilProduction();
					}
					break;
				}
				State = 786;
				elseProduction();
				}
				break;
			case For:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 788;
				Match(For);
				State = 792;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 789;
						Match(WS);
						}
						} 
					}
					State = 794;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
				}
				State = 795;
				forInParameters();
				State = 799;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 796;
					Match(WS);
					}
					}
					State = 801;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 802;
				flowBlock();
				State = 804;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
				case 1:
					{
					State = 803;
					untilProduction();
					}
					break;
				}
				State = 806;
				elseProduction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext[] assignable() {
			return GetRuleContexts<AssignableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable(int i) {
			return GetRuleContext<AssignableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ForInParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInParametersContext forInParameters() {
		ForInParametersContext _localctx = new ForInParametersContext(Context, State);
		EnterRule(_localctx, 76, RULE_forInParameters);
		int _la;
		try {
			int _alt;
			State = 877;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Comma:
			case Default:
			case This:
			case In:
			case Get:
			case Set:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case From:
			case As:
			case Identifier:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) {
					{
					State = 810;
					assignable();
					}
				}

				State = 825;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 816;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 813;
							Match(WS);
							}
							}
							State = 818;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 819;
						Match(Comma);
						State = 821;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) {
							{
							State = 820;
							assignable();
							}
						}

						}
						} 
					}
					State = 827;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
				}
				State = 831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 828;
					Match(WS);
					}
					}
					State = 833;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 834;
				Match(In);
				State = 838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 835;
					Match(WS);
					}
					}
					State = 840;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 841;
				singleExpression(0);
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 842;
				Match(OpenParen);
				State = 844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) {
					{
					State = 843;
					assignable();
					}
				}

				State = 858;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 849;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 846;
							Match(WS);
							}
							}
							State = 851;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 852;
						Match(Comma);
						State = 854;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) {
							{
							State = 853;
							assignable();
							}
						}

						}
						} 
					}
					State = 860;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
				}
				State = 864;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 861;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 866;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 867;
				Match(In);
				State = 871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 868;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 873;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 874;
				singleExpression(0);
				State = 875;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(MainParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_continueStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 879;
			Match(Continue);
			State = 883;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 880;
					Match(WS);
					}
					} 
				}
				State = 885;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			}
			State = 891;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 886;
				propertyName();
				}
				break;
			case 2:
				{
				State = 887;
				Match(OpenParen);
				State = 888;
				propertyName();
				State = 889;
				Match(CloseParen);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MainParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_breakStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 893;
			Match(Break);
			State = 897;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 894;
					Match(WS);
					}
					} 
				}
				State = 899;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			}
			State = 905;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				{
				State = 900;
				Match(OpenParen);
				State = 901;
				propertyName();
				State = 902;
				Match(CloseParen);
				}
				break;
			case 2:
				{
				State = 904;
				propertyName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MainParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_returnStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			Match(Return);
			State = 911;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 908;
					Match(WS);
					}
					} 
				}
				State = 913;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
			}
			State = 915;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 914;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_yieldStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 917;
			Match(Yield);
			State = 921;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 918;
					Match(WS);
					}
					} 
				}
				State = 923;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			}
			State = 925;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 924;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(MainParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_switchStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 927;
			Match(Switch);
			State = 931;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 928;
					Match(WS);
					}
					} 
				}
				State = 933;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			}
			State = 935;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				{
				State = 934;
				singleExpression(0);
				}
				break;
			}
			State = 945;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 937;
					Match(WS);
					}
					}
					State = 942;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 943;
				Match(Comma);
				State = 944;
				literal();
				}
				break;
			}
			State = 950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 947;
				s();
				}
				}
				State = 952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 953;
			caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext[] caseClauses() {
			return GetRuleContexts<CaseClausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext caseClauses(int i) {
			return GetRuleContext<CaseClausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 88, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 955;
			Match(OpenBrace);
			State = 959;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 956;
				s();
				}
				}
				State = 961;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 963;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Case) {
				{
				State = 962;
				caseClauses();
				}
			}

			State = 969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Default) {
				{
				State = 965;
				defaultClause();
				State = 967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Case) {
					{
					State = 966;
					caseClauses();
					}
				}

				}
			}

			State = 971;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 90, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 974;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 973;
				caseClause();
				}
				}
				State = 976;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(MainParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 92, RULE_caseClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 978;
			Match(Case);
			State = 982;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 979;
				Match(WS);
				}
				}
				State = 984;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 985;
			expressionSequence();
			State = 989;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 986;
				Match(WS);
				}
				}
				State = 991;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 992;
			Match(Colon);
			State = 1001;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				{
				State = 996;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 993;
						s();
						}
						} 
					}
					State = 998;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
				}
				State = 999;
				statementList();
				}
				break;
			case 2:
				{
				State = 1000;
				Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 94, RULE_defaultClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1003;
			Match(Default);
			State = 1007;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 1004;
				Match(WS);
				}
				}
				State = 1009;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1010;
			Match(Colon);
			State = 1019;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
			case 1:
				{
				State = 1014;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1011;
						s();
						}
						} 
					}
					State = 1016;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
				}
				State = 1017;
				statementList();
				}
				break;
			case 2:
				{
				State = 1018;
				Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		public LabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelledStatementContext labelledStatement() {
		LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_labelledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1021;
			Match(Identifier);
			State = 1022;
			Match(Colon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(MainParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_gotoStatement);
		int _la;
		try {
			State = 1043;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1024;
				Match(Goto);
				State = 1028;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1025;
					Match(WS);
					}
					}
					State = 1030;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1031;
				propertyName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1032;
				Match(Goto);
				State = 1036;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1033;
					Match(WS);
					}
					}
					State = 1038;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1039;
				Match(OpenParen);
				State = 1040;
				propertyName();
				State = 1041;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(MainParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_throwStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1045;
			Match(Throw);
			State = 1049;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1046;
					Match(WS);
					}
					} 
				}
				State = 1051;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			}
			State = 1053;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				{
				State = 1052;
				singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(MainParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext[] catchProduction() {
			return GetRuleContexts<CatchProductionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext catchProduction(int i) {
			return GetRuleContext<CatchProductionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_tryStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1055;
			Match(Try);
			State = 1059;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1056;
					s();
					}
					} 
				}
				State = 1061;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			}
			State = 1062;
			statement();
			State = 1066;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1063;
					catchProduction();
					}
					} 
				}
				State = 1068;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
			}
			State = 1069;
			elseProduction();
			State = 1071;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1070;
				finallyProduction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(MainParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchAssignableContext catchAssignable() {
			return GetRuleContext<CatchAssignableContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 104, RULE_catchProduction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1073;
			Match(EOL);
			State = 1074;
			Match(Catch);
			State = 1078;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1075;
					Match(WS);
					}
					} 
				}
				State = 1080;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			}
			State = 1088;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenParen || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 2533497457623041L) != 0)) {
				{
				State = 1081;
				catchAssignable();
				State = 1085;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1082;
					Match(WS);
					}
					}
					State = 1087;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1090;
			flowBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchAssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CatchClassesContext catchClasses() {
			return GetRuleContext<CatchClassesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public CatchAssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchAssignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchAssignable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchAssignableContext catchAssignable() {
		CatchAssignableContext _localctx = new CatchAssignableContext(Context, State);
		EnterRule(_localctx, 106, RULE_catchAssignable);
		int _la;
		try {
			State = 1167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1092;
				catchClasses();
				State = 1100;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
				case 1:
					{
					State = 1096;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1093;
						Match(WS);
						}
						}
						State = 1098;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1099;
					Match(As);
					}
					break;
				}
				State = 1109;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
				case 1:
					{
					State = 1105;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1102;
						Match(WS);
						}
						}
						State = 1107;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1108;
					identifier();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1111;
				Match(OpenParen);
				State = 1112;
				catchClasses();
				State = 1120;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
				case 1:
					{
					State = 1116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1113;
						Match(WS);
						}
						}
						State = 1118;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1119;
					Match(As);
					}
					break;
				}
				State = 1129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 2533497457623041L) != 0)) {
					{
					State = 1125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1122;
						Match(WS);
						}
						}
						State = 1127;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1128;
					identifier();
					}
				}

				State = 1131;
				Match(CloseParen);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 1136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1133;
					Match(WS);
					}
					}
					State = 1138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1139;
				Match(As);
				}
				{
				State = 1144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1141;
					Match(WS);
					}
					}
					State = 1146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1147;
				identifier();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1148;
				Match(OpenParen);
				{
				State = 1152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1149;
					Match(WS);
					}
					}
					State = 1154;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1155;
				Match(As);
				}
				{
				State = 1160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1157;
					Match(WS);
					}
					}
					State = 1162;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1163;
				identifier();
				}
				State = 1165;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClassesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public CatchClassesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClasses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClasses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClassesContext catchClasses() {
		CatchClassesContext _localctx = new CatchClassesContext(Context, State);
		EnterRule(_localctx, 108, RULE_catchClasses);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1169;
			identifier();
			State = 1180;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1173;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1170;
						Match(WS);
						}
						}
						State = 1175;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1176;
					Match(Comma);
					State = 1177;
					identifier();
					}
					} 
				}
				State = 1182;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(MainParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 110, RULE_finallyProduction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1183;
			Match(EOL);
			State = 1184;
			Match(Finally);
			State = 1188;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1185;
					s();
					}
					} 
				}
				State = 1190;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			}
			State = 1191;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 112, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1193;
			functionHead();
			State = 1194;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MainParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(MainParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassExtensionNameContext classExtensionName() {
			return GetRuleContext<ClassExtensionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 114, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1196;
			Match(Class);
			State = 1200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 1197;
				Match(WS);
				}
				}
				State = 1202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1203;
			identifier();
			State = 1216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				State = 1205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1204;
					Match(WS);
					}
					}
					State = 1207;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS );
				State = 1209;
				Match(Extends);
				State = 1211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1210;
					Match(WS);
					}
					}
					State = 1213;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS );
				State = 1215;
				classExtensionName();
				}
				break;
			}
			State = 1221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1218;
				s();
				}
				}
				State = 1223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1224;
			classTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassExtensionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MainParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MainParser.Dot, i);
		}
		public ClassExtensionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classExtensionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExtensionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassExtensionNameContext classExtensionName() {
		ClassExtensionNameContext _localctx = new ClassExtensionNameContext(Context, State);
		EnterRule(_localctx, 116, RULE_classExtensionName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1226;
			identifier();
			State = 1231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 1227;
				Match(Dot);
				State = 1228;
				identifier();
				}
				}
				State = 1233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext[] classElement() {
			return GetRuleContexts<ClassElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext classElement(int i) {
			return GetRuleContext<ClassElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ClassTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTailContext classTail() {
		ClassTailContext _localctx = new ClassTailContext(Context, State);
		EnterRule(_localctx, 118, RULE_classTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1234;
			Match(OpenBrace);
			State = 1241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207053311L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 7L) != 0)) {
				{
				State = 1239;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NullLiteral:
				case Unset:
				case True:
				case False:
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
				case Break:
				case Do:
				case Instanceof:
				case Switch:
				case Case:
				case Default:
				case Else:
				case Catch:
				case Finally:
				case Return:
				case Continue:
				case For:
				case While:
				case Loop:
				case Until:
				case This:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case Yield:
				case Is:
				case Contains:
				case VerbalAnd:
				case VerbalNot:
				case VerbalOr:
				case Goto:
				case Get:
				case Set:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Base:
				case Export:
				case Import:
				case From:
				case As:
				case Async:
				case Await:
				case Static:
				case Global:
				case Local:
				case Identifier:
				case StringLiteral:
					{
					State = 1235;
					classElement();
					State = 1236;
					Match(EOL);
					}
					break;
				case EOL:
					{
					State = 1238;
					Match(EOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1244;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementContext : ParserRuleContext {
		public ClassElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElement; } }
	 
		public ClassElementContext() { }
		public virtual void CopyFrom(ClassElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public NestedClassDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassFieldDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext[] fieldDefinition() {
			return GetRuleContexts<FieldDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition(int i) {
			return GetRuleContext<FieldDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ClassFieldDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassMethodDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public ClassMethodDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassPropertyDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDefinitionContext propertyDefinition() {
			return GetRuleContext<PropertyDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ClassPropertyDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementContext classElement() {
		ClassElementContext _localctx = new ClassElementContext(Context, State);
		EnterRule(_localctx, 120, RULE_classElement);
		int _la;
		try {
			State = 1281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
			case 1:
				_localctx = new ClassMethodDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1246;
				methodDefinition();
				}
				break;
			case 2:
				_localctx = new ClassPropertyDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Static) {
					{
					State = 1247;
					Match(Static);
					State = 1251;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1248;
						Match(WS);
						}
						}
						State = 1253;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1256;
				propertyDefinition();
				}
				break;
			case 3:
				_localctx = new ClassFieldDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1264;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
				case 1:
					{
					State = 1257;
					Match(Static);
					State = 1261;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1258;
						Match(WS);
						}
						}
						State = 1263;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 1266;
				fieldDefinition();
				State = 1277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma || _la==WS) {
					{
					{
					State = 1270;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1267;
						Match(WS);
						}
						}
						State = 1272;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1273;
					Match(Comma);
					State = 1274;
					fieldDefinition();
					}
					}
					State = 1279;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 4:
				_localctx = new NestedClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1280;
				classDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
		EnterRule(_localctx, 122, RULE_methodDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1283;
			functionHead();
			State = 1284;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassPropertyNameContext classPropertyName() {
			return GetRuleContext<ClassPropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyGetterDefinitionContext[] propertyGetterDefinition() {
			return GetRuleContexts<PropertyGetterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyGetterDefinitionContext propertyGetterDefinition(int i) {
			return GetRuleContext<PropertyGetterDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySetterDefinitionContext[] propertySetterDefinition() {
			return GetRuleContexts<PropertySetterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySetterDefinitionContext propertySetterDefinition(int i) {
			return GetRuleContext<PropertySetterDefinitionContext>(i);
		}
		public PropertyDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefinitionContext propertyDefinition() {
		PropertyDefinitionContext _localctx = new PropertyDefinitionContext(Context, State);
		EnterRule(_localctx, 124, RULE_propertyDefinition);
		int _la;
		try {
			State = 1311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1286;
				classPropertyName();
				State = 1287;
				Match(Arrow);
				State = 1288;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1290;
				classPropertyName();
				State = 1294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1291;
					s();
					}
					}
					State = 1296;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1297;
				Match(OpenBrace);
				State = 1305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 1305;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Get:
						{
						State = 1298;
						propertyGetterDefinition();
						State = 1299;
						Match(EOL);
						}
						break;
					case Set:
						{
						State = 1301;
						propertySetterDefinition();
						State = 1302;
						Match(EOL);
						}
						break;
					case EOL:
						{
						State = 1304;
						Match(EOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 1307;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8388611L) != 0) );
				State = 1309;
				Match(CloseBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassPropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public ClassPropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classPropertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassPropertyNameContext classPropertyName() {
		ClassPropertyNameContext _localctx = new ClassPropertyNameContext(Context, State);
		EnterRule(_localctx, 126, RULE_classPropertyName);
		int _la;
		try {
			State = 1327;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1313;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1314;
				identifier();
				State = 1315;
				Match(OpenBracket);
				State = 1317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply || _la==BitAnd || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) {
					{
					State = 1316;
					formalParameterList();
					}
				}

				State = 1322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1319;
					s();
					}
					}
					State = 1324;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1325;
				Match(CloseBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(MainParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertyGetterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetterDefinitionContext propertyGetterDefinition() {
		PropertyGetterDefinitionContext _localctx = new PropertyGetterDefinitionContext(Context, State);
		EnterRule(_localctx, 128, RULE_propertyGetterDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1329;
			Match(Get);
			State = 1330;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(MainParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertySetterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetterDefinitionContext propertySetterDefinition() {
		PropertySetterDefinitionContext _localctx = new PropertySetterDefinitionContext(Context, State);
		EnterRule(_localctx, 130, RULE_propertySetterDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1332;
			Match(Set);
			State = 1333;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext[] propertyName() {
			return GetRuleContexts<PropertyNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName(int i) {
			return GetRuleContext<PropertyNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MainParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MainParser.Dot, i);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 132, RULE_fieldDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1335;
			propertyName();
			State = 1340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 1336;
				Match(Dot);
				State = 1337;
				propertyName();
				}
				}
				State = 1342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 1343;
			Match(Assign);
			State = 1344;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterArgContext lastFormalParameterArg() {
			return GetRuleContext<LastFormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext[] formalParameterArg() {
			return GetRuleContexts<FormalParameterArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg(int i) {
			return GetRuleContext<FormalParameterArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 134, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1357;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1346;
					formalParameterArg();
					State = 1350;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1347;
						Match(WS);
						}
						}
						State = 1352;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1353;
					Match(Comma);
					}
					} 
				}
				State = 1359;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
			}
			State = 1360;
			lastFormalParameterArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterArgContext formalParameterArg() {
		FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
		EnterRule(_localctx, 136, RULE_formalParameterArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BitAnd) {
				{
				State = 1362;
				Match(BitAnd);
				}
			}

			State = 1365;
			identifier();
			State = 1369;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				{
				State = 1366;
				Match(Assign);
				State = 1367;
				expression(0);
				}
				break;
			case QuestionMark:
				{
				State = 1368;
				Match(QuestionMark);
				}
				break;
			case CloseBracket:
			case CloseParen:
			case Comma:
			case EOL:
			case WS:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg() {
			return GetRuleContext<FormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LastFormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterArgContext lastFormalParameterArg() {
		LastFormalParameterArgContext _localctx = new LastFormalParameterArgContext(Context, State);
		EnterRule(_localctx, 138, RULE_lastFormalParameterArg);
		int _la;
		try {
			State = 1376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1371;
				formalParameterArg();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) {
					{
					State = 1372;
					identifier();
					}
				}

				State = 1375;
				Match(Multiply);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 140, RULE_arrayLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1378;
			Match(OpenBracket);
			State = 1382;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,191,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1379;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 1384;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,191,Context);
			}
			State = 1392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738021042818L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207060991L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 11L) != 0)) {
				{
				State = 1385;
				arguments();
				State = 1389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1386;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1391;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1394;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MapElementListContext mapElementList() {
			return GetRuleContext<MapElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public MapLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapLiteralContext mapLiteral() {
		MapLiteralContext _localctx = new MapLiteralContext(Context, State);
		EnterRule(_localctx, 142, RULE_mapLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1396;
			Match(OpenBracket);
			State = 1400;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,194,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1397;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 1402;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,194,Context);
			}
			State = 1403;
			mapElementList();
			State = 1407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1404;
				_la = TokenStream.LA(1);
				if ( !(_la==EOL || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1410;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapElementContext[] mapElement() {
			return GetRuleContexts<MapElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapElementContext mapElement(int i) {
			return GetRuleContext<MapElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public MapElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapElementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapElementListContext mapElementList() {
		MapElementListContext _localctx = new MapElementListContext(Context, State);
		EnterRule(_localctx, 144, RULE_mapElementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma || _la==WS) {
				{
				{
				State = 1415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1412;
					Match(WS);
					}
					}
					State = 1417;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1418;
				Match(Comma);
				}
				}
				State = 1423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1424;
			mapElement();
			State = 1437;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1428;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1425;
						Match(WS);
						}
						}
						State = 1430;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1431;
					Match(Comma);
					State = 1433;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738021034626L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207060991L) != 0) || _la==Identifier || _la==StringLiteral) {
						{
						State = 1432;
						mapElement();
						}
					}

					}
					} 
				}
				State = 1439;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapElementContext : ParserRuleContext {
		public ExpressionContext key;
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MapElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapElementContext mapElement() {
		MapElementContext _localctx = new MapElementContext(Context, State);
		EnterRule(_localctx, 146, RULE_mapElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1440;
			_localctx.key = expression(0);
			State = 1441;
			Match(Colon);
			State = 1442;
			_localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberIdentifierContext memberIdentifier() {
			return GetRuleContext<MemberIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 148, RULE_propertyAssignment);
		int _la;
		try {
			_localctx = new PropertyExpressionAssignmentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 1444;
			memberIdentifier();
			State = 1448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1445;
				_la = TokenStream.LA(1);
				if ( !(_la==EOL || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1451;
			Match(Colon);
			State = 1455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1452;
				_la = TokenStream.LA(1);
				if ( !(_la==EOL || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1458;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 150, RULE_propertyName);
		try {
			State = 1464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1460;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1461;
				reservedWord();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1462;
				Match(StringLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1463;
				numericLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DereferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefStart() { return GetToken(MainParser.DerefStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefEnd() { return GetToken(MainParser.DerefEnd, 0); }
		public DereferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dereference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDereference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DereferenceContext dereference() {
		DereferenceContext _localctx = new DereferenceContext(Context, State);
		EnterRule(_localctx, 152, RULE_dereference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1466;
			Match(DerefStart);
			State = 1467;
			expression(0);
			State = 1468;
			Match(DerefEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 154, RULE_arguments);
		int _la;
		try {
			int _alt;
			State = 1500;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DerefStart:
			case OpenBracket:
			case OpenParen:
			case OpenBrace:
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case BitNot:
			case Not:
			case Multiply:
			case BitAnd:
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1470;
				argument();
				State = 1483;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,206,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1474;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 1471;
							Match(WS);
							}
							}
							State = 1476;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1477;
						Match(Comma);
						State = 1479;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
						case 1:
							{
							State = 1478;
							argument();
							}
							break;
						}
						}
						} 
					}
					State = 1485;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,206,Context);
				}
				}
				break;
			case Comma:
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1496;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1489;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 1486;
							Match(WS);
							}
							}
							State = 1491;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1492;
						Match(Comma);
						State = 1494;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
						case 1:
							{
							State = 1493;
							argument();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1498;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,209,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 156, RULE_argument);
		int _la;
		try {
			State = 1506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1502;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1503;
				primaryExpression(0);
				State = 1504;
				_la = TokenStream.LA(1);
				if ( !(_la==QuestionMark || _la==Multiply) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 158, RULE_expressionSequence);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1508;
			expression(0);
			State = 1519;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,213,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1512;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1509;
						Match(WS);
						}
						}
						State = 1514;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1515;
					Match(Comma);
					State = 1516;
					expression(0);
					}
					} 
				}
				State = 1521;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,213,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberIndexArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public MemberIndexArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberIndexArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberIndexArgumentsContext memberIndexArguments() {
		MemberIndexArgumentsContext _localctx = new MemberIndexArgumentsContext(Context, State);
		EnterRule(_localctx, 160, RULE_memberIndexArguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1522;
			Match(OpenBracket);
			State = 1526;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,214,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1523;
					s();
					}
					} 
				}
				State = 1528;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,214,Context);
			}
			State = 1536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738021042818L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207060991L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 11L) != 0)) {
				{
				State = 1529;
				arguments();
				State = 1533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1530;
					s();
					}
					}
					State = 1535;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1538;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		public ExpressionContext ternCond;
		public ExpressionContext ternTrue;
		public ExpressionContext ternFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MainParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpressionHeadContext functionExpressionHead() {
			return GetRuleContext<FunctionExpressionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public FunctionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FatArrowExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FatArrowExpressionHeadContext fatArrowExpressionHead() {
			return GetRuleContext<FatArrowExpressionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FatArrowExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFatArrowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MainParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionDummyContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public ExpressionDummyContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionDummy(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(MainParser.NullCoalesce, 0); }
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 162;
		EnterRecursionRule(_localctx, 162, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
			case 1:
				{
				_localctx = new FatArrowExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1541;
				fatArrowExpressionHead();
				State = 1542;
				Match(Arrow);
				State = 1543;
				expression(3);
				}
				break;
			case 2:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1545;
				functionExpressionHead();
				State = 1549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1546;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1551;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1552;
				block();
				}
				break;
			case 3:
				{
				_localctx = new ExpressionDummyContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1554;
				operatorExpression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1604;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,226,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1602;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
					case 1:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1557;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1560;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case And:
							{
							State = 1558;
							((LogicalAndExpressionContext)_localctx).op = Match(And);
							}
							break;
						case VerbalAnd:
							{
							State = 1559;
							((LogicalAndExpressionContext)_localctx).op = Match(VerbalAnd);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1562;
						((LogicalAndExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 2:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1563;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1566;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case Or:
							{
							State = 1564;
							((LogicalOrExpressionContext)_localctx).op = Match(Or);
							}
							break;
						case VerbalOr:
							{
							State = 1565;
							((LogicalOrExpressionContext)_localctx).op = Match(VerbalOr);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1568;
						((LogicalOrExpressionContext)_localctx).right = expression(7);
						}
						break;
					case 3:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CoalesceExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1569;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1570;
						((CoalesceExpressionContext)_localctx).op = Match(NullCoalesce);
						State = 1571;
						((CoalesceExpressionContext)_localctx).right = expression(5);
						}
						break;
					case 4:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TernaryExpressionContext)_localctx).ternCond = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1572;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1576;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1573;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1578;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1579;
						Match(QuestionMark);
						State = 1583;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1580;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1585;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1586;
						((TernaryExpressionContext)_localctx).ternTrue = expression(0);
						State = 1590;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1587;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1592;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1593;
						Match(Colon);
						State = 1597;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1594;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1599;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1600;
						((TernaryExpressionContext)_localctx).ternFalse = expression(4);
						}
						break;
					}
					} 
				}
				State = 1606;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,226,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalOrExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MainParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		public LogicalOrExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleExpressionDummyContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public SingleExpressionDummyContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleExpressionDummy(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext ternCond;
		public SingleExpressionContext ternTrue;
		public SingleExpressionContext ternFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public TernaryExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MainParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		public LogicalAndExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(MainParser.NullCoalesce, 0); }
		public CoalesceExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 164;
		EnterRecursionRule(_localctx, 164, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SingleExpressionDummyContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1608;
			operatorExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1651;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,232,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1649;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,231,Context) ) {
					case 1:
						{
						_localctx = new LogicalAndExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1610;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1611;
						((LogicalAndExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==And || _la==VerbalAnd) ) {
							((LogicalAndExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1612;
						((LogicalAndExpressionDuplicateContext)_localctx).right = singleExpression(6);
						}
						break;
					case 2:
						{
						_localctx = new LogicalOrExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1613;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1614;
						((LogicalOrExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Or || _la==VerbalOr) ) {
							((LogicalOrExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1615;
						((LogicalOrExpressionDuplicateContext)_localctx).right = singleExpression(5);
						}
						break;
					case 3:
						{
						_localctx = new CoalesceExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((CoalesceExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1616;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1617;
						((CoalesceExpressionDuplicateContext)_localctx).op = Match(NullCoalesce);
						State = 1618;
						((CoalesceExpressionDuplicateContext)_localctx).right = singleExpression(4);
						}
						break;
					case 4:
						{
						_localctx = new TernaryExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((TernaryExpressionDuplicateContext)_localctx).ternCond = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1619;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1623;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1620;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1625;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1626;
						Match(QuestionMark);
						State = 1630;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1627;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1632;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1633;
						((TernaryExpressionDuplicateContext)_localctx).ternTrue = singleExpression(0);
						State = 1637;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1634;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1639;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1640;
						Match(Colon);
						State = 1644;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1641;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1646;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1647;
						((TernaryExpressionDuplicateContext)_localctx).ternFalse = singleExpression(2);
						}
						break;
					}
					} 
				}
				State = 1653;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,232,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperatorExpressionContext : ParserRuleContext {
		public OperatorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorExpression; } }
	 
		public OperatorExpressionContext() { }
		public virtual void CopyFrom(OperatorExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AdditiveExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public AdditiveExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(MainParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(MainParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(MainParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(MainParser.GreaterThanEquals, 0); }
		public RelationalExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public PostIncrementExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(MainParser.Power, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		public PowerExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContainExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(MainParser.Contains, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public ContainExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public PreIncrementExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitNotExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(MainParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public BitNotExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(MainParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public NotExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegExMatchExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegExMatch() { return GetToken(MainParser.RegExMatch, 0); }
		public RegExMatchExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegExMatchExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecreaseExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public PreDecreaseExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : OperatorExpressionContext {
		public PrimaryExpressionContext left;
		public AssignmentOperatorContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public BitAndExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecreaseExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public PostDecreaseExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(MainParser.BitOr, 0); }
		public BitOrExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public UnaryPlusExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenateExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConcatDot() { return GetToken(MainParser.ConcatDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ConcatenateExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorExpressionDummyContext : OperatorExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public OperatorExpressionDummyContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorExpressionDummy(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(MainParser.BitXOr, 0); }
		public BitXOrExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(MainParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(MainParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(MainParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityNotEquals() { return GetToken(MainParser.IdentityNotEquals, 0); }
		public EqualityExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VerbalNotExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public VerbalNotExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbalNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(MainParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivide() { return GetToken(MainParser.IntegerDivide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public MultiplicativeExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitShiftExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(MainParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(MainParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogical() { return GetToken(MainParser.RightShiftLogical, 0); }
		public BitShiftExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorExpressionContext operatorExpression() {
		return operatorExpression(0);
	}

	private OperatorExpressionContext operatorExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		OperatorExpressionContext _localctx = new OperatorExpressionContext(Context, _parentState);
		OperatorExpressionContext _prevctx = _localctx;
		int _startState = 166;
		EnterRecursionRule(_localctx, 166, RULE_operatorExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,235,Context) ) {
			case 1:
				{
				_localctx = new OperatorExpressionDummyContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1655;
				primaryExpression(0);
				}
				break;
			case 2:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1656;
				Match(PlusPlus);
				State = 1657;
				((PreIncrementExpressionContext)_localctx).right = operatorExpression(20);
				}
				break;
			case 3:
				{
				_localctx = new PreDecreaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1658;
				Match(MinusMinus);
				State = 1659;
				((PreDecreaseExpressionContext)_localctx).right = operatorExpression(19);
				}
				break;
			case 4:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1660;
				Match(Minus);
				State = 1661;
				((UnaryMinusExpressionContext)_localctx).right = operatorExpression(17);
				}
				break;
			case 5:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1662;
				Match(Not);
				State = 1666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1663;
					Match(WS);
					}
					}
					State = 1668;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1669;
				((NotExpressionContext)_localctx).right = operatorExpression(16);
				}
				break;
			case 6:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1670;
				Match(Plus);
				State = 1671;
				((UnaryPlusExpressionContext)_localctx).right = operatorExpression(15);
				}
				break;
			case 7:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1672;
				Match(BitNot);
				State = 1673;
				((BitNotExpressionContext)_localctx).right = operatorExpression(14);
				}
				break;
			case 8:
				{
				_localctx = new VerbalNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1674;
				Match(VerbalNot);
				State = 1678;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1675;
					Match(WS);
					}
					}
					State = 1680;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1681;
				((VerbalNotExpressionContext)_localctx).right = operatorExpression(2);
				}
				break;
			case 9:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1682;
				((AssignmentExpressionContext)_localctx).left = primaryExpression(0);
				State = 1683;
				((AssignmentExpressionContext)_localctx).op = assignmentOperator();
				State = 1684;
				((AssignmentExpressionContext)_localctx).right = expression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1785;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,247,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1783;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,246,Context) ) {
					case 1:
						{
						_localctx = new PowerExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((PowerExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1688;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1689;
						Match(Power);
						State = 1690;
						((PowerExpressionContext)_localctx).right = operatorExpression(18);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((MultiplicativeExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1691;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						{
						State = 1695;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1692;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1697;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1698;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1879048192L) != 0)) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1702;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1699;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1704;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1705;
						((MultiplicativeExpressionContext)_localctx).right = operatorExpression(14);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((AdditiveExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1706;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						{
						State = 1710;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1707;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1712;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1713;
						((AdditiveExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1717;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1714;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1719;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1720;
						((AdditiveExpressionContext)_localctx).right = operatorExpression(13);
						}
						break;
					case 4:
						{
						_localctx = new BitShiftExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((BitShiftExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1721;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1722;
						((BitShiftExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0)) ) {
							((BitShiftExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1723;
						((BitShiftExpressionContext)_localctx).right = operatorExpression(12);
						}
						break;
					case 5:
						{
						_localctx = new BitAndExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((BitAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1724;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						{
						State = 1728;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1725;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1730;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1731;
						((BitAndExpressionContext)_localctx).op = Match(BitAnd);
						State = 1735;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1732;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1737;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1738;
						((BitAndExpressionContext)_localctx).right = operatorExpression(11);
						}
						break;
					case 6:
						{
						_localctx = new BitXOrExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((BitXOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1739;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1740;
						((BitXOrExpressionContext)_localctx).op = Match(BitXOr);
						State = 1741;
						((BitXOrExpressionContext)_localctx).right = operatorExpression(10);
						}
						break;
					case 7:
						{
						_localctx = new BitOrExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((BitOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1742;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1743;
						((BitOrExpressionContext)_localctx).op = Match(BitOr);
						State = 1744;
						((BitOrExpressionContext)_localctx).right = operatorExpression(9);
						}
						break;
					case 8:
						{
						_localctx = new ConcatenateExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((ConcatenateExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1745;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1752;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ConcatDot:
							{
							State = 1746;
							Match(ConcatDot);
							}
							break;
						case WS:
							{
							State = 1748;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							do {
								{
								{
								State = 1747;
								Match(WS);
								}
								}
								State = 1750;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							} while ( _la==WS );
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1754;
						((ConcatenateExpressionContext)_localctx).right = operatorExpression(8);
						}
						break;
					case 9:
						{
						_localctx = new RegExMatchExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((RegExMatchExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1755;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1756;
						((RegExMatchExpressionContext)_localctx).op = Match(RegExMatch);
						State = 1757;
						((RegExMatchExpressionContext)_localctx).right = operatorExpression(7);
						}
						break;
					case 10:
						{
						_localctx = new RelationalExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((RelationalExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1758;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1759;
						((RelationalExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4123168604160L) != 0)) ) {
							((RelationalExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1760;
						((RelationalExpressionContext)_localctx).right = operatorExpression(6);
						}
						break;
					case 11:
						{
						_localctx = new EqualityExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1761;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1762;
						((EqualityExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 65970697666560L) != 0)) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1763;
						((EqualityExpressionContext)_localctx).right = operatorExpression(5);
						}
						break;
					case 12:
						{
						_localctx = new ContainExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((ContainExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1764;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						{
						State = 1768;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1765;
							s();
							}
							}
							State = 1770;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1771;
						((ContainExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 52428801L) != 0)) ) {
							((ContainExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1775;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1772;
							s();
							}
							}
							State = 1777;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1778;
						((ContainExpressionContext)_localctx).right = operatorExpression(4);
						}
						break;
					case 13:
						{
						_localctx = new PostIncrementExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((PostIncrementExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1779;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1780;
						Match(PlusPlus);
						}
						break;
					case 14:
						{
						_localctx = new PostDecreaseExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((PostDecreaseExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1781;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1782;
						Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 1787;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,247,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
	 
		public PrimaryExpressionContext() { }
		public virtual void CopyFrom(PrimaryExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MapLiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapLiteralContext mapLiteral() {
			return GetRuleContext<MapLiteralContext>(0);
		}
		public MapLiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarRefExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public VarRefExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarRefExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DynamicIdentifierExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DynamicIdentifierContext dynamicIdentifier() {
			return GetRuleContext<DynamicIdentifierContext>(0);
		}
		public DynamicIdentifierExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDotExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberIdentifierContext memberIdentifier() {
			return GetRuleContext<MemberIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MainParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		public MemberDotExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberIndexArgumentsContext memberIndexArguments() {
			return GetRuleContext<MemberIndexArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		public MemberIndexExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctionCallExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		return primaryExpression(0);
	}

	private PrimaryExpressionContext primaryExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, _parentState);
		PrimaryExpressionContext _prevctx = _localctx;
		int _startState = 168;
		EnterRecursionRule(_localctx, 168, RULE_primaryExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1801;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				{
				_localctx = new VarRefExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1789;
				Match(BitAnd);
				State = 1790;
				primaryExpression(8);
				}
				break;
			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1791;
				identifier();
				}
				break;
			case 3:
				{
				_localctx = new DynamicIdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1792;
				dynamicIdentifier();
				}
				break;
			case 4:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1793;
				literal();
				}
				break;
			case 5:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1794;
				arrayLiteral();
				}
				break;
			case 6:
				{
				_localctx = new MapLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1795;
				mapLiteral();
				}
				break;
			case 7:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1796;
				objectLiteral();
				}
				break;
			case 8:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1797;
				Match(OpenParen);
				State = 1798;
				expressionSequence();
				State = 1799;
				Match(CloseParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1819;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1817;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
					case 1:
						{
						_localctx = new MemberDotExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 1803;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1804;
						_la = TokenStream.LA(1);
						if ( !(_la==QuestionMarkDot || _la==Dot) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1805;
						memberIdentifier();
						}
						break;
					case 2:
						{
						_localctx = new FunctionCallExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 1806;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1807;
						Match(OpenParen);
						State = 1809;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738021042818L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207060991L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 11L) != 0)) {
							{
							State = 1808;
							arguments();
							}
						}

						State = 1811;
						Match(CloseParen);
						}
						break;
					case 3:
						{
						_localctx = new MemberIndexExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 1812;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1814;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==QuestionMarkDot) {
							{
							State = 1813;
							Match(QuestionMarkDot);
							}
						}

						State = 1816;
						memberIndexArguments();
						}
						break;
					}
					} 
				}
				State = 1821;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MemberDotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MainParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		public MemberDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDotContext memberDot() {
		MemberDotContext _localctx = new MemberDotContext(Context, State);
		EnterRule(_localctx, 170, RULE_memberDot);
		int _la;
		try {
			State = 1848;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1823;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1822;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1825;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EOL || _la==WS );
				State = 1827;
				Match(Dot);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1828;
				Match(Dot);
				State = 1832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1829;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1834;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1835;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1840;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1841;
				Match(QuestionMarkDot);
				State = 1845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1842;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1847;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DynamicIdentifierContext dynamicIdentifier() {
			return GetRuleContext<DynamicIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public MemberIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberIdentifierContext memberIdentifier() {
		MemberIdentifierContext _localctx = new MemberIdentifierContext(Context, State);
		EnterRule(_localctx, 172, RULE_memberIdentifier);
		try {
			State = 1854;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1850;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1851;
				dynamicIdentifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1852;
				reservedWord();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1853;
				literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext[] propertyName() {
			return GetRuleContexts<PropertyNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName(int i) {
			return GetRuleContext<PropertyNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext[] dereference() {
			return GetRuleContexts<DereferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference(int i) {
			return GetRuleContext<DereferenceContext>(i);
		}
		public DynamicIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicIdentifierContext dynamicIdentifier() {
		DynamicIdentifierContext _localctx = new DynamicIdentifierContext(Context, State);
		EnterRule(_localctx, 174, RULE_dynamicIdentifier);
		try {
			int _alt;
			State = 1873;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1856;
				propertyName();
				State = 1857;
				dereference();
				State = 1862;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,260,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 1860;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NullLiteral:
						case Unset:
						case True:
						case False:
						case DecimalLiteral:
						case HexIntegerLiteral:
						case OctalIntegerLiteral:
						case OctalIntegerLiteral2:
						case BinaryIntegerLiteral:
						case Break:
						case Do:
						case Instanceof:
						case Switch:
						case Case:
						case Default:
						case Else:
						case Catch:
						case Finally:
						case Return:
						case Continue:
						case For:
						case While:
						case Loop:
						case Until:
						case This:
						case If:
						case Throw:
						case Delete:
						case In:
						case Try:
						case Yield:
						case Is:
						case Contains:
						case VerbalAnd:
						case VerbalNot:
						case VerbalOr:
						case Goto:
						case Get:
						case Set:
						case Class:
						case Enum:
						case Extends:
						case Super:
						case Base:
						case Export:
						case Import:
						case From:
						case As:
						case Async:
						case Await:
						case Static:
						case Global:
						case Local:
						case Identifier:
						case StringLiteral:
							{
							State = 1858;
							propertyName();
							}
							break;
						case DerefStart:
							{
							State = 1859;
							dereference();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 1864;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,260,Context);
				}
				}
				break;
			case DerefStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1865;
				dereference();
				State = 1870;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,262,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 1868;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NullLiteral:
						case Unset:
						case True:
						case False:
						case DecimalLiteral:
						case HexIntegerLiteral:
						case OctalIntegerLiteral:
						case OctalIntegerLiteral2:
						case BinaryIntegerLiteral:
						case Break:
						case Do:
						case Instanceof:
						case Switch:
						case Case:
						case Default:
						case Else:
						case Catch:
						case Finally:
						case Return:
						case Continue:
						case For:
						case While:
						case Loop:
						case Until:
						case This:
						case If:
						case Throw:
						case Delete:
						case In:
						case Try:
						case Yield:
						case Is:
						case Contains:
						case VerbalAnd:
						case VerbalNot:
						case VerbalOr:
						case Goto:
						case Get:
						case Set:
						case Class:
						case Enum:
						case Extends:
						case Super:
						case Base:
						case Export:
						case Import:
						case From:
						case As:
						case Async:
						case Await:
						case Static:
						case Global:
						case Local:
						case Identifier:
						case StringLiteral:
							{
							State = 1866;
							propertyName();
							}
							break;
						case DerefStart:
							{
							State = 1867;
							dereference();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 1872;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,262,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 176, RULE_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1875;
			Match(Assign);
			State = 1876;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableContext assignable() {
		AssignableContext _localctx = new AssignableContext(Context, State);
		EnterRule(_localctx, 178, RULE_assignable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1878;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 180, RULE_objectLiteral);
		int _la;
		try {
			int _alt;
			State = 1916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1880;
				Match(OpenBrace);
				State = 1884;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1881;
					s();
					}
					}
					State = 1886;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1887;
				propertyAssignment();
				State = 1898;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,266,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1891;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 1888;
							Match(WS);
							}
							}
							State = 1893;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1894;
						Match(Comma);
						State = 1895;
						propertyAssignment();
						}
						} 
					}
					State = 1900;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,266,Context);
				}
				State = 1904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1901;
					s();
					}
					}
					State = 1906;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1907;
				Match(CloseBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1909;
				Match(OpenBrace);
				State = 1911;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1910;
					Match(WS);
					}
					}
					State = 1913;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS );
				State = 1915;
				Match(CloseBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadPrefixContext functionHeadPrefix() {
			return GetRuleContext<FunctionHeadPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeadContext functionHead() {
		FunctionHeadContext _localctx = new FunctionHeadContext(Context, State);
		EnterRule(_localctx, 182, RULE_functionHead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1919;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				{
				State = 1918;
				functionHeadPrefix();
				}
				break;
			}
			State = 1921;
			identifierName();
			State = 1922;
			Match(OpenParen);
			State = 1924;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply || _la==BitAnd || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) {
				{
				State = 1923;
				formalParameterList();
				}
			}

			State = 1926;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeadPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Async() { return GetTokens(MainParser.Async); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async(int i) {
			return GetToken(MainParser.Async, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Static() { return GetTokens(MainParser.Static); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static(int i) {
			return GetToken(MainParser.Static, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public FunctionHeadPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHeadPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHeadPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeadPrefixContext functionHeadPrefix() {
		FunctionHeadPrefixContext _localctx = new FunctionHeadPrefixContext(Context, State);
		EnterRule(_localctx, 184, RULE_functionHeadPrefix);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1935;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1928;
					_la = TokenStream.LA(1);
					if ( !(_la==Async || _la==Static) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1932;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1929;
						Match(WS);
						}
						}
						State = 1934;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1937;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,273,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadPrefixContext functionHeadPrefix() {
			return GetRuleContext<FunctionHeadPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionExpressionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionExpressionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpressionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionHeadContext functionExpressionHead() {
		FunctionExpressionHeadContext _localctx = new FunctionExpressionHeadContext(Context, State);
		EnterRule(_localctx, 186, RULE_functionExpressionHead);
		int _la;
		try {
			State = 1948;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1939;
				functionHead();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1941;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Async || _la==Static) {
					{
					State = 1940;
					functionHeadPrefix();
					}
				}

				State = 1943;
				Match(OpenParen);
				State = 1945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply || _la==BitAnd || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) {
					{
					State = 1944;
					formalParameterList();
					}
				}

				State = 1947;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FatArrowExpressionHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadPrefixContext functionHeadPrefix() {
			return GetRuleContext<FunctionHeadPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpressionHeadContext functionExpressionHead() {
			return GetRuleContext<FunctionExpressionHeadContext>(0);
		}
		public FatArrowExpressionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fatArrowExpressionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFatArrowExpressionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FatArrowExpressionHeadContext fatArrowExpressionHead() {
		FatArrowExpressionHeadContext _localctx = new FatArrowExpressionHeadContext(Context, State);
		EnterRule(_localctx, 188, RULE_fatArrowExpressionHead);
		int _la;
		try {
			State = 1968;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207052815L) != 0) || _la==Identifier) {
					{
					State = 1951;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
					case 1:
						{
						State = 1950;
						functionHeadPrefix();
						}
						break;
					}
					State = 1953;
					identifierName();
					}
				}

				State = 1956;
				Match(Multiply);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1958;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
				case 1:
					{
					State = 1957;
					functionHeadPrefix();
					}
					break;
				}
				State = 1961;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BitAnd) {
					{
					State = 1960;
					Match(BitAnd);
					}
				}

				State = 1963;
				identifierName();
				State = 1965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QuestionMark) {
					{
					State = 1964;
					Match(QuestionMark);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1967;
				functionExpressionHead();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 190, RULE_functionBody);
		int _la;
		try {
			int _alt;
			State = 1989;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Arrow:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1970;
				Match(Arrow);
				State = 1971;
				expression(0);
				}
				break;
			case OpenBrace:
			case EOL:
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1972;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1977;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1978;
				Match(OpenBrace);
				State = 1982;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,284,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1979;
						s();
						}
						} 
					}
					State = 1984;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,284,Context);
				}
				State = 1986;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
				case 1:
					{
					State = 1985;
					statementList();
					}
					break;
				}
				State = 1988;
				Match(CloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(MainParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(MainParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(MainParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(MainParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(MainParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivideAssign() { return GetToken(MainParser.IntegerDivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConcatenateAssign() { return GetToken(MainParser.ConcatenateAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(MainParser.BitOrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(MainParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(MainParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(MainParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(MainParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogicalAssign() { return GetToken(MainParser.RightShiftLogicalAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PowerAssign() { return GetToken(MainParser.PowerAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullishCoalescingAssign() { return GetToken(MainParser.NullishCoalescingAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 192, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1991;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 9006924376834049L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BigintLiteralContext bigintLiteral() {
			return GetRuleContext<BigintLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(MainParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 194, RULE_literal);
		int _la;
		try {
			State = 1997;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1993;
				boolean();
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1994;
				numericLiteral();
				}
				break;
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1995;
				bigintLiteral();
				}
				break;
			case NullLiteral:
			case Unset:
			case StringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1996;
				_la = TokenStream.LA(1);
				if ( !(_la==NullLiteral || _la==Unset || _la==StringLiteral) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(MainParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(MainParser.False, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 196, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1999;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(MainParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(MainParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral() { return GetToken(MainParser.OctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral2() { return GetToken(MainParser.OctalIntegerLiteral2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryIntegerLiteral() { return GetToken(MainParser.BinaryIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 198, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2001;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BigintLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigDecimalIntegerLiteral() { return GetToken(MainParser.BigDecimalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigHexIntegerLiteral() { return GetToken(MainParser.BigHexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigOctalIntegerLiteral() { return GetToken(MainParser.BigOctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigBinaryIntegerLiteral() { return GetToken(MainParser.BigBinaryIntegerLiteral, 0); }
		public BigintLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bigintLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBigintLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BigintLiteralContext bigintLiteral() {
		BigintLiteralContext _localctx = new BigintLiteralContext(Context, State);
		EnterRule(_localctx, 200, RULE_bigintLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2003;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(MainParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 202, RULE_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2005;
			Match(Get);
			State = 2006;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(MainParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 204, RULE_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2008;
			Match(Set);
			State = 2009;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 206, RULE_identifierName);
		try {
			State = 2013;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2011;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2012;
				reservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(MainParser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(MainParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(MainParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(MainParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Base() { return GetToken(MainParser.Base, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(MainParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(MainParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(MainParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 208, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2015;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(MainParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 210, RULE_reservedWord);
		try {
			State = 2021;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2017;
				keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2018;
				Match(NullLiteral);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2019;
				Match(Unset);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2020;
				boolean();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(MainParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(MainParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MainParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MainParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MainParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(MainParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MainParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MainParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(MainParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(MainParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MainParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(MainParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(MainParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(MainParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(MainParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(MainParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(MainParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(MainParser.Contains, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(MainParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(MainParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(MainParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 212, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2023;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 1142313413771128833L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(MainParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public SContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SContext s() {
		SContext _localctx = new SContext(Context, State);
		EnterRule(_localctx, 214, RULE_s);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2025;
			_la = TokenStream.LA(1);
			if ( !(_la==EOL || _la==WS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MainParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 216, RULE_eos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2027;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==EOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 32: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		case 36: return elseProduction_sempred((ElseProductionContext)_localctx, predIndex);
		case 81: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 82: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 83: return operatorExpression_sempred((OperatorExpressionContext)_localctx, predIndex);
		case 84: return primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return !this.isFunctionCallStatement();
		}
		return true;
	}
	private bool elseProduction_sempred(ElseProductionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return !this.second(Else);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		}
		return true;
	}
	private bool operatorExpression_sempred(OperatorExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 18);
		case 11: return Precpred(Context, 13);
		case 12: return Precpred(Context, 12);
		case 13: return Precpred(Context, 11);
		case 14: return Precpred(Context, 10);
		case 15: return Precpred(Context, 9);
		case 16: return Precpred(Context, 8);
		case 17: return Precpred(Context, 7);
		case 18: return Precpred(Context, 6);
		case 19: return Precpred(Context, 5);
		case 20: return Precpred(Context, 4);
		case 21: return Precpred(Context, 3);
		case 22: return Precpred(Context, 22);
		case 23: return Precpred(Context, 21);
		}
		return true;
	}
	private bool primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return Precpred(Context, 11);
		case 25: return Precpred(Context, 10);
		case 26: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,178,2030,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,1,0,1,0,1,0,1,0,3,0,223,
		8,0,1,1,4,1,226,8,1,11,1,12,1,227,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,250,8,2,1,3,1,3,3,3,254,
		8,3,1,3,1,3,1,3,3,3,259,8,3,1,3,1,3,1,3,3,3,264,8,3,1,3,1,3,1,3,3,3,269,
		8,3,3,3,271,8,3,1,4,1,4,1,5,1,5,1,5,5,5,278,8,5,10,5,12,5,281,9,5,1,5,
		5,5,284,8,5,10,5,12,5,287,9,5,1,5,1,5,3,5,291,8,5,1,5,1,5,3,5,295,8,5,
		1,5,3,5,298,8,5,1,6,1,6,1,7,1,7,1,7,5,7,305,8,7,10,7,12,7,308,9,7,1,7,
		5,7,311,8,7,10,7,12,7,314,9,7,1,7,1,7,3,7,318,8,7,1,8,1,8,1,8,1,8,5,8,
		324,8,8,10,8,12,8,327,9,8,3,8,329,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,346,8,8,1,9,1,9,5,9,350,8,9,10,9,12,9,
		353,9,9,1,9,3,9,356,8,9,1,9,1,9,1,10,1,10,1,10,4,10,363,8,10,11,10,12,
		10,364,1,11,1,11,5,11,369,8,11,10,11,12,11,372,9,11,1,11,3,11,375,8,11,
		1,12,1,12,5,12,379,8,12,10,12,12,12,382,9,12,1,12,1,12,1,13,1,13,5,13,
		388,8,13,10,13,12,13,391,9,13,1,13,1,13,1,14,1,14,5,14,397,8,14,10,14,
		12,14,400,9,14,1,14,1,14,1,15,3,15,405,8,15,1,15,1,15,3,15,409,8,15,1,
		15,1,15,1,15,3,15,414,8,15,1,16,1,16,1,16,5,16,419,8,16,10,16,12,16,422,
		9,16,1,16,1,16,5,16,426,8,16,10,16,12,16,429,9,16,1,16,1,16,5,16,433,8,
		16,10,16,12,16,436,9,16,1,16,3,16,439,8,16,3,16,441,8,16,1,16,1,16,1,17,
		1,17,1,17,3,17,448,8,17,1,18,1,18,3,18,452,8,18,1,19,1,19,1,20,1,20,5,
		20,458,8,20,10,20,12,20,461,9,20,1,20,1,20,1,21,1,21,3,21,467,8,21,1,21,
		1,21,3,21,471,8,21,1,22,1,22,1,22,1,23,1,23,1,23,3,23,479,8,23,1,24,1,
		24,3,24,483,8,24,1,24,1,24,3,24,487,8,24,1,24,1,24,1,24,3,24,492,8,24,
		1,25,1,25,1,25,1,25,1,25,3,25,499,8,25,3,25,501,8,25,1,26,1,26,1,26,5,
		26,506,8,26,10,26,12,26,509,9,26,1,26,1,26,5,26,513,8,26,10,26,12,26,516,
		9,26,1,26,1,26,5,26,520,8,26,10,26,12,26,523,9,26,1,26,3,26,526,8,26,3,
		26,528,8,26,1,26,1,26,1,27,1,27,1,27,3,27,535,8,27,1,28,1,28,3,28,539,
		8,28,1,29,1,29,5,29,543,8,29,10,29,12,29,546,9,29,1,29,1,29,5,29,550,8,
		29,10,29,12,29,553,9,29,1,30,1,30,1,30,1,30,1,30,3,30,560,8,30,1,31,1,
		31,4,31,564,8,31,11,31,12,31,565,1,31,3,31,569,8,31,1,32,1,32,1,32,1,33,
		1,33,5,33,576,8,33,10,33,12,33,579,9,33,1,33,1,33,5,33,583,8,33,10,33,
		12,33,586,9,33,1,33,1,33,1,33,1,34,4,34,592,8,34,11,34,12,34,593,1,34,
		1,34,3,34,598,8,34,1,35,1,35,1,35,5,35,603,8,35,10,35,12,35,606,9,35,1,
		35,1,35,1,36,1,36,1,36,5,36,613,8,36,10,36,12,36,616,9,36,1,36,1,36,3,
		36,620,8,36,1,37,1,37,5,37,624,8,37,10,37,12,37,627,9,37,1,37,1,37,5,37,
		631,8,37,10,37,12,37,634,9,37,3,37,636,8,37,1,37,1,37,3,37,640,8,37,1,
		37,1,37,1,37,1,37,5,37,646,8,37,10,37,12,37,649,9,37,1,37,1,37,5,37,653,
		8,37,10,37,12,37,656,9,37,1,37,1,37,3,37,660,8,37,1,37,5,37,663,8,37,10,
		37,12,37,666,9,37,1,37,1,37,3,37,670,8,37,1,37,1,37,1,37,1,37,5,37,676,
		8,37,10,37,12,37,679,9,37,1,37,1,37,5,37,683,8,37,10,37,12,37,686,9,37,
		1,37,1,37,3,37,690,8,37,1,37,5,37,693,8,37,10,37,12,37,696,9,37,1,37,1,
		37,3,37,700,8,37,1,37,1,37,1,37,1,37,5,37,706,8,37,10,37,12,37,709,9,37,
		1,37,1,37,5,37,713,8,37,10,37,12,37,716,9,37,1,37,1,37,3,37,720,8,37,1,
		37,5,37,723,8,37,10,37,12,37,726,9,37,1,37,1,37,3,37,730,8,37,1,37,1,37,
		1,37,1,37,5,37,736,8,37,10,37,12,37,739,9,37,1,37,1,37,5,37,743,8,37,10,
		37,12,37,746,9,37,1,37,1,37,3,37,750,8,37,5,37,752,8,37,10,37,12,37,755,
		9,37,1,37,5,37,758,8,37,10,37,12,37,761,9,37,1,37,1,37,3,37,765,8,37,1,
		37,1,37,1,37,1,37,5,37,771,8,37,10,37,12,37,774,9,37,1,37,1,37,5,37,778,
		8,37,10,37,12,37,781,9,37,1,37,1,37,3,37,785,8,37,1,37,1,37,1,37,1,37,
		5,37,791,8,37,10,37,12,37,794,9,37,1,37,1,37,5,37,798,8,37,10,37,12,37,
		801,9,37,1,37,1,37,3,37,805,8,37,1,37,1,37,3,37,809,8,37,1,38,3,38,812,
		8,38,1,38,5,38,815,8,38,10,38,12,38,818,9,38,1,38,1,38,3,38,822,8,38,5,
		38,824,8,38,10,38,12,38,827,9,38,1,38,5,38,830,8,38,10,38,12,38,833,9,
		38,1,38,1,38,5,38,837,8,38,10,38,12,38,840,9,38,1,38,1,38,1,38,3,38,845,
		8,38,1,38,5,38,848,8,38,10,38,12,38,851,9,38,1,38,1,38,3,38,855,8,38,5,
		38,857,8,38,10,38,12,38,860,9,38,1,38,5,38,863,8,38,10,38,12,38,866,9,
		38,1,38,1,38,5,38,870,8,38,10,38,12,38,873,9,38,1,38,1,38,1,38,3,38,878,
		8,38,1,39,1,39,5,39,882,8,39,10,39,12,39,885,9,39,1,39,1,39,1,39,1,39,
		1,39,3,39,892,8,39,1,40,1,40,5,40,896,8,40,10,40,12,40,899,9,40,1,40,1,
		40,1,40,1,40,1,40,3,40,906,8,40,1,41,1,41,5,41,910,8,41,10,41,12,41,913,
		9,41,1,41,3,41,916,8,41,1,42,1,42,5,42,920,8,42,10,42,12,42,923,9,42,1,
		42,3,42,926,8,42,1,43,1,43,5,43,930,8,43,10,43,12,43,933,9,43,1,43,3,43,
		936,8,43,1,43,5,43,939,8,43,10,43,12,43,942,9,43,1,43,1,43,3,43,946,8,
		43,1,43,5,43,949,8,43,10,43,12,43,952,9,43,1,43,1,43,1,44,1,44,5,44,958,
		8,44,10,44,12,44,961,9,44,1,44,3,44,964,8,44,1,44,1,44,3,44,968,8,44,3,
		44,970,8,44,1,44,1,44,1,45,4,45,975,8,45,11,45,12,45,976,1,46,1,46,5,46,
		981,8,46,10,46,12,46,984,9,46,1,46,1,46,5,46,988,8,46,10,46,12,46,991,
		9,46,1,46,1,46,5,46,995,8,46,10,46,12,46,998,9,46,1,46,1,46,3,46,1002,
		8,46,1,47,1,47,5,47,1006,8,47,10,47,12,47,1009,9,47,1,47,1,47,5,47,1013,
		8,47,10,47,12,47,1016,9,47,1,47,1,47,3,47,1020,8,47,1,48,1,48,1,48,1,49,
		1,49,5,49,1027,8,49,10,49,12,49,1030,9,49,1,49,1,49,1,49,5,49,1035,8,49,
		10,49,12,49,1038,9,49,1,49,1,49,1,49,1,49,3,49,1044,8,49,1,50,1,50,5,50,
		1048,8,50,10,50,12,50,1051,9,50,1,50,3,50,1054,8,50,1,51,1,51,5,51,1058,
		8,51,10,51,12,51,1061,9,51,1,51,1,51,5,51,1065,8,51,10,51,12,51,1068,9,
		51,1,51,1,51,3,51,1072,8,51,1,52,1,52,1,52,5,52,1077,8,52,10,52,12,52,
		1080,9,52,1,52,1,52,5,52,1084,8,52,10,52,12,52,1087,9,52,3,52,1089,8,52,
		1,52,1,52,1,53,1,53,5,53,1095,8,53,10,53,12,53,1098,9,53,1,53,3,53,1101,
		8,53,1,53,5,53,1104,8,53,10,53,12,53,1107,9,53,1,53,3,53,1110,8,53,1,53,
		1,53,1,53,5,53,1115,8,53,10,53,12,53,1118,9,53,1,53,3,53,1121,8,53,1,53,
		5,53,1124,8,53,10,53,12,53,1127,9,53,1,53,3,53,1130,8,53,1,53,1,53,1,53,
		5,53,1135,8,53,10,53,12,53,1138,9,53,1,53,1,53,1,53,5,53,1143,8,53,10,
		53,12,53,1146,9,53,1,53,1,53,1,53,5,53,1151,8,53,10,53,12,53,1154,9,53,
		1,53,1,53,1,53,5,53,1159,8,53,10,53,12,53,1162,9,53,1,53,1,53,1,53,1,53,
		3,53,1168,8,53,1,54,1,54,5,54,1172,8,54,10,54,12,54,1175,9,54,1,54,1,54,
		5,54,1179,8,54,10,54,12,54,1182,9,54,1,55,1,55,1,55,5,55,1187,8,55,10,
		55,12,55,1190,9,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,5,57,1199,8,57,10,
		57,12,57,1202,9,57,1,57,1,57,4,57,1206,8,57,11,57,12,57,1207,1,57,1,57,
		4,57,1212,8,57,11,57,12,57,1213,1,57,3,57,1217,8,57,1,57,5,57,1220,8,57,
		10,57,12,57,1223,9,57,1,57,1,57,1,58,1,58,1,58,5,58,1230,8,58,10,58,12,
		58,1233,9,58,1,59,1,59,1,59,1,59,1,59,5,59,1240,8,59,10,59,12,59,1243,
		9,59,1,59,1,59,1,60,1,60,1,60,5,60,1250,8,60,10,60,12,60,1253,9,60,3,60,
		1255,8,60,1,60,1,60,1,60,5,60,1260,8,60,10,60,12,60,1263,9,60,3,60,1265,
		8,60,1,60,1,60,5,60,1269,8,60,10,60,12,60,1272,9,60,1,60,1,60,5,60,1276,
		8,60,10,60,12,60,1279,9,60,1,60,3,60,1282,8,60,1,61,1,61,1,61,1,62,1,62,
		1,62,1,62,1,62,1,62,5,62,1293,8,62,10,62,12,62,1296,9,62,1,62,1,62,1,62,
		1,62,1,62,1,62,1,62,1,62,4,62,1306,8,62,11,62,12,62,1307,1,62,1,62,3,62,
		1312,8,62,1,63,1,63,1,63,1,63,3,63,1318,8,63,1,63,5,63,1321,8,63,10,63,
		12,63,1324,9,63,1,63,1,63,3,63,1328,8,63,1,64,1,64,1,64,1,65,1,65,1,65,
		1,66,1,66,1,66,5,66,1339,8,66,10,66,12,66,1342,9,66,1,66,1,66,1,66,1,67,
		1,67,5,67,1349,8,67,10,67,12,67,1352,9,67,1,67,1,67,5,67,1356,8,67,10,
		67,12,67,1359,9,67,1,67,1,67,1,68,3,68,1364,8,68,1,68,1,68,1,68,1,68,3,
		68,1370,8,68,1,69,1,69,3,69,1374,8,69,1,69,3,69,1377,8,69,1,70,1,70,5,
		70,1381,8,70,10,70,12,70,1384,9,70,1,70,1,70,5,70,1388,8,70,10,70,12,70,
		1391,9,70,3,70,1393,8,70,1,70,1,70,1,71,1,71,5,71,1399,8,71,10,71,12,71,
		1402,9,71,1,71,1,71,5,71,1406,8,71,10,71,12,71,1409,9,71,1,71,1,71,1,72,
		5,72,1414,8,72,10,72,12,72,1417,9,72,1,72,5,72,1420,8,72,10,72,12,72,1423,
		9,72,1,72,1,72,5,72,1427,8,72,10,72,12,72,1430,9,72,1,72,1,72,3,72,1434,
		8,72,5,72,1436,8,72,10,72,12,72,1439,9,72,1,73,1,73,1,73,1,73,1,74,1,74,
		5,74,1447,8,74,10,74,12,74,1450,9,74,1,74,1,74,5,74,1454,8,74,10,74,12,
		74,1457,9,74,1,74,1,74,1,75,1,75,1,75,1,75,3,75,1465,8,75,1,76,1,76,1,
		76,1,76,1,77,1,77,5,77,1473,8,77,10,77,12,77,1476,9,77,1,77,1,77,3,77,
		1480,8,77,5,77,1482,8,77,10,77,12,77,1485,9,77,1,77,5,77,1488,8,77,10,
		77,12,77,1491,9,77,1,77,1,77,3,77,1495,8,77,4,77,1497,8,77,11,77,12,77,
		1498,3,77,1501,8,77,1,78,1,78,1,78,1,78,3,78,1507,8,78,1,79,1,79,5,79,
		1511,8,79,10,79,12,79,1514,9,79,1,79,1,79,5,79,1518,8,79,10,79,12,79,1521,
		9,79,1,80,1,80,5,80,1525,8,80,10,80,12,80,1528,9,80,1,80,1,80,5,80,1532,
		8,80,10,80,12,80,1535,9,80,3,80,1537,8,80,1,80,1,80,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,5,81,1548,8,81,10,81,12,81,1551,9,81,1,81,1,81,1,81,3,81,
		1556,8,81,1,81,1,81,1,81,3,81,1561,8,81,1,81,1,81,1,81,1,81,3,81,1567,
		8,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,1575,8,81,10,81,12,81,1578,9,81,
		1,81,1,81,5,81,1582,8,81,10,81,12,81,1585,9,81,1,81,1,81,5,81,1589,8,81,
		10,81,12,81,1592,9,81,1,81,1,81,5,81,1596,8,81,10,81,12,81,1599,9,81,1,
		81,1,81,5,81,1603,8,81,10,81,12,81,1606,9,81,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1622,8,82,10,82,12,82,
		1625,9,82,1,82,1,82,5,82,1629,8,82,10,82,12,82,1632,9,82,1,82,1,82,5,82,
		1636,8,82,10,82,12,82,1639,9,82,1,82,1,82,5,82,1643,8,82,10,82,12,82,1646,
		9,82,1,82,1,82,5,82,1650,8,82,10,82,12,82,1653,9,82,1,83,1,83,1,83,1,83,
		1,83,1,83,1,83,1,83,1,83,1,83,5,83,1665,8,83,10,83,12,83,1668,9,83,1,83,
		1,83,1,83,1,83,1,83,1,83,1,83,5,83,1677,8,83,10,83,12,83,1680,9,83,1,83,
		1,83,1,83,1,83,1,83,3,83,1687,8,83,1,83,1,83,1,83,1,83,1,83,5,83,1694,
		8,83,10,83,12,83,1697,9,83,1,83,1,83,5,83,1701,8,83,10,83,12,83,1704,9,
		83,1,83,1,83,1,83,5,83,1709,8,83,10,83,12,83,1712,9,83,1,83,1,83,5,83,
		1716,8,83,10,83,12,83,1719,9,83,1,83,1,83,1,83,1,83,1,83,1,83,5,83,1727,
		8,83,10,83,12,83,1730,9,83,1,83,1,83,5,83,1734,8,83,10,83,12,83,1737,9,
		83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,4,83,1749,8,83,11,
		83,12,83,1750,3,83,1753,8,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
		83,1,83,1,83,1,83,5,83,1767,8,83,10,83,12,83,1770,9,83,1,83,1,83,5,83,
		1774,8,83,10,83,12,83,1777,9,83,1,83,1,83,1,83,1,83,1,83,5,83,1784,8,83,
		10,83,12,83,1787,9,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
		1,84,1,84,1,84,3,84,1802,8,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1810,
		8,84,1,84,1,84,1,84,3,84,1815,8,84,1,84,5,84,1818,8,84,10,84,12,84,1821,
		9,84,1,85,4,85,1824,8,85,11,85,12,85,1825,1,85,1,85,1,85,5,85,1831,8,85,
		10,85,12,85,1834,9,85,1,85,5,85,1837,8,85,10,85,12,85,1840,9,85,1,85,1,
		85,5,85,1844,8,85,10,85,12,85,1847,9,85,3,85,1849,8,85,1,86,1,86,1,86,
		1,86,3,86,1855,8,86,1,87,1,87,1,87,1,87,5,87,1861,8,87,10,87,12,87,1864,
		9,87,1,87,1,87,1,87,5,87,1869,8,87,10,87,12,87,1872,9,87,3,87,1874,8,87,
		1,88,1,88,1,88,1,89,1,89,1,90,1,90,5,90,1883,8,90,10,90,12,90,1886,9,90,
		1,90,1,90,5,90,1890,8,90,10,90,12,90,1893,9,90,1,90,1,90,5,90,1897,8,90,
		10,90,12,90,1900,9,90,1,90,5,90,1903,8,90,10,90,12,90,1906,9,90,1,90,1,
		90,1,90,1,90,4,90,1912,8,90,11,90,12,90,1913,1,90,3,90,1917,8,90,1,91,
		3,91,1920,8,91,1,91,1,91,1,91,3,91,1925,8,91,1,91,1,91,1,92,1,92,5,92,
		1931,8,92,10,92,12,92,1934,9,92,4,92,1936,8,92,11,92,12,92,1937,1,93,1,
		93,3,93,1942,8,93,1,93,1,93,3,93,1946,8,93,1,93,3,93,1949,8,93,1,94,3,
		94,1952,8,94,1,94,3,94,1955,8,94,1,94,1,94,3,94,1959,8,94,1,94,3,94,1962,
		8,94,1,94,1,94,3,94,1966,8,94,1,94,3,94,1969,8,94,1,95,1,95,1,95,5,95,
		1974,8,95,10,95,12,95,1977,9,95,1,95,1,95,5,95,1981,8,95,10,95,12,95,1984,
		9,95,1,95,3,95,1987,8,95,1,95,3,95,1990,8,95,1,96,1,96,1,97,1,97,1,97,
		1,97,3,97,1998,8,97,1,98,1,98,1,99,1,99,1,100,1,100,1,101,1,101,1,101,
		1,102,1,102,1,102,1,103,1,103,3,103,2014,8,103,1,104,1,104,1,105,1,105,
		1,105,1,105,3,105,2022,8,105,1,106,1,106,1,107,1,107,1,108,1,108,1,108,
		0,4,162,164,166,168,109,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
		82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
		122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
		158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
		194,196,198,200,202,204,206,208,210,212,214,216,0,24,1,0,140,141,1,0,126,
		128,3,0,106,106,125,125,134,134,1,0,22,23,1,0,136,137,2,0,15,15,28,28,
		2,0,50,50,109,109,2,0,51,51,111,111,1,0,28,30,1,0,24,25,1,0,35,37,1,0,
		38,41,1,0,42,45,3,0,83,83,104,104,107,108,2,0,16,16,20,20,2,0,124,124,
		126,126,2,0,14,14,52,66,2,0,68,69,135,135,1,0,70,71,1,0,72,76,1,0,77,80,
		6,0,86,86,100,100,113,114,116,119,122,123,134,134,9,0,69,69,81,85,87,93,
		98,99,101,112,115,115,118,118,120,121,123,128,1,1,136,136,2292,0,222,1,
		0,0,0,2,225,1,0,0,0,4,249,1,0,0,0,6,270,1,0,0,0,8,272,1,0,0,0,10,274,1,
		0,0,0,12,299,1,0,0,0,14,301,1,0,0,0,16,345,1,0,0,0,18,347,1,0,0,0,20,362,
		1,0,0,0,22,366,1,0,0,0,24,376,1,0,0,0,26,385,1,0,0,0,28,394,1,0,0,0,30,
		413,1,0,0,0,32,415,1,0,0,0,34,444,1,0,0,0,36,451,1,0,0,0,38,453,1,0,0,
		0,40,455,1,0,0,0,42,466,1,0,0,0,44,472,1,0,0,0,46,475,1,0,0,0,48,491,1,
		0,0,0,50,500,1,0,0,0,52,502,1,0,0,0,54,531,1,0,0,0,56,538,1,0,0,0,58,540,
		1,0,0,0,60,554,1,0,0,0,62,561,1,0,0,0,64,570,1,0,0,0,66,573,1,0,0,0,68,
		597,1,0,0,0,70,599,1,0,0,0,72,619,1,0,0,0,74,808,1,0,0,0,76,877,1,0,0,
		0,78,879,1,0,0,0,80,893,1,0,0,0,82,907,1,0,0,0,84,917,1,0,0,0,86,927,1,
		0,0,0,88,955,1,0,0,0,90,974,1,0,0,0,92,978,1,0,0,0,94,1003,1,0,0,0,96,
		1021,1,0,0,0,98,1043,1,0,0,0,100,1045,1,0,0,0,102,1055,1,0,0,0,104,1073,
		1,0,0,0,106,1167,1,0,0,0,108,1169,1,0,0,0,110,1183,1,0,0,0,112,1193,1,
		0,0,0,114,1196,1,0,0,0,116,1226,1,0,0,0,118,1234,1,0,0,0,120,1281,1,0,
		0,0,122,1283,1,0,0,0,124,1311,1,0,0,0,126,1327,1,0,0,0,128,1329,1,0,0,
		0,130,1332,1,0,0,0,132,1335,1,0,0,0,134,1357,1,0,0,0,136,1363,1,0,0,0,
		138,1376,1,0,0,0,140,1378,1,0,0,0,142,1396,1,0,0,0,144,1421,1,0,0,0,146,
		1440,1,0,0,0,148,1444,1,0,0,0,150,1464,1,0,0,0,152,1466,1,0,0,0,154,1500,
		1,0,0,0,156,1506,1,0,0,0,158,1508,1,0,0,0,160,1522,1,0,0,0,162,1555,1,
		0,0,0,164,1607,1,0,0,0,166,1686,1,0,0,0,168,1801,1,0,0,0,170,1848,1,0,
		0,0,172,1854,1,0,0,0,174,1873,1,0,0,0,176,1875,1,0,0,0,178,1878,1,0,0,
		0,180,1916,1,0,0,0,182,1919,1,0,0,0,184,1935,1,0,0,0,186,1948,1,0,0,0,
		188,1968,1,0,0,0,190,1989,1,0,0,0,192,1991,1,0,0,0,194,1997,1,0,0,0,196,
		1999,1,0,0,0,198,2001,1,0,0,0,200,2003,1,0,0,0,202,2005,1,0,0,0,204,2008,
		1,0,0,0,206,2013,1,0,0,0,208,2015,1,0,0,0,210,2021,1,0,0,0,212,2023,1,
		0,0,0,214,2025,1,0,0,0,216,2027,1,0,0,0,218,219,3,2,1,0,219,220,5,0,0,
		1,220,223,1,0,0,0,221,223,5,0,0,1,222,218,1,0,0,0,222,221,1,0,0,0,223,
		1,1,0,0,0,224,226,3,4,2,0,225,224,1,0,0,0,226,227,1,0,0,0,227,225,1,0,
		0,0,227,228,1,0,0,0,228,3,1,0,0,0,229,230,3,114,57,0,230,231,3,216,108,
		0,231,250,1,0,0,0,232,233,3,6,3,0,233,234,3,216,108,0,234,250,1,0,0,0,
		235,236,3,8,4,0,236,237,3,216,108,0,237,250,1,0,0,0,238,239,3,10,5,0,239,
		240,3,216,108,0,240,250,1,0,0,0,241,242,3,14,7,0,242,243,3,216,108,0,243,
		250,1,0,0,0,244,245,3,16,8,0,245,246,3,216,108,0,246,250,1,0,0,0,247,250,
		5,137,0,0,248,250,5,136,0,0,249,229,1,0,0,0,249,232,1,0,0,0,249,235,1,
		0,0,0,249,238,1,0,0,0,249,241,1,0,0,0,249,244,1,0,0,0,249,247,1,0,0,0,
		249,248,1,0,0,0,250,5,1,0,0,0,251,253,5,129,0,0,252,254,3,164,82,0,253,
		252,1,0,0,0,253,254,1,0,0,0,254,271,1,0,0,0,255,271,5,133,0,0,256,258,
		5,130,0,0,257,259,3,198,99,0,258,257,1,0,0,0,258,259,1,0,0,0,259,271,1,
		0,0,0,260,263,5,132,0,0,261,264,3,198,99,0,262,264,3,196,98,0,263,261,
		1,0,0,0,263,262,1,0,0,0,263,264,1,0,0,0,264,271,1,0,0,0,265,268,5,131,
		0,0,266,269,3,198,99,0,267,269,3,196,98,0,268,266,1,0,0,0,268,267,1,0,
		0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,251,1,0,0,0,270,255,1,0,0,0,270,
		256,1,0,0,0,270,260,1,0,0,0,270,265,1,0,0,0,271,7,1,0,0,0,272,273,5,5,
		0,0,273,9,1,0,0,0,274,279,5,4,0,0,275,276,5,136,0,0,276,278,5,4,0,0,277,
		275,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,285,1,
		0,0,0,281,279,1,0,0,0,282,284,5,137,0,0,283,282,1,0,0,0,284,287,1,0,0,
		0,285,283,1,0,0,0,285,286,1,0,0,0,286,297,1,0,0,0,287,285,1,0,0,0,288,
		298,3,12,6,0,289,291,5,136,0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,292,
		1,0,0,0,292,298,3,112,56,0,293,295,5,136,0,0,294,293,1,0,0,0,294,295,1,
		0,0,0,295,296,1,0,0,0,296,298,3,16,8,0,297,288,1,0,0,0,297,290,1,0,0,0,
		297,294,1,0,0,0,298,11,1,0,0,0,299,300,7,0,0,0,300,13,1,0,0,0,301,306,
		5,6,0,0,302,303,5,136,0,0,303,305,5,6,0,0,304,302,1,0,0,0,305,308,1,0,
		0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,312,1,0,0,0,308,306,1,0,0,0,309,
		311,3,214,107,0,310,309,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,
		1,0,0,0,313,317,1,0,0,0,314,312,1,0,0,0,315,318,3,112,56,0,316,318,3,16,
		8,0,317,315,1,0,0,0,317,316,1,0,0,0,318,15,1,0,0,0,319,346,3,22,11,0,320,
		346,3,66,33,0,321,325,3,96,48,0,322,324,3,214,107,0,323,322,1,0,0,0,324,
		327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,329,1,0,0,0,327,325,1,
		0,0,0,328,321,1,0,0,0,328,329,1,0,0,0,329,330,1,0,0,0,330,346,3,74,37,
		0,331,346,3,64,32,0,332,346,3,62,31,0,333,346,3,78,39,0,334,346,3,80,40,
		0,335,346,3,82,41,0,336,346,3,84,42,0,337,346,3,96,48,0,338,346,3,98,49,
		0,339,346,3,86,43,0,340,346,3,100,50,0,341,346,3,102,51,0,342,346,3,24,
		12,0,343,346,3,26,13,0,344,346,3,18,9,0,345,319,1,0,0,0,345,320,1,0,0,
		0,345,328,1,0,0,0,345,331,1,0,0,0,345,332,1,0,0,0,345,333,1,0,0,0,345,
		334,1,0,0,0,345,335,1,0,0,0,345,336,1,0,0,0,345,337,1,0,0,0,345,338,1,
		0,0,0,345,339,1,0,0,0,345,340,1,0,0,0,345,341,1,0,0,0,345,342,1,0,0,0,
		345,343,1,0,0,0,345,344,1,0,0,0,346,17,1,0,0,0,347,351,5,11,0,0,348,350,
		3,214,107,0,349,348,1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,1,
		0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,354,356,3,20,10,0,355,354,1,0,0,
		0,355,356,1,0,0,0,356,357,1,0,0,0,357,358,5,12,0,0,358,19,1,0,0,0,359,
		360,3,16,8,0,360,361,5,136,0,0,361,363,1,0,0,0,362,359,1,0,0,0,363,364,
		1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,21,1,0,0,0,366,374,7,1,0,0,
		367,369,5,137,0,0,368,367,1,0,0,0,369,372,1,0,0,0,370,368,1,0,0,0,370,
		371,1,0,0,0,371,373,1,0,0,0,372,370,1,0,0,0,373,375,3,58,29,0,374,370,
		1,0,0,0,374,375,1,0,0,0,375,23,1,0,0,0,376,380,5,125,0,0,377,379,5,137,
		0,0,378,377,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,
		383,1,0,0,0,382,380,1,0,0,0,383,384,3,164,82,0,384,25,1,0,0,0,385,389,
		5,103,0,0,386,388,5,137,0,0,387,386,1,0,0,0,388,391,1,0,0,0,389,387,1,
		0,0,0,389,390,1,0,0,0,390,392,1,0,0,0,391,389,1,0,0,0,392,393,3,164,82,
		0,393,27,1,0,0,0,394,398,5,121,0,0,395,397,5,137,0,0,396,395,1,0,0,0,397,
		400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,401,1,0,0,0,400,398,1,
		0,0,0,401,402,3,30,15,0,402,29,1,0,0,0,403,405,3,40,20,0,404,403,1,0,0,
		0,404,405,1,0,0,0,405,408,1,0,0,0,406,409,3,42,21,0,407,409,3,32,16,0,
		408,406,1,0,0,0,408,407,1,0,0,0,409,410,1,0,0,0,410,411,3,44,22,0,411,
		414,1,0,0,0,412,414,5,135,0,0,413,404,1,0,0,0,413,412,1,0,0,0,414,31,1,
		0,0,0,415,427,5,11,0,0,416,420,3,34,17,0,417,419,5,137,0,0,418,417,1,0,
		0,0,419,422,1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,423,1,0,0,0,422,
		420,1,0,0,0,423,424,5,13,0,0,424,426,1,0,0,0,425,416,1,0,0,0,426,429,1,
		0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,440,1,0,0,0,429,427,1,0,0,0,
		430,438,3,34,17,0,431,433,5,137,0,0,432,431,1,0,0,0,433,436,1,0,0,0,434,
		432,1,0,0,0,434,435,1,0,0,0,435,437,1,0,0,0,436,434,1,0,0,0,437,439,5,
		13,0,0,438,434,1,0,0,0,438,439,1,0,0,0,439,441,1,0,0,0,440,430,1,0,0,0,
		440,441,1,0,0,0,441,442,1,0,0,0,442,443,5,12,0,0,443,33,1,0,0,0,444,447,
		3,36,18,0,445,446,5,123,0,0,446,448,3,38,19,0,447,445,1,0,0,0,447,448,
		1,0,0,0,448,35,1,0,0,0,449,452,3,206,103,0,450,452,5,135,0,0,451,449,1,
		0,0,0,451,450,1,0,0,0,452,37,1,0,0,0,453,454,7,2,0,0,454,39,1,0,0,0,455,
		459,3,46,23,0,456,458,5,137,0,0,457,456,1,0,0,0,458,461,1,0,0,0,459,457,
		1,0,0,0,459,460,1,0,0,0,460,462,1,0,0,0,461,459,1,0,0,0,462,463,5,13,0,
		0,463,41,1,0,0,0,464,467,5,28,0,0,465,467,3,206,103,0,466,464,1,0,0,0,
		466,465,1,0,0,0,467,470,1,0,0,0,468,469,5,123,0,0,469,471,3,206,103,0,
		470,468,1,0,0,0,470,471,1,0,0,0,471,43,1,0,0,0,472,473,5,122,0,0,473,474,
		5,135,0,0,474,45,1,0,0,0,475,478,3,206,103,0,476,477,5,123,0,0,477,479,
		3,206,103,0,478,476,1,0,0,0,478,479,1,0,0,0,479,47,1,0,0,0,480,482,5,120,
		0,0,481,483,5,86,0,0,482,481,1,0,0,0,482,483,1,0,0,0,483,486,1,0,0,0,484,
		487,3,50,25,0,485,487,3,56,28,0,486,484,1,0,0,0,486,485,1,0,0,0,487,492,
		1,0,0,0,488,489,5,120,0,0,489,490,5,86,0,0,490,492,3,164,82,0,491,480,
		1,0,0,0,491,488,1,0,0,0,492,49,1,0,0,0,493,494,3,42,21,0,494,495,3,44,
		22,0,495,501,1,0,0,0,496,498,3,52,26,0,497,499,3,44,22,0,498,497,1,0,0,
		0,498,499,1,0,0,0,499,501,1,0,0,0,500,493,1,0,0,0,500,496,1,0,0,0,501,
		51,1,0,0,0,502,514,5,11,0,0,503,507,3,54,27,0,504,506,5,137,0,0,505,504,
		1,0,0,0,506,509,1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,510,1,0,0,
		0,509,507,1,0,0,0,510,511,5,13,0,0,511,513,1,0,0,0,512,503,1,0,0,0,513,
		516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,527,1,0,0,0,516,514,1,
		0,0,0,517,525,3,54,27,0,518,520,5,137,0,0,519,518,1,0,0,0,520,523,1,0,
		0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,524,1,0,0,0,523,521,1,0,0,0,524,
		526,5,13,0,0,525,521,1,0,0,0,525,526,1,0,0,0,526,528,1,0,0,0,527,517,1,
		0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,530,5,12,0,0,530,53,1,0,0,0,
		531,534,3,36,18,0,532,533,5,123,0,0,533,535,3,36,18,0,534,532,1,0,0,0,
		534,535,1,0,0,0,535,55,1,0,0,0,536,539,3,114,57,0,537,539,3,112,56,0,538,
		536,1,0,0,0,538,537,1,0,0,0,539,57,1,0,0,0,540,551,3,60,30,0,541,543,5,
		137,0,0,542,541,1,0,0,0,543,546,1,0,0,0,544,542,1,0,0,0,544,545,1,0,0,
		0,545,547,1,0,0,0,546,544,1,0,0,0,547,548,5,13,0,0,548,550,3,60,30,0,549,
		544,1,0,0,0,550,553,1,0,0,0,551,549,1,0,0,0,551,552,1,0,0,0,552,59,1,0,
		0,0,553,551,1,0,0,0,554,559,3,178,89,0,555,556,3,192,96,0,556,557,3,162,
		81,0,557,560,1,0,0,0,558,560,7,3,0,0,559,555,1,0,0,0,559,558,1,0,0,0,559,
		560,1,0,0,0,560,61,1,0,0,0,561,568,3,168,84,0,562,564,5,137,0,0,563,562,
		1,0,0,0,564,565,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,567,1,0,0,
		0,567,569,3,154,77,0,568,563,1,0,0,0,568,569,1,0,0,0,569,63,1,0,0,0,570,
		571,4,32,0,0,571,572,3,158,79,0,572,65,1,0,0,0,573,577,5,101,0,0,574,576,
		5,137,0,0,575,574,1,0,0,0,576,579,1,0,0,0,577,575,1,0,0,0,577,578,1,0,
		0,0,578,580,1,0,0,0,579,577,1,0,0,0,580,584,3,164,82,0,581,583,5,137,0,
		0,582,581,1,0,0,0,583,586,1,0,0,0,584,582,1,0,0,0,584,585,1,0,0,0,585,
		587,1,0,0,0,586,584,1,0,0,0,587,588,3,68,34,0,588,589,3,72,36,0,589,67,
		1,0,0,0,590,592,5,136,0,0,591,590,1,0,0,0,592,593,1,0,0,0,593,591,1,0,
		0,0,593,594,1,0,0,0,594,595,1,0,0,0,595,598,3,16,8,0,596,598,3,18,9,0,
		597,591,1,0,0,0,597,596,1,0,0,0,598,69,1,0,0,0,599,600,5,136,0,0,600,604,
		5,99,0,0,601,603,3,214,107,0,602,601,1,0,0,0,603,606,1,0,0,0,604,602,1,
		0,0,0,604,605,1,0,0,0,605,607,1,0,0,0,606,604,1,0,0,0,607,608,3,164,82,
		0,608,71,1,0,0,0,609,610,5,136,0,0,610,614,5,87,0,0,611,613,3,214,107,
		0,612,611,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,614,615,1,0,0,0,615,
		617,1,0,0,0,616,614,1,0,0,0,617,620,3,16,8,0,618,620,4,36,1,0,619,609,
		1,0,0,0,619,618,1,0,0,0,620,73,1,0,0,0,621,625,5,98,0,0,622,624,5,137,
		0,0,623,622,1,0,0,0,624,627,1,0,0,0,625,623,1,0,0,0,625,626,1,0,0,0,626,
		635,1,0,0,0,627,625,1,0,0,0,628,632,3,164,82,0,629,631,5,137,0,0,630,629,
		1,0,0,0,631,634,1,0,0,0,632,630,1,0,0,0,632,633,1,0,0,0,633,636,1,0,0,
		0,634,632,1,0,0,0,635,628,1,0,0,0,635,636,1,0,0,0,636,637,1,0,0,0,637,
		639,3,68,34,0,638,640,3,70,35,0,639,638,1,0,0,0,639,640,1,0,0,0,640,641,
		1,0,0,0,641,642,3,72,36,0,642,809,1,0,0,0,643,647,5,97,0,0,644,646,5,137,
		0,0,645,644,1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,0,647,648,1,0,0,0,648,
		650,1,0,0,0,649,647,1,0,0,0,650,659,3,164,82,0,651,653,5,137,0,0,652,651,
		1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,654,655,1,0,0,0,655,657,1,0,0,
		0,656,654,1,0,0,0,657,658,5,13,0,0,658,660,3,164,82,0,659,654,1,0,0,0,
		659,660,1,0,0,0,660,664,1,0,0,0,661,663,5,137,0,0,662,661,1,0,0,0,663,
		666,1,0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,665,667,1,0,0,0,666,664,1,
		0,0,0,667,669,3,68,34,0,668,670,3,70,35,0,669,668,1,0,0,0,669,670,1,0,
		0,0,670,671,1,0,0,0,671,672,3,72,36,0,672,809,1,0,0,0,673,677,5,96,0,0,
		674,676,5,137,0,0,675,674,1,0,0,0,676,679,1,0,0,0,677,675,1,0,0,0,677,
		678,1,0,0,0,678,680,1,0,0,0,679,677,1,0,0,0,680,689,3,164,82,0,681,683,
		5,137,0,0,682,681,1,0,0,0,683,686,1,0,0,0,684,682,1,0,0,0,684,685,1,0,
		0,0,685,687,1,0,0,0,686,684,1,0,0,0,687,688,5,13,0,0,688,690,3,164,82,
		0,689,684,1,0,0,0,689,690,1,0,0,0,690,694,1,0,0,0,691,693,5,137,0,0,692,
		691,1,0,0,0,693,696,1,0,0,0,694,692,1,0,0,0,694,695,1,0,0,0,695,697,1,
		0,0,0,696,694,1,0,0,0,697,699,3,68,34,0,698,700,3,70,35,0,699,698,1,0,
		0,0,699,700,1,0,0,0,700,701,1,0,0,0,701,702,3,72,36,0,702,809,1,0,0,0,
		703,707,5,95,0,0,704,706,5,137,0,0,705,704,1,0,0,0,706,709,1,0,0,0,707,
		705,1,0,0,0,707,708,1,0,0,0,708,710,1,0,0,0,709,707,1,0,0,0,710,719,3,
		164,82,0,711,713,5,137,0,0,712,711,1,0,0,0,713,716,1,0,0,0,714,712,1,0,
		0,0,714,715,1,0,0,0,715,717,1,0,0,0,716,714,1,0,0,0,717,718,5,13,0,0,718,
		720,3,164,82,0,719,714,1,0,0,0,719,720,1,0,0,0,720,724,1,0,0,0,721,723,
		5,137,0,0,722,721,1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,724,725,1,0,
		0,0,725,727,1,0,0,0,726,724,1,0,0,0,727,729,3,68,34,0,728,730,3,70,35,
		0,729,728,1,0,0,0,729,730,1,0,0,0,730,731,1,0,0,0,731,732,3,72,36,0,732,
		809,1,0,0,0,733,737,5,94,0,0,734,736,5,137,0,0,735,734,1,0,0,0,736,739,
		1,0,0,0,737,735,1,0,0,0,737,738,1,0,0,0,738,740,1,0,0,0,739,737,1,0,0,
		0,740,753,3,164,82,0,741,743,5,137,0,0,742,741,1,0,0,0,743,746,1,0,0,0,
		744,742,1,0,0,0,744,745,1,0,0,0,745,747,1,0,0,0,746,744,1,0,0,0,747,749,
		5,13,0,0,748,750,3,164,82,0,749,748,1,0,0,0,749,750,1,0,0,0,750,752,1,
		0,0,0,751,744,1,0,0,0,752,755,1,0,0,0,753,751,1,0,0,0,753,754,1,0,0,0,
		754,759,1,0,0,0,755,753,1,0,0,0,756,758,5,137,0,0,757,756,1,0,0,0,758,
		761,1,0,0,0,759,757,1,0,0,0,759,760,1,0,0,0,760,762,1,0,0,0,761,759,1,
		0,0,0,762,764,3,68,34,0,763,765,3,70,35,0,764,763,1,0,0,0,764,765,1,0,
		0,0,765,766,1,0,0,0,766,767,3,72,36,0,767,809,1,0,0,0,768,772,5,93,0,0,
		769,771,5,137,0,0,770,769,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,
		773,1,0,0,0,773,775,1,0,0,0,774,772,1,0,0,0,775,779,3,164,82,0,776,778,
		5,137,0,0,777,776,1,0,0,0,778,781,1,0,0,0,779,777,1,0,0,0,779,780,1,0,
		0,0,780,782,1,0,0,0,781,779,1,0,0,0,782,784,3,68,34,0,783,785,3,70,35,
		0,784,783,1,0,0,0,784,785,1,0,0,0,785,786,1,0,0,0,786,787,3,72,36,0,787,
		809,1,0,0,0,788,792,5,92,0,0,789,791,5,137,0,0,790,789,1,0,0,0,791,794,
		1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,795,1,0,0,0,794,792,1,0,0,
		0,795,799,3,76,38,0,796,798,5,137,0,0,797,796,1,0,0,0,798,801,1,0,0,0,
		799,797,1,0,0,0,799,800,1,0,0,0,800,802,1,0,0,0,801,799,1,0,0,0,802,804,
		3,68,34,0,803,805,3,70,35,0,804,803,1,0,0,0,804,805,1,0,0,0,805,806,1,
		0,0,0,806,807,3,72,36,0,807,809,1,0,0,0,808,621,1,0,0,0,808,643,1,0,0,
		0,808,673,1,0,0,0,808,703,1,0,0,0,808,733,1,0,0,0,808,768,1,0,0,0,808,
		788,1,0,0,0,809,75,1,0,0,0,810,812,3,178,89,0,811,810,1,0,0,0,811,812,
		1,0,0,0,812,825,1,0,0,0,813,815,5,137,0,0,814,813,1,0,0,0,815,818,1,0,
		0,0,816,814,1,0,0,0,816,817,1,0,0,0,817,819,1,0,0,0,818,816,1,0,0,0,819,
		821,5,13,0,0,820,822,3,178,89,0,821,820,1,0,0,0,821,822,1,0,0,0,822,824,
		1,0,0,0,823,816,1,0,0,0,824,827,1,0,0,0,825,823,1,0,0,0,825,826,1,0,0,
		0,826,831,1,0,0,0,827,825,1,0,0,0,828,830,5,137,0,0,829,828,1,0,0,0,830,
		833,1,0,0,0,831,829,1,0,0,0,831,832,1,0,0,0,832,834,1,0,0,0,833,831,1,
		0,0,0,834,838,5,104,0,0,835,837,5,137,0,0,836,835,1,0,0,0,837,840,1,0,
		0,0,838,836,1,0,0,0,838,839,1,0,0,0,839,841,1,0,0,0,840,838,1,0,0,0,841,
		878,3,164,82,0,842,844,5,9,0,0,843,845,3,178,89,0,844,843,1,0,0,0,844,
		845,1,0,0,0,845,858,1,0,0,0,846,848,5,137,0,0,847,846,1,0,0,0,848,851,
		1,0,0,0,849,847,1,0,0,0,849,850,1,0,0,0,850,852,1,0,0,0,851,849,1,0,0,
		0,852,854,5,13,0,0,853,855,3,178,89,0,854,853,1,0,0,0,854,855,1,0,0,0,
		855,857,1,0,0,0,856,849,1,0,0,0,857,860,1,0,0,0,858,856,1,0,0,0,858,859,
		1,0,0,0,859,864,1,0,0,0,860,858,1,0,0,0,861,863,7,4,0,0,862,861,1,0,0,
		0,863,866,1,0,0,0,864,862,1,0,0,0,864,865,1,0,0,0,865,867,1,0,0,0,866,
		864,1,0,0,0,867,871,5,104,0,0,868,870,7,4,0,0,869,868,1,0,0,0,870,873,
		1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,872,874,1,0,0,0,873,871,1,0,0,
		0,874,875,3,164,82,0,875,876,5,10,0,0,876,878,1,0,0,0,877,811,1,0,0,0,
		877,842,1,0,0,0,878,77,1,0,0,0,879,883,5,91,0,0,880,882,5,137,0,0,881,
		880,1,0,0,0,882,885,1,0,0,0,883,881,1,0,0,0,883,884,1,0,0,0,884,891,1,
		0,0,0,885,883,1,0,0,0,886,892,3,150,75,0,887,888,5,9,0,0,888,889,3,150,
		75,0,889,890,5,10,0,0,890,892,1,0,0,0,891,886,1,0,0,0,891,887,1,0,0,0,
		891,892,1,0,0,0,892,79,1,0,0,0,893,897,5,81,0,0,894,896,5,137,0,0,895,
		894,1,0,0,0,896,899,1,0,0,0,897,895,1,0,0,0,897,898,1,0,0,0,898,905,1,
		0,0,0,899,897,1,0,0,0,900,901,5,9,0,0,901,902,3,150,75,0,902,903,5,10,
		0,0,903,906,1,0,0,0,904,906,3,150,75,0,905,900,1,0,0,0,905,904,1,0,0,0,
		905,906,1,0,0,0,906,81,1,0,0,0,907,911,5,90,0,0,908,910,5,137,0,0,909,
		908,1,0,0,0,910,913,1,0,0,0,911,909,1,0,0,0,911,912,1,0,0,0,912,915,1,
		0,0,0,913,911,1,0,0,0,914,916,3,162,81,0,915,914,1,0,0,0,915,916,1,0,0,
		0,916,83,1,0,0,0,917,921,5,106,0,0,918,920,5,137,0,0,919,918,1,0,0,0,920,
		923,1,0,0,0,921,919,1,0,0,0,921,922,1,0,0,0,922,925,1,0,0,0,923,921,1,
		0,0,0,924,926,3,162,81,0,925,924,1,0,0,0,925,926,1,0,0,0,926,85,1,0,0,
		0,927,931,5,84,0,0,928,930,5,137,0,0,929,928,1,0,0,0,930,933,1,0,0,0,931,
		929,1,0,0,0,931,932,1,0,0,0,932,935,1,0,0,0,933,931,1,0,0,0,934,936,3,
		164,82,0,935,934,1,0,0,0,935,936,1,0,0,0,936,945,1,0,0,0,937,939,5,137,
		0,0,938,937,1,0,0,0,939,942,1,0,0,0,940,938,1,0,0,0,940,941,1,0,0,0,941,
		943,1,0,0,0,942,940,1,0,0,0,943,944,5,13,0,0,944,946,3,194,97,0,945,940,
		1,0,0,0,945,946,1,0,0,0,946,950,1,0,0,0,947,949,3,214,107,0,948,947,1,
		0,0,0,949,952,1,0,0,0,950,948,1,0,0,0,950,951,1,0,0,0,951,953,1,0,0,0,
		952,950,1,0,0,0,953,954,3,88,44,0,954,87,1,0,0,0,955,959,5,11,0,0,956,
		958,3,214,107,0,957,956,1,0,0,0,958,961,1,0,0,0,959,957,1,0,0,0,959,960,
		1,0,0,0,960,963,1,0,0,0,961,959,1,0,0,0,962,964,3,90,45,0,963,962,1,0,
		0,0,963,964,1,0,0,0,964,969,1,0,0,0,965,967,3,94,47,0,966,968,3,90,45,
		0,967,966,1,0,0,0,967,968,1,0,0,0,968,970,1,0,0,0,969,965,1,0,0,0,969,
		970,1,0,0,0,970,971,1,0,0,0,971,972,5,12,0,0,972,89,1,0,0,0,973,975,3,
		92,46,0,974,973,1,0,0,0,975,976,1,0,0,0,976,974,1,0,0,0,976,977,1,0,0,
		0,977,91,1,0,0,0,978,982,5,85,0,0,979,981,5,137,0,0,980,979,1,0,0,0,981,
		984,1,0,0,0,982,980,1,0,0,0,982,983,1,0,0,0,983,985,1,0,0,0,984,982,1,
		0,0,0,985,989,3,158,79,0,986,988,5,137,0,0,987,986,1,0,0,0,988,991,1,0,
		0,0,989,987,1,0,0,0,989,990,1,0,0,0,990,992,1,0,0,0,991,989,1,0,0,0,992,
		1001,5,17,0,0,993,995,3,214,107,0,994,993,1,0,0,0,995,998,1,0,0,0,996,
		994,1,0,0,0,996,997,1,0,0,0,997,999,1,0,0,0,998,996,1,0,0,0,999,1002,3,
		20,10,0,1000,1002,5,136,0,0,1001,996,1,0,0,0,1001,1000,1,0,0,0,1002,93,
		1,0,0,0,1003,1007,5,86,0,0,1004,1006,5,137,0,0,1005,1004,1,0,0,0,1006,
		1009,1,0,0,0,1007,1005,1,0,0,0,1007,1008,1,0,0,0,1008,1010,1,0,0,0,1009,
		1007,1,0,0,0,1010,1019,5,17,0,0,1011,1013,3,214,107,0,1012,1011,1,0,0,
		0,1013,1016,1,0,0,0,1014,1012,1,0,0,0,1014,1015,1,0,0,0,1015,1017,1,0,
		0,0,1016,1014,1,0,0,0,1017,1020,3,20,10,0,1018,1020,5,136,0,0,1019,1014,
		1,0,0,0,1019,1018,1,0,0,0,1020,95,1,0,0,0,1021,1022,5,134,0,0,1022,1023,
		5,17,0,0,1023,97,1,0,0,0,1024,1028,5,112,0,0,1025,1027,5,137,0,0,1026,
		1025,1,0,0,0,1027,1030,1,0,0,0,1028,1026,1,0,0,0,1028,1029,1,0,0,0,1029,
		1031,1,0,0,0,1030,1028,1,0,0,0,1031,1044,3,150,75,0,1032,1036,5,112,0,
		0,1033,1035,5,137,0,0,1034,1033,1,0,0,0,1035,1038,1,0,0,0,1036,1034,1,
		0,0,0,1036,1037,1,0,0,0,1037,1039,1,0,0,0,1038,1036,1,0,0,0,1039,1040,
		5,9,0,0,1040,1041,3,150,75,0,1041,1042,5,10,0,0,1042,1044,1,0,0,0,1043,
		1024,1,0,0,0,1043,1032,1,0,0,0,1044,99,1,0,0,0,1045,1049,5,102,0,0,1046,
		1048,5,137,0,0,1047,1046,1,0,0,0,1048,1051,1,0,0,0,1049,1047,1,0,0,0,1049,
		1050,1,0,0,0,1050,1053,1,0,0,0,1051,1049,1,0,0,0,1052,1054,3,164,82,0,
		1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,101,1,0,0,0,1055,1059,5,105,0,
		0,1056,1058,3,214,107,0,1057,1056,1,0,0,0,1058,1061,1,0,0,0,1059,1057,
		1,0,0,0,1059,1060,1,0,0,0,1060,1062,1,0,0,0,1061,1059,1,0,0,0,1062,1066,
		3,16,8,0,1063,1065,3,104,52,0,1064,1063,1,0,0,0,1065,1068,1,0,0,0,1066,
		1064,1,0,0,0,1066,1067,1,0,0,0,1067,1069,1,0,0,0,1068,1066,1,0,0,0,1069,
		1071,3,72,36,0,1070,1072,3,110,55,0,1071,1070,1,0,0,0,1071,1072,1,0,0,
		0,1072,103,1,0,0,0,1073,1074,5,136,0,0,1074,1078,5,88,0,0,1075,1077,5,
		137,0,0,1076,1075,1,0,0,0,1077,1080,1,0,0,0,1078,1076,1,0,0,0,1078,1079,
		1,0,0,0,1079,1088,1,0,0,0,1080,1078,1,0,0,0,1081,1085,3,106,53,0,1082,
		1084,5,137,0,0,1083,1082,1,0,0,0,1084,1087,1,0,0,0,1085,1083,1,0,0,0,1085,
		1086,1,0,0,0,1086,1089,1,0,0,0,1087,1085,1,0,0,0,1088,1081,1,0,0,0,1088,
		1089,1,0,0,0,1089,1090,1,0,0,0,1090,1091,3,68,34,0,1091,105,1,0,0,0,1092,
		1100,3,108,54,0,1093,1095,5,137,0,0,1094,1093,1,0,0,0,1095,1098,1,0,0,
		0,1096,1094,1,0,0,0,1096,1097,1,0,0,0,1097,1099,1,0,0,0,1098,1096,1,0,
		0,0,1099,1101,5,123,0,0,1100,1096,1,0,0,0,1100,1101,1,0,0,0,1101,1109,
		1,0,0,0,1102,1104,5,137,0,0,1103,1102,1,0,0,0,1104,1107,1,0,0,0,1105,1103,
		1,0,0,0,1105,1106,1,0,0,0,1106,1108,1,0,0,0,1107,1105,1,0,0,0,1108,1110,
		3,208,104,0,1109,1105,1,0,0,0,1109,1110,1,0,0,0,1110,1168,1,0,0,0,1111,
		1112,5,9,0,0,1112,1120,3,108,54,0,1113,1115,5,137,0,0,1114,1113,1,0,0,
		0,1115,1118,1,0,0,0,1116,1114,1,0,0,0,1116,1117,1,0,0,0,1117,1119,1,0,
		0,0,1118,1116,1,0,0,0,1119,1121,5,123,0,0,1120,1116,1,0,0,0,1120,1121,
		1,0,0,0,1121,1129,1,0,0,0,1122,1124,5,137,0,0,1123,1122,1,0,0,0,1124,1127,
		1,0,0,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,1128,1,0,0,0,1127,1125,
		1,0,0,0,1128,1130,3,208,104,0,1129,1125,1,0,0,0,1129,1130,1,0,0,0,1130,
		1131,1,0,0,0,1131,1132,5,10,0,0,1132,1168,1,0,0,0,1133,1135,5,137,0,0,
		1134,1133,1,0,0,0,1135,1138,1,0,0,0,1136,1134,1,0,0,0,1136,1137,1,0,0,
		0,1137,1139,1,0,0,0,1138,1136,1,0,0,0,1139,1140,5,123,0,0,1140,1144,1,
		0,0,0,1141,1143,5,137,0,0,1142,1141,1,0,0,0,1143,1146,1,0,0,0,1144,1142,
		1,0,0,0,1144,1145,1,0,0,0,1145,1147,1,0,0,0,1146,1144,1,0,0,0,1147,1168,
		3,208,104,0,1148,1152,5,9,0,0,1149,1151,5,137,0,0,1150,1149,1,0,0,0,1151,
		1154,1,0,0,0,1152,1150,1,0,0,0,1152,1153,1,0,0,0,1153,1155,1,0,0,0,1154,
		1152,1,0,0,0,1155,1156,5,123,0,0,1156,1160,1,0,0,0,1157,1159,5,137,0,0,
		1158,1157,1,0,0,0,1159,1162,1,0,0,0,1160,1158,1,0,0,0,1160,1161,1,0,0,
		0,1161,1163,1,0,0,0,1162,1160,1,0,0,0,1163,1164,3,208,104,0,1164,1165,
		1,0,0,0,1165,1166,5,10,0,0,1166,1168,1,0,0,0,1167,1092,1,0,0,0,1167,1111,
		1,0,0,0,1167,1136,1,0,0,0,1167,1148,1,0,0,0,1168,107,1,0,0,0,1169,1180,
		3,208,104,0,1170,1172,5,137,0,0,1171,1170,1,0,0,0,1172,1175,1,0,0,0,1173,
		1171,1,0,0,0,1173,1174,1,0,0,0,1174,1176,1,0,0,0,1175,1173,1,0,0,0,1176,
		1177,5,13,0,0,1177,1179,3,208,104,0,1178,1173,1,0,0,0,1179,1182,1,0,0,
		0,1180,1178,1,0,0,0,1180,1181,1,0,0,0,1181,109,1,0,0,0,1182,1180,1,0,0,
		0,1183,1184,5,136,0,0,1184,1188,5,89,0,0,1185,1187,3,214,107,0,1186,1185,
		1,0,0,0,1187,1190,1,0,0,0,1188,1186,1,0,0,0,1188,1189,1,0,0,0,1189,1191,
		1,0,0,0,1190,1188,1,0,0,0,1191,1192,3,16,8,0,1192,111,1,0,0,0,1193,1194,
		3,182,91,0,1194,1195,3,190,95,0,1195,113,1,0,0,0,1196,1200,5,115,0,0,1197,
		1199,5,137,0,0,1198,1197,1,0,0,0,1199,1202,1,0,0,0,1200,1198,1,0,0,0,1200,
		1201,1,0,0,0,1201,1203,1,0,0,0,1202,1200,1,0,0,0,1203,1216,3,208,104,0,
		1204,1206,5,137,0,0,1205,1204,1,0,0,0,1206,1207,1,0,0,0,1207,1205,1,0,
		0,0,1207,1208,1,0,0,0,1208,1209,1,0,0,0,1209,1211,5,117,0,0,1210,1212,
		5,137,0,0,1211,1210,1,0,0,0,1212,1213,1,0,0,0,1213,1211,1,0,0,0,1213,1214,
		1,0,0,0,1214,1215,1,0,0,0,1215,1217,3,116,58,0,1216,1205,1,0,0,0,1216,
		1217,1,0,0,0,1217,1221,1,0,0,0,1218,1220,3,214,107,0,1219,1218,1,0,0,0,
		1220,1223,1,0,0,0,1221,1219,1,0,0,0,1221,1222,1,0,0,0,1222,1224,1,0,0,
		0,1223,1221,1,0,0,0,1224,1225,3,118,59,0,1225,115,1,0,0,0,1226,1231,3,
		208,104,0,1227,1228,5,20,0,0,1228,1230,3,208,104,0,1229,1227,1,0,0,0,1230,
		1233,1,0,0,0,1231,1229,1,0,0,0,1231,1232,1,0,0,0,1232,117,1,0,0,0,1233,
		1231,1,0,0,0,1234,1241,5,11,0,0,1235,1236,3,120,60,0,1236,1237,5,136,0,
		0,1237,1240,1,0,0,0,1238,1240,5,136,0,0,1239,1235,1,0,0,0,1239,1238,1,
		0,0,0,1240,1243,1,0,0,0,1241,1239,1,0,0,0,1241,1242,1,0,0,0,1242,1244,
		1,0,0,0,1243,1241,1,0,0,0,1244,1245,5,12,0,0,1245,119,1,0,0,0,1246,1282,
		3,122,61,0,1247,1251,5,126,0,0,1248,1250,5,137,0,0,1249,1248,1,0,0,0,1250,
		1253,1,0,0,0,1251,1249,1,0,0,0,1251,1252,1,0,0,0,1252,1255,1,0,0,0,1253,
		1251,1,0,0,0,1254,1247,1,0,0,0,1254,1255,1,0,0,0,1255,1256,1,0,0,0,1256,
		1282,3,124,62,0,1257,1261,5,126,0,0,1258,1260,5,137,0,0,1259,1258,1,0,
		0,0,1260,1263,1,0,0,0,1261,1259,1,0,0,0,1261,1262,1,0,0,0,1262,1265,1,
		0,0,0,1263,1261,1,0,0,0,1264,1257,1,0,0,0,1264,1265,1,0,0,0,1265,1266,
		1,0,0,0,1266,1277,3,132,66,0,1267,1269,5,137,0,0,1268,1267,1,0,0,0,1269,
		1272,1,0,0,0,1270,1268,1,0,0,0,1270,1271,1,0,0,0,1271,1273,1,0,0,0,1272,
		1270,1,0,0,0,1273,1274,5,13,0,0,1274,1276,3,132,66,0,1275,1270,1,0,0,0,
		1276,1279,1,0,0,0,1277,1275,1,0,0,0,1277,1278,1,0,0,0,1278,1282,1,0,0,
		0,1279,1277,1,0,0,0,1280,1282,3,114,57,0,1281,1246,1,0,0,0,1281,1254,1,
		0,0,0,1281,1264,1,0,0,0,1281,1280,1,0,0,0,1282,121,1,0,0,0,1283,1284,3,
		182,91,0,1284,1285,3,190,95,0,1285,123,1,0,0,0,1286,1287,3,126,63,0,1287,
		1288,5,67,0,0,1288,1289,3,162,81,0,1289,1312,1,0,0,0,1290,1294,3,126,63,
		0,1291,1293,3,214,107,0,1292,1291,1,0,0,0,1293,1296,1,0,0,0,1294,1292,
		1,0,0,0,1294,1295,1,0,0,0,1295,1297,1,0,0,0,1296,1294,1,0,0,0,1297,1305,
		5,11,0,0,1298,1299,3,128,64,0,1299,1300,5,136,0,0,1300,1306,1,0,0,0,1301,
		1302,3,130,65,0,1302,1303,5,136,0,0,1303,1306,1,0,0,0,1304,1306,5,136,
		0,0,1305,1298,1,0,0,0,1305,1301,1,0,0,0,1305,1304,1,0,0,0,1306,1307,1,
		0,0,0,1307,1305,1,0,0,0,1307,1308,1,0,0,0,1308,1309,1,0,0,0,1309,1310,
		5,12,0,0,1310,1312,1,0,0,0,1311,1286,1,0,0,0,1311,1290,1,0,0,0,1312,125,
		1,0,0,0,1313,1328,3,208,104,0,1314,1315,3,208,104,0,1315,1317,5,7,0,0,
		1316,1318,3,134,67,0,1317,1316,1,0,0,0,1317,1318,1,0,0,0,1318,1322,1,0,
		0,0,1319,1321,3,214,107,0,1320,1319,1,0,0,0,1321,1324,1,0,0,0,1322,1320,
		1,0,0,0,1322,1323,1,0,0,0,1323,1325,1,0,0,0,1324,1322,1,0,0,0,1325,1326,
		5,8,0,0,1326,1328,1,0,0,0,1327,1313,1,0,0,0,1327,1314,1,0,0,0,1328,127,
		1,0,0,0,1329,1330,5,113,0,0,1330,1331,3,190,95,0,1331,129,1,0,0,0,1332,
		1333,5,114,0,0,1333,1334,3,190,95,0,1334,131,1,0,0,0,1335,1340,3,150,75,
		0,1336,1337,5,20,0,0,1337,1339,3,150,75,0,1338,1336,1,0,0,0,1339,1342,
		1,0,0,0,1340,1338,1,0,0,0,1340,1341,1,0,0,0,1341,1343,1,0,0,0,1342,1340,
		1,0,0,0,1343,1344,5,14,0,0,1344,1345,3,162,81,0,1345,133,1,0,0,0,1346,
		1350,3,136,68,0,1347,1349,5,137,0,0,1348,1347,1,0,0,0,1349,1352,1,0,0,
		0,1350,1348,1,0,0,0,1350,1351,1,0,0,0,1351,1353,1,0,0,0,1352,1350,1,0,
		0,0,1353,1354,5,13,0,0,1354,1356,1,0,0,0,1355,1346,1,0,0,0,1356,1359,1,
		0,0,0,1357,1355,1,0,0,0,1357,1358,1,0,0,0,1358,1360,1,0,0,0,1359,1357,
		1,0,0,0,1360,1361,3,138,69,0,1361,135,1,0,0,0,1362,1364,5,47,0,0,1363,
		1362,1,0,0,0,1363,1364,1,0,0,0,1364,1365,1,0,0,0,1365,1369,3,208,104,0,
		1366,1367,5,14,0,0,1367,1370,3,162,81,0,1368,1370,5,15,0,0,1369,1366,1,
		0,0,0,1369,1368,1,0,0,0,1369,1370,1,0,0,0,1370,137,1,0,0,0,1371,1377,3,
		136,68,0,1372,1374,3,208,104,0,1373,1372,1,0,0,0,1373,1374,1,0,0,0,1374,
		1375,1,0,0,0,1375,1377,5,28,0,0,1376,1371,1,0,0,0,1376,1373,1,0,0,0,1377,
		139,1,0,0,0,1378,1382,5,7,0,0,1379,1381,7,4,0,0,1380,1379,1,0,0,0,1381,
		1384,1,0,0,0,1382,1380,1,0,0,0,1382,1383,1,0,0,0,1383,1392,1,0,0,0,1384,
		1382,1,0,0,0,1385,1389,3,154,77,0,1386,1388,7,4,0,0,1387,1386,1,0,0,0,
		1388,1391,1,0,0,0,1389,1387,1,0,0,0,1389,1390,1,0,0,0,1390,1393,1,0,0,
		0,1391,1389,1,0,0,0,1392,1385,1,0,0,0,1392,1393,1,0,0,0,1393,1394,1,0,
		0,0,1394,1395,5,8,0,0,1395,141,1,0,0,0,1396,1400,5,7,0,0,1397,1399,7,4,
		0,0,1398,1397,1,0,0,0,1399,1402,1,0,0,0,1400,1398,1,0,0,0,1400,1401,1,
		0,0,0,1401,1403,1,0,0,0,1402,1400,1,0,0,0,1403,1407,3,144,72,0,1404,1406,
		7,4,0,0,1405,1404,1,0,0,0,1406,1409,1,0,0,0,1407,1405,1,0,0,0,1407,1408,
		1,0,0,0,1408,1410,1,0,0,0,1409,1407,1,0,0,0,1410,1411,5,8,0,0,1411,143,
		1,0,0,0,1412,1414,5,137,0,0,1413,1412,1,0,0,0,1414,1417,1,0,0,0,1415,1413,
		1,0,0,0,1415,1416,1,0,0,0,1416,1418,1,0,0,0,1417,1415,1,0,0,0,1418,1420,
		5,13,0,0,1419,1415,1,0,0,0,1420,1423,1,0,0,0,1421,1419,1,0,0,0,1421,1422,
		1,0,0,0,1422,1424,1,0,0,0,1423,1421,1,0,0,0,1424,1437,3,146,73,0,1425,
		1427,5,137,0,0,1426,1425,1,0,0,0,1427,1430,1,0,0,0,1428,1426,1,0,0,0,1428,
		1429,1,0,0,0,1429,1431,1,0,0,0,1430,1428,1,0,0,0,1431,1433,5,13,0,0,1432,
		1434,3,146,73,0,1433,1432,1,0,0,0,1433,1434,1,0,0,0,1434,1436,1,0,0,0,
		1435,1428,1,0,0,0,1436,1439,1,0,0,0,1437,1435,1,0,0,0,1437,1438,1,0,0,
		0,1438,145,1,0,0,0,1439,1437,1,0,0,0,1440,1441,3,162,81,0,1441,1442,5,
		17,0,0,1442,1443,3,162,81,0,1443,147,1,0,0,0,1444,1448,3,172,86,0,1445,
		1447,7,4,0,0,1446,1445,1,0,0,0,1447,1450,1,0,0,0,1448,1446,1,0,0,0,1448,
		1449,1,0,0,0,1449,1451,1,0,0,0,1450,1448,1,0,0,0,1451,1455,5,17,0,0,1452,
		1454,7,4,0,0,1453,1452,1,0,0,0,1454,1457,1,0,0,0,1455,1453,1,0,0,0,1455,
		1456,1,0,0,0,1456,1458,1,0,0,0,1457,1455,1,0,0,0,1458,1459,3,162,81,0,
		1459,149,1,0,0,0,1460,1465,3,208,104,0,1461,1465,3,210,105,0,1462,1465,
		5,135,0,0,1463,1465,3,198,99,0,1464,1460,1,0,0,0,1464,1461,1,0,0,0,1464,
		1462,1,0,0,0,1464,1463,1,0,0,0,1465,151,1,0,0,0,1466,1467,5,1,0,0,1467,
		1468,3,162,81,0,1468,1469,5,2,0,0,1469,153,1,0,0,0,1470,1483,3,156,78,
		0,1471,1473,5,137,0,0,1472,1471,1,0,0,0,1473,1476,1,0,0,0,1474,1472,1,
		0,0,0,1474,1475,1,0,0,0,1475,1477,1,0,0,0,1476,1474,1,0,0,0,1477,1479,
		5,13,0,0,1478,1480,3,156,78,0,1479,1478,1,0,0,0,1479,1480,1,0,0,0,1480,
		1482,1,0,0,0,1481,1474,1,0,0,0,1482,1485,1,0,0,0,1483,1481,1,0,0,0,1483,
		1484,1,0,0,0,1484,1501,1,0,0,0,1485,1483,1,0,0,0,1486,1488,5,137,0,0,1487,
		1486,1,0,0,0,1488,1491,1,0,0,0,1489,1487,1,0,0,0,1489,1490,1,0,0,0,1490,
		1492,1,0,0,0,1491,1489,1,0,0,0,1492,1494,5,13,0,0,1493,1495,3,156,78,0,
		1494,1493,1,0,0,0,1494,1495,1,0,0,0,1495,1497,1,0,0,0,1496,1489,1,0,0,
		0,1497,1498,1,0,0,0,1498,1496,1,0,0,0,1498,1499,1,0,0,0,1499,1501,1,0,
		0,0,1500,1470,1,0,0,0,1500,1496,1,0,0,0,1501,155,1,0,0,0,1502,1507,3,162,
		81,0,1503,1504,3,168,84,0,1504,1505,7,5,0,0,1505,1507,1,0,0,0,1506,1502,
		1,0,0,0,1506,1503,1,0,0,0,1507,157,1,0,0,0,1508,1519,3,162,81,0,1509,1511,
		5,137,0,0,1510,1509,1,0,0,0,1511,1514,1,0,0,0,1512,1510,1,0,0,0,1512,1513,
		1,0,0,0,1513,1515,1,0,0,0,1514,1512,1,0,0,0,1515,1516,5,13,0,0,1516,1518,
		3,162,81,0,1517,1512,1,0,0,0,1518,1521,1,0,0,0,1519,1517,1,0,0,0,1519,
		1520,1,0,0,0,1520,159,1,0,0,0,1521,1519,1,0,0,0,1522,1526,5,7,0,0,1523,
		1525,3,214,107,0,1524,1523,1,0,0,0,1525,1528,1,0,0,0,1526,1524,1,0,0,0,
		1526,1527,1,0,0,0,1527,1536,1,0,0,0,1528,1526,1,0,0,0,1529,1533,3,154,
		77,0,1530,1532,3,214,107,0,1531,1530,1,0,0,0,1532,1535,1,0,0,0,1533,1531,
		1,0,0,0,1533,1534,1,0,0,0,1534,1537,1,0,0,0,1535,1533,1,0,0,0,1536,1529,
		1,0,0,0,1536,1537,1,0,0,0,1537,1538,1,0,0,0,1538,1539,5,8,0,0,1539,161,
		1,0,0,0,1540,1541,6,81,-1,0,1541,1542,3,188,94,0,1542,1543,5,67,0,0,1543,
		1544,3,162,81,3,1544,1556,1,0,0,0,1545,1549,3,186,93,0,1546,1548,7,4,0,
		0,1547,1546,1,0,0,0,1548,1551,1,0,0,0,1549,1547,1,0,0,0,1549,1550,1,0,
		0,0,1550,1552,1,0,0,0,1551,1549,1,0,0,0,1552,1553,3,18,9,0,1553,1556,1,
		0,0,0,1554,1556,3,166,83,0,1555,1540,1,0,0,0,1555,1545,1,0,0,0,1555,1554,
		1,0,0,0,1556,1604,1,0,0,0,1557,1560,10,7,0,0,1558,1561,5,50,0,0,1559,1561,
		5,109,0,0,1560,1558,1,0,0,0,1560,1559,1,0,0,0,1561,1562,1,0,0,0,1562,1603,
		3,162,81,8,1563,1566,10,6,0,0,1564,1567,5,51,0,0,1565,1567,5,111,0,0,1566,
		1564,1,0,0,0,1566,1565,1,0,0,0,1567,1568,1,0,0,0,1568,1603,3,162,81,7,
		1569,1570,10,5,0,0,1570,1571,5,33,0,0,1571,1603,3,162,81,5,1572,1576,10,
		4,0,0,1573,1575,7,4,0,0,1574,1573,1,0,0,0,1575,1578,1,0,0,0,1576,1574,
		1,0,0,0,1576,1577,1,0,0,0,1577,1579,1,0,0,0,1578,1576,1,0,0,0,1579,1583,
		5,15,0,0,1580,1582,7,4,0,0,1581,1580,1,0,0,0,1582,1585,1,0,0,0,1583,1581,
		1,0,0,0,1583,1584,1,0,0,0,1584,1586,1,0,0,0,1585,1583,1,0,0,0,1586,1590,
		3,162,81,0,1587,1589,7,4,0,0,1588,1587,1,0,0,0,1589,1592,1,0,0,0,1590,
		1588,1,0,0,0,1590,1591,1,0,0,0,1591,1593,1,0,0,0,1592,1590,1,0,0,0,1593,
		1597,5,17,0,0,1594,1596,7,4,0,0,1595,1594,1,0,0,0,1596,1599,1,0,0,0,1597,
		1595,1,0,0,0,1597,1598,1,0,0,0,1598,1600,1,0,0,0,1599,1597,1,0,0,0,1600,
		1601,3,162,81,4,1601,1603,1,0,0,0,1602,1557,1,0,0,0,1602,1563,1,0,0,0,
		1602,1569,1,0,0,0,1602,1572,1,0,0,0,1603,1606,1,0,0,0,1604,1602,1,0,0,
		0,1604,1605,1,0,0,0,1605,163,1,0,0,0,1606,1604,1,0,0,0,1607,1608,6,82,
		-1,0,1608,1609,3,166,83,0,1609,1651,1,0,0,0,1610,1611,10,5,0,0,1611,1612,
		7,6,0,0,1612,1650,3,164,82,6,1613,1614,10,4,0,0,1614,1615,7,7,0,0,1615,
		1650,3,164,82,5,1616,1617,10,3,0,0,1617,1618,5,33,0,0,1618,1650,3,164,
		82,4,1619,1623,10,2,0,0,1620,1622,7,4,0,0,1621,1620,1,0,0,0,1622,1625,
		1,0,0,0,1623,1621,1,0,0,0,1623,1624,1,0,0,0,1624,1626,1,0,0,0,1625,1623,
		1,0,0,0,1626,1630,5,15,0,0,1627,1629,7,4,0,0,1628,1627,1,0,0,0,1629,1632,
		1,0,0,0,1630,1628,1,0,0,0,1630,1631,1,0,0,0,1631,1633,1,0,0,0,1632,1630,
		1,0,0,0,1633,1637,3,164,82,0,1634,1636,7,4,0,0,1635,1634,1,0,0,0,1636,
		1639,1,0,0,0,1637,1635,1,0,0,0,1637,1638,1,0,0,0,1638,1640,1,0,0,0,1639,
		1637,1,0,0,0,1640,1644,5,17,0,0,1641,1643,7,4,0,0,1642,1641,1,0,0,0,1643,
		1646,1,0,0,0,1644,1642,1,0,0,0,1644,1645,1,0,0,0,1645,1647,1,0,0,0,1646,
		1644,1,0,0,0,1647,1648,3,164,82,2,1648,1650,1,0,0,0,1649,1610,1,0,0,0,
		1649,1613,1,0,0,0,1649,1616,1,0,0,0,1649,1619,1,0,0,0,1650,1653,1,0,0,
		0,1651,1649,1,0,0,0,1651,1652,1,0,0,0,1652,165,1,0,0,0,1653,1651,1,0,0,
		0,1654,1655,6,83,-1,0,1655,1687,3,168,84,0,1656,1657,5,22,0,0,1657,1687,
		3,166,83,20,1658,1659,5,23,0,0,1659,1687,3,166,83,19,1660,1661,5,25,0,
		0,1661,1687,3,166,83,17,1662,1666,5,27,0,0,1663,1665,5,137,0,0,1664,1663,
		1,0,0,0,1665,1668,1,0,0,0,1666,1664,1,0,0,0,1666,1667,1,0,0,0,1667,1669,
		1,0,0,0,1668,1666,1,0,0,0,1669,1687,3,166,83,16,1670,1671,5,24,0,0,1671,
		1687,3,166,83,15,1672,1673,5,26,0,0,1673,1687,3,166,83,14,1674,1678,5,
		110,0,0,1675,1677,5,137,0,0,1676,1675,1,0,0,0,1677,1680,1,0,0,0,1678,1676,
		1,0,0,0,1678,1679,1,0,0,0,1679,1681,1,0,0,0,1680,1678,1,0,0,0,1681,1687,
		3,166,83,2,1682,1683,3,168,84,0,1683,1684,3,192,96,0,1684,1685,3,162,81,
		0,1685,1687,1,0,0,0,1686,1654,1,0,0,0,1686,1656,1,0,0,0,1686,1658,1,0,
		0,0,1686,1660,1,0,0,0,1686,1662,1,0,0,0,1686,1670,1,0,0,0,1686,1672,1,
		0,0,0,1686,1674,1,0,0,0,1686,1682,1,0,0,0,1687,1785,1,0,0,0,1688,1689,
		10,18,0,0,1689,1690,5,32,0,0,1690,1784,3,166,83,18,1691,1695,10,13,0,0,
		1692,1694,7,4,0,0,1693,1692,1,0,0,0,1694,1697,1,0,0,0,1695,1693,1,0,0,
		0,1695,1696,1,0,0,0,1696,1698,1,0,0,0,1697,1695,1,0,0,0,1698,1702,7,8,
		0,0,1699,1701,7,4,0,0,1700,1699,1,0,0,0,1701,1704,1,0,0,0,1702,1700,1,
		0,0,0,1702,1703,1,0,0,0,1703,1705,1,0,0,0,1704,1702,1,0,0,0,1705,1784,
		3,166,83,14,1706,1710,10,12,0,0,1707,1709,7,4,0,0,1708,1707,1,0,0,0,1709,
		1712,1,0,0,0,1710,1708,1,0,0,0,1710,1711,1,0,0,0,1711,1713,1,0,0,0,1712,
		1710,1,0,0,0,1713,1717,7,9,0,0,1714,1716,7,4,0,0,1715,1714,1,0,0,0,1716,
		1719,1,0,0,0,1717,1715,1,0,0,0,1717,1718,1,0,0,0,1718,1720,1,0,0,0,1719,
		1717,1,0,0,0,1720,1784,3,166,83,13,1721,1722,10,11,0,0,1722,1723,7,10,
		0,0,1723,1784,3,166,83,12,1724,1728,10,10,0,0,1725,1727,7,4,0,0,1726,1725,
		1,0,0,0,1727,1730,1,0,0,0,1728,1726,1,0,0,0,1728,1729,1,0,0,0,1729,1731,
		1,0,0,0,1730,1728,1,0,0,0,1731,1735,5,47,0,0,1732,1734,7,4,0,0,1733,1732,
		1,0,0,0,1734,1737,1,0,0,0,1735,1733,1,0,0,0,1735,1736,1,0,0,0,1736,1738,
		1,0,0,0,1737,1735,1,0,0,0,1738,1784,3,166,83,11,1739,1740,10,9,0,0,1740,
		1741,5,48,0,0,1741,1784,3,166,83,10,1742,1743,10,8,0,0,1743,1744,5,49,
		0,0,1744,1784,3,166,83,9,1745,1752,10,7,0,0,1746,1753,5,21,0,0,1747,1749,
		5,137,0,0,1748,1747,1,0,0,0,1749,1750,1,0,0,0,1750,1748,1,0,0,0,1750,1751,
		1,0,0,0,1751,1753,1,0,0,0,1752,1746,1,0,0,0,1752,1748,1,0,0,0,1753,1754,
		1,0,0,0,1754,1784,3,166,83,8,1755,1756,10,6,0,0,1756,1757,5,46,0,0,1757,
		1784,3,166,83,7,1758,1759,10,5,0,0,1759,1760,7,11,0,0,1760,1784,3,166,
		83,6,1761,1762,10,4,0,0,1762,1763,7,12,0,0,1763,1784,3,166,83,5,1764,1768,
		10,3,0,0,1765,1767,3,214,107,0,1766,1765,1,0,0,0,1767,1770,1,0,0,0,1768,
		1766,1,0,0,0,1768,1769,1,0,0,0,1769,1771,1,0,0,0,1770,1768,1,0,0,0,1771,
		1775,7,13,0,0,1772,1774,3,214,107,0,1773,1772,1,0,0,0,1774,1777,1,0,0,
		0,1775,1773,1,0,0,0,1775,1776,1,0,0,0,1776,1778,1,0,0,0,1777,1775,1,0,
		0,0,1778,1784,3,166,83,4,1779,1780,10,22,0,0,1780,1784,5,22,0,0,1781,1782,
		10,21,0,0,1782,1784,5,23,0,0,1783,1688,1,0,0,0,1783,1691,1,0,0,0,1783,
		1706,1,0,0,0,1783,1721,1,0,0,0,1783,1724,1,0,0,0,1783,1739,1,0,0,0,1783,
		1742,1,0,0,0,1783,1745,1,0,0,0,1783,1755,1,0,0,0,1783,1758,1,0,0,0,1783,
		1761,1,0,0,0,1783,1764,1,0,0,0,1783,1779,1,0,0,0,1783,1781,1,0,0,0,1784,
		1787,1,0,0,0,1785,1783,1,0,0,0,1785,1786,1,0,0,0,1786,167,1,0,0,0,1787,
		1785,1,0,0,0,1788,1789,6,84,-1,0,1789,1790,5,47,0,0,1790,1802,3,168,84,
		8,1791,1802,3,208,104,0,1792,1802,3,174,87,0,1793,1802,3,194,97,0,1794,
		1802,3,140,70,0,1795,1802,3,142,71,0,1796,1802,3,180,90,0,1797,1798,5,
		9,0,0,1798,1799,3,158,79,0,1799,1800,5,10,0,0,1800,1802,1,0,0,0,1801,1788,
		1,0,0,0,1801,1791,1,0,0,0,1801,1792,1,0,0,0,1801,1793,1,0,0,0,1801,1794,
		1,0,0,0,1801,1795,1,0,0,0,1801,1796,1,0,0,0,1801,1797,1,0,0,0,1802,1819,
		1,0,0,0,1803,1804,10,11,0,0,1804,1805,7,14,0,0,1805,1818,3,172,86,0,1806,
		1807,10,10,0,0,1807,1809,5,9,0,0,1808,1810,3,154,77,0,1809,1808,1,0,0,
		0,1809,1810,1,0,0,0,1810,1811,1,0,0,0,1811,1818,5,10,0,0,1812,1814,10,
		9,0,0,1813,1815,5,16,0,0,1814,1813,1,0,0,0,1814,1815,1,0,0,0,1815,1816,
		1,0,0,0,1816,1818,3,160,80,0,1817,1803,1,0,0,0,1817,1806,1,0,0,0,1817,
		1812,1,0,0,0,1818,1821,1,0,0,0,1819,1817,1,0,0,0,1819,1820,1,0,0,0,1820,
		169,1,0,0,0,1821,1819,1,0,0,0,1822,1824,7,4,0,0,1823,1822,1,0,0,0,1824,
		1825,1,0,0,0,1825,1823,1,0,0,0,1825,1826,1,0,0,0,1826,1827,1,0,0,0,1827,
		1849,5,20,0,0,1828,1832,5,20,0,0,1829,1831,7,4,0,0,1830,1829,1,0,0,0,1831,
		1834,1,0,0,0,1832,1830,1,0,0,0,1832,1833,1,0,0,0,1833,1849,1,0,0,0,1834,
		1832,1,0,0,0,1835,1837,7,4,0,0,1836,1835,1,0,0,0,1837,1840,1,0,0,0,1838,
		1836,1,0,0,0,1838,1839,1,0,0,0,1839,1841,1,0,0,0,1840,1838,1,0,0,0,1841,
		1845,5,16,0,0,1842,1844,7,4,0,0,1843,1842,1,0,0,0,1844,1847,1,0,0,0,1845,
		1843,1,0,0,0,1845,1846,1,0,0,0,1846,1849,1,0,0,0,1847,1845,1,0,0,0,1848,
		1823,1,0,0,0,1848,1828,1,0,0,0,1848,1838,1,0,0,0,1849,171,1,0,0,0,1850,
		1855,3,208,104,0,1851,1855,3,174,87,0,1852,1855,3,210,105,0,1853,1855,
		3,194,97,0,1854,1850,1,0,0,0,1854,1851,1,0,0,0,1854,1852,1,0,0,0,1854,
		1853,1,0,0,0,1855,173,1,0,0,0,1856,1857,3,150,75,0,1857,1862,3,152,76,
		0,1858,1861,3,150,75,0,1859,1861,3,152,76,0,1860,1858,1,0,0,0,1860,1859,
		1,0,0,0,1861,1864,1,0,0,0,1862,1860,1,0,0,0,1862,1863,1,0,0,0,1863,1874,
		1,0,0,0,1864,1862,1,0,0,0,1865,1870,3,152,76,0,1866,1869,3,150,75,0,1867,
		1869,3,152,76,0,1868,1866,1,0,0,0,1868,1867,1,0,0,0,1869,1872,1,0,0,0,
		1870,1868,1,0,0,0,1870,1871,1,0,0,0,1871,1874,1,0,0,0,1872,1870,1,0,0,
		0,1873,1856,1,0,0,0,1873,1865,1,0,0,0,1874,175,1,0,0,0,1875,1876,5,14,
		0,0,1876,1877,3,162,81,0,1877,177,1,0,0,0,1878,1879,3,208,104,0,1879,179,
		1,0,0,0,1880,1884,5,11,0,0,1881,1883,3,214,107,0,1882,1881,1,0,0,0,1883,
		1886,1,0,0,0,1884,1882,1,0,0,0,1884,1885,1,0,0,0,1885,1887,1,0,0,0,1886,
		1884,1,0,0,0,1887,1898,3,148,74,0,1888,1890,5,137,0,0,1889,1888,1,0,0,
		0,1890,1893,1,0,0,0,1891,1889,1,0,0,0,1891,1892,1,0,0,0,1892,1894,1,0,
		0,0,1893,1891,1,0,0,0,1894,1895,5,13,0,0,1895,1897,3,148,74,0,1896,1891,
		1,0,0,0,1897,1900,1,0,0,0,1898,1896,1,0,0,0,1898,1899,1,0,0,0,1899,1904,
		1,0,0,0,1900,1898,1,0,0,0,1901,1903,3,214,107,0,1902,1901,1,0,0,0,1903,
		1906,1,0,0,0,1904,1902,1,0,0,0,1904,1905,1,0,0,0,1905,1907,1,0,0,0,1906,
		1904,1,0,0,0,1907,1908,5,12,0,0,1908,1917,1,0,0,0,1909,1911,5,11,0,0,1910,
		1912,5,137,0,0,1911,1910,1,0,0,0,1912,1913,1,0,0,0,1913,1911,1,0,0,0,1913,
		1914,1,0,0,0,1914,1915,1,0,0,0,1915,1917,5,12,0,0,1916,1880,1,0,0,0,1916,
		1909,1,0,0,0,1917,181,1,0,0,0,1918,1920,3,184,92,0,1919,1918,1,0,0,0,1919,
		1920,1,0,0,0,1920,1921,1,0,0,0,1921,1922,3,206,103,0,1922,1924,5,9,0,0,
		1923,1925,3,134,67,0,1924,1923,1,0,0,0,1924,1925,1,0,0,0,1925,1926,1,0,
		0,0,1926,1927,5,10,0,0,1927,183,1,0,0,0,1928,1932,7,15,0,0,1929,1931,5,
		137,0,0,1930,1929,1,0,0,0,1931,1934,1,0,0,0,1932,1930,1,0,0,0,1932,1933,
		1,0,0,0,1933,1936,1,0,0,0,1934,1932,1,0,0,0,1935,1928,1,0,0,0,1936,1937,
		1,0,0,0,1937,1935,1,0,0,0,1937,1938,1,0,0,0,1938,185,1,0,0,0,1939,1949,
		3,182,91,0,1940,1942,3,184,92,0,1941,1940,1,0,0,0,1941,1942,1,0,0,0,1942,
		1943,1,0,0,0,1943,1945,5,9,0,0,1944,1946,3,134,67,0,1945,1944,1,0,0,0,
		1945,1946,1,0,0,0,1946,1947,1,0,0,0,1947,1949,5,10,0,0,1948,1939,1,0,0,
		0,1948,1941,1,0,0,0,1949,187,1,0,0,0,1950,1952,3,184,92,0,1951,1950,1,
		0,0,0,1951,1952,1,0,0,0,1952,1953,1,0,0,0,1953,1955,3,206,103,0,1954,1951,
		1,0,0,0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,1969,5,28,0,0,1957,1959,
		3,184,92,0,1958,1957,1,0,0,0,1958,1959,1,0,0,0,1959,1961,1,0,0,0,1960,
		1962,5,47,0,0,1961,1960,1,0,0,0,1961,1962,1,0,0,0,1962,1963,1,0,0,0,1963,
		1965,3,206,103,0,1964,1966,5,15,0,0,1965,1964,1,0,0,0,1965,1966,1,0,0,
		0,1966,1969,1,0,0,0,1967,1969,3,186,93,0,1968,1954,1,0,0,0,1968,1958,1,
		0,0,0,1968,1967,1,0,0,0,1969,189,1,0,0,0,1970,1971,5,67,0,0,1971,1990,
		3,162,81,0,1972,1974,7,4,0,0,1973,1972,1,0,0,0,1974,1977,1,0,0,0,1975,
		1973,1,0,0,0,1975,1976,1,0,0,0,1976,1978,1,0,0,0,1977,1975,1,0,0,0,1978,
		1982,5,11,0,0,1979,1981,3,214,107,0,1980,1979,1,0,0,0,1981,1984,1,0,0,
		0,1982,1980,1,0,0,0,1982,1983,1,0,0,0,1983,1986,1,0,0,0,1984,1982,1,0,
		0,0,1985,1987,3,20,10,0,1986,1985,1,0,0,0,1986,1987,1,0,0,0,1987,1988,
		1,0,0,0,1988,1990,5,12,0,0,1989,1970,1,0,0,0,1989,1975,1,0,0,0,1990,191,
		1,0,0,0,1991,1992,7,16,0,0,1992,193,1,0,0,0,1993,1998,3,196,98,0,1994,
		1998,3,198,99,0,1995,1998,3,200,100,0,1996,1998,7,17,0,0,1997,1993,1,0,
		0,0,1997,1994,1,0,0,0,1997,1995,1,0,0,0,1997,1996,1,0,0,0,1998,195,1,0,
		0,0,1999,2000,7,18,0,0,2000,197,1,0,0,0,2001,2002,7,19,0,0,2002,199,1,
		0,0,0,2003,2004,7,20,0,0,2004,201,1,0,0,0,2005,2006,5,113,0,0,2006,2007,
		3,150,75,0,2007,203,1,0,0,0,2008,2009,5,114,0,0,2009,2010,3,150,75,0,2010,
		205,1,0,0,0,2011,2014,3,208,104,0,2012,2014,3,210,105,0,2013,2011,1,0,
		0,0,2013,2012,1,0,0,0,2014,207,1,0,0,0,2015,2016,7,21,0,0,2016,209,1,0,
		0,0,2017,2022,3,212,106,0,2018,2022,5,68,0,0,2019,2022,5,69,0,0,2020,2022,
		3,196,98,0,2021,2017,1,0,0,0,2021,2018,1,0,0,0,2021,2019,1,0,0,0,2021,
		2020,1,0,0,0,2022,211,1,0,0,0,2023,2024,7,22,0,0,2024,213,1,0,0,0,2025,
		2026,7,4,0,0,2026,215,1,0,0,0,2027,2028,7,23,0,0,2028,217,1,0,0,0,290,
		222,227,249,253,258,263,268,270,279,285,290,294,297,306,312,317,325,328,
		345,351,355,364,370,374,380,389,398,404,408,413,420,427,434,438,440,447,
		451,459,466,470,478,482,486,491,498,500,507,514,521,525,527,534,538,544,
		551,559,565,568,577,584,593,597,604,614,619,625,632,635,639,647,654,659,
		664,669,677,684,689,694,699,707,714,719,724,729,737,744,749,753,759,764,
		772,779,784,792,799,804,808,811,816,821,825,831,838,844,849,854,858,864,
		871,877,883,891,897,905,911,915,921,925,931,935,940,945,950,959,963,967,
		969,976,982,989,996,1001,1007,1014,1019,1028,1036,1043,1049,1053,1059,
		1066,1071,1078,1085,1088,1096,1100,1105,1109,1116,1120,1125,1129,1136,
		1144,1152,1160,1167,1173,1180,1188,1200,1207,1213,1216,1221,1231,1239,
		1241,1251,1254,1261,1264,1270,1277,1281,1294,1305,1307,1311,1317,1322,
		1327,1340,1350,1357,1363,1369,1373,1376,1382,1389,1392,1400,1407,1415,
		1421,1428,1433,1437,1448,1455,1464,1474,1479,1483,1489,1494,1498,1500,
		1506,1512,1519,1526,1533,1536,1549,1555,1560,1566,1576,1583,1590,1597,
		1602,1604,1623,1630,1637,1644,1649,1651,1666,1678,1686,1695,1702,1710,
		1717,1728,1735,1750,1752,1768,1775,1783,1785,1801,1809,1814,1817,1819,
		1825,1832,1838,1845,1848,1854,1860,1862,1868,1870,1873,1884,1891,1898,
		1904,1913,1916,1919,1924,1932,1937,1941,1945,1948,1951,1954,1958,1961,
		1965,1968,1975,1982,1986,1989,1997,2013,2021
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
