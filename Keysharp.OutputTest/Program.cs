using static Keysharp.Core.Accessors;
using static Keysharp.Core.Core;
//using static Keysharp.Core.Common.Window.WindowItemBase;
using static Keysharp.Core.Common.Keyboard.HotkeyDefinition;
using static Keysharp.Core.Common.Keyboard.HotstringDefinition;
using static Keysharp.Core.Dialogs;
using static Keysharp.Core.Dir;
using static Keysharp.Core.Drive;
using static Keysharp.Core.DllHelper;
using static Keysharp.Core.Env;
using static Keysharp.Core.File;
using static Keysharp.Core.Flow;
using static Keysharp.Core.Function;
using static Keysharp.Core.GuiHelper;
using static Keysharp.Core.Images;
using static Keysharp.Core.ImageLists;
using static Keysharp.Core.Ini;
using static Keysharp.Core.Keyboard;
using static Keysharp.Core.KeysharpObject;
using static Keysharp.Core.Loops;
using static Keysharp.Core.Maths;
using static Keysharp.Core.Menu;
using static Keysharp.Core.Misc;
using static Keysharp.Core.Monitor;
using static Keysharp.Core.Mouse;
using static Keysharp.Core.Network;
using static Keysharp.Core.Options;
using static Keysharp.Core.Processes;
using static Keysharp.Core.Registrys;
using static Keysharp.Core.Screen;
using static Keysharp.Core.Security;
using static Keysharp.Core.SimpleJson;
using static Keysharp.Core.Sound;
using static Keysharp.Core.Strings;
using static Keysharp.Core.ToolTips;
using static Keysharp.Core.Window;
using static Keysharp.Core.Windows.WindowsAPI;
using static Keysharp.Scripting.Script;
using static Keysharp.Scripting.Script.Operator;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.CLSCompliantAttribute(true)]
[assembly: Keysharp.Scripting.AssemblyBuildVersionAttribute("0.0.0.1")]

namespace Keysharp.CompiledMain
{
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Data;
	using System.IO;
	using System.Reflection;
	using System.Runtime.InteropServices;
	using System.Text;
	using System.Windows.Forms;
	using Keysharp.Core;
	using Keysharp.Scripting;
	using Array = Keysharp.Core.Array;
	using Buffer = Keysharp.Core.Buffer;


	public sealed class Program
	{
		[System.STAThreadAttribute()]
		public static int Main(string[] args)
		{
			try
			{
				string name = @"*";
				Keysharp.Scripting.Script.Variables.InitGlobalVars();
				Keysharp.Scripting.Script.SetName(name);
				HandleSingleInstance(name, eScriptInstance.Off);
				HandleCommandLineParams(args);
				SetProcessDPIAware();
				CreateTrayMenu();
				RunMainWindow(name, UserMainCode);
				_ = ExitApp(0);
				return 0;
			}
			catch (Keysharp.Core.Error kserr)
			{
				if (ErrorOccurred(kserr))
				{
					_ = MsgBox("Uncaught Keysharp exception:\r\n" + kserr);
				}

				_ = ExitApp(1);
				return 1;
			}
			catch (System.Exception mainex)
			{
				var ex = mainex.InnerException ?? mainex;

				if (ex is Keysharp.Core.Error kserr)
				{
					if (ErrorOccurred(kserr))
					{
						_ = MsgBox("Uncaught Keysharp exception:\r\n" + kserr);
					}
				}
				else
				{
					_ = MsgBox("Uncaught exception:\r\n" + "Message: " + ex.Message + "\r\nStack: " + ex.StackTrace);
				}

				;

				_ = ExitApp(1);

				return 1;
			}
		}

		public static void UserMainCode()
		{
			_ = Run("Notepad.exe");
			_ = WinWaitActive("ahk_exe notepad.exe");
			mygui = Gui(null, "Send tests");
			myedit = Invoke(GetMethodOrProperty(mygui, "Add"), "Edit", "w400 h400");
			mybtn1 = Invoke(GetMethodOrProperty(mygui, "Add"), "Button", "x10", "Notepad");
			mybtn2 = Invoke(GetMethodOrProperty(mygui, "Add"), "Button", "x95 yp", "This Edit");
			_ = Invoke(GetMethodOrProperty(mybtn1, "OnEvent"), "Click", "SendSimple");
			_ = Invoke(GetMethodOrProperty(mybtn2, "OnEvent"), "Click", "SendToGui");
			_ = Invoke(GetMethodOrProperty(mygui, "Show"));
		}

		public static object mybtn1;

		public static object mybtn2;

		public static object myedit;

		public static object mygui;

		public static object SendSimple()
		{
			WinActivate("ahk_exe Notepad.exe");
			//SendInput("Sincerely,{enter}John Smith");
			//Send("\n");
			//Send("Another line.\n");
			//Send("{Raw}`100%\n");
			//Send("{Blind}{Text}You should see \'{Blind}{Text}\' after the ellipses ... {Blind}{Text}\n" +
			//   "");
			//Send("{Blind}You should not see anything after the ellipses ... \'{Blind}\'\n");
			//Send("{Text}You should see the Blind mode syntax after the ellipses ... \'{Blind}\'");
			//Send("{S 30}");
			Send("{Up down}");
			Sleep(1000);
			Send("{Up up}");
			return string.Empty;
		}

		public static object SendToGui()
		{
			WinActivate(mygui);
			ControlFocus(myedit);
			//SendInput("Sincerely,{enter}John Smith");
			//Send("\n");
			//Send("Another line.\n");
			//Send("{Raw}`100%\n");
			//Send("{Blind}{Text}You should see \'{Blind}{Text}\' after the ellipses ... {Blind}{Text}\n" +
			//   "");
			//Send("{Blind}You should not see anything after the ellipses ... \'{Blind}\'\n");
			//Send("{Text}You should see the Blind mode syntax after the ellipses ... \'{Blind}\'");
			//Send("+{Blind s 30}");
			//Send("{Blind}+{s 30}");
			Send("{Up down}");
			Sleep(1000);
			Send("{Up up}");
			return string.Empty;
		}
	}
}
