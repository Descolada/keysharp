//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/minip/source/repos/Keysharp_clone/Keysharp.Core/Scripting/Parser/Antlr/MainParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MainParser : MainParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DerefStart=1, DerefEnd=2, SingleLineBlockComment=3, HotstringTrigger=4, 
		RemapKey=5, HotkeyTrigger=6, OpenBracket=7, CloseBracket=8, OpenParen=9, 
		CloseParen=10, OpenBrace=11, CloseBrace=12, Comma=13, Assign=14, QuestionMark=15, 
		QuestionMarkDot=16, Colon=17, DoubleColon=18, Ellipsis=19, Dot=20, ConcatDot=21, 
		PlusPlus=22, MinusMinus=23, Plus=24, Minus=25, BitNot=26, Not=27, Multiply=28, 
		Divide=29, IntegerDivide=30, Modulus=31, Power=32, NullCoalesce=33, Hashtag=34, 
		RightShiftArithmetic=35, LeftShiftArithmetic=36, RightShiftLogical=37, 
		LessThan=38, MoreThan=39, LessThanEquals=40, GreaterThanEquals=41, Equals_=42, 
		NotEquals=43, IdentityEquals=44, IdentityNotEquals=45, RegExMatch=46, 
		BitAnd=47, BitXOr=48, BitOr=49, And=50, Or=51, MultiplyAssign=52, DivideAssign=53, 
		ModulusAssign=54, PlusAssign=55, MinusAssign=56, LeftShiftArithmeticAssign=57, 
		RightShiftArithmeticAssign=58, RightShiftLogicalAssign=59, IntegerDivideAssign=60, 
		ConcatenateAssign=61, BitAndAssign=62, BitXorAssign=63, BitOrAssign=64, 
		PowerAssign=65, NullishCoalescingAssign=66, Arrow=67, NullLiteral=68, 
		Unset=69, True=70, False=71, DecimalLiteral=72, HexIntegerLiteral=73, 
		OctalIntegerLiteral=74, OctalIntegerLiteral2=75, BinaryIntegerLiteral=76, 
		BigHexIntegerLiteral=77, BigOctalIntegerLiteral=78, BigBinaryIntegerLiteral=79, 
		BigDecimalIntegerLiteral=80, Break=81, Do=82, Instanceof=83, Switch=84, 
		Case=85, Default=86, Else=87, Catch=88, Finally=89, Return=90, Continue=91, 
		For=92, While=93, LoopParse=94, LoopReg=95, LoopRead=96, LoopFiles=97, 
		Loop=98, Until=99, This=100, If=101, Throw=102, Delete=103, In=104, Try=105, 
		Yield=106, Is=107, Contains=108, VerbalAnd=109, VerbalNot=110, VerbalOr=111, 
		Goto=112, Get=113, Set=114, Class=115, Enum=116, Extends=117, Super=118, 
		Base=119, Export=120, Import=121, From=122, As=123, Async=124, Await=125, 
		Static=126, Global=127, Local=128, HotIf=129, InputLevel=130, SuspendExempt=131, 
		UseHook=132, HotstringOptions=133, Identifier=134, StringLiteral=135, 
		EOL=136, WS=137, UnexpectedCharacter=138, HotstringWhitespaces=139, HotstringMultiLineExpansion=140, 
		HotstringSingleLineExpansion=141, HotstringUnexpectedCharacter=142, DirectiveWhitespaces=143, 
		DirectiveContent=144, DirectiveUnexpectedCharacter=145, PreprocessorDirectiveWS=146, 
		Digits=147, Define=148, Undef=149, ElIf=150, EndIf=151, Line=152, Error=153, 
		Warning=154, Region=155, EndRegion=156, Pragma=157, Nullable=158, Include=159, 
		IncludeAgain=160, DllLoad=161, Requires=162, SingleInstance=163, Persistent=164, 
		Warn=165, NoDynamicVars=166, ErrorStdOut=167, ClipboardTimeout=168, HotIfTimeout=169, 
		MaxThreads=170, MaxThreadsBuffer=171, MaxThreadsPerHotkey=172, Assembly=173, 
		DirectiveHidden=174, ConditionalSymbol=175, DirectiveSingleLineComment=176, 
		DirectiveNewline=177, Text=178;
	public const int
		RULE_program = 0, RULE_sourceElements = 1, RULE_sourceElement = 2, RULE_positionalDirective = 3, 
		RULE_remap = 4, RULE_hotstring = 5, RULE_hotstringExpansion = 6, RULE_hotkey = 7, 
		RULE_statement = 8, RULE_block = 9, RULE_statementList = 10, RULE_variableStatement = 11, 
		RULE_awaitStatement = 12, RULE_deleteStatement = 13, RULE_importStatement = 14, 
		RULE_importFromBlock = 15, RULE_importModuleItems = 16, RULE_importAliasName = 17, 
		RULE_moduleExportName = 18, RULE_importedBinding = 19, RULE_importDefault = 20, 
		RULE_importNamespace = 21, RULE_importFrom = 22, RULE_aliasName = 23, 
		RULE_exportStatement = 24, RULE_exportFromBlock = 25, RULE_exportModuleItems = 26, 
		RULE_exportAliasName = 27, RULE_declaration = 28, RULE_variableDeclarationList = 29, 
		RULE_variableDeclaration = 30, RULE_functionStatement = 31, RULE_expressionStatement = 32, 
		RULE_ifStatement = 33, RULE_flowBlock = 34, RULE_untilProduction = 35, 
		RULE_elseProduction = 36, RULE_iterationStatement = 37, RULE_forInParameters = 38, 
		RULE_continueStatement = 39, RULE_breakStatement = 40, RULE_returnStatement = 41, 
		RULE_yieldStatement = 42, RULE_switchStatement = 43, RULE_caseBlock = 44, 
		RULE_caseClauses = 45, RULE_caseClause = 46, RULE_defaultClause = 47, 
		RULE_labelledStatement = 48, RULE_gotoStatement = 49, RULE_throwStatement = 50, 
		RULE_tryStatement = 51, RULE_catchProduction = 52, RULE_catchAssignable = 53, 
		RULE_catchClasses = 54, RULE_finallyProduction = 55, RULE_functionDeclaration = 56, 
		RULE_classDeclaration = 57, RULE_classExtensionName = 58, RULE_classTail = 59, 
		RULE_classElement = 60, RULE_methodDefinition = 61, RULE_propertyDefinition = 62, 
		RULE_classPropertyName = 63, RULE_propertyGetterDefinition = 64, RULE_propertySetterDefinition = 65, 
		RULE_fieldDefinition = 66, RULE_formalParameterList = 67, RULE_formalParameterArg = 68, 
		RULE_lastFormalParameterArg = 69, RULE_arrayLiteral = 70, RULE_mapLiteral = 71, 
		RULE_mapElementList = 72, RULE_mapElement = 73, RULE_propertyAssignment = 74, 
		RULE_propertyName = 75, RULE_dereference = 76, RULE_arguments = 77, RULE_argument = 78, 
		RULE_expressionSequence = 79, RULE_memberIndexArguments = 80, RULE_expression = 81, 
		RULE_singleExpression = 82, RULE_primaryExpression = 83, RULE_memberDot = 84, 
		RULE_memberIdentifier = 85, RULE_dynamicIdentifier = 86, RULE_initializer = 87, 
		RULE_assignable = 88, RULE_objectLiteral = 89, RULE_functionHead = 90, 
		RULE_functionHeadPrefix = 91, RULE_functionExpressionHead = 92, RULE_fatArrowExpressionHead = 93, 
		RULE_functionBody = 94, RULE_assignmentOperator = 95, RULE_literal = 96, 
		RULE_boolean = 97, RULE_numericLiteral = 98, RULE_bigintLiteral = 99, 
		RULE_getter = 100, RULE_setter = 101, RULE_identifierName = 102, RULE_identifier = 103, 
		RULE_reservedWord = 104, RULE_keyword = 105, RULE_s = 106, RULE_eos = 107;
	public static readonly string[] ruleNames = {
		"program", "sourceElements", "sourceElement", "positionalDirective", "remap", 
		"hotstring", "hotstringExpansion", "hotkey", "statement", "block", "statementList", 
		"variableStatement", "awaitStatement", "deleteStatement", "importStatement", 
		"importFromBlock", "importModuleItems", "importAliasName", "moduleExportName", 
		"importedBinding", "importDefault", "importNamespace", "importFrom", "aliasName", 
		"exportStatement", "exportFromBlock", "exportModuleItems", "exportAliasName", 
		"declaration", "variableDeclarationList", "variableDeclaration", "functionStatement", 
		"expressionStatement", "ifStatement", "flowBlock", "untilProduction", 
		"elseProduction", "iterationStatement", "forInParameters", "continueStatement", 
		"breakStatement", "returnStatement", "yieldStatement", "switchStatement", 
		"caseBlock", "caseClauses", "caseClause", "defaultClause", "labelledStatement", 
		"gotoStatement", "throwStatement", "tryStatement", "catchProduction", 
		"catchAssignable", "catchClasses", "finallyProduction", "functionDeclaration", 
		"classDeclaration", "classExtensionName", "classTail", "classElement", 
		"methodDefinition", "propertyDefinition", "classPropertyName", "propertyGetterDefinition", 
		"propertySetterDefinition", "fieldDefinition", "formalParameterList", 
		"formalParameterArg", "lastFormalParameterArg", "arrayLiteral", "mapLiteral", 
		"mapElementList", "mapElement", "propertyAssignment", "propertyName", 
		"dereference", "arguments", "argument", "expressionSequence", "memberIndexArguments", 
		"expression", "singleExpression", "primaryExpression", "memberDot", "memberIdentifier", 
		"dynamicIdentifier", "initializer", "assignable", "objectLiteral", "functionHead", 
		"functionHeadPrefix", "functionExpressionHead", "fatArrowExpressionHead", 
		"functionBody", "assignmentOperator", "literal", "boolean", "numericLiteral", 
		"bigintLiteral", "getter", "setter", "identifierName", "identifier", "reservedWord", 
		"keyword", "s", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'['", "']'", "'('", "')'", 
		"'{'", "'}'", "','", "':='", "'?'", "'?.'", "':'", "'::'", "'...'", "'.'", 
		null, "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", "'//'", 
		"'%'", "'**'", "'??'", null, "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", 
		"'>='", "'='", "'!='", "'=='", "'!=='", "'~='", "'&'", "'^'", "'|'", "'&&'", 
		"'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", 
		"'//='", "'.='", "'&='", "'^='", "'|='", "'**='", "'??='", "'=>'", "'null'", 
		"'unset'", "'true'", "'false'", null, null, null, null, null, null, null, 
		null, null, "'break'", "'do'", "'instanceof'", "'switch'", "'case'", "'default'", 
		"'else'", "'catch'", "'finally'", "'return'", "'continue'", "'for'", "'while'", 
		null, null, null, null, null, "'until'", "'this'", "'if'", "'throw'", 
		"'delete'", "'in'", "'try'", "'yield'", "'is'", "'contains'", "'and'", 
		"'not'", "'or'", "'goto'", "'get'", "'set'", "'class'", "'enum'", "'extends'", 
		"'super'", "'base'", "'export'", "'import'", "'from'", "'as'", "'async'", 
		"'await'", "'static'", "'global'", "'local'", "'#hotif'", "'#inputlevel'", 
		"'#suspendexempt'", "'#usehook'", null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "'define'", "'undef'", 
		"'elif'", "'endif'", "'line'", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'nodynamicvars'", "'errorstdout'", 
		null, null, null, null, null, null, "'hidden'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DerefStart", "DerefEnd", "SingleLineBlockComment", "HotstringTrigger", 
		"RemapKey", "HotkeyTrigger", "OpenBracket", "CloseBracket", "OpenParen", 
		"CloseParen", "OpenBrace", "CloseBrace", "Comma", "Assign", "QuestionMark", 
		"QuestionMarkDot", "Colon", "DoubleColon", "Ellipsis", "Dot", "ConcatDot", 
		"PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", 
		"Divide", "IntegerDivide", "Modulus", "Power", "NullCoalesce", "Hashtag", 
		"RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", "LessThan", 
		"MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_", "NotEquals", 
		"IdentityEquals", "IdentityNotEquals", "RegExMatch", "BitAnd", "BitXOr", 
		"BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
		"PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
		"RightShiftLogicalAssign", "IntegerDivideAssign", "ConcatenateAssign", 
		"BitAndAssign", "BitXorAssign", "BitOrAssign", "PowerAssign", "NullishCoalescingAssign", 
		"Arrow", "NullLiteral", "Unset", "True", "False", "DecimalLiteral", "HexIntegerLiteral", 
		"OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
		"BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", 
		"BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Switch", "Case", 
		"Default", "Else", "Catch", "Finally", "Return", "Continue", "For", "While", 
		"LoopParse", "LoopReg", "LoopRead", "LoopFiles", "Loop", "Until", "This", 
		"If", "Throw", "Delete", "In", "Try", "Yield", "Is", "Contains", "VerbalAnd", 
		"VerbalNot", "VerbalOr", "Goto", "Get", "Set", "Class", "Enum", "Extends", 
		"Super", "Base", "Export", "Import", "From", "As", "Async", "Await", "Static", 
		"Global", "Local", "HotIf", "InputLevel", "SuspendExempt", "UseHook", 
		"HotstringOptions", "Identifier", "StringLiteral", "EOL", "WS", "UnexpectedCharacter", 
		"HotstringWhitespaces", "HotstringMultiLineExpansion", "HotstringSingleLineExpansion", 
		"HotstringUnexpectedCharacter", "DirectiveWhitespaces", "DirectiveContent", 
		"DirectiveUnexpectedCharacter", "PreprocessorDirectiveWS", "Digits", "Define", 
		"Undef", "ElIf", "EndIf", "Line", "Error", "Warning", "Region", "EndRegion", 
		"Pragma", "Nullable", "Include", "IncludeAgain", "DllLoad", "Requires", 
		"SingleInstance", "Persistent", "Warn", "NoDynamicVars", "ErrorStdOut", 
		"ClipboardTimeout", "HotIfTimeout", "MaxThreads", "MaxThreadsBuffer", 
		"MaxThreadsPerHotkey", "Assembly", "DirectiveHidden", "ConditionalSymbol", 
		"DirectiveSingleLineComment", "DirectiveNewline", "Text"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MainParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MainParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MainParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MainParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MainParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216;
				sourceElements();
				State = 217;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 222;
					sourceElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 225;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionalDirectiveContext positionalDirective() {
			return GetRuleContext<PositionalDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemapContext remap() {
			return GetRuleContext<RemapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotstringContext hotstring() {
			return GetRuleContext<HotstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotkeyContext hotkey() {
			return GetRuleContext<HotkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(MainParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sourceElement);
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227;
				classDeclaration();
				State = 228;
				eos();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230;
				positionalDirective();
				State = 231;
				eos();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 233;
				remap();
				State = 234;
				eos();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 236;
				hotstring();
				State = 237;
				eos();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 239;
				hotkey();
				State = 240;
				eos();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 242;
				statement();
				State = 243;
				eos();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 245;
				Match(WS);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 246;
				Match(EOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionalDirectiveContext : ParserRuleContext {
		public PositionalDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionalDirective; } }
	 
		public PositionalDirectiveContext() { }
		public virtual void CopyFrom(PositionalDirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HotstringDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringOptions() { return GetToken(MainParser.HotstringOptions, 0); }
		public HotstringDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstringDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InputLevelDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InputLevel() { return GetToken(MainParser.InputLevel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public InputLevelDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputLevelDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuspendExemptDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SuspendExempt() { return GetToken(MainParser.SuspendExempt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public SuspendExemptDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuspendExemptDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UseHookDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UseHook() { return GetToken(MainParser.UseHook, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public UseHookDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseHookDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HotIfDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotIf() { return GetToken(MainParser.HotIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public HotIfDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotIfDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionalDirectiveContext positionalDirective() {
		PositionalDirectiveContext _localctx = new PositionalDirectiveContext(Context, State);
		EnterRule(_localctx, 6, RULE_positionalDirective);
		int _la;
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HotIf:
				_localctx = new HotIfDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				Match(HotIf);
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140737752599170L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207060991L) != 0) || _la==Identifier || _la==StringLiteral) {
					{
					State = 250;
					singleExpression(0);
					}
				}

				}
				break;
			case HotstringOptions:
				_localctx = new HotstringDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 253;
				Match(HotstringOptions);
				}
				break;
			case InputLevel:
				_localctx = new InputLevelDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 254;
				Match(InputLevel);
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 31L) != 0)) {
					{
					State = 255;
					numericLiteral();
					}
				}

				}
				break;
			case UseHook:
				_localctx = new UseHookDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 258;
				Match(UseHook);
				State = 261;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
					{
					State = 259;
					numericLiteral();
					}
					break;
				case True:
				case False:
					{
					State = 260;
					boolean();
					}
					break;
				case Eof:
				case EOL:
					break;
				default:
					break;
				}
				}
				break;
			case SuspendExempt:
				_localctx = new SuspendExemptDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 263;
				Match(SuspendExempt);
				State = 266;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
					{
					State = 264;
					numericLiteral();
					}
					break;
				case True:
				case False:
					{
					State = 265;
					boolean();
					}
					break;
				case Eof:
				case EOL:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RemapKey() { return GetToken(MainParser.RemapKey, 0); }
		public RemapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remap; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemapContext remap() {
		RemapContext _localctx = new RemapContext(Context, State);
		EnterRule(_localctx, 8, RULE_remap);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(RemapKey);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotstringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HotstringTrigger() { return GetTokens(MainParser.HotstringTrigger); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringTrigger(int i) {
			return GetToken(MainParser.HotstringTrigger, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotstringExpansionContext hotstringExpansion() {
			return GetRuleContext<HotstringExpansionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public HotstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotstring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotstringContext hotstring() {
		HotstringContext _localctx = new HotstringContext(Context, State);
		EnterRule(_localctx, 10, RULE_hotstring);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			Match(HotstringTrigger);
			State = 277;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 273;
					Match(EOL);
					State = 274;
					Match(HotstringTrigger);
					}
					} 
				}
				State = 279;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 283;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 280;
					Match(WS);
					}
					} 
				}
				State = 285;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 286;
				hotstringExpansion();
				}
				break;
			case 2:
				{
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EOL) {
					{
					State = 287;
					Match(EOL);
					}
				}

				State = 290;
				functionDeclaration();
				}
				break;
			case 3:
				{
				State = 292;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 291;
					Match(EOL);
					}
					break;
				}
				State = 294;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotstringExpansionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringSingleLineExpansion() { return GetToken(MainParser.HotstringSingleLineExpansion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringMultiLineExpansion() { return GetToken(MainParser.HotstringMultiLineExpansion, 0); }
		public HotstringExpansionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotstringExpansion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstringExpansion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotstringExpansionContext hotstringExpansion() {
		HotstringExpansionContext _localctx = new HotstringExpansionContext(Context, State);
		EnterRule(_localctx, 12, RULE_hotstringExpansion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			_la = TokenStream.LA(1);
			if ( !(_la==HotstringMultiLineExpansion || _la==HotstringSingleLineExpansion) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotkeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HotkeyTrigger() { return GetTokens(MainParser.HotkeyTrigger); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotkeyTrigger(int i) {
			return GetToken(MainParser.HotkeyTrigger, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public HotkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotkey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotkey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotkeyContext hotkey() {
		HotkeyContext _localctx = new HotkeyContext(Context, State);
		EnterRule(_localctx, 14, RULE_hotkey);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(HotkeyTrigger);
			State = 304;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 300;
					Match(EOL);
					State = 301;
					Match(HotkeyTrigger);
					}
					} 
				}
				State = 306;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 310;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 307;
					s();
					}
					} 
				}
				State = 312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 313;
				functionDeclaration();
				}
				break;
			case 2:
				{
				State = 314;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelledStatementContext labelledStatement() {
			return GetRuleContext<LabelledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStatementContext functionStatement() {
			return GetRuleContext<FunctionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AwaitStatementContext awaitStatement() {
			return GetRuleContext<AwaitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		int _la;
		try {
			State = 343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 317;
				variableStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 318;
				ifStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 319;
					labelledStatement();
					State = 323;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==EOL || _la==WS) {
						{
						{
						State = 320;
						s();
						}
						}
						State = 325;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 328;
				iterationStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 329;
				expressionStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 330;
				functionStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 331;
				continueStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 332;
				breakStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 333;
				returnStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 334;
				yieldStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 335;
				labelledStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 336;
				gotoStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 337;
				switchStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 338;
				throwStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 339;
				tryStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 340;
				awaitStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 341;
				deleteStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 342;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(OpenBrace);
			State = 349;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 346;
					s();
					}
					} 
				}
				State = 351;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 352;
				statementList();
				}
				break;
			}
			State = 355;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 20, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 357;
					statement();
					State = 358;
					Match(EOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 362;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(MainParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(MainParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public VariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStatementContext variableStatement() {
		VariableStatementContext _localctx = new VariableStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_variableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 365;
					Match(WS);
					}
					}
					State = 370;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 371;
				variableDeclarationList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwaitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public AwaitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awaitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwaitStatementContext awaitStatement() {
		AwaitStatementContext _localctx = new AwaitStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_awaitStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(Await);
			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 375;
				Match(WS);
				}
				}
				State = 380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 381;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(MainParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_deleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			Match(Delete);
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 384;
				Match(WS);
				}
				}
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 390;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(MainParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromBlockContext importFromBlock() {
			return GetRuleContext<ImportFromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_importStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(Import);
			State = 396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 393;
				Match(WS);
				}
				}
				State = 398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 399;
			importFromBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportModuleItemsContext importModuleItems() {
			return GetRuleContext<ImportModuleItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDefaultContext importDefault() {
			return GetRuleContext<ImportDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ImportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromBlockContext importFromBlock() {
		ImportFromBlockContext _localctx = new ImportFromBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_importFromBlock);
		try {
			State = 411;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
			case Multiply:
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 402;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 401;
					importDefault();
					}
					break;
				}
				State = 406;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Multiply:
				case NullLiteral:
				case Unset:
				case True:
				case False:
				case Break:
				case Do:
				case Instanceof:
				case Switch:
				case Case:
				case Default:
				case Else:
				case Catch:
				case Finally:
				case Return:
				case Continue:
				case For:
				case While:
				case Loop:
				case Until:
				case This:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case Yield:
				case Is:
				case Contains:
				case VerbalAnd:
				case VerbalNot:
				case VerbalOr:
				case Goto:
				case Get:
				case Set:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Base:
				case Export:
				case Import:
				case From:
				case As:
				case Async:
				case Await:
				case Static:
				case Global:
				case Local:
				case Identifier:
					{
					State = 404;
					importNamespace();
					}
					break;
				case OpenBrace:
					{
					State = 405;
					importModuleItems();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 408;
				importFrom();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 410;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasNameContext[] importAliasName() {
			return GetRuleContexts<ImportAliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasNameContext importAliasName(int i) {
			return GetRuleContext<ImportAliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ImportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importModuleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportModuleItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportModuleItemsContext importModuleItems() {
		ImportModuleItemsContext _localctx = new ImportModuleItemsContext(Context, State);
		EnterRule(_localctx, 32, RULE_importModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(OpenBrace);
			State = 425;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 414;
					importAliasName();
					State = 418;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 415;
						Match(WS);
						}
						}
						State = 420;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 421;
					Match(Comma);
					}
					} 
				}
				State = 427;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207052815L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 428;
				importAliasName();
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma || _la==WS) {
					{
					State = 432;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 429;
						Match(WS);
						}
						}
						State = 434;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 435;
					Match(Comma);
					}
				}

				}
			}

			State = 440;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext moduleExportName() {
			return GetRuleContext<ModuleExportNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportedBindingContext importedBinding() {
			return GetRuleContext<ImportedBindingContext>(0);
		}
		public ImportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasNameContext importAliasName() {
		ImportAliasNameContext _localctx = new ImportAliasNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_importAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			moduleExportName();
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 443;
				Match(As);
				State = 444;
				importedBinding();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleExportNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ModuleExportNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleExportName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleExportName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleExportNameContext moduleExportName() {
		ModuleExportNameContext _localctx = new ModuleExportNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_moduleExportName);
		try {
			State = 449;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447;
				identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 448;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportedBindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		public ImportedBindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importedBinding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportedBinding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportedBindingContext importedBinding() {
		ImportedBindingContext _localctx = new ImportedBindingContext(Context, State);
		EnterRule(_localctx, 38, RULE_importedBinding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 268959745L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext aliasName() {
			return GetRuleContext<AliasNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ImportDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefaultContext importDefault() {
		ImportDefaultContext _localctx = new ImportDefaultContext(Context, State);
		EnterRule(_localctx, 40, RULE_importDefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			aliasName();
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 454;
				Match(WS);
				}
				}
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 460;
			Match(Comma);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public ImportNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportNamespaceContext importNamespace() {
		ImportNamespaceContext _localctx = new ImportNamespaceContext(Context, State);
		EnterRule(_localctx, 42, RULE_importNamespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
				{
				State = 462;
				Match(Multiply);
				}
				break;
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				{
				State = 463;
				identifierName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 466;
				Match(As);
				State = 467;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(MainParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ImportFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromContext importFrom() {
		ImportFromContext _localctx = new ImportFromContext(Context, State);
		EnterRule(_localctx, 44, RULE_importFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			Match(From);
			State = 471;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public AliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasNameContext aliasName() {
		AliasNameContext _localctx = new AliasNameContext(Context, State);
		EnterRule(_localctx, 46, RULE_aliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			identifierName();
			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 474;
				Match(As);
				State = 475;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
	 
		public ExportStatementContext() { }
		public virtual void CopyFrom(ExportStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExportDefaultDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ExportDefaultDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDefaultDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExportDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExportFromBlockContext exportFromBlock() {
			return GetRuleContext<ExportFromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		public ExportDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_exportStatement);
		try {
			State = 489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				_localctx = new ExportDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 478;
				Match(Export);
				State = 480;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 479;
					Match(Default);
					}
					break;
				}
				State = 484;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 482;
					exportFromBlock();
					}
					break;
				case 2:
					{
					State = 483;
					declaration();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ExportDefaultDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 486;
				Match(Export);
				State = 487;
				Match(Default);
				State = 488;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportModuleItemsContext exportModuleItems() {
			return GetRuleContext<ExportModuleItemsContext>(0);
		}
		public ExportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportFromBlockContext exportFromBlock() {
		ExportFromBlockContext _localctx = new ExportFromBlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_exportFromBlock);
		int _la;
		try {
			State = 498;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 491;
				importNamespace();
				State = 492;
				importFrom();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 494;
				exportModuleItems();
				State = 496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==From) {
					{
					State = 495;
					importFrom();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExportAliasNameContext[] exportAliasName() {
			return GetRuleContexts<ExportAliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportAliasNameContext exportAliasName(int i) {
			return GetRuleContext<ExportAliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ExportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportModuleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportModuleItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportModuleItemsContext exportModuleItems() {
		ExportModuleItemsContext _localctx = new ExportModuleItemsContext(Context, State);
		EnterRule(_localctx, 52, RULE_exportModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			Match(OpenBrace);
			State = 512;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 501;
					exportAliasName();
					State = 505;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 502;
						Match(WS);
						}
						}
						State = 507;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 508;
					Match(Comma);
					}
					} 
				}
				State = 514;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			State = 525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207052815L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 515;
				exportAliasName();
				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma || _la==WS) {
					{
					State = 519;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 516;
						Match(WS);
						}
						}
						State = 521;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 522;
					Match(Comma);
					}
				}

				}
			}

			State = 527;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportAliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext[] moduleExportName() {
			return GetRuleContexts<ModuleExportNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext moduleExportName(int i) {
			return GetRuleContext<ModuleExportNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public ExportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportAliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportAliasNameContext exportAliasName() {
		ExportAliasNameContext _localctx = new ExportAliasNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_exportAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			moduleExportName();
			State = 532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 530;
				Match(As);
				State = 531;
				moduleExportName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_declaration);
		try {
			State = 536;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 534;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 535;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 58, RULE_variableDeclarationList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			variableDeclaration();
			State = 549;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 542;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 539;
						Match(WS);
						}
						}
						State = 544;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 545;
					Match(Comma);
					State = 546;
					variableDeclaration();
					}
					} 
				}
				State = 551;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 60, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			assignable();
			State = 557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 553;
				assignmentOperator();
				State = 554;
				expression(0);
				}
				break;
			case 2:
				{
				State = 556;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PlusPlus || _la==MinusMinus) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public FunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStatementContext functionStatement() {
		FunctionStatementContext _localctx = new FunctionStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_functionStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			primaryExpression(0);
			State = 566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 561;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 560;
						Match(WS);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 563;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 565;
				arguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			if (!(InputStream.LA(1) != MainLexer.OpenBrace && !this.isFunctionCallStatement())) throw new FailedPredicateException(this, "InputStream.LA(1) != MainLexer.OpenBrace && !this.isFunctionCallStatement()");
			State = 569;
			expressionSequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MainParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			Match(If);
			State = 575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 572;
				Match(WS);
				}
				}
				State = 577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 578;
			singleExpression(0);
			State = 582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 579;
				Match(WS);
				}
				}
				State = 584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 585;
			flowBlock();
			State = 586;
			elseProduction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlowBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FlowBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flowBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlowBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlowBlockContext flowBlock() {
		FlowBlockContext _localctx = new FlowBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_flowBlock);
		try {
			int _alt;
			State = 595;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 589;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 588;
						Match(EOL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 591;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 593;
				statement();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 594;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public UntilProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilProductionContext untilProduction() {
		UntilProductionContext _localctx = new UntilProductionContext(Context, State);
		EnterRule(_localctx, 70, RULE_untilProduction);
		int _la;
		try {
			State = 607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 597;
				Match(EOL);
				State = 598;
				Match(Until);
				State = 602;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 599;
					s();
					}
					}
					State = 604;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 605;
				singleExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 606;
				if (!(!this.second(Until))) throw new FailedPredicateException(this, "!this.second(Until)");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public ElseProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseProductionContext elseProduction() {
		ElseProductionContext _localctx = new ElseProductionContext(Context, State);
		EnterRule(_localctx, 72, RULE_elseProduction);
		try {
			int _alt;
			State = 619;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 609;
				Match(EOL);
				State = 610;
				Match(Else);
				State = 614;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 611;
						s();
						}
						} 
					}
					State = 616;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				}
				State = 617;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 618;
				if (!(!this.second(Else))) throw new FailedPredicateException(this, "!this.second(Else)");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopReadStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopRead() { return GetToken(MainParser.LoopRead, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		public LoopReadStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopParseStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopParse() { return GetToken(MainParser.LoopParse, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public LoopParseStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopParseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopFilesStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopFiles() { return GetToken(MainParser.LoopFiles, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		public LoopFilesStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopFilesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopRegStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopReg() { return GetToken(MainParser.LoopReg, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		public LoopRegStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopRegStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public LoopStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MainParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MainParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForInParametersContext forInParameters() {
			return GetRuleContext<ForInParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_iterationStatement);
		int _la;
		try {
			int _alt;
			State = 795;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Loop:
				_localctx = new LoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 621;
				Match(Loop);
				State = 625;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 622;
						Match(WS);
						}
						} 
					}
					State = 627;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				}
				State = 636;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 628;
					if (!(!this.isEmptyObject())) throw new FailedPredicateException(this, "!this.isEmptyObject()");
					State = 629;
					singleExpression(0);
					State = 633;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 630;
						Match(WS);
						}
						}
						State = 635;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 638;
				flowBlock();
				State = 639;
				untilProduction();
				State = 640;
				elseProduction();
				}
				break;
			case LoopFiles:
				_localctx = new LoopFilesStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 642;
				Match(LoopFiles);
				State = 646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 643;
					Match(WS);
					}
					}
					State = 648;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 649;
				singleExpression(0);
				State = 658;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 653;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 650;
						Match(WS);
						}
						}
						State = 655;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 656;
					Match(Comma);
					State = 657;
					singleExpression(0);
					}
					break;
				}
				State = 663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 660;
					Match(WS);
					}
					}
					State = 665;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 666;
				flowBlock();
				State = 667;
				untilProduction();
				State = 668;
				elseProduction();
				}
				break;
			case LoopRead:
				_localctx = new LoopReadStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 670;
				Match(LoopRead);
				State = 674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 671;
					Match(WS);
					}
					}
					State = 676;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 677;
				singleExpression(0);
				State = 686;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 681;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 678;
						Match(WS);
						}
						}
						State = 683;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 684;
					Match(Comma);
					State = 685;
					singleExpression(0);
					}
					break;
				}
				State = 691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 688;
					Match(WS);
					}
					}
					State = 693;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 694;
				flowBlock();
				State = 695;
				untilProduction();
				State = 696;
				elseProduction();
				}
				break;
			case LoopReg:
				_localctx = new LoopRegStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 698;
				Match(LoopReg);
				State = 702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 699;
					Match(WS);
					}
					}
					State = 704;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 705;
				singleExpression(0);
				State = 714;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 709;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 706;
						Match(WS);
						}
						}
						State = 711;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 712;
					Match(Comma);
					State = 713;
					singleExpression(0);
					}
					break;
				}
				State = 719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 716;
					Match(WS);
					}
					}
					State = 721;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 722;
				flowBlock();
				State = 723;
				untilProduction();
				State = 724;
				elseProduction();
				}
				break;
			case LoopParse:
				_localctx = new LoopParseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 726;
				Match(LoopParse);
				State = 730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 727;
					Match(WS);
					}
					}
					State = 732;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 733;
				singleExpression(0);
				State = 746;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 737;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 734;
							Match(WS);
							}
							}
							State = 739;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 740;
						Match(Comma);
						State = 742;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
						case 1:
							{
							State = 741;
							singleExpression(0);
							}
							break;
						}
						}
						} 
					}
					State = 748;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
				}
				State = 752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 749;
					Match(WS);
					}
					}
					State = 754;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 755;
				flowBlock();
				State = 756;
				untilProduction();
				State = 757;
				elseProduction();
				}
				break;
			case While:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 759;
				Match(While);
				State = 763;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 760;
					Match(WS);
					}
					}
					State = 765;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 766;
				singleExpression(0);
				State = 770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 767;
					Match(WS);
					}
					}
					State = 772;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 773;
				flowBlock();
				State = 774;
				untilProduction();
				State = 775;
				elseProduction();
				}
				break;
			case For:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 777;
				Match(For);
				State = 781;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 778;
						Match(WS);
						}
						} 
					}
					State = 783;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
				}
				State = 784;
				forInParameters();
				State = 788;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 785;
					Match(WS);
					}
					}
					State = 790;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 791;
				flowBlock();
				State = 792;
				untilProduction();
				State = 793;
				elseProduction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext[] assignable() {
			return GetRuleContexts<AssignableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable(int i) {
			return GetRuleContext<AssignableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ForInParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInParametersContext forInParameters() {
		ForInParametersContext _localctx = new ForInParametersContext(Context, State);
		EnterRule(_localctx, 76, RULE_forInParameters);
		int _la;
		try {
			int _alt;
			State = 864;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Comma:
			case Default:
			case This:
			case In:
			case Get:
			case Set:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case From:
			case As:
			case Identifier:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) {
					{
					State = 797;
					assignable();
					}
				}

				State = 812;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 803;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 800;
							Match(WS);
							}
							}
							State = 805;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 806;
						Match(Comma);
						State = 808;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) {
							{
							State = 807;
							assignable();
							}
						}

						}
						} 
					}
					State = 814;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
				}
				State = 818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 815;
					Match(WS);
					}
					}
					State = 820;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 821;
				Match(In);
				State = 825;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 822;
					Match(WS);
					}
					}
					State = 827;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 828;
				singleExpression(0);
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 829;
				Match(OpenParen);
				State = 831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) {
					{
					State = 830;
					assignable();
					}
				}

				State = 845;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 836;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 833;
							Match(WS);
							}
							}
							State = 838;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 839;
						Match(Comma);
						State = 841;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) {
							{
							State = 840;
							assignable();
							}
						}

						}
						} 
					}
					State = 847;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
				}
				State = 851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 848;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 853;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 854;
				Match(In);
				State = 858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 855;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 860;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 861;
				singleExpression(0);
				State = 862;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(MainParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_continueStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 866;
			Match(Continue);
			State = 870;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 867;
					Match(WS);
					}
					} 
				}
				State = 872;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			}
			State = 878;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 873;
				propertyName();
				}
				break;
			case 2:
				{
				State = 874;
				Match(OpenParen);
				State = 875;
				propertyName();
				State = 876;
				Match(CloseParen);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MainParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_breakStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 880;
			Match(Break);
			State = 884;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 881;
					Match(WS);
					}
					} 
				}
				State = 886;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			}
			State = 892;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				{
				State = 887;
				Match(OpenParen);
				State = 888;
				propertyName();
				State = 889;
				Match(CloseParen);
				}
				break;
			case 2:
				{
				State = 891;
				propertyName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MainParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_returnStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 894;
			Match(Return);
			State = 898;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 895;
					Match(WS);
					}
					} 
				}
				State = 900;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			}
			State = 902;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				{
				State = 901;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_yieldStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			Match(Yield);
			State = 908;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 905;
					Match(WS);
					}
					} 
				}
				State = 910;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			}
			State = 912;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 911;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(MainParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_switchStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 914;
			Match(Switch);
			State = 918;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 915;
					Match(WS);
					}
					} 
				}
				State = 920;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			}
			State = 922;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				{
				State = 921;
				singleExpression(0);
				}
				break;
			}
			State = 932;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 927;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 924;
					Match(WS);
					}
					}
					State = 929;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 930;
				Match(Comma);
				State = 931;
				literal();
				}
				break;
			}
			State = 937;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 934;
				s();
				}
				}
				State = 939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 940;
			caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext[] caseClauses() {
			return GetRuleContexts<CaseClausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext caseClauses(int i) {
			return GetRuleContext<CaseClausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 88, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 942;
			Match(OpenBrace);
			State = 946;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 943;
				s();
				}
				}
				State = 948;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Case) {
				{
				State = 949;
				caseClauses();
				}
			}

			State = 956;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Default) {
				{
				State = 952;
				defaultClause();
				State = 954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Case) {
					{
					State = 953;
					caseClauses();
					}
				}

				}
			}

			State = 958;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 90, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 960;
				caseClause();
				}
				}
				State = 963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(MainParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 92, RULE_caseClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 965;
			Match(Case);
			State = 969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 966;
				Match(WS);
				}
				}
				State = 971;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 972;
			expressionSequence();
			State = 976;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 973;
				Match(WS);
				}
				}
				State = 978;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 979;
			Match(Colon);
			State = 988;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				{
				State = 983;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,124,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 980;
						s();
						}
						} 
					}
					State = 985;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,124,Context);
				}
				State = 986;
				statementList();
				}
				break;
			case 2:
				{
				State = 987;
				Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 94, RULE_defaultClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 990;
			Match(Default);
			State = 994;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 991;
				Match(WS);
				}
				}
				State = 996;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 997;
			Match(Colon);
			State = 1006;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				{
				State = 1001;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 998;
						s();
						}
						} 
					}
					State = 1003;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
				}
				State = 1004;
				statementList();
				}
				break;
			case 2:
				{
				State = 1005;
				Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		public LabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelledStatementContext labelledStatement() {
		LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_labelledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008;
			Match(Identifier);
			State = 1009;
			Match(Colon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(MainParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_gotoStatement);
		int _la;
		try {
			State = 1030;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1011;
				Match(Goto);
				State = 1015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1012;
					Match(WS);
					}
					}
					State = 1017;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1018;
				propertyName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1019;
				Match(Goto);
				State = 1023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1020;
					Match(WS);
					}
					}
					State = 1025;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1026;
				Match(OpenParen);
				State = 1027;
				propertyName();
				State = 1028;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(MainParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_throwStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032;
			Match(Throw);
			State = 1036;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,132,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1033;
					Match(WS);
					}
					} 
				}
				State = 1038;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,132,Context);
			}
			State = 1040;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				{
				State = 1039;
				singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(MainParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext[] catchProduction() {
			return GetRuleContexts<CatchProductionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext catchProduction(int i) {
			return GetRuleContext<CatchProductionContext>(i);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_tryStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1042;
			Match(Try);
			State = 1046;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1043;
					s();
					}
					} 
				}
				State = 1048;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
			}
			State = 1049;
			statement();
			State = 1053;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1050;
					catchProduction();
					}
					} 
				}
				State = 1055;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			}
			State = 1056;
			elseProduction();
			State = 1057;
			finallyProduction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(MainParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchAssignableContext catchAssignable() {
			return GetRuleContext<CatchAssignableContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 104, RULE_catchProduction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059;
			Match(EOL);
			State = 1060;
			Match(Catch);
			State = 1064;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1061;
					Match(WS);
					}
					} 
				}
				State = 1066;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			}
			State = 1074;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenParen || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 2533497457623041L) != 0)) {
				{
				State = 1067;
				catchAssignable();
				State = 1071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1068;
					Match(WS);
					}
					}
					State = 1073;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1076;
			flowBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchAssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CatchClassesContext catchClasses() {
			return GetRuleContext<CatchClassesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public CatchAssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchAssignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchAssignable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchAssignableContext catchAssignable() {
		CatchAssignableContext _localctx = new CatchAssignableContext(Context, State);
		EnterRule(_localctx, 106, RULE_catchAssignable);
		int _la;
		try {
			State = 1153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1078;
				catchClasses();
				State = 1086;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
				case 1:
					{
					State = 1082;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1079;
						Match(WS);
						}
						}
						State = 1084;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1085;
					Match(As);
					}
					break;
				}
				State = 1095;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
				case 1:
					{
					State = 1091;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1088;
						Match(WS);
						}
						}
						State = 1093;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1094;
					identifier();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1097;
				Match(OpenParen);
				State = 1098;
				catchClasses();
				State = 1106;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
				case 1:
					{
					State = 1102;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1099;
						Match(WS);
						}
						}
						State = 1104;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1105;
					Match(As);
					}
					break;
				}
				State = 1115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 2533497457623041L) != 0)) {
					{
					State = 1111;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1108;
						Match(WS);
						}
						}
						State = 1113;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1114;
					identifier();
					}
				}

				State = 1117;
				Match(CloseParen);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 1122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1119;
					Match(WS);
					}
					}
					State = 1124;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1125;
				Match(As);
				}
				{
				State = 1130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1127;
					Match(WS);
					}
					}
					State = 1132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1133;
				identifier();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1134;
				Match(OpenParen);
				{
				State = 1138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1135;
					Match(WS);
					}
					}
					State = 1140;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1141;
				Match(As);
				}
				{
				State = 1146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1143;
					Match(WS);
					}
					}
					State = 1148;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1149;
				identifier();
				}
				State = 1151;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClassesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public CatchClassesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClasses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClasses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClassesContext catchClasses() {
		CatchClassesContext _localctx = new CatchClassesContext(Context, State);
		EnterRule(_localctx, 108, RULE_catchClasses);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1155;
			identifier();
			State = 1166;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1159;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1156;
						Match(WS);
						}
						}
						State = 1161;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1162;
					Match(Comma);
					State = 1163;
					identifier();
					}
					} 
				}
				State = 1168;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(MainParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 110, RULE_finallyProduction);
		try {
			int _alt;
			State = 1179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1169;
				Match(EOL);
				State = 1170;
				Match(Finally);
				State = 1174;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,154,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1171;
						s();
						}
						} 
					}
					State = 1176;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,154,Context);
				}
				State = 1177;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1178;
				if (!(!this.second(Finally))) throw new FailedPredicateException(this, "!this.second(Finally)");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 112, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1181;
			functionHead();
			State = 1182;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MainParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(MainParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassExtensionNameContext classExtensionName() {
			return GetRuleContext<ClassExtensionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 114, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1184;
			Match(Class);
			State = 1188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 1185;
				Match(WS);
				}
				}
				State = 1190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1191;
			identifier();
			State = 1204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				{
				State = 1193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1192;
					Match(WS);
					}
					}
					State = 1195;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS );
				State = 1197;
				Match(Extends);
				State = 1199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1198;
					Match(WS);
					}
					}
					State = 1201;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS );
				State = 1203;
				classExtensionName();
				}
				break;
			}
			State = 1209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1206;
				s();
				}
				}
				State = 1211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1212;
			classTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassExtensionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MainParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MainParser.Dot, i);
		}
		public ClassExtensionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classExtensionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExtensionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassExtensionNameContext classExtensionName() {
		ClassExtensionNameContext _localctx = new ClassExtensionNameContext(Context, State);
		EnterRule(_localctx, 116, RULE_classExtensionName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1214;
			identifier();
			State = 1219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 1215;
				Match(Dot);
				State = 1216;
				identifier();
				}
				}
				State = 1221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext[] classElement() {
			return GetRuleContexts<ClassElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext classElement(int i) {
			return GetRuleContext<ClassElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ClassTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTailContext classTail() {
		ClassTailContext _localctx = new ClassTailContext(Context, State);
		EnterRule(_localctx, 118, RULE_classTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1222;
			Match(OpenBrace);
			State = 1229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207053311L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 7L) != 0)) {
				{
				State = 1227;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NullLiteral:
				case Unset:
				case True:
				case False:
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
				case Break:
				case Do:
				case Instanceof:
				case Switch:
				case Case:
				case Default:
				case Else:
				case Catch:
				case Finally:
				case Return:
				case Continue:
				case For:
				case While:
				case Loop:
				case Until:
				case This:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case Yield:
				case Is:
				case Contains:
				case VerbalAnd:
				case VerbalNot:
				case VerbalOr:
				case Goto:
				case Get:
				case Set:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Base:
				case Export:
				case Import:
				case From:
				case As:
				case Async:
				case Await:
				case Static:
				case Global:
				case Local:
				case Identifier:
				case StringLiteral:
					{
					State = 1223;
					classElement();
					State = 1224;
					Match(EOL);
					}
					break;
				case EOL:
					{
					State = 1226;
					Match(EOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1232;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementContext : ParserRuleContext {
		public ClassElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElement; } }
	 
		public ClassElementContext() { }
		public virtual void CopyFrom(ClassElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public NestedClassDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassFieldDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext[] fieldDefinition() {
			return GetRuleContexts<FieldDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition(int i) {
			return GetRuleContext<FieldDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ClassFieldDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassMethodDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public ClassMethodDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassPropertyDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDefinitionContext propertyDefinition() {
			return GetRuleContext<PropertyDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ClassPropertyDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementContext classElement() {
		ClassElementContext _localctx = new ClassElementContext(Context, State);
		EnterRule(_localctx, 120, RULE_classElement);
		int _la;
		try {
			State = 1269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				_localctx = new ClassMethodDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1234;
				methodDefinition();
				}
				break;
			case 2:
				_localctx = new ClassPropertyDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Static) {
					{
					State = 1235;
					Match(Static);
					State = 1239;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1236;
						Match(WS);
						}
						}
						State = 1241;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1244;
				propertyDefinition();
				}
				break;
			case 3:
				_localctx = new ClassFieldDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1252;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
				case 1:
					{
					State = 1245;
					Match(Static);
					State = 1249;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1246;
						Match(WS);
						}
						}
						State = 1251;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 1254;
				fieldDefinition();
				State = 1265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma || _la==WS) {
					{
					{
					State = 1258;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1255;
						Match(WS);
						}
						}
						State = 1260;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1261;
					Match(Comma);
					State = 1262;
					fieldDefinition();
					}
					}
					State = 1267;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 4:
				_localctx = new NestedClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1268;
				classDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
		EnterRule(_localctx, 122, RULE_methodDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1271;
			functionHead();
			State = 1272;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassPropertyNameContext classPropertyName() {
			return GetRuleContext<ClassPropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyGetterDefinitionContext[] propertyGetterDefinition() {
			return GetRuleContexts<PropertyGetterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyGetterDefinitionContext propertyGetterDefinition(int i) {
			return GetRuleContext<PropertyGetterDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySetterDefinitionContext[] propertySetterDefinition() {
			return GetRuleContexts<PropertySetterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySetterDefinitionContext propertySetterDefinition(int i) {
			return GetRuleContext<PropertySetterDefinitionContext>(i);
		}
		public PropertyDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefinitionContext propertyDefinition() {
		PropertyDefinitionContext _localctx = new PropertyDefinitionContext(Context, State);
		EnterRule(_localctx, 124, RULE_propertyDefinition);
		int _la;
		try {
			State = 1299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1274;
				classPropertyName();
				State = 1275;
				Match(Arrow);
				State = 1276;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1278;
				classPropertyName();
				State = 1282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1279;
					s();
					}
					}
					State = 1284;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1285;
				Match(OpenBrace);
				State = 1293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 1293;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Get:
						{
						State = 1286;
						propertyGetterDefinition();
						State = 1287;
						Match(EOL);
						}
						break;
					case Set:
						{
						State = 1289;
						propertySetterDefinition();
						State = 1290;
						Match(EOL);
						}
						break;
					case EOL:
						{
						State = 1292;
						Match(EOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 1295;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8388611L) != 0) );
				State = 1297;
				Match(CloseBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassPropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public ClassPropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classPropertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassPropertyNameContext classPropertyName() {
		ClassPropertyNameContext _localctx = new ClassPropertyNameContext(Context, State);
		EnterRule(_localctx, 126, RULE_classPropertyName);
		int _la;
		try {
			State = 1315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1301;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1302;
				identifier();
				State = 1303;
				Match(OpenBracket);
				State = 1305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply || _la==BitAnd || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) {
					{
					State = 1304;
					formalParameterList();
					}
				}

				State = 1310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1307;
					s();
					}
					}
					State = 1312;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1313;
				Match(CloseBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(MainParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertyGetterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetterDefinitionContext propertyGetterDefinition() {
		PropertyGetterDefinitionContext _localctx = new PropertyGetterDefinitionContext(Context, State);
		EnterRule(_localctx, 128, RULE_propertyGetterDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1317;
			Match(Get);
			State = 1318;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(MainParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertySetterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetterDefinitionContext propertySetterDefinition() {
		PropertySetterDefinitionContext _localctx = new PropertySetterDefinitionContext(Context, State);
		EnterRule(_localctx, 130, RULE_propertySetterDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1320;
			Match(Set);
			State = 1321;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext[] propertyName() {
			return GetRuleContexts<PropertyNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName(int i) {
			return GetRuleContext<PropertyNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MainParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MainParser.Dot, i);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 132, RULE_fieldDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1323;
			propertyName();
			State = 1328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 1324;
				Match(Dot);
				State = 1325;
				propertyName();
				}
				}
				State = 1330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 1331;
			Match(Assign);
			State = 1332;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterArgContext lastFormalParameterArg() {
			return GetRuleContext<LastFormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext[] formalParameterArg() {
			return GetRuleContexts<FormalParameterArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg(int i) {
			return GetRuleContext<FormalParameterArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 134, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1345;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1334;
					formalParameterArg();
					State = 1338;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1335;
						Match(WS);
						}
						}
						State = 1340;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1341;
					Match(Comma);
					}
					} 
				}
				State = 1347;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			}
			State = 1348;
			lastFormalParameterArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterArgContext formalParameterArg() {
		FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
		EnterRule(_localctx, 136, RULE_formalParameterArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BitAnd) {
				{
				State = 1350;
				Match(BitAnd);
				}
			}

			State = 1353;
			identifier();
			State = 1357;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				{
				State = 1354;
				Match(Assign);
				State = 1355;
				expression(0);
				}
				break;
			case QuestionMark:
				{
				State = 1356;
				Match(QuestionMark);
				}
				break;
			case CloseBracket:
			case CloseParen:
			case Comma:
			case EOL:
			case WS:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg() {
			return GetRuleContext<FormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LastFormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterArgContext lastFormalParameterArg() {
		LastFormalParameterArgContext _localctx = new LastFormalParameterArgContext(Context, State);
		EnterRule(_localctx, 138, RULE_lastFormalParameterArg);
		int _la;
		try {
			State = 1364;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1359;
				formalParameterArg();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) {
					{
					State = 1360;
					identifier();
					}
				}

				State = 1363;
				Match(Multiply);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 140, RULE_arrayLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1366;
			Match(OpenBracket);
			State = 1370;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,185,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1367;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 1372;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,185,Context);
			}
			State = 1380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738021042818L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207060991L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 11L) != 0)) {
				{
				State = 1373;
				arguments();
				State = 1377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1374;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1379;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1382;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MapElementListContext mapElementList() {
			return GetRuleContext<MapElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public MapLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapLiteralContext mapLiteral() {
		MapLiteralContext _localctx = new MapLiteralContext(Context, State);
		EnterRule(_localctx, 142, RULE_mapLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1384;
			Match(OpenBracket);
			State = 1388;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,188,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1385;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 1390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,188,Context);
			}
			State = 1391;
			mapElementList();
			State = 1395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1392;
				_la = TokenStream.LA(1);
				if ( !(_la==EOL || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1398;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapElementContext[] mapElement() {
			return GetRuleContexts<MapElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapElementContext mapElement(int i) {
			return GetRuleContext<MapElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public MapElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapElementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapElementListContext mapElementList() {
		MapElementListContext _localctx = new MapElementListContext(Context, State);
		EnterRule(_localctx, 144, RULE_mapElementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma || _la==WS) {
				{
				{
				State = 1403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1400;
					Match(WS);
					}
					}
					State = 1405;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1406;
				Match(Comma);
				}
				}
				State = 1411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1412;
			mapElement();
			State = 1425;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,194,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1416;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1413;
						Match(WS);
						}
						}
						State = 1418;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1419;
					Match(Comma);
					State = 1421;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738021034626L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207060991L) != 0) || _la==Identifier || _la==StringLiteral) {
						{
						State = 1420;
						mapElement();
						}
					}

					}
					} 
				}
				State = 1427;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,194,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapElementContext : ParserRuleContext {
		public ExpressionContext key;
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MapElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapElementContext mapElement() {
		MapElementContext _localctx = new MapElementContext(Context, State);
		EnterRule(_localctx, 146, RULE_mapElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1428;
			_localctx.key = expression(0);
			State = 1429;
			Match(Colon);
			State = 1430;
			_localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberIdentifierContext memberIdentifier() {
			return GetRuleContext<MemberIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 148, RULE_propertyAssignment);
		int _la;
		try {
			_localctx = new PropertyExpressionAssignmentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 1432;
			memberIdentifier();
			State = 1436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1433;
				_la = TokenStream.LA(1);
				if ( !(_la==EOL || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1439;
			Match(Colon);
			State = 1443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1440;
				_la = TokenStream.LA(1);
				if ( !(_la==EOL || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1446;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 150, RULE_propertyName);
		try {
			State = 1452;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1448;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1449;
				reservedWord();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1450;
				Match(StringLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1451;
				numericLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DereferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefStart() { return GetToken(MainParser.DerefStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefEnd() { return GetToken(MainParser.DerefEnd, 0); }
		public DereferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dereference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDereference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DereferenceContext dereference() {
		DereferenceContext _localctx = new DereferenceContext(Context, State);
		EnterRule(_localctx, 152, RULE_dereference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1454;
			Match(DerefStart);
			State = 1455;
			expression(0);
			State = 1456;
			Match(DerefEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 154, RULE_arguments);
		int _la;
		try {
			int _alt;
			State = 1488;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DerefStart:
			case OpenBracket:
			case OpenParen:
			case OpenBrace:
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case BitNot:
			case Not:
			case Multiply:
			case BitAnd:
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1458;
				argument();
				State = 1471;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1462;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 1459;
							Match(WS);
							}
							}
							State = 1464;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1465;
						Match(Comma);
						State = 1467;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
						case 1:
							{
							State = 1466;
							argument();
							}
							break;
						}
						}
						} 
					}
					State = 1473;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
				}
				}
				break;
			case Comma:
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1484;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1477;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 1474;
							Match(WS);
							}
							}
							State = 1479;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1480;
						Match(Comma);
						State = 1482;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
						case 1:
							{
							State = 1481;
							argument();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1486;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 156, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1490;
			expression(0);
			State = 1492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				{
				State = 1491;
				_la = TokenStream.LA(1);
				if ( !(_la==QuestionMark || _la==Multiply) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 158, RULE_expressionSequence);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1494;
			expression(0);
			State = 1505;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,207,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1498;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1495;
						Match(WS);
						}
						}
						State = 1500;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1501;
					Match(Comma);
					State = 1502;
					expression(0);
					}
					} 
				}
				State = 1507;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,207,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberIndexArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public MemberIndexArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberIndexArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberIndexArgumentsContext memberIndexArguments() {
		MemberIndexArgumentsContext _localctx = new MemberIndexArgumentsContext(Context, State);
		EnterRule(_localctx, 160, RULE_memberIndexArguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1508;
			Match(OpenBracket);
			State = 1512;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1509;
					s();
					}
					} 
				}
				State = 1514;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
			}
			State = 1522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738021042818L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207060991L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 11L) != 0)) {
				{
				State = 1515;
				arguments();
				State = 1519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1516;
					s();
					}
					}
					State = 1521;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1524;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		public ExpressionContext ternCond;
		public ExpressionContext ternTrue;
		public ExpressionContext ternFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MainParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(MainParser.Power, 0); }
		public PowerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreIncrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FatArrowExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FatArrowExpressionHeadContext fatArrowExpressionHead() {
			return GetRuleContext<FatArrowExpressionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FatArrowExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFatArrowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MainParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionDummyContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ExpressionDummyContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionDummy(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(MainParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegExMatchExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegExMatch() { return GetToken(MainParser.RegExMatch, 0); }
		public RegExMatchExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegExMatchExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecreaseExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreDecreaseExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpressionHeadContext functionExpressionHead() {
			return GetRuleContext<FunctionExpressionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public FunctionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public AssignmentOperatorContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecreaseExpressionContext : ExpressionContext {
		public ExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostDecreaseExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryPlusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenateExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConcatDot() { return GetToken(MainParser.ConcatDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ConcatenateExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(MainParser.BitXOr, 0); }
		public BitXOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(MainParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(MainParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(MainParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityNotEquals() { return GetToken(MainParser.IdentityNotEquals, 0); }
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VerbalNotExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public VerbalNotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbalNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(MainParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivide() { return GetToken(MainParser.IntegerDivide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitShiftExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(MainParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(MainParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogical() { return GetToken(MainParser.RightShiftLogical, 0); }
		public BitShiftExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(MainParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(MainParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(MainParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(MainParser.GreaterThanEquals, 0); }
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : ExpressionContext {
		public ExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostIncrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContainExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(MainParser.Contains, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ContainExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitNotExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(MainParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BitNotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public BitAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(MainParser.BitOr, 0); }
		public BitOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(MainParser.NullCoalesce, 0); }
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 162;
		EnterRecursionRule(_localctx, 162, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
			case 1:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1527;
				Match(PlusPlus);
				State = 1528;
				((PreIncrementExpressionContext)_localctx).right = expression(27);
				}
				break;
			case 2:
				{
				_localctx = new PreDecreaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1529;
				Match(MinusMinus);
				State = 1530;
				((PreDecreaseExpressionContext)_localctx).right = expression(26);
				}
				break;
			case 3:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1531;
				Match(Minus);
				State = 1532;
				((UnaryMinusExpressionContext)_localctx).right = expression(24);
				}
				break;
			case 4:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1533;
				Match(Not);
				State = 1537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1534;
					Match(WS);
					}
					}
					State = 1539;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1540;
				((NotExpressionContext)_localctx).right = expression(23);
				}
				break;
			case 5:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1541;
				Match(Plus);
				State = 1542;
				((UnaryPlusExpressionContext)_localctx).right = expression(22);
				}
				break;
			case 6:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1543;
				Match(BitNot);
				State = 1544;
				((BitNotExpressionContext)_localctx).right = expression(21);
				}
				break;
			case 7:
				{
				_localctx = new VerbalNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1545;
				Match(VerbalNot);
				State = 1549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1546;
					Match(WS);
					}
					}
					State = 1551;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1552;
				((VerbalNotExpressionContext)_localctx).right = expression(9);
				}
				break;
			case 8:
				{
				_localctx = new FatArrowExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1553;
				fatArrowExpressionHead();
				State = 1554;
				Match(Arrow);
				State = 1555;
				expression(3);
				}
				break;
			case 9:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1557;
				functionExpressionHead();
				State = 1561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1558;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1563;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1564;
				block();
				}
				break;
			case 10:
				{
				_localctx = new ExpressionDummyContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1566;
				primaryExpression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1697;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,229,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1695;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
					case 1:
						{
						_localctx = new PowerExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PowerExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1569;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1570;
						((PowerExpressionContext)_localctx).op = Match(Power);
						State = 1571;
						((PowerExpressionContext)_localctx).right = expression(25);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicativeExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1572;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						{
						State = 1573;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1879048192L) != 0)) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1577;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1574;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1579;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1580;
						((MultiplicativeExpressionContext)_localctx).right = expression(21);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AdditiveExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1581;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						{
						State = 1582;
						((AdditiveExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1586;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1583;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1588;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1589;
						((AdditiveExpressionContext)_localctx).right = expression(20);
						}
						break;
					case 4:
						{
						_localctx = new BitShiftExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitShiftExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1590;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1591;
						((BitShiftExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0)) ) {
							((BitShiftExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1592;
						((BitShiftExpressionContext)_localctx).right = expression(19);
						}
						break;
					case 5:
						{
						_localctx = new BitAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1593;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						{
						State = 1594;
						((BitAndExpressionContext)_localctx).op = Match(BitAnd);
						State = 1598;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1595;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1600;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1601;
						((BitAndExpressionContext)_localctx).right = expression(18);
						}
						break;
					case 6:
						{
						_localctx = new BitXOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitXOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1602;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1603;
						((BitXOrExpressionContext)_localctx).op = Match(BitXOr);
						State = 1604;
						((BitXOrExpressionContext)_localctx).right = expression(17);
						}
						break;
					case 7:
						{
						_localctx = new BitOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BitOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1605;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1606;
						((BitOrExpressionContext)_localctx).op = Match(BitOr);
						State = 1607;
						((BitOrExpressionContext)_localctx).right = expression(16);
						}
						break;
					case 8:
						{
						_localctx = new ConcatenateExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ConcatenateExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1608;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1615;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ConcatDot:
							{
							State = 1609;
							Match(ConcatDot);
							}
							break;
						case WS:
							{
							State = 1611;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							do {
								{
								{
								State = 1610;
								Match(WS);
								}
								}
								State = 1613;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							} while ( _la==WS );
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1617;
						((ConcatenateExpressionContext)_localctx).right = expression(15);
						}
						break;
					case 9:
						{
						_localctx = new RegExMatchExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RegExMatchExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1618;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1619;
						((RegExMatchExpressionContext)_localctx).op = Match(RegExMatch);
						State = 1620;
						((RegExMatchExpressionContext)_localctx).right = expression(14);
						}
						break;
					case 10:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RelationalExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1621;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1622;
						((RelationalExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4123168604160L) != 0)) ) {
							((RelationalExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1623;
						((RelationalExpressionContext)_localctx).right = expression(13);
						}
						break;
					case 11:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1624;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1625;
						((EqualityExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 65970697666560L) != 0)) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1626;
						((EqualityExpressionContext)_localctx).right = expression(12);
						}
						break;
					case 12:
						{
						_localctx = new ContainExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ContainExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1627;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						{
						State = 1631;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1628;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1633;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1634;
						((ContainExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 52428801L) != 0)) ) {
							((ContainExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1638;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1635;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1640;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1641;
						((ContainExpressionContext)_localctx).right = expression(11);
						}
						break;
					case 13:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1642;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1645;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case And:
							{
							State = 1643;
							((LogicalAndExpressionContext)_localctx).op = Match(And);
							}
							break;
						case VerbalAnd:
							{
							State = 1644;
							((LogicalAndExpressionContext)_localctx).op = Match(VerbalAnd);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1647;
						((LogicalAndExpressionContext)_localctx).right = expression(9);
						}
						break;
					case 14:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1648;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1651;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case Or:
							{
							State = 1649;
							((LogicalOrExpressionContext)_localctx).op = Match(Or);
							}
							break;
						case VerbalOr:
							{
							State = 1650;
							((LogicalOrExpressionContext)_localctx).op = Match(VerbalOr);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1653;
						((LogicalOrExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 15:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CoalesceExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1654;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1655;
						((CoalesceExpressionContext)_localctx).op = Match(NullCoalesce);
						State = 1656;
						((CoalesceExpressionContext)_localctx).right = expression(6);
						}
						break;
					case 16:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TernaryExpressionContext)_localctx).ternCond = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1657;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1661;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1658;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1663;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1664;
						Match(QuestionMark);
						State = 1668;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1665;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1670;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1671;
						((TernaryExpressionContext)_localctx).ternTrue = expression(0);
						State = 1675;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1672;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1677;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1678;
						Match(Colon);
						State = 1682;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1679;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1684;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1685;
						((TernaryExpressionContext)_localctx).ternFalse = expression(5);
						}
						break;
					case 17:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1687;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1688;
						((AssignmentExpressionContext)_localctx).op = assignmentOperator();
						State = 1689;
						((AssignmentExpressionContext)_localctx).right = expression(4);
						}
						break;
					case 18:
						{
						_localctx = new PostIncrementExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PostIncrementExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1691;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1692;
						Match(PlusPlus);
						}
						break;
					case 19:
						{
						_localctx = new PostDecreaseExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PostDecreaseExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1693;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1694;
						Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 1699;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,229,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BitShiftExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(MainParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(MainParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogical() { return GetToken(MainParser.RightShiftLogical, 0); }
		public BitShiftExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecreaseExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PostDecreaseExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecreaseExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegExMatchExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegExMatch() { return GetToken(MainParser.RegExMatch, 0); }
		public RegExMatchExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegExMatchExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleExpressionDummyContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public SingleExpressionDummyContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleExpressionDummy(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public BitAndExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitNotExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(MainParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public BitNotExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitNotExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContainExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(MainParser.Contains, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ContainExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(MainParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public NotExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(MainParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivide() { return GetToken(MainParser.IntegerDivide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public MultiplicativeExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(MainParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(MainParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(MainParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(MainParser.GreaterThanEquals, 0); }
		public RelationalExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MainParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		public LogicalOrExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(MainParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(MainParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(MainParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityNotEquals() { return GetToken(MainParser.IdentityNotEquals, 0); }
		public EqualityExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PostIncrementExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(MainParser.NullCoalesce, 0); }
		public CoalesceExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryMinusExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(MainParser.BitOr, 0); }
		public BitOrExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VerbalNotExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public VerbalNotExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbalNotExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext ternCond;
		public ExpressionContext ternTrue;
		public SingleExpressionContext ternFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public TernaryExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecreaseExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreDecreaseExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecreaseExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryPlusExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(MainParser.Power, 0); }
		public PowerExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public AdditiveExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public AssignmentOperatorContext op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenateExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConcatDot() { return GetToken(MainParser.ConcatDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ConcatenateExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenateExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MainParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		public LogicalAndExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreIncrementExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(MainParser.BitXOr, 0); }
		public BitXOrExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 164;
		EnterRecursionRule(_localctx, 164, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1728;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
			case 1:
				{
				_localctx = new PreIncrementExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1701;
				Match(PlusPlus);
				State = 1702;
				((PreIncrementExpressionDuplicateContext)_localctx).right = singleExpression(25);
				}
				break;
			case 2:
				{
				_localctx = new PreDecreaseExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1703;
				Match(MinusMinus);
				State = 1704;
				((PreDecreaseExpressionDuplicateContext)_localctx).right = singleExpression(24);
				}
				break;
			case 3:
				{
				_localctx = new UnaryMinusExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1705;
				Match(Minus);
				State = 1706;
				((UnaryMinusExpressionDuplicateContext)_localctx).right = singleExpression(22);
				}
				break;
			case 4:
				{
				_localctx = new NotExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1707;
				Match(Not);
				State = 1711;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1708;
					Match(WS);
					}
					}
					State = 1713;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1714;
				((NotExpressionDuplicateContext)_localctx).right = singleExpression(21);
				}
				break;
			case 5:
				{
				_localctx = new UnaryPlusExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1715;
				Match(Plus);
				State = 1716;
				((UnaryPlusExpressionDuplicateContext)_localctx).right = singleExpression(20);
				}
				break;
			case 6:
				{
				_localctx = new BitNotExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1717;
				Match(BitNot);
				State = 1718;
				((BitNotExpressionDuplicateContext)_localctx).right = singleExpression(19);
				}
				break;
			case 7:
				{
				_localctx = new VerbalNotExpressionDuplicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1719;
				Match(VerbalNot);
				State = 1723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 1720;
					Match(WS);
					}
					}
					State = 1725;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1726;
				((VerbalNotExpressionDuplicateContext)_localctx).right = singleExpression(7);
				}
				break;
			case 8:
				{
				_localctx = new SingleExpressionDummyContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1727;
				primaryExpression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1858;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,247,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1856;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,246,Context) ) {
					case 1:
						{
						_localctx = new PowerExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((PowerExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1730;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1731;
						((PowerExpressionDuplicateContext)_localctx).op = Match(Power);
						State = 1732;
						((PowerExpressionDuplicateContext)_localctx).right = singleExpression(23);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((MultiplicativeExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1733;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						{
						State = 1734;
						((MultiplicativeExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1879048192L) != 0)) ) {
							((MultiplicativeExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1738;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1735;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1740;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1741;
						((MultiplicativeExpressionDuplicateContext)_localctx).right = singleExpression(19);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((AdditiveExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1742;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						{
						State = 1743;
						((AdditiveExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1747;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1744;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1749;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1750;
						((AdditiveExpressionDuplicateContext)_localctx).right = singleExpression(18);
						}
						break;
					case 4:
						{
						_localctx = new BitShiftExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((BitShiftExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1751;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1752;
						((BitShiftExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0)) ) {
							((BitShiftExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1753;
						((BitShiftExpressionDuplicateContext)_localctx).right = singleExpression(17);
						}
						break;
					case 5:
						{
						_localctx = new BitAndExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((BitAndExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1754;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						{
						State = 1755;
						((BitAndExpressionDuplicateContext)_localctx).op = Match(BitAnd);
						State = 1759;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1756;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1761;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1762;
						((BitAndExpressionDuplicateContext)_localctx).right = singleExpression(16);
						}
						break;
					case 6:
						{
						_localctx = new BitXOrExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((BitXOrExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1763;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1764;
						((BitXOrExpressionDuplicateContext)_localctx).op = Match(BitXOr);
						State = 1765;
						((BitXOrExpressionDuplicateContext)_localctx).right = singleExpression(15);
						}
						break;
					case 7:
						{
						_localctx = new BitOrExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((BitOrExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1766;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1767;
						((BitOrExpressionDuplicateContext)_localctx).op = Match(BitOr);
						State = 1768;
						((BitOrExpressionDuplicateContext)_localctx).right = singleExpression(14);
						}
						break;
					case 8:
						{
						_localctx = new ConcatenateExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((ConcatenateExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1769;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1776;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ConcatDot:
							{
							State = 1770;
							Match(ConcatDot);
							}
							break;
						case WS:
							{
							State = 1772;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							do {
								{
								{
								State = 1771;
								Match(WS);
								}
								}
								State = 1774;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							} while ( _la==WS );
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1778;
						((ConcatenateExpressionDuplicateContext)_localctx).right = singleExpression(13);
						}
						break;
					case 9:
						{
						_localctx = new RegExMatchExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((RegExMatchExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1779;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1780;
						((RegExMatchExpressionDuplicateContext)_localctx).op = Match(RegExMatch);
						State = 1781;
						((RegExMatchExpressionDuplicateContext)_localctx).right = singleExpression(12);
						}
						break;
					case 10:
						{
						_localctx = new RelationalExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((RelationalExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1782;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1783;
						((RelationalExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4123168604160L) != 0)) ) {
							((RelationalExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1784;
						((RelationalExpressionDuplicateContext)_localctx).right = singleExpression(11);
						}
						break;
					case 11:
						{
						_localctx = new EqualityExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((EqualityExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1785;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1786;
						((EqualityExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 65970697666560L) != 0)) ) {
							((EqualityExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1787;
						((EqualityExpressionDuplicateContext)_localctx).right = singleExpression(10);
						}
						break;
					case 12:
						{
						_localctx = new ContainExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((ContainExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1788;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						{
						State = 1792;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1789;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1794;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1795;
						((ContainExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 52428801L) != 0)) ) {
							((ContainExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1799;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1796;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1801;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1802;
						((ContainExpressionDuplicateContext)_localctx).right = singleExpression(9);
						}
						break;
					case 13:
						{
						_localctx = new LogicalAndExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1803;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1806;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case And:
							{
							State = 1804;
							((LogicalAndExpressionDuplicateContext)_localctx).op = Match(And);
							}
							break;
						case VerbalAnd:
							{
							State = 1805;
							((LogicalAndExpressionDuplicateContext)_localctx).op = Match(VerbalAnd);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1808;
						((LogicalAndExpressionDuplicateContext)_localctx).right = singleExpression(7);
						}
						break;
					case 14:
						{
						_localctx = new LogicalOrExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1809;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1812;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case Or:
							{
							State = 1810;
							((LogicalOrExpressionDuplicateContext)_localctx).op = Match(Or);
							}
							break;
						case VerbalOr:
							{
							State = 1811;
							((LogicalOrExpressionDuplicateContext)_localctx).op = Match(VerbalOr);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1814;
						((LogicalOrExpressionDuplicateContext)_localctx).right = singleExpression(6);
						}
						break;
					case 15:
						{
						_localctx = new CoalesceExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((CoalesceExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1815;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1816;
						((CoalesceExpressionDuplicateContext)_localctx).op = Match(NullCoalesce);
						State = 1817;
						((CoalesceExpressionDuplicateContext)_localctx).right = singleExpression(4);
						}
						break;
					case 16:
						{
						_localctx = new TernaryExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((TernaryExpressionDuplicateContext)_localctx).ternCond = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1818;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1822;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1819;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1824;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1825;
						Match(QuestionMark);
						State = 1829;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1826;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1831;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1832;
						((TernaryExpressionDuplicateContext)_localctx).ternTrue = expression(0);
						State = 1836;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1833;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1838;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1839;
						Match(Colon);
						State = 1843;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1840;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1845;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1846;
						((TernaryExpressionDuplicateContext)_localctx).ternFalse = singleExpression(3);
						}
						break;
					case 17:
						{
						_localctx = new AssignmentExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1848;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1849;
						((AssignmentExpressionDuplicateContext)_localctx).op = assignmentOperator();
						State = 1850;
						((AssignmentExpressionDuplicateContext)_localctx).right = singleExpression(2);
						}
						break;
					case 18:
						{
						_localctx = new PostIncrementExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((PostIncrementExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1852;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1853;
						Match(PlusPlus);
						}
						break;
					case 19:
						{
						_localctx = new PostDecreaseExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((PostDecreaseExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1854;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1855;
						Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 1860;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,247,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
	 
		public PrimaryExpressionContext() { }
		public virtual void CopyFrom(PrimaryExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MapLiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapLiteralContext mapLiteral() {
			return GetRuleContext<MapLiteralContext>(0);
		}
		public MapLiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarRefExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public VarRefExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarRefExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DynamicIdentifierExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DynamicIdentifierContext dynamicIdentifier() {
			return GetRuleContext<DynamicIdentifierContext>(0);
		}
		public DynamicIdentifierExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDotExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberIdentifierContext memberIdentifier() {
			return GetRuleContext<MemberIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MainParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		public MemberDotExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberIndexArgumentsContext memberIndexArguments() {
			return GetRuleContext<MemberIndexArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		public MemberIndexExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctionCallExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		return primaryExpression(0);
	}

	private PrimaryExpressionContext primaryExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, _parentState);
		PrimaryExpressionContext _prevctx = _localctx;
		int _startState = 166;
		EnterRecursionRule(_localctx, 166, RULE_primaryExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1874;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				{
				_localctx = new VarRefExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1862;
				Match(BitAnd);
				State = 1863;
				primaryExpression(8);
				}
				break;
			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1864;
				identifier();
				}
				break;
			case 3:
				{
				_localctx = new DynamicIdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1865;
				dynamicIdentifier();
				}
				break;
			case 4:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1866;
				literal();
				}
				break;
			case 5:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1867;
				arrayLiteral();
				}
				break;
			case 6:
				{
				_localctx = new MapLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1868;
				mapLiteral();
				}
				break;
			case 7:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1869;
				objectLiteral();
				}
				break;
			case 8:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1870;
				Match(OpenParen);
				State = 1871;
				expressionSequence();
				State = 1872;
				Match(CloseParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1892;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1890;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
					case 1:
						{
						_localctx = new MemberDotExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 1876;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1877;
						_la = TokenStream.LA(1);
						if ( !(_la==QuestionMarkDot || _la==Dot) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1878;
						memberIdentifier();
						}
						break;
					case 2:
						{
						_localctx = new FunctionCallExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 1879;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1880;
						Match(OpenParen);
						State = 1882;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738021042818L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207060991L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 11L) != 0)) {
							{
							State = 1881;
							arguments();
							}
						}

						State = 1884;
						Match(CloseParen);
						}
						break;
					case 3:
						{
						_localctx = new MemberIndexExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 1885;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1887;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==QuestionMarkDot) {
							{
							State = 1886;
							Match(QuestionMarkDot);
							}
						}

						State = 1889;
						memberIndexArguments();
						}
						break;
					}
					} 
				}
				State = 1894;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MemberDotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MainParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		public MemberDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDotContext memberDot() {
		MemberDotContext _localctx = new MemberDotContext(Context, State);
		EnterRule(_localctx, 168, RULE_memberDot);
		int _la;
		try {
			State = 1921;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1895;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1898;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EOL || _la==WS );
				State = 1900;
				Match(Dot);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1901;
				Match(Dot);
				State = 1905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1902;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1907;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1911;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1908;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1913;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1914;
				Match(QuestionMarkDot);
				State = 1918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1915;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1920;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DynamicIdentifierContext dynamicIdentifier() {
			return GetRuleContext<DynamicIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public MemberIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberIdentifierContext memberIdentifier() {
		MemberIdentifierContext _localctx = new MemberIdentifierContext(Context, State);
		EnterRule(_localctx, 170, RULE_memberIdentifier);
		try {
			State = 1927;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1923;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1924;
				dynamicIdentifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1925;
				keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1926;
				literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext[] propertyName() {
			return GetRuleContexts<PropertyNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName(int i) {
			return GetRuleContext<PropertyNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext[] dereference() {
			return GetRuleContexts<DereferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference(int i) {
			return GetRuleContext<DereferenceContext>(i);
		}
		public DynamicIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicIdentifierContext dynamicIdentifier() {
		DynamicIdentifierContext _localctx = new DynamicIdentifierContext(Context, State);
		EnterRule(_localctx, 172, RULE_dynamicIdentifier);
		try {
			int _alt;
			State = 1946;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1929;
				propertyName();
				State = 1930;
				dereference();
				State = 1935;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,260,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 1933;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NullLiteral:
						case Unset:
						case True:
						case False:
						case DecimalLiteral:
						case HexIntegerLiteral:
						case OctalIntegerLiteral:
						case OctalIntegerLiteral2:
						case BinaryIntegerLiteral:
						case Break:
						case Do:
						case Instanceof:
						case Switch:
						case Case:
						case Default:
						case Else:
						case Catch:
						case Finally:
						case Return:
						case Continue:
						case For:
						case While:
						case Loop:
						case Until:
						case This:
						case If:
						case Throw:
						case Delete:
						case In:
						case Try:
						case Yield:
						case Is:
						case Contains:
						case VerbalAnd:
						case VerbalNot:
						case VerbalOr:
						case Goto:
						case Get:
						case Set:
						case Class:
						case Enum:
						case Extends:
						case Super:
						case Base:
						case Export:
						case Import:
						case From:
						case As:
						case Async:
						case Await:
						case Static:
						case Global:
						case Local:
						case Identifier:
						case StringLiteral:
							{
							State = 1931;
							propertyName();
							}
							break;
						case DerefStart:
							{
							State = 1932;
							dereference();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 1937;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,260,Context);
				}
				}
				break;
			case DerefStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1938;
				dereference();
				State = 1943;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,262,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 1941;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NullLiteral:
						case Unset:
						case True:
						case False:
						case DecimalLiteral:
						case HexIntegerLiteral:
						case OctalIntegerLiteral:
						case OctalIntegerLiteral2:
						case BinaryIntegerLiteral:
						case Break:
						case Do:
						case Instanceof:
						case Switch:
						case Case:
						case Default:
						case Else:
						case Catch:
						case Finally:
						case Return:
						case Continue:
						case For:
						case While:
						case Loop:
						case Until:
						case This:
						case If:
						case Throw:
						case Delete:
						case In:
						case Try:
						case Yield:
						case Is:
						case Contains:
						case VerbalAnd:
						case VerbalNot:
						case VerbalOr:
						case Goto:
						case Get:
						case Set:
						case Class:
						case Enum:
						case Extends:
						case Super:
						case Base:
						case Export:
						case Import:
						case From:
						case As:
						case Async:
						case Await:
						case Static:
						case Global:
						case Local:
						case Identifier:
						case StringLiteral:
							{
							State = 1939;
							propertyName();
							}
							break;
						case DerefStart:
							{
							State = 1940;
							dereference();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 1945;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,262,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 174, RULE_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1948;
			Match(Assign);
			State = 1949;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableContext assignable() {
		AssignableContext _localctx = new AssignableContext(Context, State);
		EnterRule(_localctx, 176, RULE_assignable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1951;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 178, RULE_objectLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1953;
			Match(OpenBrace);
			State = 1957;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1954;
				s();
				}
				}
				State = 1959;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DerefStart || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207060991L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 1960;
				propertyAssignment();
				State = 1971;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,266,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1964;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 1961;
							Match(WS);
							}
							}
							State = 1966;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1967;
						Match(Comma);
						State = 1968;
						propertyAssignment();
						}
						} 
					}
					State = 1973;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,266,Context);
				}
				State = 1977;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1974;
					s();
					}
					}
					State = 1979;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1982;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadPrefixContext functionHeadPrefix() {
			return GetRuleContext<FunctionHeadPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeadContext functionHead() {
		FunctionHeadContext _localctx = new FunctionHeadContext(Context, State);
		EnterRule(_localctx, 180, RULE_functionHead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1985;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
			case 1:
				{
				State = 1984;
				functionHeadPrefix();
				}
				break;
			}
			State = 1987;
			identifierName();
			State = 1988;
			Match(OpenParen);
			State = 1990;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply || _la==BitAnd || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) {
				{
				State = 1989;
				formalParameterList();
				}
			}

			State = 1992;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeadPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Async() { return GetTokens(MainParser.Async); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async(int i) {
			return GetToken(MainParser.Async, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Static() { return GetTokens(MainParser.Static); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static(int i) {
			return GetToken(MainParser.Static, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public FunctionHeadPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHeadPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHeadPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeadPrefixContext functionHeadPrefix() {
		FunctionHeadPrefixContext _localctx = new FunctionHeadPrefixContext(Context, State);
		EnterRule(_localctx, 182, RULE_functionHeadPrefix);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2001;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1994;
					_la = TokenStream.LA(1);
					if ( !(_la==Async || _la==Static) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1998;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 1995;
						Match(WS);
						}
						}
						State = 2000;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2003;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,272,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadPrefixContext functionHeadPrefix() {
			return GetRuleContext<FunctionHeadPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionExpressionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionExpressionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpressionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionHeadContext functionExpressionHead() {
		FunctionExpressionHeadContext _localctx = new FunctionExpressionHeadContext(Context, State);
		EnterRule(_localctx, 184, RULE_functionExpressionHead);
		int _la;
		try {
			State = 2014;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2005;
				functionHead();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2007;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Async || _la==Static) {
					{
					State = 2006;
					functionHeadPrefix();
					}
				}

				State = 2009;
				Match(OpenParen);
				State = 2011;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply || _la==BitAnd || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) {
					{
					State = 2010;
					formalParameterList();
					}
				}

				State = 2013;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FatArrowExpressionHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadPrefixContext functionHeadPrefix() {
			return GetRuleContext<FunctionHeadPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpressionHeadContext functionExpressionHead() {
			return GetRuleContext<FunctionExpressionHeadContext>(0);
		}
		public FatArrowExpressionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fatArrowExpressionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFatArrowExpressionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FatArrowExpressionHeadContext fatArrowExpressionHead() {
		FatArrowExpressionHeadContext _localctx = new FatArrowExpressionHeadContext(Context, State);
		EnterRule(_localctx, 186, RULE_fatArrowExpressionHead);
		int _la;
		try {
			State = 2034;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2020;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2305843008207052815L) != 0) || _la==Identifier) {
					{
					State = 2017;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
					case 1:
						{
						State = 2016;
						functionHeadPrefix();
						}
						break;
					}
					State = 2019;
					identifierName();
					}
				}

				State = 2022;
				Match(Multiply);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2024;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
				case 1:
					{
					State = 2023;
					functionHeadPrefix();
					}
					break;
				}
				State = 2027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BitAnd) {
					{
					State = 2026;
					Match(BitAnd);
					}
				}

				State = 2029;
				identifierName();
				State = 2031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QuestionMark) {
					{
					State = 2030;
					Match(QuestionMark);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2033;
				functionExpressionHead();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 188, RULE_functionBody);
		int _la;
		try {
			int _alt;
			State = 2055;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Arrow:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2036;
				Match(Arrow);
				State = 2037;
				expression(0);
				}
				break;
			case OpenBrace:
			case EOL:
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2041;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 2038;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 2043;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2044;
				Match(OpenBrace);
				State = 2048;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,283,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2045;
						s();
						}
						} 
					}
					State = 2050;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,283,Context);
				}
				State = 2052;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
				case 1:
					{
					State = 2051;
					statementList();
					}
					break;
				}
				State = 2054;
				Match(CloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(MainParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(MainParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(MainParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(MainParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(MainParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivideAssign() { return GetToken(MainParser.IntegerDivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConcatenateAssign() { return GetToken(MainParser.ConcatenateAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(MainParser.BitOrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(MainParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(MainParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(MainParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(MainParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogicalAssign() { return GetToken(MainParser.RightShiftLogicalAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PowerAssign() { return GetToken(MainParser.PowerAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullishCoalescingAssign() { return GetToken(MainParser.NullishCoalescingAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 190, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2057;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 9006924376834049L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BigintLiteralContext bigintLiteral() {
			return GetRuleContext<BigintLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(MainParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 192, RULE_literal);
		int _la;
		try {
			State = 2063;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2059;
				boolean();
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2060;
				numericLiteral();
				}
				break;
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2061;
				bigintLiteral();
				}
				break;
			case NullLiteral:
			case Unset:
			case StringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2062;
				_la = TokenStream.LA(1);
				if ( !(_la==NullLiteral || _la==Unset || _la==StringLiteral) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(MainParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(MainParser.False, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 194, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2065;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(MainParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(MainParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral() { return GetToken(MainParser.OctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral2() { return GetToken(MainParser.OctalIntegerLiteral2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryIntegerLiteral() { return GetToken(MainParser.BinaryIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 196, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2067;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BigintLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigDecimalIntegerLiteral() { return GetToken(MainParser.BigDecimalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigHexIntegerLiteral() { return GetToken(MainParser.BigHexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigOctalIntegerLiteral() { return GetToken(MainParser.BigOctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigBinaryIntegerLiteral() { return GetToken(MainParser.BigBinaryIntegerLiteral, 0); }
		public BigintLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bigintLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBigintLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BigintLiteralContext bigintLiteral() {
		BigintLiteralContext _localctx = new BigintLiteralContext(Context, State);
		EnterRule(_localctx, 198, RULE_bigintLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2069;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(MainParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 200, RULE_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2071;
			Match(Get);
			State = 2072;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(MainParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 202, RULE_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2074;
			Match(Set);
			State = 2075;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 204, RULE_identifierName);
		try {
			State = 2079;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2077;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2078;
				reservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(MainParser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(MainParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(MainParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(MainParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Base() { return GetToken(MainParser.Base, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(MainParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(MainParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(MainParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 206, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2081;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 281697643937793L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(MainParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 208, RULE_reservedWord);
		try {
			State = 2087;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2083;
				keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2084;
				Match(NullLiteral);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2085;
				Match(Unset);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2086;
				boolean();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(MainParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(MainParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MainParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MainParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MainParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(MainParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MainParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MainParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(MainParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(MainParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MainParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(MainParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(MainParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(MainParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(MainParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(MainParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(MainParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(MainParser.Contains, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(MainParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(MainParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(MainParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 210, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2089;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 1142313413771128833L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(MainParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public SContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SContext s() {
		SContext _localctx = new SContext(Context, State);
		EnterRule(_localctx, 212, RULE_s);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2091;
			_la = TokenStream.LA(1);
			if ( !(_la==EOL || _la==WS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MainParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 214, RULE_eos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2093;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==EOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 32: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		case 35: return untilProduction_sempred((UntilProductionContext)_localctx, predIndex);
		case 36: return elseProduction_sempred((ElseProductionContext)_localctx, predIndex);
		case 37: return iterationStatement_sempred((IterationStatementContext)_localctx, predIndex);
		case 55: return finallyProduction_sempred((FinallyProductionContext)_localctx, predIndex);
		case 81: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 82: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 83: return primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return InputStream.LA(1) != MainLexer.OpenBrace && !this.isFunctionCallStatement();
		}
		return true;
	}
	private bool untilProduction_sempred(UntilProductionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return !this.second(Until);
		}
		return true;
	}
	private bool elseProduction_sempred(ElseProductionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return !this.second(Else);
		}
		return true;
	}
	private bool iterationStatement_sempred(IterationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return !this.isEmptyObject();
		}
		return true;
	}
	private bool finallyProduction_sempred(FinallyProductionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return !this.second(Finally);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 25);
		case 6: return Precpred(Context, 20);
		case 7: return Precpred(Context, 19);
		case 8: return Precpred(Context, 18);
		case 9: return Precpred(Context, 17);
		case 10: return Precpred(Context, 16);
		case 11: return Precpred(Context, 15);
		case 12: return Precpred(Context, 14);
		case 13: return Precpred(Context, 13);
		case 14: return Precpred(Context, 12);
		case 15: return Precpred(Context, 11);
		case 16: return Precpred(Context, 10);
		case 17: return Precpred(Context, 8);
		case 18: return Precpred(Context, 7);
		case 19: return Precpred(Context, 6);
		case 20: return Precpred(Context, 5);
		case 21: return Precpred(Context, 4);
		case 22: return Precpred(Context, 29);
		case 23: return Precpred(Context, 28);
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return Precpred(Context, 23);
		case 25: return Precpred(Context, 18);
		case 26: return Precpred(Context, 17);
		case 27: return Precpred(Context, 16);
		case 28: return Precpred(Context, 15);
		case 29: return Precpred(Context, 14);
		case 30: return Precpred(Context, 13);
		case 31: return Precpred(Context, 12);
		case 32: return Precpred(Context, 11);
		case 33: return Precpred(Context, 10);
		case 34: return Precpred(Context, 9);
		case 35: return Precpred(Context, 8);
		case 36: return Precpred(Context, 6);
		case 37: return Precpred(Context, 5);
		case 38: return Precpred(Context, 4);
		case 39: return Precpred(Context, 3);
		case 40: return Precpred(Context, 2);
		case 41: return Precpred(Context, 27);
		case 42: return Precpred(Context, 26);
		}
		return true;
	}
	private bool primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return Precpred(Context, 11);
		case 44: return Precpred(Context, 10);
		case 45: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,178,2096,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,1,0,1,0,1,0,1,0,3,0,221,8,0,1,1,4,
		1,224,8,1,11,1,12,1,225,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,248,8,2,1,3,1,3,3,3,252,8,3,1,3,
		1,3,1,3,3,3,257,8,3,1,3,1,3,1,3,3,3,262,8,3,1,3,1,3,1,3,3,3,267,8,3,3,
		3,269,8,3,1,4,1,4,1,5,1,5,1,5,5,5,276,8,5,10,5,12,5,279,9,5,1,5,5,5,282,
		8,5,10,5,12,5,285,9,5,1,5,1,5,3,5,289,8,5,1,5,1,5,3,5,293,8,5,1,5,3,5,
		296,8,5,1,6,1,6,1,7,1,7,1,7,5,7,303,8,7,10,7,12,7,306,9,7,1,7,5,7,309,
		8,7,10,7,12,7,312,9,7,1,7,1,7,3,7,316,8,7,1,8,1,8,1,8,1,8,5,8,322,8,8,
		10,8,12,8,325,9,8,3,8,327,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,3,8,344,8,8,1,9,1,9,5,9,348,8,9,10,9,12,9,351,9,9,
		1,9,3,9,354,8,9,1,9,1,9,1,10,1,10,1,10,4,10,361,8,10,11,10,12,10,362,1,
		11,1,11,5,11,367,8,11,10,11,12,11,370,9,11,1,11,3,11,373,8,11,1,12,1,12,
		5,12,377,8,12,10,12,12,12,380,9,12,1,12,1,12,1,13,1,13,5,13,386,8,13,10,
		13,12,13,389,9,13,1,13,1,13,1,14,1,14,5,14,395,8,14,10,14,12,14,398,9,
		14,1,14,1,14,1,15,3,15,403,8,15,1,15,1,15,3,15,407,8,15,1,15,1,15,1,15,
		3,15,412,8,15,1,16,1,16,1,16,5,16,417,8,16,10,16,12,16,420,9,16,1,16,1,
		16,5,16,424,8,16,10,16,12,16,427,9,16,1,16,1,16,5,16,431,8,16,10,16,12,
		16,434,9,16,1,16,3,16,437,8,16,3,16,439,8,16,1,16,1,16,1,17,1,17,1,17,
		3,17,446,8,17,1,18,1,18,3,18,450,8,18,1,19,1,19,1,20,1,20,5,20,456,8,20,
		10,20,12,20,459,9,20,1,20,1,20,1,21,1,21,3,21,465,8,21,1,21,1,21,3,21,
		469,8,21,1,22,1,22,1,22,1,23,1,23,1,23,3,23,477,8,23,1,24,1,24,3,24,481,
		8,24,1,24,1,24,3,24,485,8,24,1,24,1,24,1,24,3,24,490,8,24,1,25,1,25,1,
		25,1,25,1,25,3,25,497,8,25,3,25,499,8,25,1,26,1,26,1,26,5,26,504,8,26,
		10,26,12,26,507,9,26,1,26,1,26,5,26,511,8,26,10,26,12,26,514,9,26,1,26,
		1,26,5,26,518,8,26,10,26,12,26,521,9,26,1,26,3,26,524,8,26,3,26,526,8,
		26,1,26,1,26,1,27,1,27,1,27,3,27,533,8,27,1,28,1,28,3,28,537,8,28,1,29,
		1,29,5,29,541,8,29,10,29,12,29,544,9,29,1,29,1,29,5,29,548,8,29,10,29,
		12,29,551,9,29,1,30,1,30,1,30,1,30,1,30,3,30,558,8,30,1,31,1,31,4,31,562,
		8,31,11,31,12,31,563,1,31,3,31,567,8,31,1,32,1,32,1,32,1,33,1,33,5,33,
		574,8,33,10,33,12,33,577,9,33,1,33,1,33,5,33,581,8,33,10,33,12,33,584,
		9,33,1,33,1,33,1,33,1,34,4,34,590,8,34,11,34,12,34,591,1,34,1,34,3,34,
		596,8,34,1,35,1,35,1,35,5,35,601,8,35,10,35,12,35,604,9,35,1,35,1,35,3,
		35,608,8,35,1,36,1,36,1,36,5,36,613,8,36,10,36,12,36,616,9,36,1,36,1,36,
		3,36,620,8,36,1,37,1,37,5,37,624,8,37,10,37,12,37,627,9,37,1,37,1,37,1,
		37,5,37,632,8,37,10,37,12,37,635,9,37,3,37,637,8,37,1,37,1,37,1,37,1,37,
		1,37,1,37,5,37,645,8,37,10,37,12,37,648,9,37,1,37,1,37,5,37,652,8,37,10,
		37,12,37,655,9,37,1,37,1,37,3,37,659,8,37,1,37,5,37,662,8,37,10,37,12,
		37,665,9,37,1,37,1,37,1,37,1,37,1,37,1,37,5,37,673,8,37,10,37,12,37,676,
		9,37,1,37,1,37,5,37,680,8,37,10,37,12,37,683,9,37,1,37,1,37,3,37,687,8,
		37,1,37,5,37,690,8,37,10,37,12,37,693,9,37,1,37,1,37,1,37,1,37,1,37,1,
		37,5,37,701,8,37,10,37,12,37,704,9,37,1,37,1,37,5,37,708,8,37,10,37,12,
		37,711,9,37,1,37,1,37,3,37,715,8,37,1,37,5,37,718,8,37,10,37,12,37,721,
		9,37,1,37,1,37,1,37,1,37,1,37,1,37,5,37,729,8,37,10,37,12,37,732,9,37,
		1,37,1,37,5,37,736,8,37,10,37,12,37,739,9,37,1,37,1,37,3,37,743,8,37,5,
		37,745,8,37,10,37,12,37,748,9,37,1,37,5,37,751,8,37,10,37,12,37,754,9,
		37,1,37,1,37,1,37,1,37,1,37,1,37,5,37,762,8,37,10,37,12,37,765,9,37,1,
		37,1,37,5,37,769,8,37,10,37,12,37,772,9,37,1,37,1,37,1,37,1,37,1,37,1,
		37,5,37,780,8,37,10,37,12,37,783,9,37,1,37,1,37,5,37,787,8,37,10,37,12,
		37,790,9,37,1,37,1,37,1,37,1,37,3,37,796,8,37,1,38,3,38,799,8,38,1,38,
		5,38,802,8,38,10,38,12,38,805,9,38,1,38,1,38,3,38,809,8,38,5,38,811,8,
		38,10,38,12,38,814,9,38,1,38,5,38,817,8,38,10,38,12,38,820,9,38,1,38,1,
		38,5,38,824,8,38,10,38,12,38,827,9,38,1,38,1,38,1,38,3,38,832,8,38,1,38,
		5,38,835,8,38,10,38,12,38,838,9,38,1,38,1,38,3,38,842,8,38,5,38,844,8,
		38,10,38,12,38,847,9,38,1,38,5,38,850,8,38,10,38,12,38,853,9,38,1,38,1,
		38,5,38,857,8,38,10,38,12,38,860,9,38,1,38,1,38,1,38,3,38,865,8,38,1,39,
		1,39,5,39,869,8,39,10,39,12,39,872,9,39,1,39,1,39,1,39,1,39,1,39,3,39,
		879,8,39,1,40,1,40,5,40,883,8,40,10,40,12,40,886,9,40,1,40,1,40,1,40,1,
		40,1,40,3,40,893,8,40,1,41,1,41,5,41,897,8,41,10,41,12,41,900,9,41,1,41,
		3,41,903,8,41,1,42,1,42,5,42,907,8,42,10,42,12,42,910,9,42,1,42,3,42,913,
		8,42,1,43,1,43,5,43,917,8,43,10,43,12,43,920,9,43,1,43,3,43,923,8,43,1,
		43,5,43,926,8,43,10,43,12,43,929,9,43,1,43,1,43,3,43,933,8,43,1,43,5,43,
		936,8,43,10,43,12,43,939,9,43,1,43,1,43,1,44,1,44,5,44,945,8,44,10,44,
		12,44,948,9,44,1,44,3,44,951,8,44,1,44,1,44,3,44,955,8,44,3,44,957,8,44,
		1,44,1,44,1,45,4,45,962,8,45,11,45,12,45,963,1,46,1,46,5,46,968,8,46,10,
		46,12,46,971,9,46,1,46,1,46,5,46,975,8,46,10,46,12,46,978,9,46,1,46,1,
		46,5,46,982,8,46,10,46,12,46,985,9,46,1,46,1,46,3,46,989,8,46,1,47,1,47,
		5,47,993,8,47,10,47,12,47,996,9,47,1,47,1,47,5,47,1000,8,47,10,47,12,47,
		1003,9,47,1,47,1,47,3,47,1007,8,47,1,48,1,48,1,48,1,49,1,49,5,49,1014,
		8,49,10,49,12,49,1017,9,49,1,49,1,49,1,49,5,49,1022,8,49,10,49,12,49,1025,
		9,49,1,49,1,49,1,49,1,49,3,49,1031,8,49,1,50,1,50,5,50,1035,8,50,10,50,
		12,50,1038,9,50,1,50,3,50,1041,8,50,1,51,1,51,5,51,1045,8,51,10,51,12,
		51,1048,9,51,1,51,1,51,5,51,1052,8,51,10,51,12,51,1055,9,51,1,51,1,51,
		1,51,1,52,1,52,1,52,5,52,1063,8,52,10,52,12,52,1066,9,52,1,52,1,52,5,52,
		1070,8,52,10,52,12,52,1073,9,52,3,52,1075,8,52,1,52,1,52,1,53,1,53,5,53,
		1081,8,53,10,53,12,53,1084,9,53,1,53,3,53,1087,8,53,1,53,5,53,1090,8,53,
		10,53,12,53,1093,9,53,1,53,3,53,1096,8,53,1,53,1,53,1,53,5,53,1101,8,53,
		10,53,12,53,1104,9,53,1,53,3,53,1107,8,53,1,53,5,53,1110,8,53,10,53,12,
		53,1113,9,53,1,53,3,53,1116,8,53,1,53,1,53,1,53,5,53,1121,8,53,10,53,12,
		53,1124,9,53,1,53,1,53,1,53,5,53,1129,8,53,10,53,12,53,1132,9,53,1,53,
		1,53,1,53,5,53,1137,8,53,10,53,12,53,1140,9,53,1,53,1,53,1,53,5,53,1145,
		8,53,10,53,12,53,1148,9,53,1,53,1,53,1,53,1,53,3,53,1154,8,53,1,54,1,54,
		5,54,1158,8,54,10,54,12,54,1161,9,54,1,54,1,54,5,54,1165,8,54,10,54,12,
		54,1168,9,54,1,55,1,55,1,55,5,55,1173,8,55,10,55,12,55,1176,9,55,1,55,
		1,55,3,55,1180,8,55,1,56,1,56,1,56,1,57,1,57,5,57,1187,8,57,10,57,12,57,
		1190,9,57,1,57,1,57,4,57,1194,8,57,11,57,12,57,1195,1,57,1,57,4,57,1200,
		8,57,11,57,12,57,1201,1,57,3,57,1205,8,57,1,57,5,57,1208,8,57,10,57,12,
		57,1211,9,57,1,57,1,57,1,58,1,58,1,58,5,58,1218,8,58,10,58,12,58,1221,
		9,58,1,59,1,59,1,59,1,59,1,59,5,59,1228,8,59,10,59,12,59,1231,9,59,1,59,
		1,59,1,60,1,60,1,60,5,60,1238,8,60,10,60,12,60,1241,9,60,3,60,1243,8,60,
		1,60,1,60,1,60,5,60,1248,8,60,10,60,12,60,1251,9,60,3,60,1253,8,60,1,60,
		1,60,5,60,1257,8,60,10,60,12,60,1260,9,60,1,60,1,60,5,60,1264,8,60,10,
		60,12,60,1267,9,60,1,60,3,60,1270,8,60,1,61,1,61,1,61,1,62,1,62,1,62,1,
		62,1,62,1,62,5,62,1281,8,62,10,62,12,62,1284,9,62,1,62,1,62,1,62,1,62,
		1,62,1,62,1,62,1,62,4,62,1294,8,62,11,62,12,62,1295,1,62,1,62,3,62,1300,
		8,62,1,63,1,63,1,63,1,63,3,63,1306,8,63,1,63,5,63,1309,8,63,10,63,12,63,
		1312,9,63,1,63,1,63,3,63,1316,8,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,
		1,66,1,66,5,66,1327,8,66,10,66,12,66,1330,9,66,1,66,1,66,1,66,1,67,1,67,
		5,67,1337,8,67,10,67,12,67,1340,9,67,1,67,1,67,5,67,1344,8,67,10,67,12,
		67,1347,9,67,1,67,1,67,1,68,3,68,1352,8,68,1,68,1,68,1,68,1,68,3,68,1358,
		8,68,1,69,1,69,3,69,1362,8,69,1,69,3,69,1365,8,69,1,70,1,70,5,70,1369,
		8,70,10,70,12,70,1372,9,70,1,70,1,70,5,70,1376,8,70,10,70,12,70,1379,9,
		70,3,70,1381,8,70,1,70,1,70,1,71,1,71,5,71,1387,8,71,10,71,12,71,1390,
		9,71,1,71,1,71,5,71,1394,8,71,10,71,12,71,1397,9,71,1,71,1,71,1,72,5,72,
		1402,8,72,10,72,12,72,1405,9,72,1,72,5,72,1408,8,72,10,72,12,72,1411,9,
		72,1,72,1,72,5,72,1415,8,72,10,72,12,72,1418,9,72,1,72,1,72,3,72,1422,
		8,72,5,72,1424,8,72,10,72,12,72,1427,9,72,1,73,1,73,1,73,1,73,1,74,1,74,
		5,74,1435,8,74,10,74,12,74,1438,9,74,1,74,1,74,5,74,1442,8,74,10,74,12,
		74,1445,9,74,1,74,1,74,1,75,1,75,1,75,1,75,3,75,1453,8,75,1,76,1,76,1,
		76,1,76,1,77,1,77,5,77,1461,8,77,10,77,12,77,1464,9,77,1,77,1,77,3,77,
		1468,8,77,5,77,1470,8,77,10,77,12,77,1473,9,77,1,77,5,77,1476,8,77,10,
		77,12,77,1479,9,77,1,77,1,77,3,77,1483,8,77,4,77,1485,8,77,11,77,12,77,
		1486,3,77,1489,8,77,1,78,1,78,3,78,1493,8,78,1,79,1,79,5,79,1497,8,79,
		10,79,12,79,1500,9,79,1,79,1,79,5,79,1504,8,79,10,79,12,79,1507,9,79,1,
		80,1,80,5,80,1511,8,80,10,80,12,80,1514,9,80,1,80,1,80,5,80,1518,8,80,
		10,80,12,80,1521,9,80,3,80,1523,8,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,5,81,1536,8,81,10,81,12,81,1539,9,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,5,81,1548,8,81,10,81,12,81,1551,9,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,5,81,1560,8,81,10,81,12,81,1563,9,81,1,81,1,81,1,81,
		3,81,1568,8,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,1576,8,81,10,81,12,81,
		1579,9,81,1,81,1,81,1,81,1,81,5,81,1585,8,81,10,81,12,81,1588,9,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,5,81,1597,8,81,10,81,12,81,1600,9,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,4,81,1612,8,81,11,81,12,81,
		1613,3,81,1616,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,5,81,1630,8,81,10,81,12,81,1633,9,81,1,81,1,81,5,81,1637,8,81,
		10,81,12,81,1640,9,81,1,81,1,81,1,81,1,81,3,81,1646,8,81,1,81,1,81,1,81,
		1,81,3,81,1652,8,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,1660,8,81,10,81,
		12,81,1663,9,81,1,81,1,81,5,81,1667,8,81,10,81,12,81,1670,9,81,1,81,1,
		81,5,81,1674,8,81,10,81,12,81,1677,9,81,1,81,1,81,5,81,1681,8,81,10,81,
		12,81,1684,9,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,
		1696,8,81,10,81,12,81,1699,9,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,5,82,1710,8,82,10,82,12,82,1713,9,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,5,82,1722,8,82,10,82,12,82,1725,9,82,1,82,1,82,3,82,1729,8,82,1,82,
		1,82,1,82,1,82,1,82,1,82,5,82,1737,8,82,10,82,12,82,1740,9,82,1,82,1,82,
		1,82,1,82,5,82,1746,8,82,10,82,12,82,1749,9,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,5,82,1758,8,82,10,82,12,82,1761,9,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,4,82,1773,8,82,11,82,12,82,1774,3,82,1777,8,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1791,
		8,82,10,82,12,82,1794,9,82,1,82,1,82,5,82,1798,8,82,10,82,12,82,1801,9,
		82,1,82,1,82,1,82,1,82,3,82,1807,8,82,1,82,1,82,1,82,1,82,3,82,1813,8,
		82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1821,8,82,10,82,12,82,1824,9,82,
		1,82,1,82,5,82,1828,8,82,10,82,12,82,1831,9,82,1,82,1,82,5,82,1835,8,82,
		10,82,12,82,1838,9,82,1,82,1,82,5,82,1842,8,82,10,82,12,82,1845,9,82,1,
		82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1857,8,82,10,82,12,
		82,1860,9,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
		83,1,83,3,83,1875,8,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1883,8,83,1,
		83,1,83,1,83,3,83,1888,8,83,1,83,5,83,1891,8,83,10,83,12,83,1894,9,83,
		1,84,4,84,1897,8,84,11,84,12,84,1898,1,84,1,84,1,84,5,84,1904,8,84,10,
		84,12,84,1907,9,84,1,84,5,84,1910,8,84,10,84,12,84,1913,9,84,1,84,1,84,
		5,84,1917,8,84,10,84,12,84,1920,9,84,3,84,1922,8,84,1,85,1,85,1,85,1,85,
		3,85,1928,8,85,1,86,1,86,1,86,1,86,5,86,1934,8,86,10,86,12,86,1937,9,86,
		1,86,1,86,1,86,5,86,1942,8,86,10,86,12,86,1945,9,86,3,86,1947,8,86,1,87,
		1,87,1,87,1,88,1,88,1,89,1,89,5,89,1956,8,89,10,89,12,89,1959,9,89,1,89,
		1,89,5,89,1963,8,89,10,89,12,89,1966,9,89,1,89,1,89,5,89,1970,8,89,10,
		89,12,89,1973,9,89,1,89,5,89,1976,8,89,10,89,12,89,1979,9,89,3,89,1981,
		8,89,1,89,1,89,1,90,3,90,1986,8,90,1,90,1,90,1,90,3,90,1991,8,90,1,90,
		1,90,1,91,1,91,5,91,1997,8,91,10,91,12,91,2000,9,91,4,91,2002,8,91,11,
		91,12,91,2003,1,92,1,92,3,92,2008,8,92,1,92,1,92,3,92,2012,8,92,1,92,3,
		92,2015,8,92,1,93,3,93,2018,8,93,1,93,3,93,2021,8,93,1,93,1,93,3,93,2025,
		8,93,1,93,3,93,2028,8,93,1,93,1,93,3,93,2032,8,93,1,93,3,93,2035,8,93,
		1,94,1,94,1,94,5,94,2040,8,94,10,94,12,94,2043,9,94,1,94,1,94,5,94,2047,
		8,94,10,94,12,94,2050,9,94,1,94,3,94,2053,8,94,1,94,3,94,2056,8,94,1,95,
		1,95,1,96,1,96,1,96,1,96,3,96,2064,8,96,1,97,1,97,1,98,1,98,1,99,1,99,
		1,100,1,100,1,100,1,101,1,101,1,101,1,102,1,102,3,102,2080,8,102,1,103,
		1,103,1,104,1,104,1,104,1,104,3,104,2088,8,104,1,105,1,105,1,106,1,106,
		1,107,1,107,1,107,0,3,162,164,166,108,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
		116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
		152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
		188,190,192,194,196,198,200,202,204,206,208,210,212,214,0,22,1,0,140,141,
		1,0,126,128,3,0,106,106,125,125,134,134,1,0,22,23,1,0,136,137,2,0,15,15,
		28,28,1,0,28,30,1,0,24,25,1,0,35,37,1,0,38,41,1,0,42,45,3,0,83,83,104,
		104,107,108,2,0,16,16,20,20,2,0,124,124,126,126,2,0,14,14,52,66,2,0,68,
		69,135,135,1,0,70,71,1,0,72,76,1,0,77,80,6,0,86,86,100,100,113,114,116,
		119,122,123,134,134,9,0,69,69,81,85,87,93,98,99,101,112,115,115,118,118,
		120,121,123,128,1,1,136,136,2382,0,220,1,0,0,0,2,223,1,0,0,0,4,247,1,0,
		0,0,6,268,1,0,0,0,8,270,1,0,0,0,10,272,1,0,0,0,12,297,1,0,0,0,14,299,1,
		0,0,0,16,343,1,0,0,0,18,345,1,0,0,0,20,360,1,0,0,0,22,364,1,0,0,0,24,374,
		1,0,0,0,26,383,1,0,0,0,28,392,1,0,0,0,30,411,1,0,0,0,32,413,1,0,0,0,34,
		442,1,0,0,0,36,449,1,0,0,0,38,451,1,0,0,0,40,453,1,0,0,0,42,464,1,0,0,
		0,44,470,1,0,0,0,46,473,1,0,0,0,48,489,1,0,0,0,50,498,1,0,0,0,52,500,1,
		0,0,0,54,529,1,0,0,0,56,536,1,0,0,0,58,538,1,0,0,0,60,552,1,0,0,0,62,559,
		1,0,0,0,64,568,1,0,0,0,66,571,1,0,0,0,68,595,1,0,0,0,70,607,1,0,0,0,72,
		619,1,0,0,0,74,795,1,0,0,0,76,864,1,0,0,0,78,866,1,0,0,0,80,880,1,0,0,
		0,82,894,1,0,0,0,84,904,1,0,0,0,86,914,1,0,0,0,88,942,1,0,0,0,90,961,1,
		0,0,0,92,965,1,0,0,0,94,990,1,0,0,0,96,1008,1,0,0,0,98,1030,1,0,0,0,100,
		1032,1,0,0,0,102,1042,1,0,0,0,104,1059,1,0,0,0,106,1153,1,0,0,0,108,1155,
		1,0,0,0,110,1179,1,0,0,0,112,1181,1,0,0,0,114,1184,1,0,0,0,116,1214,1,
		0,0,0,118,1222,1,0,0,0,120,1269,1,0,0,0,122,1271,1,0,0,0,124,1299,1,0,
		0,0,126,1315,1,0,0,0,128,1317,1,0,0,0,130,1320,1,0,0,0,132,1323,1,0,0,
		0,134,1345,1,0,0,0,136,1351,1,0,0,0,138,1364,1,0,0,0,140,1366,1,0,0,0,
		142,1384,1,0,0,0,144,1409,1,0,0,0,146,1428,1,0,0,0,148,1432,1,0,0,0,150,
		1452,1,0,0,0,152,1454,1,0,0,0,154,1488,1,0,0,0,156,1490,1,0,0,0,158,1494,
		1,0,0,0,160,1508,1,0,0,0,162,1567,1,0,0,0,164,1728,1,0,0,0,166,1874,1,
		0,0,0,168,1921,1,0,0,0,170,1927,1,0,0,0,172,1946,1,0,0,0,174,1948,1,0,
		0,0,176,1951,1,0,0,0,178,1953,1,0,0,0,180,1985,1,0,0,0,182,2001,1,0,0,
		0,184,2014,1,0,0,0,186,2034,1,0,0,0,188,2055,1,0,0,0,190,2057,1,0,0,0,
		192,2063,1,0,0,0,194,2065,1,0,0,0,196,2067,1,0,0,0,198,2069,1,0,0,0,200,
		2071,1,0,0,0,202,2074,1,0,0,0,204,2079,1,0,0,0,206,2081,1,0,0,0,208,2087,
		1,0,0,0,210,2089,1,0,0,0,212,2091,1,0,0,0,214,2093,1,0,0,0,216,217,3,2,
		1,0,217,218,5,0,0,1,218,221,1,0,0,0,219,221,5,0,0,1,220,216,1,0,0,0,220,
		219,1,0,0,0,221,1,1,0,0,0,222,224,3,4,2,0,223,222,1,0,0,0,224,225,1,0,
		0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,3,1,0,0,0,227,228,3,114,57,0,228,
		229,3,214,107,0,229,248,1,0,0,0,230,231,3,6,3,0,231,232,3,214,107,0,232,
		248,1,0,0,0,233,234,3,8,4,0,234,235,3,214,107,0,235,248,1,0,0,0,236,237,
		3,10,5,0,237,238,3,214,107,0,238,248,1,0,0,0,239,240,3,14,7,0,240,241,
		3,214,107,0,241,248,1,0,0,0,242,243,3,16,8,0,243,244,3,214,107,0,244,248,
		1,0,0,0,245,248,5,137,0,0,246,248,5,136,0,0,247,227,1,0,0,0,247,230,1,
		0,0,0,247,233,1,0,0,0,247,236,1,0,0,0,247,239,1,0,0,0,247,242,1,0,0,0,
		247,245,1,0,0,0,247,246,1,0,0,0,248,5,1,0,0,0,249,251,5,129,0,0,250,252,
		3,164,82,0,251,250,1,0,0,0,251,252,1,0,0,0,252,269,1,0,0,0,253,269,5,133,
		0,0,254,256,5,130,0,0,255,257,3,196,98,0,256,255,1,0,0,0,256,257,1,0,0,
		0,257,269,1,0,0,0,258,261,5,132,0,0,259,262,3,196,98,0,260,262,3,194,97,
		0,261,259,1,0,0,0,261,260,1,0,0,0,261,262,1,0,0,0,262,269,1,0,0,0,263,
		266,5,131,0,0,264,267,3,196,98,0,265,267,3,194,97,0,266,264,1,0,0,0,266,
		265,1,0,0,0,266,267,1,0,0,0,267,269,1,0,0,0,268,249,1,0,0,0,268,253,1,
		0,0,0,268,254,1,0,0,0,268,258,1,0,0,0,268,263,1,0,0,0,269,7,1,0,0,0,270,
		271,5,5,0,0,271,9,1,0,0,0,272,277,5,4,0,0,273,274,5,136,0,0,274,276,5,
		4,0,0,275,273,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,
		278,283,1,0,0,0,279,277,1,0,0,0,280,282,5,137,0,0,281,280,1,0,0,0,282,
		285,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,295,1,0,0,0,285,283,1,
		0,0,0,286,296,3,12,6,0,287,289,5,136,0,0,288,287,1,0,0,0,288,289,1,0,0,
		0,289,290,1,0,0,0,290,296,3,112,56,0,291,293,5,136,0,0,292,291,1,0,0,0,
		292,293,1,0,0,0,293,294,1,0,0,0,294,296,3,16,8,0,295,286,1,0,0,0,295,288,
		1,0,0,0,295,292,1,0,0,0,296,11,1,0,0,0,297,298,7,0,0,0,298,13,1,0,0,0,
		299,304,5,6,0,0,300,301,5,136,0,0,301,303,5,6,0,0,302,300,1,0,0,0,303,
		306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,310,1,0,0,0,306,304,1,
		0,0,0,307,309,3,212,106,0,308,307,1,0,0,0,309,312,1,0,0,0,310,308,1,0,
		0,0,310,311,1,0,0,0,311,315,1,0,0,0,312,310,1,0,0,0,313,316,3,112,56,0,
		314,316,3,16,8,0,315,313,1,0,0,0,315,314,1,0,0,0,316,15,1,0,0,0,317,344,
		3,22,11,0,318,344,3,66,33,0,319,323,3,96,48,0,320,322,3,212,106,0,321,
		320,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,327,1,
		0,0,0,325,323,1,0,0,0,326,319,1,0,0,0,326,327,1,0,0,0,327,328,1,0,0,0,
		328,344,3,74,37,0,329,344,3,64,32,0,330,344,3,62,31,0,331,344,3,78,39,
		0,332,344,3,80,40,0,333,344,3,82,41,0,334,344,3,84,42,0,335,344,3,96,48,
		0,336,344,3,98,49,0,337,344,3,86,43,0,338,344,3,100,50,0,339,344,3,102,
		51,0,340,344,3,24,12,0,341,344,3,26,13,0,342,344,3,18,9,0,343,317,1,0,
		0,0,343,318,1,0,0,0,343,326,1,0,0,0,343,329,1,0,0,0,343,330,1,0,0,0,343,
		331,1,0,0,0,343,332,1,0,0,0,343,333,1,0,0,0,343,334,1,0,0,0,343,335,1,
		0,0,0,343,336,1,0,0,0,343,337,1,0,0,0,343,338,1,0,0,0,343,339,1,0,0,0,
		343,340,1,0,0,0,343,341,1,0,0,0,343,342,1,0,0,0,344,17,1,0,0,0,345,349,
		5,11,0,0,346,348,3,212,106,0,347,346,1,0,0,0,348,351,1,0,0,0,349,347,1,
		0,0,0,349,350,1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,352,354,3,20,10,
		0,353,352,1,0,0,0,353,354,1,0,0,0,354,355,1,0,0,0,355,356,5,12,0,0,356,
		19,1,0,0,0,357,358,3,16,8,0,358,359,5,136,0,0,359,361,1,0,0,0,360,357,
		1,0,0,0,361,362,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,21,1,0,0,0,
		364,372,7,1,0,0,365,367,5,137,0,0,366,365,1,0,0,0,367,370,1,0,0,0,368,
		366,1,0,0,0,368,369,1,0,0,0,369,371,1,0,0,0,370,368,1,0,0,0,371,373,3,
		58,29,0,372,368,1,0,0,0,372,373,1,0,0,0,373,23,1,0,0,0,374,378,5,125,0,
		0,375,377,5,137,0,0,376,375,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,
		379,1,0,0,0,379,381,1,0,0,0,380,378,1,0,0,0,381,382,3,164,82,0,382,25,
		1,0,0,0,383,387,5,103,0,0,384,386,5,137,0,0,385,384,1,0,0,0,386,389,1,
		0,0,0,387,385,1,0,0,0,387,388,1,0,0,0,388,390,1,0,0,0,389,387,1,0,0,0,
		390,391,3,164,82,0,391,27,1,0,0,0,392,396,5,121,0,0,393,395,5,137,0,0,
		394,393,1,0,0,0,395,398,1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,399,
		1,0,0,0,398,396,1,0,0,0,399,400,3,30,15,0,400,29,1,0,0,0,401,403,3,40,
		20,0,402,401,1,0,0,0,402,403,1,0,0,0,403,406,1,0,0,0,404,407,3,42,21,0,
		405,407,3,32,16,0,406,404,1,0,0,0,406,405,1,0,0,0,407,408,1,0,0,0,408,
		409,3,44,22,0,409,412,1,0,0,0,410,412,5,135,0,0,411,402,1,0,0,0,411,410,
		1,0,0,0,412,31,1,0,0,0,413,425,5,11,0,0,414,418,3,34,17,0,415,417,5,137,
		0,0,416,415,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,
		421,1,0,0,0,420,418,1,0,0,0,421,422,5,13,0,0,422,424,1,0,0,0,423,414,1,
		0,0,0,424,427,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,438,1,0,0,0,
		427,425,1,0,0,0,428,436,3,34,17,0,429,431,5,137,0,0,430,429,1,0,0,0,431,
		434,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,435,1,0,0,0,434,432,1,
		0,0,0,435,437,5,13,0,0,436,432,1,0,0,0,436,437,1,0,0,0,437,439,1,0,0,0,
		438,428,1,0,0,0,438,439,1,0,0,0,439,440,1,0,0,0,440,441,5,12,0,0,441,33,
		1,0,0,0,442,445,3,36,18,0,443,444,5,123,0,0,444,446,3,38,19,0,445,443,
		1,0,0,0,445,446,1,0,0,0,446,35,1,0,0,0,447,450,3,204,102,0,448,450,5,135,
		0,0,449,447,1,0,0,0,449,448,1,0,0,0,450,37,1,0,0,0,451,452,7,2,0,0,452,
		39,1,0,0,0,453,457,3,46,23,0,454,456,5,137,0,0,455,454,1,0,0,0,456,459,
		1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,457,1,0,0,
		0,460,461,5,13,0,0,461,41,1,0,0,0,462,465,5,28,0,0,463,465,3,204,102,0,
		464,462,1,0,0,0,464,463,1,0,0,0,465,468,1,0,0,0,466,467,5,123,0,0,467,
		469,3,204,102,0,468,466,1,0,0,0,468,469,1,0,0,0,469,43,1,0,0,0,470,471,
		5,122,0,0,471,472,5,135,0,0,472,45,1,0,0,0,473,476,3,204,102,0,474,475,
		5,123,0,0,475,477,3,204,102,0,476,474,1,0,0,0,476,477,1,0,0,0,477,47,1,
		0,0,0,478,480,5,120,0,0,479,481,5,86,0,0,480,479,1,0,0,0,480,481,1,0,0,
		0,481,484,1,0,0,0,482,485,3,50,25,0,483,485,3,56,28,0,484,482,1,0,0,0,
		484,483,1,0,0,0,485,490,1,0,0,0,486,487,5,120,0,0,487,488,5,86,0,0,488,
		490,3,164,82,0,489,478,1,0,0,0,489,486,1,0,0,0,490,49,1,0,0,0,491,492,
		3,42,21,0,492,493,3,44,22,0,493,499,1,0,0,0,494,496,3,52,26,0,495,497,
		3,44,22,0,496,495,1,0,0,0,496,497,1,0,0,0,497,499,1,0,0,0,498,491,1,0,
		0,0,498,494,1,0,0,0,499,51,1,0,0,0,500,512,5,11,0,0,501,505,3,54,27,0,
		502,504,5,137,0,0,503,502,1,0,0,0,504,507,1,0,0,0,505,503,1,0,0,0,505,
		506,1,0,0,0,506,508,1,0,0,0,507,505,1,0,0,0,508,509,5,13,0,0,509,511,1,
		0,0,0,510,501,1,0,0,0,511,514,1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,
		513,525,1,0,0,0,514,512,1,0,0,0,515,523,3,54,27,0,516,518,5,137,0,0,517,
		516,1,0,0,0,518,521,1,0,0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,522,1,
		0,0,0,521,519,1,0,0,0,522,524,5,13,0,0,523,519,1,0,0,0,523,524,1,0,0,0,
		524,526,1,0,0,0,525,515,1,0,0,0,525,526,1,0,0,0,526,527,1,0,0,0,527,528,
		5,12,0,0,528,53,1,0,0,0,529,532,3,36,18,0,530,531,5,123,0,0,531,533,3,
		36,18,0,532,530,1,0,0,0,532,533,1,0,0,0,533,55,1,0,0,0,534,537,3,114,57,
		0,535,537,3,112,56,0,536,534,1,0,0,0,536,535,1,0,0,0,537,57,1,0,0,0,538,
		549,3,60,30,0,539,541,5,137,0,0,540,539,1,0,0,0,541,544,1,0,0,0,542,540,
		1,0,0,0,542,543,1,0,0,0,543,545,1,0,0,0,544,542,1,0,0,0,545,546,5,13,0,
		0,546,548,3,60,30,0,547,542,1,0,0,0,548,551,1,0,0,0,549,547,1,0,0,0,549,
		550,1,0,0,0,550,59,1,0,0,0,551,549,1,0,0,0,552,557,3,176,88,0,553,554,
		3,190,95,0,554,555,3,162,81,0,555,558,1,0,0,0,556,558,7,3,0,0,557,553,
		1,0,0,0,557,556,1,0,0,0,557,558,1,0,0,0,558,61,1,0,0,0,559,566,3,166,83,
		0,560,562,5,137,0,0,561,560,1,0,0,0,562,563,1,0,0,0,563,561,1,0,0,0,563,
		564,1,0,0,0,564,565,1,0,0,0,565,567,3,154,77,0,566,561,1,0,0,0,566,567,
		1,0,0,0,567,63,1,0,0,0,568,569,4,32,0,0,569,570,3,158,79,0,570,65,1,0,
		0,0,571,575,5,101,0,0,572,574,5,137,0,0,573,572,1,0,0,0,574,577,1,0,0,
		0,575,573,1,0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,575,1,0,0,0,578,
		582,3,164,82,0,579,581,5,137,0,0,580,579,1,0,0,0,581,584,1,0,0,0,582,580,
		1,0,0,0,582,583,1,0,0,0,583,585,1,0,0,0,584,582,1,0,0,0,585,586,3,68,34,
		0,586,587,3,72,36,0,587,67,1,0,0,0,588,590,5,136,0,0,589,588,1,0,0,0,590,
		591,1,0,0,0,591,589,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,596,3,
		16,8,0,594,596,3,18,9,0,595,589,1,0,0,0,595,594,1,0,0,0,596,69,1,0,0,0,
		597,598,5,136,0,0,598,602,5,99,0,0,599,601,3,212,106,0,600,599,1,0,0,0,
		601,604,1,0,0,0,602,600,1,0,0,0,602,603,1,0,0,0,603,605,1,0,0,0,604,602,
		1,0,0,0,605,608,3,164,82,0,606,608,4,35,1,0,607,597,1,0,0,0,607,606,1,
		0,0,0,608,71,1,0,0,0,609,610,5,136,0,0,610,614,5,87,0,0,611,613,3,212,
		106,0,612,611,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,614,615,1,0,0,0,
		615,617,1,0,0,0,616,614,1,0,0,0,617,620,3,16,8,0,618,620,4,36,2,0,619,
		609,1,0,0,0,619,618,1,0,0,0,620,73,1,0,0,0,621,625,5,98,0,0,622,624,5,
		137,0,0,623,622,1,0,0,0,624,627,1,0,0,0,625,623,1,0,0,0,625,626,1,0,0,
		0,626,636,1,0,0,0,627,625,1,0,0,0,628,629,4,37,3,0,629,633,3,164,82,0,
		630,632,5,137,0,0,631,630,1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,
		634,1,0,0,0,634,637,1,0,0,0,635,633,1,0,0,0,636,628,1,0,0,0,636,637,1,
		0,0,0,637,638,1,0,0,0,638,639,3,68,34,0,639,640,3,70,35,0,640,641,3,72,
		36,0,641,796,1,0,0,0,642,646,5,97,0,0,643,645,5,137,0,0,644,643,1,0,0,
		0,645,648,1,0,0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,649,1,0,0,0,648,
		646,1,0,0,0,649,658,3,164,82,0,650,652,5,137,0,0,651,650,1,0,0,0,652,655,
		1,0,0,0,653,651,1,0,0,0,653,654,1,0,0,0,654,656,1,0,0,0,655,653,1,0,0,
		0,656,657,5,13,0,0,657,659,3,164,82,0,658,653,1,0,0,0,658,659,1,0,0,0,
		659,663,1,0,0,0,660,662,5,137,0,0,661,660,1,0,0,0,662,665,1,0,0,0,663,
		661,1,0,0,0,663,664,1,0,0,0,664,666,1,0,0,0,665,663,1,0,0,0,666,667,3,
		68,34,0,667,668,3,70,35,0,668,669,3,72,36,0,669,796,1,0,0,0,670,674,5,
		96,0,0,671,673,5,137,0,0,672,671,1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,
		0,674,675,1,0,0,0,675,677,1,0,0,0,676,674,1,0,0,0,677,686,3,164,82,0,678,
		680,5,137,0,0,679,678,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,681,682,
		1,0,0,0,682,684,1,0,0,0,683,681,1,0,0,0,684,685,5,13,0,0,685,687,3,164,
		82,0,686,681,1,0,0,0,686,687,1,0,0,0,687,691,1,0,0,0,688,690,5,137,0,0,
		689,688,1,0,0,0,690,693,1,0,0,0,691,689,1,0,0,0,691,692,1,0,0,0,692,694,
		1,0,0,0,693,691,1,0,0,0,694,695,3,68,34,0,695,696,3,70,35,0,696,697,3,
		72,36,0,697,796,1,0,0,0,698,702,5,95,0,0,699,701,5,137,0,0,700,699,1,0,
		0,0,701,704,1,0,0,0,702,700,1,0,0,0,702,703,1,0,0,0,703,705,1,0,0,0,704,
		702,1,0,0,0,705,714,3,164,82,0,706,708,5,137,0,0,707,706,1,0,0,0,708,711,
		1,0,0,0,709,707,1,0,0,0,709,710,1,0,0,0,710,712,1,0,0,0,711,709,1,0,0,
		0,712,713,5,13,0,0,713,715,3,164,82,0,714,709,1,0,0,0,714,715,1,0,0,0,
		715,719,1,0,0,0,716,718,5,137,0,0,717,716,1,0,0,0,718,721,1,0,0,0,719,
		717,1,0,0,0,719,720,1,0,0,0,720,722,1,0,0,0,721,719,1,0,0,0,722,723,3,
		68,34,0,723,724,3,70,35,0,724,725,3,72,36,0,725,796,1,0,0,0,726,730,5,
		94,0,0,727,729,5,137,0,0,728,727,1,0,0,0,729,732,1,0,0,0,730,728,1,0,0,
		0,730,731,1,0,0,0,731,733,1,0,0,0,732,730,1,0,0,0,733,746,3,164,82,0,734,
		736,5,137,0,0,735,734,1,0,0,0,736,739,1,0,0,0,737,735,1,0,0,0,737,738,
		1,0,0,0,738,740,1,0,0,0,739,737,1,0,0,0,740,742,5,13,0,0,741,743,3,164,
		82,0,742,741,1,0,0,0,742,743,1,0,0,0,743,745,1,0,0,0,744,737,1,0,0,0,745,
		748,1,0,0,0,746,744,1,0,0,0,746,747,1,0,0,0,747,752,1,0,0,0,748,746,1,
		0,0,0,749,751,5,137,0,0,750,749,1,0,0,0,751,754,1,0,0,0,752,750,1,0,0,
		0,752,753,1,0,0,0,753,755,1,0,0,0,754,752,1,0,0,0,755,756,3,68,34,0,756,
		757,3,70,35,0,757,758,3,72,36,0,758,796,1,0,0,0,759,763,5,93,0,0,760,762,
		5,137,0,0,761,760,1,0,0,0,762,765,1,0,0,0,763,761,1,0,0,0,763,764,1,0,
		0,0,764,766,1,0,0,0,765,763,1,0,0,0,766,770,3,164,82,0,767,769,5,137,0,
		0,768,767,1,0,0,0,769,772,1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,771,
		773,1,0,0,0,772,770,1,0,0,0,773,774,3,68,34,0,774,775,3,70,35,0,775,776,
		3,72,36,0,776,796,1,0,0,0,777,781,5,92,0,0,778,780,5,137,0,0,779,778,1,
		0,0,0,780,783,1,0,0,0,781,779,1,0,0,0,781,782,1,0,0,0,782,784,1,0,0,0,
		783,781,1,0,0,0,784,788,3,76,38,0,785,787,5,137,0,0,786,785,1,0,0,0,787,
		790,1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,791,1,0,0,0,790,788,1,
		0,0,0,791,792,3,68,34,0,792,793,3,70,35,0,793,794,3,72,36,0,794,796,1,
		0,0,0,795,621,1,0,0,0,795,642,1,0,0,0,795,670,1,0,0,0,795,698,1,0,0,0,
		795,726,1,0,0,0,795,759,1,0,0,0,795,777,1,0,0,0,796,75,1,0,0,0,797,799,
		3,176,88,0,798,797,1,0,0,0,798,799,1,0,0,0,799,812,1,0,0,0,800,802,5,137,
		0,0,801,800,1,0,0,0,802,805,1,0,0,0,803,801,1,0,0,0,803,804,1,0,0,0,804,
		806,1,0,0,0,805,803,1,0,0,0,806,808,5,13,0,0,807,809,3,176,88,0,808,807,
		1,0,0,0,808,809,1,0,0,0,809,811,1,0,0,0,810,803,1,0,0,0,811,814,1,0,0,
		0,812,810,1,0,0,0,812,813,1,0,0,0,813,818,1,0,0,0,814,812,1,0,0,0,815,
		817,5,137,0,0,816,815,1,0,0,0,817,820,1,0,0,0,818,816,1,0,0,0,818,819,
		1,0,0,0,819,821,1,0,0,0,820,818,1,0,0,0,821,825,5,104,0,0,822,824,5,137,
		0,0,823,822,1,0,0,0,824,827,1,0,0,0,825,823,1,0,0,0,825,826,1,0,0,0,826,
		828,1,0,0,0,827,825,1,0,0,0,828,865,3,164,82,0,829,831,5,9,0,0,830,832,
		3,176,88,0,831,830,1,0,0,0,831,832,1,0,0,0,832,845,1,0,0,0,833,835,5,137,
		0,0,834,833,1,0,0,0,835,838,1,0,0,0,836,834,1,0,0,0,836,837,1,0,0,0,837,
		839,1,0,0,0,838,836,1,0,0,0,839,841,5,13,0,0,840,842,3,176,88,0,841,840,
		1,0,0,0,841,842,1,0,0,0,842,844,1,0,0,0,843,836,1,0,0,0,844,847,1,0,0,
		0,845,843,1,0,0,0,845,846,1,0,0,0,846,851,1,0,0,0,847,845,1,0,0,0,848,
		850,7,4,0,0,849,848,1,0,0,0,850,853,1,0,0,0,851,849,1,0,0,0,851,852,1,
		0,0,0,852,854,1,0,0,0,853,851,1,0,0,0,854,858,5,104,0,0,855,857,7,4,0,
		0,856,855,1,0,0,0,857,860,1,0,0,0,858,856,1,0,0,0,858,859,1,0,0,0,859,
		861,1,0,0,0,860,858,1,0,0,0,861,862,3,164,82,0,862,863,5,10,0,0,863,865,
		1,0,0,0,864,798,1,0,0,0,864,829,1,0,0,0,865,77,1,0,0,0,866,870,5,91,0,
		0,867,869,5,137,0,0,868,867,1,0,0,0,869,872,1,0,0,0,870,868,1,0,0,0,870,
		871,1,0,0,0,871,878,1,0,0,0,872,870,1,0,0,0,873,879,3,150,75,0,874,875,
		5,9,0,0,875,876,3,150,75,0,876,877,5,10,0,0,877,879,1,0,0,0,878,873,1,
		0,0,0,878,874,1,0,0,0,878,879,1,0,0,0,879,79,1,0,0,0,880,884,5,81,0,0,
		881,883,5,137,0,0,882,881,1,0,0,0,883,886,1,0,0,0,884,882,1,0,0,0,884,
		885,1,0,0,0,885,892,1,0,0,0,886,884,1,0,0,0,887,888,5,9,0,0,888,889,3,
		150,75,0,889,890,5,10,0,0,890,893,1,0,0,0,891,893,3,150,75,0,892,887,1,
		0,0,0,892,891,1,0,0,0,892,893,1,0,0,0,893,81,1,0,0,0,894,898,5,90,0,0,
		895,897,5,137,0,0,896,895,1,0,0,0,897,900,1,0,0,0,898,896,1,0,0,0,898,
		899,1,0,0,0,899,902,1,0,0,0,900,898,1,0,0,0,901,903,3,162,81,0,902,901,
		1,0,0,0,902,903,1,0,0,0,903,83,1,0,0,0,904,908,5,106,0,0,905,907,5,137,
		0,0,906,905,1,0,0,0,907,910,1,0,0,0,908,906,1,0,0,0,908,909,1,0,0,0,909,
		912,1,0,0,0,910,908,1,0,0,0,911,913,3,162,81,0,912,911,1,0,0,0,912,913,
		1,0,0,0,913,85,1,0,0,0,914,918,5,84,0,0,915,917,5,137,0,0,916,915,1,0,
		0,0,917,920,1,0,0,0,918,916,1,0,0,0,918,919,1,0,0,0,919,922,1,0,0,0,920,
		918,1,0,0,0,921,923,3,164,82,0,922,921,1,0,0,0,922,923,1,0,0,0,923,932,
		1,0,0,0,924,926,5,137,0,0,925,924,1,0,0,0,926,929,1,0,0,0,927,925,1,0,
		0,0,927,928,1,0,0,0,928,930,1,0,0,0,929,927,1,0,0,0,930,931,5,13,0,0,931,
		933,3,192,96,0,932,927,1,0,0,0,932,933,1,0,0,0,933,937,1,0,0,0,934,936,
		3,212,106,0,935,934,1,0,0,0,936,939,1,0,0,0,937,935,1,0,0,0,937,938,1,
		0,0,0,938,940,1,0,0,0,939,937,1,0,0,0,940,941,3,88,44,0,941,87,1,0,0,0,
		942,946,5,11,0,0,943,945,3,212,106,0,944,943,1,0,0,0,945,948,1,0,0,0,946,
		944,1,0,0,0,946,947,1,0,0,0,947,950,1,0,0,0,948,946,1,0,0,0,949,951,3,
		90,45,0,950,949,1,0,0,0,950,951,1,0,0,0,951,956,1,0,0,0,952,954,3,94,47,
		0,953,955,3,90,45,0,954,953,1,0,0,0,954,955,1,0,0,0,955,957,1,0,0,0,956,
		952,1,0,0,0,956,957,1,0,0,0,957,958,1,0,0,0,958,959,5,12,0,0,959,89,1,
		0,0,0,960,962,3,92,46,0,961,960,1,0,0,0,962,963,1,0,0,0,963,961,1,0,0,
		0,963,964,1,0,0,0,964,91,1,0,0,0,965,969,5,85,0,0,966,968,5,137,0,0,967,
		966,1,0,0,0,968,971,1,0,0,0,969,967,1,0,0,0,969,970,1,0,0,0,970,972,1,
		0,0,0,971,969,1,0,0,0,972,976,3,158,79,0,973,975,5,137,0,0,974,973,1,0,
		0,0,975,978,1,0,0,0,976,974,1,0,0,0,976,977,1,0,0,0,977,979,1,0,0,0,978,
		976,1,0,0,0,979,988,5,17,0,0,980,982,3,212,106,0,981,980,1,0,0,0,982,985,
		1,0,0,0,983,981,1,0,0,0,983,984,1,0,0,0,984,986,1,0,0,0,985,983,1,0,0,
		0,986,989,3,20,10,0,987,989,5,136,0,0,988,983,1,0,0,0,988,987,1,0,0,0,
		989,93,1,0,0,0,990,994,5,86,0,0,991,993,5,137,0,0,992,991,1,0,0,0,993,
		996,1,0,0,0,994,992,1,0,0,0,994,995,1,0,0,0,995,997,1,0,0,0,996,994,1,
		0,0,0,997,1006,5,17,0,0,998,1000,3,212,106,0,999,998,1,0,0,0,1000,1003,
		1,0,0,0,1001,999,1,0,0,0,1001,1002,1,0,0,0,1002,1004,1,0,0,0,1003,1001,
		1,0,0,0,1004,1007,3,20,10,0,1005,1007,5,136,0,0,1006,1001,1,0,0,0,1006,
		1005,1,0,0,0,1007,95,1,0,0,0,1008,1009,5,134,0,0,1009,1010,5,17,0,0,1010,
		97,1,0,0,0,1011,1015,5,112,0,0,1012,1014,5,137,0,0,1013,1012,1,0,0,0,1014,
		1017,1,0,0,0,1015,1013,1,0,0,0,1015,1016,1,0,0,0,1016,1018,1,0,0,0,1017,
		1015,1,0,0,0,1018,1031,3,150,75,0,1019,1023,5,112,0,0,1020,1022,5,137,
		0,0,1021,1020,1,0,0,0,1022,1025,1,0,0,0,1023,1021,1,0,0,0,1023,1024,1,
		0,0,0,1024,1026,1,0,0,0,1025,1023,1,0,0,0,1026,1027,5,9,0,0,1027,1028,
		3,150,75,0,1028,1029,5,10,0,0,1029,1031,1,0,0,0,1030,1011,1,0,0,0,1030,
		1019,1,0,0,0,1031,99,1,0,0,0,1032,1036,5,102,0,0,1033,1035,5,137,0,0,1034,
		1033,1,0,0,0,1035,1038,1,0,0,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,
		1040,1,0,0,0,1038,1036,1,0,0,0,1039,1041,3,164,82,0,1040,1039,1,0,0,0,
		1040,1041,1,0,0,0,1041,101,1,0,0,0,1042,1046,5,105,0,0,1043,1045,3,212,
		106,0,1044,1043,1,0,0,0,1045,1048,1,0,0,0,1046,1044,1,0,0,0,1046,1047,
		1,0,0,0,1047,1049,1,0,0,0,1048,1046,1,0,0,0,1049,1053,3,16,8,0,1050,1052,
		3,104,52,0,1051,1050,1,0,0,0,1052,1055,1,0,0,0,1053,1051,1,0,0,0,1053,
		1054,1,0,0,0,1054,1056,1,0,0,0,1055,1053,1,0,0,0,1056,1057,3,72,36,0,1057,
		1058,3,110,55,0,1058,103,1,0,0,0,1059,1060,5,136,0,0,1060,1064,5,88,0,
		0,1061,1063,5,137,0,0,1062,1061,1,0,0,0,1063,1066,1,0,0,0,1064,1062,1,
		0,0,0,1064,1065,1,0,0,0,1065,1074,1,0,0,0,1066,1064,1,0,0,0,1067,1071,
		3,106,53,0,1068,1070,5,137,0,0,1069,1068,1,0,0,0,1070,1073,1,0,0,0,1071,
		1069,1,0,0,0,1071,1072,1,0,0,0,1072,1075,1,0,0,0,1073,1071,1,0,0,0,1074,
		1067,1,0,0,0,1074,1075,1,0,0,0,1075,1076,1,0,0,0,1076,1077,3,68,34,0,1077,
		105,1,0,0,0,1078,1086,3,108,54,0,1079,1081,5,137,0,0,1080,1079,1,0,0,0,
		1081,1084,1,0,0,0,1082,1080,1,0,0,0,1082,1083,1,0,0,0,1083,1085,1,0,0,
		0,1084,1082,1,0,0,0,1085,1087,5,123,0,0,1086,1082,1,0,0,0,1086,1087,1,
		0,0,0,1087,1095,1,0,0,0,1088,1090,5,137,0,0,1089,1088,1,0,0,0,1090,1093,
		1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,0,1092,1094,1,0,0,0,1093,1091,
		1,0,0,0,1094,1096,3,206,103,0,1095,1091,1,0,0,0,1095,1096,1,0,0,0,1096,
		1154,1,0,0,0,1097,1098,5,9,0,0,1098,1106,3,108,54,0,1099,1101,5,137,0,
		0,1100,1099,1,0,0,0,1101,1104,1,0,0,0,1102,1100,1,0,0,0,1102,1103,1,0,
		0,0,1103,1105,1,0,0,0,1104,1102,1,0,0,0,1105,1107,5,123,0,0,1106,1102,
		1,0,0,0,1106,1107,1,0,0,0,1107,1115,1,0,0,0,1108,1110,5,137,0,0,1109,1108,
		1,0,0,0,1110,1113,1,0,0,0,1111,1109,1,0,0,0,1111,1112,1,0,0,0,1112,1114,
		1,0,0,0,1113,1111,1,0,0,0,1114,1116,3,206,103,0,1115,1111,1,0,0,0,1115,
		1116,1,0,0,0,1116,1117,1,0,0,0,1117,1118,5,10,0,0,1118,1154,1,0,0,0,1119,
		1121,5,137,0,0,1120,1119,1,0,0,0,1121,1124,1,0,0,0,1122,1120,1,0,0,0,1122,
		1123,1,0,0,0,1123,1125,1,0,0,0,1124,1122,1,0,0,0,1125,1126,5,123,0,0,1126,
		1130,1,0,0,0,1127,1129,5,137,0,0,1128,1127,1,0,0,0,1129,1132,1,0,0,0,1130,
		1128,1,0,0,0,1130,1131,1,0,0,0,1131,1133,1,0,0,0,1132,1130,1,0,0,0,1133,
		1154,3,206,103,0,1134,1138,5,9,0,0,1135,1137,5,137,0,0,1136,1135,1,0,0,
		0,1137,1140,1,0,0,0,1138,1136,1,0,0,0,1138,1139,1,0,0,0,1139,1141,1,0,
		0,0,1140,1138,1,0,0,0,1141,1142,5,123,0,0,1142,1146,1,0,0,0,1143,1145,
		5,137,0,0,1144,1143,1,0,0,0,1145,1148,1,0,0,0,1146,1144,1,0,0,0,1146,1147,
		1,0,0,0,1147,1149,1,0,0,0,1148,1146,1,0,0,0,1149,1150,3,206,103,0,1150,
		1151,1,0,0,0,1151,1152,5,10,0,0,1152,1154,1,0,0,0,1153,1078,1,0,0,0,1153,
		1097,1,0,0,0,1153,1122,1,0,0,0,1153,1134,1,0,0,0,1154,107,1,0,0,0,1155,
		1166,3,206,103,0,1156,1158,5,137,0,0,1157,1156,1,0,0,0,1158,1161,1,0,0,
		0,1159,1157,1,0,0,0,1159,1160,1,0,0,0,1160,1162,1,0,0,0,1161,1159,1,0,
		0,0,1162,1163,5,13,0,0,1163,1165,3,206,103,0,1164,1159,1,0,0,0,1165,1168,
		1,0,0,0,1166,1164,1,0,0,0,1166,1167,1,0,0,0,1167,109,1,0,0,0,1168,1166,
		1,0,0,0,1169,1170,5,136,0,0,1170,1174,5,89,0,0,1171,1173,3,212,106,0,1172,
		1171,1,0,0,0,1173,1176,1,0,0,0,1174,1172,1,0,0,0,1174,1175,1,0,0,0,1175,
		1177,1,0,0,0,1176,1174,1,0,0,0,1177,1180,3,16,8,0,1178,1180,4,55,4,0,1179,
		1169,1,0,0,0,1179,1178,1,0,0,0,1180,111,1,0,0,0,1181,1182,3,180,90,0,1182,
		1183,3,188,94,0,1183,113,1,0,0,0,1184,1188,5,115,0,0,1185,1187,5,137,0,
		0,1186,1185,1,0,0,0,1187,1190,1,0,0,0,1188,1186,1,0,0,0,1188,1189,1,0,
		0,0,1189,1191,1,0,0,0,1190,1188,1,0,0,0,1191,1204,3,206,103,0,1192,1194,
		5,137,0,0,1193,1192,1,0,0,0,1194,1195,1,0,0,0,1195,1193,1,0,0,0,1195,1196,
		1,0,0,0,1196,1197,1,0,0,0,1197,1199,5,117,0,0,1198,1200,5,137,0,0,1199,
		1198,1,0,0,0,1200,1201,1,0,0,0,1201,1199,1,0,0,0,1201,1202,1,0,0,0,1202,
		1203,1,0,0,0,1203,1205,3,116,58,0,1204,1193,1,0,0,0,1204,1205,1,0,0,0,
		1205,1209,1,0,0,0,1206,1208,3,212,106,0,1207,1206,1,0,0,0,1208,1211,1,
		0,0,0,1209,1207,1,0,0,0,1209,1210,1,0,0,0,1210,1212,1,0,0,0,1211,1209,
		1,0,0,0,1212,1213,3,118,59,0,1213,115,1,0,0,0,1214,1219,3,206,103,0,1215,
		1216,5,20,0,0,1216,1218,3,206,103,0,1217,1215,1,0,0,0,1218,1221,1,0,0,
		0,1219,1217,1,0,0,0,1219,1220,1,0,0,0,1220,117,1,0,0,0,1221,1219,1,0,0,
		0,1222,1229,5,11,0,0,1223,1224,3,120,60,0,1224,1225,5,136,0,0,1225,1228,
		1,0,0,0,1226,1228,5,136,0,0,1227,1223,1,0,0,0,1227,1226,1,0,0,0,1228,1231,
		1,0,0,0,1229,1227,1,0,0,0,1229,1230,1,0,0,0,1230,1232,1,0,0,0,1231,1229,
		1,0,0,0,1232,1233,5,12,0,0,1233,119,1,0,0,0,1234,1270,3,122,61,0,1235,
		1239,5,126,0,0,1236,1238,5,137,0,0,1237,1236,1,0,0,0,1238,1241,1,0,0,0,
		1239,1237,1,0,0,0,1239,1240,1,0,0,0,1240,1243,1,0,0,0,1241,1239,1,0,0,
		0,1242,1235,1,0,0,0,1242,1243,1,0,0,0,1243,1244,1,0,0,0,1244,1270,3,124,
		62,0,1245,1249,5,126,0,0,1246,1248,5,137,0,0,1247,1246,1,0,0,0,1248,1251,
		1,0,0,0,1249,1247,1,0,0,0,1249,1250,1,0,0,0,1250,1253,1,0,0,0,1251,1249,
		1,0,0,0,1252,1245,1,0,0,0,1252,1253,1,0,0,0,1253,1254,1,0,0,0,1254,1265,
		3,132,66,0,1255,1257,5,137,0,0,1256,1255,1,0,0,0,1257,1260,1,0,0,0,1258,
		1256,1,0,0,0,1258,1259,1,0,0,0,1259,1261,1,0,0,0,1260,1258,1,0,0,0,1261,
		1262,5,13,0,0,1262,1264,3,132,66,0,1263,1258,1,0,0,0,1264,1267,1,0,0,0,
		1265,1263,1,0,0,0,1265,1266,1,0,0,0,1266,1270,1,0,0,0,1267,1265,1,0,0,
		0,1268,1270,3,114,57,0,1269,1234,1,0,0,0,1269,1242,1,0,0,0,1269,1252,1,
		0,0,0,1269,1268,1,0,0,0,1270,121,1,0,0,0,1271,1272,3,180,90,0,1272,1273,
		3,188,94,0,1273,123,1,0,0,0,1274,1275,3,126,63,0,1275,1276,5,67,0,0,1276,
		1277,3,162,81,0,1277,1300,1,0,0,0,1278,1282,3,126,63,0,1279,1281,3,212,
		106,0,1280,1279,1,0,0,0,1281,1284,1,0,0,0,1282,1280,1,0,0,0,1282,1283,
		1,0,0,0,1283,1285,1,0,0,0,1284,1282,1,0,0,0,1285,1293,5,11,0,0,1286,1287,
		3,128,64,0,1287,1288,5,136,0,0,1288,1294,1,0,0,0,1289,1290,3,130,65,0,
		1290,1291,5,136,0,0,1291,1294,1,0,0,0,1292,1294,5,136,0,0,1293,1286,1,
		0,0,0,1293,1289,1,0,0,0,1293,1292,1,0,0,0,1294,1295,1,0,0,0,1295,1293,
		1,0,0,0,1295,1296,1,0,0,0,1296,1297,1,0,0,0,1297,1298,5,12,0,0,1298,1300,
		1,0,0,0,1299,1274,1,0,0,0,1299,1278,1,0,0,0,1300,125,1,0,0,0,1301,1316,
		3,206,103,0,1302,1303,3,206,103,0,1303,1305,5,7,0,0,1304,1306,3,134,67,
		0,1305,1304,1,0,0,0,1305,1306,1,0,0,0,1306,1310,1,0,0,0,1307,1309,3,212,
		106,0,1308,1307,1,0,0,0,1309,1312,1,0,0,0,1310,1308,1,0,0,0,1310,1311,
		1,0,0,0,1311,1313,1,0,0,0,1312,1310,1,0,0,0,1313,1314,5,8,0,0,1314,1316,
		1,0,0,0,1315,1301,1,0,0,0,1315,1302,1,0,0,0,1316,127,1,0,0,0,1317,1318,
		5,113,0,0,1318,1319,3,188,94,0,1319,129,1,0,0,0,1320,1321,5,114,0,0,1321,
		1322,3,188,94,0,1322,131,1,0,0,0,1323,1328,3,150,75,0,1324,1325,5,20,0,
		0,1325,1327,3,150,75,0,1326,1324,1,0,0,0,1327,1330,1,0,0,0,1328,1326,1,
		0,0,0,1328,1329,1,0,0,0,1329,1331,1,0,0,0,1330,1328,1,0,0,0,1331,1332,
		5,14,0,0,1332,1333,3,162,81,0,1333,133,1,0,0,0,1334,1338,3,136,68,0,1335,
		1337,5,137,0,0,1336,1335,1,0,0,0,1337,1340,1,0,0,0,1338,1336,1,0,0,0,1338,
		1339,1,0,0,0,1339,1341,1,0,0,0,1340,1338,1,0,0,0,1341,1342,5,13,0,0,1342,
		1344,1,0,0,0,1343,1334,1,0,0,0,1344,1347,1,0,0,0,1345,1343,1,0,0,0,1345,
		1346,1,0,0,0,1346,1348,1,0,0,0,1347,1345,1,0,0,0,1348,1349,3,138,69,0,
		1349,135,1,0,0,0,1350,1352,5,47,0,0,1351,1350,1,0,0,0,1351,1352,1,0,0,
		0,1352,1353,1,0,0,0,1353,1357,3,206,103,0,1354,1355,5,14,0,0,1355,1358,
		3,162,81,0,1356,1358,5,15,0,0,1357,1354,1,0,0,0,1357,1356,1,0,0,0,1357,
		1358,1,0,0,0,1358,137,1,0,0,0,1359,1365,3,136,68,0,1360,1362,3,206,103,
		0,1361,1360,1,0,0,0,1361,1362,1,0,0,0,1362,1363,1,0,0,0,1363,1365,5,28,
		0,0,1364,1359,1,0,0,0,1364,1361,1,0,0,0,1365,139,1,0,0,0,1366,1370,5,7,
		0,0,1367,1369,7,4,0,0,1368,1367,1,0,0,0,1369,1372,1,0,0,0,1370,1368,1,
		0,0,0,1370,1371,1,0,0,0,1371,1380,1,0,0,0,1372,1370,1,0,0,0,1373,1377,
		3,154,77,0,1374,1376,7,4,0,0,1375,1374,1,0,0,0,1376,1379,1,0,0,0,1377,
		1375,1,0,0,0,1377,1378,1,0,0,0,1378,1381,1,0,0,0,1379,1377,1,0,0,0,1380,
		1373,1,0,0,0,1380,1381,1,0,0,0,1381,1382,1,0,0,0,1382,1383,5,8,0,0,1383,
		141,1,0,0,0,1384,1388,5,7,0,0,1385,1387,7,4,0,0,1386,1385,1,0,0,0,1387,
		1390,1,0,0,0,1388,1386,1,0,0,0,1388,1389,1,0,0,0,1389,1391,1,0,0,0,1390,
		1388,1,0,0,0,1391,1395,3,144,72,0,1392,1394,7,4,0,0,1393,1392,1,0,0,0,
		1394,1397,1,0,0,0,1395,1393,1,0,0,0,1395,1396,1,0,0,0,1396,1398,1,0,0,
		0,1397,1395,1,0,0,0,1398,1399,5,8,0,0,1399,143,1,0,0,0,1400,1402,5,137,
		0,0,1401,1400,1,0,0,0,1402,1405,1,0,0,0,1403,1401,1,0,0,0,1403,1404,1,
		0,0,0,1404,1406,1,0,0,0,1405,1403,1,0,0,0,1406,1408,5,13,0,0,1407,1403,
		1,0,0,0,1408,1411,1,0,0,0,1409,1407,1,0,0,0,1409,1410,1,0,0,0,1410,1412,
		1,0,0,0,1411,1409,1,0,0,0,1412,1425,3,146,73,0,1413,1415,5,137,0,0,1414,
		1413,1,0,0,0,1415,1418,1,0,0,0,1416,1414,1,0,0,0,1416,1417,1,0,0,0,1417,
		1419,1,0,0,0,1418,1416,1,0,0,0,1419,1421,5,13,0,0,1420,1422,3,146,73,0,
		1421,1420,1,0,0,0,1421,1422,1,0,0,0,1422,1424,1,0,0,0,1423,1416,1,0,0,
		0,1424,1427,1,0,0,0,1425,1423,1,0,0,0,1425,1426,1,0,0,0,1426,145,1,0,0,
		0,1427,1425,1,0,0,0,1428,1429,3,162,81,0,1429,1430,5,17,0,0,1430,1431,
		3,162,81,0,1431,147,1,0,0,0,1432,1436,3,170,85,0,1433,1435,7,4,0,0,1434,
		1433,1,0,0,0,1435,1438,1,0,0,0,1436,1434,1,0,0,0,1436,1437,1,0,0,0,1437,
		1439,1,0,0,0,1438,1436,1,0,0,0,1439,1443,5,17,0,0,1440,1442,7,4,0,0,1441,
		1440,1,0,0,0,1442,1445,1,0,0,0,1443,1441,1,0,0,0,1443,1444,1,0,0,0,1444,
		1446,1,0,0,0,1445,1443,1,0,0,0,1446,1447,3,162,81,0,1447,149,1,0,0,0,1448,
		1453,3,206,103,0,1449,1453,3,208,104,0,1450,1453,5,135,0,0,1451,1453,3,
		196,98,0,1452,1448,1,0,0,0,1452,1449,1,0,0,0,1452,1450,1,0,0,0,1452,1451,
		1,0,0,0,1453,151,1,0,0,0,1454,1455,5,1,0,0,1455,1456,3,162,81,0,1456,1457,
		5,2,0,0,1457,153,1,0,0,0,1458,1471,3,156,78,0,1459,1461,5,137,0,0,1460,
		1459,1,0,0,0,1461,1464,1,0,0,0,1462,1460,1,0,0,0,1462,1463,1,0,0,0,1463,
		1465,1,0,0,0,1464,1462,1,0,0,0,1465,1467,5,13,0,0,1466,1468,3,156,78,0,
		1467,1466,1,0,0,0,1467,1468,1,0,0,0,1468,1470,1,0,0,0,1469,1462,1,0,0,
		0,1470,1473,1,0,0,0,1471,1469,1,0,0,0,1471,1472,1,0,0,0,1472,1489,1,0,
		0,0,1473,1471,1,0,0,0,1474,1476,5,137,0,0,1475,1474,1,0,0,0,1476,1479,
		1,0,0,0,1477,1475,1,0,0,0,1477,1478,1,0,0,0,1478,1480,1,0,0,0,1479,1477,
		1,0,0,0,1480,1482,5,13,0,0,1481,1483,3,156,78,0,1482,1481,1,0,0,0,1482,
		1483,1,0,0,0,1483,1485,1,0,0,0,1484,1477,1,0,0,0,1485,1486,1,0,0,0,1486,
		1484,1,0,0,0,1486,1487,1,0,0,0,1487,1489,1,0,0,0,1488,1458,1,0,0,0,1488,
		1484,1,0,0,0,1489,155,1,0,0,0,1490,1492,3,162,81,0,1491,1493,7,5,0,0,1492,
		1491,1,0,0,0,1492,1493,1,0,0,0,1493,157,1,0,0,0,1494,1505,3,162,81,0,1495,
		1497,5,137,0,0,1496,1495,1,0,0,0,1497,1500,1,0,0,0,1498,1496,1,0,0,0,1498,
		1499,1,0,0,0,1499,1501,1,0,0,0,1500,1498,1,0,0,0,1501,1502,5,13,0,0,1502,
		1504,3,162,81,0,1503,1498,1,0,0,0,1504,1507,1,0,0,0,1505,1503,1,0,0,0,
		1505,1506,1,0,0,0,1506,159,1,0,0,0,1507,1505,1,0,0,0,1508,1512,5,7,0,0,
		1509,1511,3,212,106,0,1510,1509,1,0,0,0,1511,1514,1,0,0,0,1512,1510,1,
		0,0,0,1512,1513,1,0,0,0,1513,1522,1,0,0,0,1514,1512,1,0,0,0,1515,1519,
		3,154,77,0,1516,1518,3,212,106,0,1517,1516,1,0,0,0,1518,1521,1,0,0,0,1519,
		1517,1,0,0,0,1519,1520,1,0,0,0,1520,1523,1,0,0,0,1521,1519,1,0,0,0,1522,
		1515,1,0,0,0,1522,1523,1,0,0,0,1523,1524,1,0,0,0,1524,1525,5,8,0,0,1525,
		161,1,0,0,0,1526,1527,6,81,-1,0,1527,1528,5,22,0,0,1528,1568,3,162,81,
		27,1529,1530,5,23,0,0,1530,1568,3,162,81,26,1531,1532,5,25,0,0,1532,1568,
		3,162,81,24,1533,1537,5,27,0,0,1534,1536,5,137,0,0,1535,1534,1,0,0,0,1536,
		1539,1,0,0,0,1537,1535,1,0,0,0,1537,1538,1,0,0,0,1538,1540,1,0,0,0,1539,
		1537,1,0,0,0,1540,1568,3,162,81,23,1541,1542,5,24,0,0,1542,1568,3,162,
		81,22,1543,1544,5,26,0,0,1544,1568,3,162,81,21,1545,1549,5,110,0,0,1546,
		1548,5,137,0,0,1547,1546,1,0,0,0,1548,1551,1,0,0,0,1549,1547,1,0,0,0,1549,
		1550,1,0,0,0,1550,1552,1,0,0,0,1551,1549,1,0,0,0,1552,1568,3,162,81,9,
		1553,1554,3,186,93,0,1554,1555,5,67,0,0,1555,1556,3,162,81,3,1556,1568,
		1,0,0,0,1557,1561,3,184,92,0,1558,1560,7,4,0,0,1559,1558,1,0,0,0,1560,
		1563,1,0,0,0,1561,1559,1,0,0,0,1561,1562,1,0,0,0,1562,1564,1,0,0,0,1563,
		1561,1,0,0,0,1564,1565,3,18,9,0,1565,1568,1,0,0,0,1566,1568,3,166,83,0,
		1567,1526,1,0,0,0,1567,1529,1,0,0,0,1567,1531,1,0,0,0,1567,1533,1,0,0,
		0,1567,1541,1,0,0,0,1567,1543,1,0,0,0,1567,1545,1,0,0,0,1567,1553,1,0,
		0,0,1567,1557,1,0,0,0,1567,1566,1,0,0,0,1568,1697,1,0,0,0,1569,1570,10,
		25,0,0,1570,1571,5,32,0,0,1571,1696,3,162,81,25,1572,1573,10,20,0,0,1573,
		1577,7,6,0,0,1574,1576,7,4,0,0,1575,1574,1,0,0,0,1576,1579,1,0,0,0,1577,
		1575,1,0,0,0,1577,1578,1,0,0,0,1578,1580,1,0,0,0,1579,1577,1,0,0,0,1580,
		1696,3,162,81,21,1581,1582,10,19,0,0,1582,1586,7,7,0,0,1583,1585,7,4,0,
		0,1584,1583,1,0,0,0,1585,1588,1,0,0,0,1586,1584,1,0,0,0,1586,1587,1,0,
		0,0,1587,1589,1,0,0,0,1588,1586,1,0,0,0,1589,1696,3,162,81,20,1590,1591,
		10,18,0,0,1591,1592,7,8,0,0,1592,1696,3,162,81,19,1593,1594,10,17,0,0,
		1594,1598,5,47,0,0,1595,1597,7,4,0,0,1596,1595,1,0,0,0,1597,1600,1,0,0,
		0,1598,1596,1,0,0,0,1598,1599,1,0,0,0,1599,1601,1,0,0,0,1600,1598,1,0,
		0,0,1601,1696,3,162,81,18,1602,1603,10,16,0,0,1603,1604,5,48,0,0,1604,
		1696,3,162,81,17,1605,1606,10,15,0,0,1606,1607,5,49,0,0,1607,1696,3,162,
		81,16,1608,1615,10,14,0,0,1609,1616,5,21,0,0,1610,1612,5,137,0,0,1611,
		1610,1,0,0,0,1612,1613,1,0,0,0,1613,1611,1,0,0,0,1613,1614,1,0,0,0,1614,
		1616,1,0,0,0,1615,1609,1,0,0,0,1615,1611,1,0,0,0,1616,1617,1,0,0,0,1617,
		1696,3,162,81,15,1618,1619,10,13,0,0,1619,1620,5,46,0,0,1620,1696,3,162,
		81,14,1621,1622,10,12,0,0,1622,1623,7,9,0,0,1623,1696,3,162,81,13,1624,
		1625,10,11,0,0,1625,1626,7,10,0,0,1626,1696,3,162,81,12,1627,1631,10,10,
		0,0,1628,1630,7,4,0,0,1629,1628,1,0,0,0,1630,1633,1,0,0,0,1631,1629,1,
		0,0,0,1631,1632,1,0,0,0,1632,1634,1,0,0,0,1633,1631,1,0,0,0,1634,1638,
		7,11,0,0,1635,1637,7,4,0,0,1636,1635,1,0,0,0,1637,1640,1,0,0,0,1638,1636,
		1,0,0,0,1638,1639,1,0,0,0,1639,1641,1,0,0,0,1640,1638,1,0,0,0,1641,1696,
		3,162,81,11,1642,1645,10,8,0,0,1643,1646,5,50,0,0,1644,1646,5,109,0,0,
		1645,1643,1,0,0,0,1645,1644,1,0,0,0,1646,1647,1,0,0,0,1647,1696,3,162,
		81,9,1648,1651,10,7,0,0,1649,1652,5,51,0,0,1650,1652,5,111,0,0,1651,1649,
		1,0,0,0,1651,1650,1,0,0,0,1652,1653,1,0,0,0,1653,1696,3,162,81,8,1654,
		1655,10,6,0,0,1655,1656,5,33,0,0,1656,1696,3,162,81,6,1657,1661,10,5,0,
		0,1658,1660,7,4,0,0,1659,1658,1,0,0,0,1660,1663,1,0,0,0,1661,1659,1,0,
		0,0,1661,1662,1,0,0,0,1662,1664,1,0,0,0,1663,1661,1,0,0,0,1664,1668,5,
		15,0,0,1665,1667,7,4,0,0,1666,1665,1,0,0,0,1667,1670,1,0,0,0,1668,1666,
		1,0,0,0,1668,1669,1,0,0,0,1669,1671,1,0,0,0,1670,1668,1,0,0,0,1671,1675,
		3,162,81,0,1672,1674,7,4,0,0,1673,1672,1,0,0,0,1674,1677,1,0,0,0,1675,
		1673,1,0,0,0,1675,1676,1,0,0,0,1676,1678,1,0,0,0,1677,1675,1,0,0,0,1678,
		1682,5,17,0,0,1679,1681,7,4,0,0,1680,1679,1,0,0,0,1681,1684,1,0,0,0,1682,
		1680,1,0,0,0,1682,1683,1,0,0,0,1683,1685,1,0,0,0,1684,1682,1,0,0,0,1685,
		1686,3,162,81,5,1686,1696,1,0,0,0,1687,1688,10,4,0,0,1688,1689,3,190,95,
		0,1689,1690,3,162,81,4,1690,1696,1,0,0,0,1691,1692,10,29,0,0,1692,1696,
		5,22,0,0,1693,1694,10,28,0,0,1694,1696,5,23,0,0,1695,1569,1,0,0,0,1695,
		1572,1,0,0,0,1695,1581,1,0,0,0,1695,1590,1,0,0,0,1695,1593,1,0,0,0,1695,
		1602,1,0,0,0,1695,1605,1,0,0,0,1695,1608,1,0,0,0,1695,1618,1,0,0,0,1695,
		1621,1,0,0,0,1695,1624,1,0,0,0,1695,1627,1,0,0,0,1695,1642,1,0,0,0,1695,
		1648,1,0,0,0,1695,1654,1,0,0,0,1695,1657,1,0,0,0,1695,1687,1,0,0,0,1695,
		1691,1,0,0,0,1695,1693,1,0,0,0,1696,1699,1,0,0,0,1697,1695,1,0,0,0,1697,
		1698,1,0,0,0,1698,163,1,0,0,0,1699,1697,1,0,0,0,1700,1701,6,82,-1,0,1701,
		1702,5,22,0,0,1702,1729,3,164,82,25,1703,1704,5,23,0,0,1704,1729,3,164,
		82,24,1705,1706,5,25,0,0,1706,1729,3,164,82,22,1707,1711,5,27,0,0,1708,
		1710,5,137,0,0,1709,1708,1,0,0,0,1710,1713,1,0,0,0,1711,1709,1,0,0,0,1711,
		1712,1,0,0,0,1712,1714,1,0,0,0,1713,1711,1,0,0,0,1714,1729,3,164,82,21,
		1715,1716,5,24,0,0,1716,1729,3,164,82,20,1717,1718,5,26,0,0,1718,1729,
		3,164,82,19,1719,1723,5,110,0,0,1720,1722,5,137,0,0,1721,1720,1,0,0,0,
		1722,1725,1,0,0,0,1723,1721,1,0,0,0,1723,1724,1,0,0,0,1724,1726,1,0,0,
		0,1725,1723,1,0,0,0,1726,1729,3,164,82,7,1727,1729,3,166,83,0,1728,1700,
		1,0,0,0,1728,1703,1,0,0,0,1728,1705,1,0,0,0,1728,1707,1,0,0,0,1728,1715,
		1,0,0,0,1728,1717,1,0,0,0,1728,1719,1,0,0,0,1728,1727,1,0,0,0,1729,1858,
		1,0,0,0,1730,1731,10,23,0,0,1731,1732,5,32,0,0,1732,1857,3,164,82,23,1733,
		1734,10,18,0,0,1734,1738,7,6,0,0,1735,1737,7,4,0,0,1736,1735,1,0,0,0,1737,
		1740,1,0,0,0,1738,1736,1,0,0,0,1738,1739,1,0,0,0,1739,1741,1,0,0,0,1740,
		1738,1,0,0,0,1741,1857,3,164,82,19,1742,1743,10,17,0,0,1743,1747,7,7,0,
		0,1744,1746,7,4,0,0,1745,1744,1,0,0,0,1746,1749,1,0,0,0,1747,1745,1,0,
		0,0,1747,1748,1,0,0,0,1748,1750,1,0,0,0,1749,1747,1,0,0,0,1750,1857,3,
		164,82,18,1751,1752,10,16,0,0,1752,1753,7,8,0,0,1753,1857,3,164,82,17,
		1754,1755,10,15,0,0,1755,1759,5,47,0,0,1756,1758,7,4,0,0,1757,1756,1,0,
		0,0,1758,1761,1,0,0,0,1759,1757,1,0,0,0,1759,1760,1,0,0,0,1760,1762,1,
		0,0,0,1761,1759,1,0,0,0,1762,1857,3,164,82,16,1763,1764,10,14,0,0,1764,
		1765,5,48,0,0,1765,1857,3,164,82,15,1766,1767,10,13,0,0,1767,1768,5,49,
		0,0,1768,1857,3,164,82,14,1769,1776,10,12,0,0,1770,1777,5,21,0,0,1771,
		1773,5,137,0,0,1772,1771,1,0,0,0,1773,1774,1,0,0,0,1774,1772,1,0,0,0,1774,
		1775,1,0,0,0,1775,1777,1,0,0,0,1776,1770,1,0,0,0,1776,1772,1,0,0,0,1777,
		1778,1,0,0,0,1778,1857,3,164,82,13,1779,1780,10,11,0,0,1780,1781,5,46,
		0,0,1781,1857,3,164,82,12,1782,1783,10,10,0,0,1783,1784,7,9,0,0,1784,1857,
		3,164,82,11,1785,1786,10,9,0,0,1786,1787,7,10,0,0,1787,1857,3,164,82,10,
		1788,1792,10,8,0,0,1789,1791,7,4,0,0,1790,1789,1,0,0,0,1791,1794,1,0,0,
		0,1792,1790,1,0,0,0,1792,1793,1,0,0,0,1793,1795,1,0,0,0,1794,1792,1,0,
		0,0,1795,1799,7,11,0,0,1796,1798,7,4,0,0,1797,1796,1,0,0,0,1798,1801,1,
		0,0,0,1799,1797,1,0,0,0,1799,1800,1,0,0,0,1800,1802,1,0,0,0,1801,1799,
		1,0,0,0,1802,1857,3,164,82,9,1803,1806,10,6,0,0,1804,1807,5,50,0,0,1805,
		1807,5,109,0,0,1806,1804,1,0,0,0,1806,1805,1,0,0,0,1807,1808,1,0,0,0,1808,
		1857,3,164,82,7,1809,1812,10,5,0,0,1810,1813,5,51,0,0,1811,1813,5,111,
		0,0,1812,1810,1,0,0,0,1812,1811,1,0,0,0,1813,1814,1,0,0,0,1814,1857,3,
		164,82,6,1815,1816,10,4,0,0,1816,1817,5,33,0,0,1817,1857,3,164,82,4,1818,
		1822,10,3,0,0,1819,1821,7,4,0,0,1820,1819,1,0,0,0,1821,1824,1,0,0,0,1822,
		1820,1,0,0,0,1822,1823,1,0,0,0,1823,1825,1,0,0,0,1824,1822,1,0,0,0,1825,
		1829,5,15,0,0,1826,1828,7,4,0,0,1827,1826,1,0,0,0,1828,1831,1,0,0,0,1829,
		1827,1,0,0,0,1829,1830,1,0,0,0,1830,1832,1,0,0,0,1831,1829,1,0,0,0,1832,
		1836,3,162,81,0,1833,1835,7,4,0,0,1834,1833,1,0,0,0,1835,1838,1,0,0,0,
		1836,1834,1,0,0,0,1836,1837,1,0,0,0,1837,1839,1,0,0,0,1838,1836,1,0,0,
		0,1839,1843,5,17,0,0,1840,1842,7,4,0,0,1841,1840,1,0,0,0,1842,1845,1,0,
		0,0,1843,1841,1,0,0,0,1843,1844,1,0,0,0,1844,1846,1,0,0,0,1845,1843,1,
		0,0,0,1846,1847,3,164,82,3,1847,1857,1,0,0,0,1848,1849,10,2,0,0,1849,1850,
		3,190,95,0,1850,1851,3,164,82,2,1851,1857,1,0,0,0,1852,1853,10,27,0,0,
		1853,1857,5,22,0,0,1854,1855,10,26,0,0,1855,1857,5,23,0,0,1856,1730,1,
		0,0,0,1856,1733,1,0,0,0,1856,1742,1,0,0,0,1856,1751,1,0,0,0,1856,1754,
		1,0,0,0,1856,1763,1,0,0,0,1856,1766,1,0,0,0,1856,1769,1,0,0,0,1856,1779,
		1,0,0,0,1856,1782,1,0,0,0,1856,1785,1,0,0,0,1856,1788,1,0,0,0,1856,1803,
		1,0,0,0,1856,1809,1,0,0,0,1856,1815,1,0,0,0,1856,1818,1,0,0,0,1856,1848,
		1,0,0,0,1856,1852,1,0,0,0,1856,1854,1,0,0,0,1857,1860,1,0,0,0,1858,1856,
		1,0,0,0,1858,1859,1,0,0,0,1859,165,1,0,0,0,1860,1858,1,0,0,0,1861,1862,
		6,83,-1,0,1862,1863,5,47,0,0,1863,1875,3,166,83,8,1864,1875,3,206,103,
		0,1865,1875,3,172,86,0,1866,1875,3,192,96,0,1867,1875,3,140,70,0,1868,
		1875,3,142,71,0,1869,1875,3,178,89,0,1870,1871,5,9,0,0,1871,1872,3,158,
		79,0,1872,1873,5,10,0,0,1873,1875,1,0,0,0,1874,1861,1,0,0,0,1874,1864,
		1,0,0,0,1874,1865,1,0,0,0,1874,1866,1,0,0,0,1874,1867,1,0,0,0,1874,1868,
		1,0,0,0,1874,1869,1,0,0,0,1874,1870,1,0,0,0,1875,1892,1,0,0,0,1876,1877,
		10,11,0,0,1877,1878,7,12,0,0,1878,1891,3,170,85,0,1879,1880,10,10,0,0,
		1880,1882,5,9,0,0,1881,1883,3,154,77,0,1882,1881,1,0,0,0,1882,1883,1,0,
		0,0,1883,1884,1,0,0,0,1884,1891,5,10,0,0,1885,1887,10,9,0,0,1886,1888,
		5,16,0,0,1887,1886,1,0,0,0,1887,1888,1,0,0,0,1888,1889,1,0,0,0,1889,1891,
		3,160,80,0,1890,1876,1,0,0,0,1890,1879,1,0,0,0,1890,1885,1,0,0,0,1891,
		1894,1,0,0,0,1892,1890,1,0,0,0,1892,1893,1,0,0,0,1893,167,1,0,0,0,1894,
		1892,1,0,0,0,1895,1897,7,4,0,0,1896,1895,1,0,0,0,1897,1898,1,0,0,0,1898,
		1896,1,0,0,0,1898,1899,1,0,0,0,1899,1900,1,0,0,0,1900,1922,5,20,0,0,1901,
		1905,5,20,0,0,1902,1904,7,4,0,0,1903,1902,1,0,0,0,1904,1907,1,0,0,0,1905,
		1903,1,0,0,0,1905,1906,1,0,0,0,1906,1922,1,0,0,0,1907,1905,1,0,0,0,1908,
		1910,7,4,0,0,1909,1908,1,0,0,0,1910,1913,1,0,0,0,1911,1909,1,0,0,0,1911,
		1912,1,0,0,0,1912,1914,1,0,0,0,1913,1911,1,0,0,0,1914,1918,5,16,0,0,1915,
		1917,7,4,0,0,1916,1915,1,0,0,0,1917,1920,1,0,0,0,1918,1916,1,0,0,0,1918,
		1919,1,0,0,0,1919,1922,1,0,0,0,1920,1918,1,0,0,0,1921,1896,1,0,0,0,1921,
		1901,1,0,0,0,1921,1911,1,0,0,0,1922,169,1,0,0,0,1923,1928,3,206,103,0,
		1924,1928,3,172,86,0,1925,1928,3,210,105,0,1926,1928,3,192,96,0,1927,1923,
		1,0,0,0,1927,1924,1,0,0,0,1927,1925,1,0,0,0,1927,1926,1,0,0,0,1928,171,
		1,0,0,0,1929,1930,3,150,75,0,1930,1935,3,152,76,0,1931,1934,3,150,75,0,
		1932,1934,3,152,76,0,1933,1931,1,0,0,0,1933,1932,1,0,0,0,1934,1937,1,0,
		0,0,1935,1933,1,0,0,0,1935,1936,1,0,0,0,1936,1947,1,0,0,0,1937,1935,1,
		0,0,0,1938,1943,3,152,76,0,1939,1942,3,150,75,0,1940,1942,3,152,76,0,1941,
		1939,1,0,0,0,1941,1940,1,0,0,0,1942,1945,1,0,0,0,1943,1941,1,0,0,0,1943,
		1944,1,0,0,0,1944,1947,1,0,0,0,1945,1943,1,0,0,0,1946,1929,1,0,0,0,1946,
		1938,1,0,0,0,1947,173,1,0,0,0,1948,1949,5,14,0,0,1949,1950,3,162,81,0,
		1950,175,1,0,0,0,1951,1952,3,206,103,0,1952,177,1,0,0,0,1953,1957,5,11,
		0,0,1954,1956,3,212,106,0,1955,1954,1,0,0,0,1956,1959,1,0,0,0,1957,1955,
		1,0,0,0,1957,1958,1,0,0,0,1958,1980,1,0,0,0,1959,1957,1,0,0,0,1960,1971,
		3,148,74,0,1961,1963,5,137,0,0,1962,1961,1,0,0,0,1963,1966,1,0,0,0,1964,
		1962,1,0,0,0,1964,1965,1,0,0,0,1965,1967,1,0,0,0,1966,1964,1,0,0,0,1967,
		1968,5,13,0,0,1968,1970,3,148,74,0,1969,1964,1,0,0,0,1970,1973,1,0,0,0,
		1971,1969,1,0,0,0,1971,1972,1,0,0,0,1972,1977,1,0,0,0,1973,1971,1,0,0,
		0,1974,1976,3,212,106,0,1975,1974,1,0,0,0,1976,1979,1,0,0,0,1977,1975,
		1,0,0,0,1977,1978,1,0,0,0,1978,1981,1,0,0,0,1979,1977,1,0,0,0,1980,1960,
		1,0,0,0,1980,1981,1,0,0,0,1981,1982,1,0,0,0,1982,1983,5,12,0,0,1983,179,
		1,0,0,0,1984,1986,3,182,91,0,1985,1984,1,0,0,0,1985,1986,1,0,0,0,1986,
		1987,1,0,0,0,1987,1988,3,204,102,0,1988,1990,5,9,0,0,1989,1991,3,134,67,
		0,1990,1989,1,0,0,0,1990,1991,1,0,0,0,1991,1992,1,0,0,0,1992,1993,5,10,
		0,0,1993,181,1,0,0,0,1994,1998,7,13,0,0,1995,1997,5,137,0,0,1996,1995,
		1,0,0,0,1997,2000,1,0,0,0,1998,1996,1,0,0,0,1998,1999,1,0,0,0,1999,2002,
		1,0,0,0,2000,1998,1,0,0,0,2001,1994,1,0,0,0,2002,2003,1,0,0,0,2003,2001,
		1,0,0,0,2003,2004,1,0,0,0,2004,183,1,0,0,0,2005,2015,3,180,90,0,2006,2008,
		3,182,91,0,2007,2006,1,0,0,0,2007,2008,1,0,0,0,2008,2009,1,0,0,0,2009,
		2011,5,9,0,0,2010,2012,3,134,67,0,2011,2010,1,0,0,0,2011,2012,1,0,0,0,
		2012,2013,1,0,0,0,2013,2015,5,10,0,0,2014,2005,1,0,0,0,2014,2007,1,0,0,
		0,2015,185,1,0,0,0,2016,2018,3,182,91,0,2017,2016,1,0,0,0,2017,2018,1,
		0,0,0,2018,2019,1,0,0,0,2019,2021,3,204,102,0,2020,2017,1,0,0,0,2020,2021,
		1,0,0,0,2021,2022,1,0,0,0,2022,2035,5,28,0,0,2023,2025,3,182,91,0,2024,
		2023,1,0,0,0,2024,2025,1,0,0,0,2025,2027,1,0,0,0,2026,2028,5,47,0,0,2027,
		2026,1,0,0,0,2027,2028,1,0,0,0,2028,2029,1,0,0,0,2029,2031,3,204,102,0,
		2030,2032,5,15,0,0,2031,2030,1,0,0,0,2031,2032,1,0,0,0,2032,2035,1,0,0,
		0,2033,2035,3,184,92,0,2034,2020,1,0,0,0,2034,2024,1,0,0,0,2034,2033,1,
		0,0,0,2035,187,1,0,0,0,2036,2037,5,67,0,0,2037,2056,3,162,81,0,2038,2040,
		7,4,0,0,2039,2038,1,0,0,0,2040,2043,1,0,0,0,2041,2039,1,0,0,0,2041,2042,
		1,0,0,0,2042,2044,1,0,0,0,2043,2041,1,0,0,0,2044,2048,5,11,0,0,2045,2047,
		3,212,106,0,2046,2045,1,0,0,0,2047,2050,1,0,0,0,2048,2046,1,0,0,0,2048,
		2049,1,0,0,0,2049,2052,1,0,0,0,2050,2048,1,0,0,0,2051,2053,3,20,10,0,2052,
		2051,1,0,0,0,2052,2053,1,0,0,0,2053,2054,1,0,0,0,2054,2056,5,12,0,0,2055,
		2036,1,0,0,0,2055,2041,1,0,0,0,2056,189,1,0,0,0,2057,2058,7,14,0,0,2058,
		191,1,0,0,0,2059,2064,3,194,97,0,2060,2064,3,196,98,0,2061,2064,3,198,
		99,0,2062,2064,7,15,0,0,2063,2059,1,0,0,0,2063,2060,1,0,0,0,2063,2061,
		1,0,0,0,2063,2062,1,0,0,0,2064,193,1,0,0,0,2065,2066,7,16,0,0,2066,195,
		1,0,0,0,2067,2068,7,17,0,0,2068,197,1,0,0,0,2069,2070,7,18,0,0,2070,199,
		1,0,0,0,2071,2072,5,113,0,0,2072,2073,3,150,75,0,2073,201,1,0,0,0,2074,
		2075,5,114,0,0,2075,2076,3,150,75,0,2076,203,1,0,0,0,2077,2080,3,206,103,
		0,2078,2080,3,208,104,0,2079,2077,1,0,0,0,2079,2078,1,0,0,0,2080,205,1,
		0,0,0,2081,2082,7,19,0,0,2082,207,1,0,0,0,2083,2088,3,210,105,0,2084,2088,
		5,68,0,0,2085,2088,5,69,0,0,2086,2088,3,194,97,0,2087,2083,1,0,0,0,2087,
		2084,1,0,0,0,2087,2085,1,0,0,0,2087,2086,1,0,0,0,2088,209,1,0,0,0,2089,
		2090,7,20,0,0,2090,211,1,0,0,0,2091,2092,7,4,0,0,2092,213,1,0,0,0,2093,
		2094,7,21,0,0,2094,215,1,0,0,0,289,220,225,247,251,256,261,266,268,277,
		283,288,292,295,304,310,315,323,326,343,349,353,362,368,372,378,387,396,
		402,406,411,418,425,432,436,438,445,449,457,464,468,476,480,484,489,496,
		498,505,512,519,523,525,532,536,542,549,557,563,566,575,582,591,595,602,
		607,614,619,625,633,636,646,653,658,663,674,681,686,691,702,709,714,719,
		730,737,742,746,752,763,770,781,788,795,798,803,808,812,818,825,831,836,
		841,845,851,858,864,870,878,884,892,898,902,908,912,918,922,927,932,937,
		946,950,954,956,963,969,976,983,988,994,1001,1006,1015,1023,1030,1036,
		1040,1046,1053,1064,1071,1074,1082,1086,1091,1095,1102,1106,1111,1115,
		1122,1130,1138,1146,1153,1159,1166,1174,1179,1188,1195,1201,1204,1209,
		1219,1227,1229,1239,1242,1249,1252,1258,1265,1269,1282,1293,1295,1299,
		1305,1310,1315,1328,1338,1345,1351,1357,1361,1364,1370,1377,1380,1388,
		1395,1403,1409,1416,1421,1425,1436,1443,1452,1462,1467,1471,1477,1482,
		1486,1488,1492,1498,1505,1512,1519,1522,1537,1549,1561,1567,1577,1586,
		1598,1613,1615,1631,1638,1645,1651,1661,1668,1675,1682,1695,1697,1711,
		1723,1728,1738,1747,1759,1774,1776,1792,1799,1806,1812,1822,1829,1836,
		1843,1856,1858,1874,1882,1887,1890,1892,1898,1905,1911,1918,1921,1927,
		1933,1935,1941,1943,1946,1957,1964,1971,1977,1980,1985,1990,1998,2003,
		2007,2011,2014,2017,2020,2024,2027,2031,2034,2041,2048,2052,2055,2063,
		2079,2087
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
