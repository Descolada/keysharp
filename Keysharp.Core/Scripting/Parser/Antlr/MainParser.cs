//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/minip/source/repos/Keysharp_clone/Keysharp.Core/Scripting/Parser/Antlr/MainParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MainParser : MainParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DerefStart=1, DerefEnd=2, StartFunctionStatement=3, SingleLineBlockComment=4, 
		HotstringTrigger=5, RemapKey=6, HotkeyTrigger=7, OpenBracket=8, CloseBracket=9, 
		OpenParen=10, CloseParen=11, OpenBrace=12, CloseBrace=13, SemiColon=14, 
		Comma=15, Assign=16, QuestionMark=17, QuestionMarkDot=18, Colon=19, DoubleColon=20, 
		Ellipsis=21, Dot=22, ConcatDot=23, PlusPlus=24, MinusMinus=25, Plus=26, 
		Minus=27, BitNot=28, Not=29, Multiply=30, Divide=31, IntegerDivide=32, 
		Modulus=33, Power=34, NullCoalesce=35, Hashtag=36, RightShiftArithmetic=37, 
		LeftShiftArithmetic=38, RightShiftLogical=39, LessThan=40, MoreThan=41, 
		LessThanEquals=42, GreaterThanEquals=43, Equals_=44, NotEquals=45, IdentityEquals=46, 
		IdentityNotEquals=47, RegExMatch=48, BitAnd=49, BitXOr=50, BitOr=51, And=52, 
		Or=53, MultiplyAssign=54, DivideAssign=55, ModulusAssign=56, PlusAssign=57, 
		MinusAssign=58, LeftShiftArithmeticAssign=59, RightShiftArithmeticAssign=60, 
		RightShiftLogicalAssign=61, IntegerDivideAssign=62, ConcatenateAssign=63, 
		BitAndAssign=64, BitXorAssign=65, BitOrAssign=66, PowerAssign=67, NullishCoalescingAssign=68, 
		Arrow=69, NullLiteral=70, Unset=71, True=72, False=73, DecimalLiteral=74, 
		HexIntegerLiteral=75, OctalIntegerLiteral=76, OctalIntegerLiteral2=77, 
		BinaryIntegerLiteral=78, BigHexIntegerLiteral=79, BigOctalIntegerLiteral=80, 
		BigBinaryIntegerLiteral=81, BigDecimalIntegerLiteral=82, Break=83, Do=84, 
		Instanceof=85, Switch=86, Case=87, Default=88, Else=89, Catch=90, Finally=91, 
		Return=92, Continue=93, For=94, While=95, LoopParse=96, LoopReg=97, LoopRead=98, 
		LoopFiles=99, Loop=100, Until=101, This=102, If=103, Throw=104, Delete=105, 
		In=106, Try=107, Yield=108, Is=109, Contains=110, VerbalAnd=111, VerbalNot=112, 
		VerbalOr=113, Goto=114, Get=115, Set=116, Class=117, Enum=118, Extends=119, 
		Super=120, Base=121, Export=122, Import=123, From=124, As=125, Async=126, 
		Await=127, Static=128, Global=129, Local=130, HotIf=131, InputLevel=132, 
		SuspendExempt=133, UseHook=134, Warn=135, HotstringOptions=136, Identifier=137, 
		StringLiteral=138, EOL=139, WS=140, UnexpectedCharacter=141, HotstringWhitespaces=142, 
		HotstringExpansion=143, HotstringUnexpectedCharacter=144, DirectiveWhitespaces=145, 
		DirectiveContent=146, DirectiveUnexpectedCharacter=147, PreprocessorDirectiveWS=148, 
		Digits=149, Define=150, Undef=151, ElIf=152, EndIf=153, Line=154, Error=155, 
		Warning=156, Region=157, EndRegion=158, Pragma=159, Nullable=160, Include=161, 
		IncludeAgain=162, DllLoad=163, Requires=164, SingleInstance=165, Persistent=166, 
		NoDynamicVars=167, ErrorStdOut=168, ClipboardTimeout=169, HotIfTimeout=170, 
		MaxThreads=171, MaxThreadsBuffer=172, MaxThreadsPerHotkey=173, Assembly=174, 
		DirectiveHidden=175, ConditionalSymbol=176, DirectiveSingleLineComment=177, 
		DirectiveNewline=178, Text=179;
	public const int
		RULE_program = 0, RULE_sourceElements = 1, RULE_sourceElement = 2, RULE_positionalDirective = 3, 
		RULE_remap = 4, RULE_hotstring = 5, RULE_hotkey = 6, RULE_statement = 7, 
		RULE_block = 8, RULE_statementList = 9, RULE_variableStatement = 10, RULE_awaitStatement = 11, 
		RULE_deleteStatement = 12, RULE_importStatement = 13, RULE_importFromBlock = 14, 
		RULE_importModuleItems = 15, RULE_importAliasName = 16, RULE_moduleExportName = 17, 
		RULE_importedBinding = 18, RULE_importDefault = 19, RULE_importNamespace = 20, 
		RULE_importFrom = 21, RULE_aliasName = 22, RULE_exportStatement = 23, 
		RULE_exportFromBlock = 24, RULE_exportModuleItems = 25, RULE_exportAliasName = 26, 
		RULE_declaration = 27, RULE_variableDeclarationList = 28, RULE_variableDeclaration = 29, 
		RULE_functionStatement = 30, RULE_expressionStatement = 31, RULE_ifStatement = 32, 
		RULE_flowBlock = 33, RULE_untilProduction = 34, RULE_elseProduction = 35, 
		RULE_iterationStatement = 36, RULE_forInParameters = 37, RULE_continueStatement = 38, 
		RULE_breakStatement = 39, RULE_returnStatement = 40, RULE_yieldStatement = 41, 
		RULE_switchStatement = 42, RULE_caseBlock = 43, RULE_caseClauses = 44, 
		RULE_caseClause = 45, RULE_defaultClause = 46, RULE_labelledStatement = 47, 
		RULE_gotoStatement = 48, RULE_throwStatement = 49, RULE_tryStatement = 50, 
		RULE_catchProduction = 51, RULE_catchAssignable = 52, RULE_catchClasses = 53, 
		RULE_finallyProduction = 54, RULE_functionDeclaration = 55, RULE_classDeclaration = 56, 
		RULE_classExtensionName = 57, RULE_classTail = 58, RULE_classElement = 59, 
		RULE_methodDefinition = 60, RULE_propertyDefinition = 61, RULE_classPropertyName = 62, 
		RULE_propertyGetterDefinition = 63, RULE_propertySetterDefinition = 64, 
		RULE_fieldDefinition = 65, RULE_formalParameterList = 66, RULE_formalParameterArg = 67, 
		RULE_lastFormalParameterArg = 68, RULE_arrayLiteral = 69, RULE_arrayElementList = 70, 
		RULE_arrayElement = 71, RULE_mapLiteral = 72, RULE_mapElementList = 73, 
		RULE_mapElement = 74, RULE_propertyAssignment = 75, RULE_propertyName = 76, 
		RULE_dereference = 77, RULE_arguments = 78, RULE_argument = 79, RULE_expressionSequence = 80, 
		RULE_memberIndexArguments = 81, RULE_expression = 82, RULE_singleExpression = 83, 
		RULE_operatorExpression = 84, RULE_primaryExpression = 85, RULE_memberDot = 86, 
		RULE_memberIdentifier = 87, RULE_dynamicIdentifier = 88, RULE_initializer = 89, 
		RULE_assignable = 90, RULE_objectLiteral = 91, RULE_functionHead = 92, 
		RULE_functionExpressionHead = 93, RULE_fatArrowExpressionHead = 94, RULE_functionBody = 95, 
		RULE_assignmentOperator = 96, RULE_literal = 97, RULE_boolean = 98, RULE_numericLiteral = 99, 
		RULE_bigintLiteral = 100, RULE_getter = 101, RULE_setter = 102, RULE_identifierName = 103, 
		RULE_identifier = 104, RULE_reservedWord = 105, RULE_keyword = 106, RULE_s = 107, 
		RULE_eos = 108;
	public static readonly string[] ruleNames = {
		"program", "sourceElements", "sourceElement", "positionalDirective", "remap", 
		"hotstring", "hotkey", "statement", "block", "statementList", "variableStatement", 
		"awaitStatement", "deleteStatement", "importStatement", "importFromBlock", 
		"importModuleItems", "importAliasName", "moduleExportName", "importedBinding", 
		"importDefault", "importNamespace", "importFrom", "aliasName", "exportStatement", 
		"exportFromBlock", "exportModuleItems", "exportAliasName", "declaration", 
		"variableDeclarationList", "variableDeclaration", "functionStatement", 
		"expressionStatement", "ifStatement", "flowBlock", "untilProduction", 
		"elseProduction", "iterationStatement", "forInParameters", "continueStatement", 
		"breakStatement", "returnStatement", "yieldStatement", "switchStatement", 
		"caseBlock", "caseClauses", "caseClause", "defaultClause", "labelledStatement", 
		"gotoStatement", "throwStatement", "tryStatement", "catchProduction", 
		"catchAssignable", "catchClasses", "finallyProduction", "functionDeclaration", 
		"classDeclaration", "classExtensionName", "classTail", "classElement", 
		"methodDefinition", "propertyDefinition", "classPropertyName", "propertyGetterDefinition", 
		"propertySetterDefinition", "fieldDefinition", "formalParameterList", 
		"formalParameterArg", "lastFormalParameterArg", "arrayLiteral", "arrayElementList", 
		"arrayElement", "mapLiteral", "mapElementList", "mapElement", "propertyAssignment", 
		"propertyName", "dereference", "arguments", "argument", "expressionSequence", 
		"memberIndexArguments", "expression", "singleExpression", "operatorExpression", 
		"primaryExpression", "memberDot", "memberIdentifier", "dynamicIdentifier", 
		"initializer", "assignable", "objectLiteral", "functionHead", "functionExpressionHead", 
		"fatArrowExpressionHead", "functionBody", "assignmentOperator", "literal", 
		"boolean", "numericLiteral", "bigintLiteral", "getter", "setter", "identifierName", 
		"identifier", "reservedWord", "keyword", "s", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'['", "']'", "'('", "')'", 
		"'{'", "'}'", "';'", "','", "':='", "'?'", "'?.'", "':'", "'::'", "'...'", 
		"'.'", null, "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", 
		"'//'", "'%'", "'**'", "'??'", null, "'>>'", "'<<'", "'>>>'", "'<'", "'>'", 
		"'<='", "'>='", "'='", "'!='", "'=='", "'!=='", "'~='", "'&'", "'^'", 
		"'|'", "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
		"'>>='", "'>>>='", "'//='", "'.='", "'&='", "'^='", "'|='", "'**='", "'??='", 
		"'=>'", "'null'", "'unset'", "'true'", "'false'", null, null, null, null, 
		null, null, null, null, null, "'break'", "'do'", "'instanceof'", "'switch'", 
		"'case'", "'default'", "'else'", "'catch'", "'finally'", "'return'", "'continue'", 
		"'for'", "'while'", null, null, null, null, null, "'until'", "'this'", 
		"'if'", "'throw'", "'delete'", "'in'", "'try'", "'yield'", "'is'", "'contains'", 
		"'and'", "'not'", "'or'", "'goto'", "'get'", "'set'", "'class'", "'enum'", 
		"'extends'", "'super'", "'base'", "'export'", "'import'", "'from'", "'as'", 
		"'async'", "'await'", "'static'", "'global'", "'local'", "'#hotif'", "'#inputlevel'", 
		"'#suspendexempt'", "'#usehook'", "'#warn'", null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "'define'", "'undef'", 
		"'elif'", "'endif'", "'line'", null, null, null, null, null, null, null, 
		null, null, null, null, null, "'nodynamicvars'", "'errorstdout'", null, 
		null, null, null, null, null, "'hidden'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DerefStart", "DerefEnd", "StartFunctionStatement", "SingleLineBlockComment", 
		"HotstringTrigger", "RemapKey", "HotkeyTrigger", "OpenBracket", "CloseBracket", 
		"OpenParen", "CloseParen", "OpenBrace", "CloseBrace", "SemiColon", "Comma", 
		"Assign", "QuestionMark", "QuestionMarkDot", "Colon", "DoubleColon", "Ellipsis", 
		"Dot", "ConcatDot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", 
		"Not", "Multiply", "Divide", "IntegerDivide", "Modulus", "Power", "NullCoalesce", 
		"Hashtag", "RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", 
		"LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_", 
		"NotEquals", "IdentityEquals", "IdentityNotEquals", "RegExMatch", "BitAnd", 
		"BitXOr", "BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
		"PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
		"RightShiftLogicalAssign", "IntegerDivideAssign", "ConcatenateAssign", 
		"BitAndAssign", "BitXorAssign", "BitOrAssign", "PowerAssign", "NullishCoalescingAssign", 
		"Arrow", "NullLiteral", "Unset", "True", "False", "DecimalLiteral", "HexIntegerLiteral", 
		"OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
		"BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", 
		"BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Switch", "Case", 
		"Default", "Else", "Catch", "Finally", "Return", "Continue", "For", "While", 
		"LoopParse", "LoopReg", "LoopRead", "LoopFiles", "Loop", "Until", "This", 
		"If", "Throw", "Delete", "In", "Try", "Yield", "Is", "Contains", "VerbalAnd", 
		"VerbalNot", "VerbalOr", "Goto", "Get", "Set", "Class", "Enum", "Extends", 
		"Super", "Base", "Export", "Import", "From", "As", "Async", "Await", "Static", 
		"Global", "Local", "HotIf", "InputLevel", "SuspendExempt", "UseHook", 
		"Warn", "HotstringOptions", "Identifier", "StringLiteral", "EOL", "WS", 
		"UnexpectedCharacter", "HotstringWhitespaces", "HotstringExpansion", "HotstringUnexpectedCharacter", 
		"DirectiveWhitespaces", "DirectiveContent", "DirectiveUnexpectedCharacter", 
		"PreprocessorDirectiveWS", "Digits", "Define", "Undef", "ElIf", "EndIf", 
		"Line", "Error", "Warning", "Region", "EndRegion", "Pragma", "Nullable", 
		"Include", "IncludeAgain", "DllLoad", "Requires", "SingleInstance", "Persistent", 
		"NoDynamicVars", "ErrorStdOut", "ClipboardTimeout", "HotIfTimeout", "MaxThreads", 
		"MaxThreadsBuffer", "MaxThreadsPerHotkey", "Assembly", "DirectiveHidden", 
		"ConditionalSymbol", "DirectiveSingleLineComment", "DirectiveNewline", 
		"Text"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MainParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MainParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MainParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MainParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MainParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DerefStart:
			case HotstringTrigger:
			case RemapKey:
			case HotkeyTrigger:
			case OpenBracket:
			case OpenParen:
			case OpenBrace:
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case BitNot:
			case Not:
			case Multiply:
			case BitAnd:
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case LoopParse:
			case LoopReg:
			case LoopRead:
			case LoopFiles:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case HotIf:
			case InputLevel:
			case SuspendExempt:
			case UseHook:
			case HotstringOptions:
			case Identifier:
			case StringLiteral:
			case EOL:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				sourceElements();
				State = 219;
				Match(Eof);
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 224;
				sourceElement();
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 562952084133346L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & -1L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 125L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionalDirectiveContext positionalDirective() {
			return GetRuleContext<PositionalDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemapContext remap() {
			return GetRuleContext<RemapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotstringContext hotstring() {
			return GetRuleContext<HotstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HotkeyContext hotkey() {
			return GetRuleContext<HotkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(MainParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sourceElement);
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229;
				classDeclaration();
				State = 230;
				eos();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232;
				positionalDirective();
				State = 233;
				eos();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 235;
				remap();
				State = 236;
				eos();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 238;
				hotstring();
				State = 239;
				eos();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 241;
				hotkey();
				State = 242;
				eos();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 244;
				statement();
				State = 245;
				eos();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 247;
				Match(WS);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 248;
				Match(EOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionalDirectiveContext : ParserRuleContext {
		public PositionalDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionalDirective; } }
	 
		public PositionalDirectiveContext() { }
		public virtual void CopyFrom(PositionalDirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HotstringDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringOptions() { return GetToken(MainParser.HotstringOptions, 0); }
		public HotstringDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstringDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InputLevelDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InputLevel() { return GetToken(MainParser.InputLevel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public InputLevelDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputLevelDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuspendExemptDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SuspendExempt() { return GetToken(MainParser.SuspendExempt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public SuspendExemptDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuspendExemptDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UseHookDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UseHook() { return GetToken(MainParser.UseHook, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public UseHookDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseHookDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HotIfDirectiveContext : PositionalDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotIf() { return GetToken(MainParser.HotIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public HotIfDirectiveContext(PositionalDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotIfDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionalDirectiveContext positionalDirective() {
		PositionalDirectiveContext _localctx = new PositionalDirectiveContext(Context, State);
		EnterRule(_localctx, 6, RULE_positionalDirective);
		int _la;
		try {
			State = 270;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HotIf:
				_localctx = new HotIfDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 251;
				Match(HotIf);
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 562951010391298L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2305843008207060991L) != 0) || _la==Identifier || _la==StringLiteral) {
					{
					State = 252;
					singleExpression(0);
					}
				}

				}
				break;
			case HotstringOptions:
				_localctx = new HotstringDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 255;
				Match(HotstringOptions);
				}
				break;
			case InputLevel:
				_localctx = new InputLevelDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 256;
				Match(InputLevel);
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 31L) != 0)) {
					{
					State = 257;
					numericLiteral();
					}
				}

				}
				break;
			case UseHook:
				_localctx = new UseHookDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 260;
				Match(UseHook);
				State = 263;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
					{
					State = 261;
					numericLiteral();
					}
					break;
				case True:
				case False:
					{
					State = 262;
					boolean();
					}
					break;
				case Eof:
				case EOL:
					break;
				default:
					break;
				}
				}
				break;
			case SuspendExempt:
				_localctx = new SuspendExemptDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 265;
				Match(SuspendExempt);
				State = 268;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
					{
					State = 266;
					numericLiteral();
					}
					break;
				case True:
				case False:
					{
					State = 267;
					boolean();
					}
					break;
				case Eof:
				case EOL:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RemapKey() { return GetToken(MainParser.RemapKey, 0); }
		public RemapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remap; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemapContext remap() {
		RemapContext _localctx = new RemapContext(Context, State);
		EnterRule(_localctx, 8, RULE_remap);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			Match(RemapKey);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotstringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HotstringTrigger() { return GetTokens(MainParser.HotstringTrigger); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringTrigger(int i) {
			return GetToken(MainParser.HotstringTrigger, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotstringExpansion() { return GetToken(MainParser.HotstringExpansion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public HotstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotstring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotstringContext hotstring() {
		HotstringContext _localctx = new HotstringContext(Context, State);
		EnterRule(_localctx, 10, RULE_hotstring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(HotstringTrigger);
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HotstringTrigger) {
				{
				{
				State = 275;
				Match(HotstringTrigger);
				}
				}
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 281;
				Match(HotstringExpansion);
				}
				break;
			case 2:
				{
				State = 282;
				functionDeclaration();
				}
				break;
			case 3:
				{
				State = 283;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HotkeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HotkeyTrigger() { return GetTokens(MainParser.HotkeyTrigger); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotkeyTrigger(int i) {
			return GetToken(MainParser.HotkeyTrigger, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public HotkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hotkey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHotkey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HotkeyContext hotkey() {
		HotkeyContext _localctx = new HotkeyContext(Context, State);
		EnterRule(_localctx, 12, RULE_hotkey);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(HotkeyTrigger);
			State = 291;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 287;
					Match(EOL);
					State = 288;
					Match(HotkeyTrigger);
					}
					} 
				}
				State = 293;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 294;
				s();
				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 300;
				functionDeclaration();
				}
				break;
			case 2:
				{
				State = 301;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStatementContext functionStatement() {
			return GetRuleContext<FunctionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelledStatementContext labelledStatement() {
			return GetRuleContext<LabelledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AwaitStatementContext awaitStatement() {
			return GetRuleContext<AwaitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			State = 330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 304;
				functionStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305;
				variableStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 306;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 307;
					labelledStatement();
					State = 311;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==EOL || _la==WS) {
						{
						{
						State = 308;
						s();
						}
						}
						State = 313;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 316;
				iterationStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 317;
				expressionStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 318;
				continueStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 319;
				breakStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 320;
				returnStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 321;
				yieldStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 322;
				labelledStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 323;
				gotoStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 324;
				switchStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 325;
				throwStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 326;
				tryStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 327;
				awaitStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 328;
				deleteStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 329;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			Match(OpenBrace);
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 333;
				s();
				}
				}
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 562952084133122L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2305843009213693951L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 339;
				statementList();
				}
			}

			State = 342;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 18, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 344;
					statement();
					State = 345;
					Match(EOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 349;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(MainParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(MainParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public VariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStatementContext variableStatement() {
		VariableStatementContext _localctx = new VariableStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 359;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 352;
					Match(WS);
					}
					}
					State = 357;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 358;
				variableDeclarationList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwaitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public AwaitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awaitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwaitStatementContext awaitStatement() {
		AwaitStatementContext _localctx = new AwaitStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_awaitStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			Match(Await);
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 362;
				Match(WS);
				}
				}
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 368;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(MainParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_deleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			Match(Delete);
			State = 374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 371;
				Match(WS);
				}
				}
				State = 376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 377;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(MainParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromBlockContext importFromBlock() {
			return GetRuleContext<ImportFromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_importStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			Match(Import);
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 380;
				Match(WS);
				}
				}
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 386;
			importFromBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportModuleItemsContext importModuleItems() {
			return GetRuleContext<ImportModuleItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDefaultContext importDefault() {
			return GetRuleContext<ImportDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ImportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromBlockContext importFromBlock() {
		ImportFromBlockContext _localctx = new ImportFromBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_importFromBlock);
		try {
			State = 398;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
			case Multiply:
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 389;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 388;
					importDefault();
					}
					break;
				}
				State = 393;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Multiply:
				case NullLiteral:
				case Unset:
				case True:
				case False:
				case Break:
				case Do:
				case Instanceof:
				case Switch:
				case Case:
				case Default:
				case Else:
				case Catch:
				case Finally:
				case Return:
				case Continue:
				case For:
				case While:
				case Loop:
				case Until:
				case This:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case Yield:
				case Is:
				case Contains:
				case VerbalAnd:
				case VerbalNot:
				case VerbalOr:
				case Goto:
				case Get:
				case Set:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Base:
				case Export:
				case Import:
				case From:
				case As:
				case Async:
				case Await:
				case Static:
				case Global:
				case Local:
				case Identifier:
					{
					State = 391;
					importNamespace();
					}
					break;
				case OpenBrace:
					{
					State = 392;
					importModuleItems();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 395;
				importFrom();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 397;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasNameContext[] importAliasName() {
			return GetRuleContexts<ImportAliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasNameContext importAliasName(int i) {
			return GetRuleContext<ImportAliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public ImportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importModuleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportModuleItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportModuleItemsContext importModuleItems() {
		ImportModuleItemsContext _localctx = new ImportModuleItemsContext(Context, State);
		EnterRule(_localctx, 30, RULE_importModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			Match(OpenBrace);
			State = 406;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 401;
					importAliasName();
					State = 402;
					Match(Comma);
					}
					} 
				}
				State = 408;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2305843008207052815L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 409;
				importAliasName();
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 410;
					Match(Comma);
					}
				}

				}
			}

			State = 415;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext moduleExportName() {
			return GetRuleContext<ModuleExportNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportedBindingContext importedBinding() {
			return GetRuleContext<ImportedBindingContext>(0);
		}
		public ImportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasNameContext importAliasName() {
		ImportAliasNameContext _localctx = new ImportAliasNameContext(Context, State);
		EnterRule(_localctx, 32, RULE_importAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			moduleExportName();
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 418;
				Match(As);
				State = 419;
				importedBinding();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleExportNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ModuleExportNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleExportName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleExportName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleExportNameContext moduleExportName() {
		ModuleExportNameContext _localctx = new ModuleExportNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_moduleExportName);
		try {
			State = 424;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 422;
				identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 423;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportedBindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		public ImportedBindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importedBinding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportedBinding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportedBindingContext importedBinding() {
		ImportedBindingContext _localctx = new ImportedBindingContext(Context, State);
		EnterRule(_localctx, 36, RULE_importedBinding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & 537395201L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext aliasName() {
			return GetRuleContext<AliasNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		public ImportDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefaultContext importDefault() {
		ImportDefaultContext _localctx = new ImportDefaultContext(Context, State);
		EnterRule(_localctx, 38, RULE_importDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			aliasName();
			State = 429;
			Match(Comma);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public ImportNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportNamespaceContext importNamespace() {
		ImportNamespaceContext _localctx = new ImportNamespaceContext(Context, State);
		EnterRule(_localctx, 40, RULE_importNamespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
				{
				State = 431;
				Match(Multiply);
				}
				break;
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				{
				State = 432;
				identifierName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 435;
				Match(As);
				State = 436;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(MainParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public ImportFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromContext importFrom() {
		ImportFromContext _localctx = new ImportFromContext(Context, State);
		EnterRule(_localctx, 42, RULE_importFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			Match(From);
			State = 440;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public AliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasNameContext aliasName() {
		AliasNameContext _localctx = new AliasNameContext(Context, State);
		EnterRule(_localctx, 44, RULE_aliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			identifierName();
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 443;
				Match(As);
				State = 444;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
	 
		public ExportStatementContext() { }
		public virtual void CopyFrom(ExportStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExportDefaultDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ExportDefaultDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDefaultDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExportDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExportFromBlockContext exportFromBlock() {
			return GetRuleContext<ExportFromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		public ExportDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_exportStatement);
		try {
			State = 458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				_localctx = new ExportDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 447;
				Match(Export);
				State = 449;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 448;
					Match(Default);
					}
					break;
				}
				State = 453;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 451;
					exportFromBlock();
					}
					break;
				case 2:
					{
					State = 452;
					declaration();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ExportDefaultDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 455;
				Match(Export);
				State = 456;
				Match(Default);
				State = 457;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportModuleItemsContext exportModuleItems() {
			return GetRuleContext<ExportModuleItemsContext>(0);
		}
		public ExportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportFromBlockContext exportFromBlock() {
		ExportFromBlockContext _localctx = new ExportFromBlockContext(Context, State);
		EnterRule(_localctx, 48, RULE_exportFromBlock);
		int _la;
		try {
			State = 467;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 460;
				importNamespace();
				State = 461;
				importFrom();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 463;
				exportModuleItems();
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==From) {
					{
					State = 464;
					importFrom();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExportAliasNameContext[] exportAliasName() {
			return GetRuleContexts<ExportAliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportAliasNameContext exportAliasName(int i) {
			return GetRuleContext<ExportAliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public ExportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportModuleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportModuleItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportModuleItemsContext exportModuleItems() {
		ExportModuleItemsContext _localctx = new ExportModuleItemsContext(Context, State);
		EnterRule(_localctx, 50, RULE_exportModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			Match(OpenBrace);
			State = 475;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 470;
					exportAliasName();
					State = 471;
					Match(Comma);
					}
					} 
				}
				State = 477;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			State = 482;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2305843008207052815L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 478;
				exportAliasName();
				State = 480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 479;
					Match(Comma);
					}
				}

				}
			}

			State = 484;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportAliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext[] moduleExportName() {
			return GetRuleContexts<ModuleExportNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext moduleExportName(int i) {
			return GetRuleContext<ModuleExportNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		public ExportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportAliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportAliasNameContext exportAliasName() {
		ExportAliasNameContext _localctx = new ExportAliasNameContext(Context, State);
		EnterRule(_localctx, 52, RULE_exportAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			moduleExportName();
			State = 489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 487;
				Match(As);
				State = 488;
				moduleExportName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_declaration);
		try {
			State = 493;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Class:
				EnterOuterAlt(_localctx, 1);
				{
				State = 491;
				classDeclaration();
				}
				break;
			case Default:
			case This:
			case Get:
			case Set:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case From:
			case Async:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 492;
				functionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 56, RULE_variableDeclarationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			variableDeclaration();
			State = 500;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 496;
					Match(Comma);
					State = 497;
					variableDeclaration();
					}
					} 
				}
				State = 502;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			assignable();
			State = 507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 504;
				assignmentOperator();
				State = 505;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StartFunctionStatement() { return GetToken(MainParser.StartFunctionStatement, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStatementContext functionStatement() {
		FunctionStatementContext _localctx = new FunctionStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_functionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			primaryExpression(0);
			State = 510;
			Match(StartFunctionStatement);
			State = 512;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 511;
				arguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			expressionSequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MainParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			Match(If);
			State = 517;
			singleExpression(0);
			State = 521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 518;
				Match(WS);
				}
				}
				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 524;
			flowBlock();
			State = 525;
			elseProduction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlowBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FlowBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flowBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlowBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlowBlockContext flowBlock() {
		FlowBlockContext _localctx = new FlowBlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_flowBlock);
		int _la;
		try {
			State = 534;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 527;
					Match(EOL);
					}
					}
					State = 530;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EOL );
				State = 532;
				statement();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 533;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UntilProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilProductionContext untilProduction() {
		UntilProductionContext _localctx = new UntilProductionContext(Context, State);
		EnterRule(_localctx, 68, RULE_untilProduction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			Match(EOL);
			State = 537;
			Match(Until);
			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 538;
				Match(EOL);
				}
			}

			State = 541;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseProductionContext elseProduction() {
		ElseProductionContext _localctx = new ElseProductionContext(Context, State);
		EnterRule(_localctx, 70, RULE_elseProduction);
		int _la;
		try {
			State = 550;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 543;
				Match(EOL);
				State = 544;
				Match(Else);
				State = 546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EOL) {
					{
					State = 545;
					Match(EOL);
					}
				}

				State = 548;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 549;
				if (!(!this.second(Else))) throw new FailedPredicateException(this, "!this.second(Else)");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopReadStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopRead() { return GetToken(MainParser.LoopRead, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		public LoopReadStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopParseStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopParse() { return GetToken(MainParser.LoopParse, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		public LoopParseStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopParseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopFilesStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopFiles() { return GetToken(MainParser.LoopFiles, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		public LoopFilesStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopFilesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopRegStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopReg() { return GetToken(MainParser.LoopReg, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		public LoopRegStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopRegStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public LoopStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MainParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MainParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForInParametersContext forInParameters() {
			return GetRuleContext<ForInParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilProductionContext untilProduction() {
			return GetRuleContext<UntilProductionContext>(0);
		}
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_iterationStatement);
		int _la;
		try {
			int _alt;
			State = 703;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Loop:
				_localctx = new LoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 552;
				Match(Loop);
				State = 560;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 553;
					singleExpression(0);
					State = 557;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 554;
						Match(WS);
						}
						}
						State = 559;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 562;
				flowBlock();
				State = 564;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 563;
					untilProduction();
					}
					break;
				}
				State = 566;
				elseProduction();
				}
				break;
			case LoopFiles:
				_localctx = new LoopFilesStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 568;
				Match(LoopFiles);
				State = 569;
				singleExpression(0);
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 570;
					Match(WS);
					}
					}
					State = 575;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 576;
					Match(Comma);
					State = 577;
					singleExpression(0);
					State = 581;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 578;
						Match(WS);
						}
						}
						State = 583;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 586;
				flowBlock();
				State = 588;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 587;
					untilProduction();
					}
					break;
				}
				State = 590;
				elseProduction();
				}
				break;
			case LoopRead:
				_localctx = new LoopReadStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 592;
				Match(LoopRead);
				State = 593;
				singleExpression(0);
				State = 597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 594;
					Match(WS);
					}
					}
					State = 599;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 600;
					Match(Comma);
					State = 601;
					singleExpression(0);
					State = 605;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 602;
						Match(WS);
						}
						}
						State = 607;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 610;
				flowBlock();
				State = 612;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 611;
					untilProduction();
					}
					break;
				}
				State = 614;
				elseProduction();
				}
				break;
			case LoopReg:
				_localctx = new LoopRegStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 616;
				Match(LoopReg);
				State = 617;
				singleExpression(0);
				State = 621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 618;
					Match(WS);
					}
					}
					State = 623;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 624;
					Match(Comma);
					State = 625;
					singleExpression(0);
					State = 629;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 626;
						Match(WS);
						}
						}
						State = 631;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 634;
				flowBlock();
				State = 636;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 635;
					untilProduction();
					}
					break;
				}
				State = 638;
				elseProduction();
				}
				break;
			case LoopParse:
				_localctx = new LoopParseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 640;
				Match(LoopParse);
				State = 641;
				singleExpression(0);
				State = 645;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 642;
					Match(WS);
					}
					}
					State = 647;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 648;
					Match(Comma);
					State = 656;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
					case 1:
						{
						State = 649;
						singleExpression(0);
						State = 653;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==WS) {
							{
							{
							State = 650;
							Match(WS);
							}
							}
							State = 655;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					}
					}
					}
					State = 662;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 663;
				flowBlock();
				State = 665;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 664;
					untilProduction();
					}
					break;
				}
				State = 667;
				elseProduction();
				}
				break;
			case While:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 669;
				Match(While);
				State = 670;
				singleExpression(0);
				State = 674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 671;
					Match(WS);
					}
					}
					State = 676;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 677;
				flowBlock();
				State = 679;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 678;
					untilProduction();
					}
					break;
				}
				State = 681;
				elseProduction();
				}
				break;
			case For:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 683;
				Match(For);
				State = 687;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 684;
						Match(WS);
						}
						} 
					}
					State = 689;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
				}
				State = 690;
				forInParameters();
				State = 694;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 691;
					Match(WS);
					}
					}
					State = 696;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 697;
				flowBlock();
				State = 699;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
				case 1:
					{
					State = 698;
					untilProduction();
					}
					break;
				}
				State = 701;
				elseProduction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext[] assignable() {
			return GetRuleContexts<AssignableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable(int i) {
			return GetRuleContext<AssignableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ForInParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInParametersContext forInParameters() {
		ForInParametersContext _localctx = new ForInParametersContext(Context, State);
		EnterRule(_localctx, 74, RULE_forInParameters);
		int _la;
		try {
			State = 760;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case OpenBrace:
			case Comma:
			case Default:
			case This:
			case In:
			case Get:
			case Set:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case From:
			case Identifier:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenBracket || _la==OpenBrace || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 563035181694977L) != 0)) {
					{
					State = 705;
					assignable();
					}
				}

				State = 714;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 708;
					Match(Comma);
					State = 710;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OpenBracket || _la==OpenBrace || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 563035181694977L) != 0)) {
						{
						State = 709;
						assignable();
						}
					}

					}
					}
					State = 716;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 717;
					Match(WS);
					}
					}
					State = 722;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 723;
				Match(In);
				State = 727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 724;
					Match(WS);
					}
					}
					State = 729;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 730;
				singleExpression(0);
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 731;
				Match(OpenParen);
				State = 733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenBracket || _la==OpenBrace || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 563035181694977L) != 0)) {
					{
					State = 732;
					assignable();
					}
				}

				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 735;
					Match(Comma);
					State = 737;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OpenBracket || _la==OpenBrace || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 563035181694977L) != 0)) {
						{
						State = 736;
						assignable();
						}
					}

					}
					}
					State = 743;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 747;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 744;
					Match(WS);
					}
					}
					State = 749;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 750;
				Match(In);
				State = 754;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 751;
					Match(WS);
					}
					}
					State = 756;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 757;
				singleExpression(0);
				State = 758;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(MainParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_continueStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 762;
			Match(Continue);
			State = 766;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 763;
					Match(WS);
					}
					} 
				}
				State = 768;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			}
			State = 774;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 769;
				propertyName();
				}
				break;
			case 2:
				{
				State = 770;
				Match(OpenParen);
				State = 771;
				propertyName();
				State = 772;
				Match(CloseParen);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MainParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_breakStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			Match(Break);
			State = 780;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 777;
					Match(WS);
					}
					} 
				}
				State = 782;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			}
			State = 788;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 783;
				Match(OpenParen);
				State = 784;
				propertyName();
				State = 785;
				Match(CloseParen);
				}
				break;
			case 2:
				{
				State = 787;
				propertyName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MainParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_returnStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 790;
			Match(Return);
			State = 794;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 791;
					Match(WS);
					}
					} 
				}
				State = 796;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
			}
			State = 798;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 797;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_yieldStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			Match(Yield);
			State = 804;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 801;
					Match(WS);
					}
					} 
				}
				State = 806;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			}
			State = 808;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 807;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(MainParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MainParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810;
			Match(Switch);
			State = 812;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 811;
				singleExpression(0);
				}
				break;
			}
			State = 816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 814;
				Match(Comma);
				State = 815;
				literal();
				}
			}

			State = 821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 818;
				s();
				}
				}
				State = 823;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 824;
			caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext[] caseClauses() {
			return GetRuleContexts<CaseClausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext caseClauses(int i) {
			return GetRuleContext<CaseClausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 86, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 826;
			Match(OpenBrace);
			State = 830;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 827;
				s();
				}
				}
				State = 832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Case) {
				{
				State = 833;
				caseClauses();
				}
			}

			State = 840;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Default) {
				{
				State = 836;
				defaultClause();
				State = 838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Case) {
					{
					State = 837;
					caseClauses();
					}
				}

				}
			}

			State = 842;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 88, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 845;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 844;
				caseClause();
				}
				}
				State = 847;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(MainParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 90, RULE_caseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849;
			Match(Case);
			State = 853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 850;
				Match(WS);
				}
				}
				State = 855;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 856;
			expressionSequence();
			State = 860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 857;
				Match(WS);
				}
				}
				State = 862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 863;
			Match(Colon);
			State = 872;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				{
				State = 867;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 864;
					s();
					}
					}
					State = 869;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 870;
				statementList();
				}
				break;
			case 2:
				{
				State = 871;
				Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 92, RULE_defaultClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874;
			Match(Default);
			State = 878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 875;
				Match(WS);
				}
				}
				State = 880;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 881;
			Match(Colon);
			State = 890;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				{
				State = 885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 882;
					s();
					}
					}
					State = 887;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 888;
				statementList();
				}
				break;
			case 2:
				{
				State = 889;
				Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		public LabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelledStatementContext labelledStatement() {
		LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_labelledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 892;
			Match(Identifier);
			State = 893;
			Match(Colon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(MainParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_gotoStatement);
		try {
			State = 902;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 895;
				Match(Goto);
				State = 896;
				propertyName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 897;
				Match(Goto);
				State = 898;
				Match(OpenParen);
				State = 899;
				propertyName();
				State = 900;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(MainParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			Match(Throw);
			State = 906;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 905;
				singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(MainParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseProductionContext elseProduction() {
			return GetRuleContext<ElseProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext[] catchProduction() {
			return GetRuleContexts<CatchProductionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext catchProduction(int i) {
			return GetRuleContext<CatchProductionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_tryStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 908;
			Match(Try);
			State = 910;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 909;
				Match(EOL);
				}
			}

			State = 912;
			statement();
			State = 916;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 913;
					catchProduction();
					}
					} 
				}
				State = 918;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			}
			State = 919;
			elseProduction();
			State = 921;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				{
				State = 920;
				finallyProduction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(MainParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchAssignableContext catchAssignable() {
			return GetRuleContext<CatchAssignableContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 102, RULE_catchProduction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 923;
			Match(EOL);
			State = 924;
			Match(Catch);
			State = 928;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 925;
				Match(WS);
				}
				}
				State = 930;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 938;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenParen || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 563035181694977L) != 0)) {
				{
				State = 931;
				catchAssignable();
				State = 935;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 932;
					Match(WS);
					}
					}
					State = 937;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 940;
			flowBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchAssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CatchClassesContext catchClasses() {
			return GetRuleContext<CatchClassesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public CatchAssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchAssignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchAssignable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchAssignableContext catchAssignable() {
		CatchAssignableContext _localctx = new CatchAssignableContext(Context, State);
		EnterRule(_localctx, 104, RULE_catchAssignable);
		int _la;
		try {
			State = 983;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Default:
			case This:
			case Get:
			case Set:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case From:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 942;
				catchClasses();
				State = 950;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
				case 1:
					{
					State = 946;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 943;
						Match(WS);
						}
						}
						State = 948;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 949;
					Match(As);
					}
					break;
				}
				State = 959;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
				case 1:
					{
					State = 955;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 952;
						Match(WS);
						}
						}
						State = 957;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 958;
					identifier();
					}
					break;
				}
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 961;
				Match(OpenParen);
				State = 962;
				catchClasses();
				State = 970;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
				case 1:
					{
					State = 966;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 963;
						Match(WS);
						}
						}
						State = 968;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 969;
					Match(As);
					}
					break;
				}
				State = 979;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 5066634809065473L) != 0)) {
					{
					State = 975;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 972;
						Match(WS);
						}
						}
						State = 977;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 978;
					identifier();
					}
				}

				State = 981;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClassesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public CatchClassesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClasses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClasses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClassesContext catchClasses() {
		CatchClassesContext _localctx = new CatchClassesContext(Context, State);
		EnterRule(_localctx, 106, RULE_catchClasses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 985;
			identifier();
			State = 990;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 986;
				Match(Comma);
				State = 987;
				identifier();
				}
				}
				State = 992;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(MainParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlowBlockContext flowBlock() {
			return GetRuleContext<FlowBlockContext>(0);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 108, RULE_finallyProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 993;
			Match(EOL);
			State = 994;
			Match(Finally);
			State = 995;
			flowBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 110, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 997;
			functionHead();
			State = 998;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MainParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(MainParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassExtensionNameContext classExtensionName() {
			return GetRuleContext<ClassExtensionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 112, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1000;
			Match(Class);
			State = 1004;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 1001;
				Match(WS);
				}
				}
				State = 1006;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1007;
			identifier();
			State = 1020;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
			case 1:
				{
				State = 1009;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1008;
					Match(WS);
					}
					}
					State = 1011;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS );
				State = 1013;
				Match(Extends);
				State = 1015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1014;
					Match(WS);
					}
					}
					State = 1017;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS );
				State = 1019;
				classExtensionName();
				}
				break;
			}
			State = 1025;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1022;
				s();
				}
				}
				State = 1027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1028;
			classTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassExtensionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MainParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MainParser.Dot, i);
		}
		public ClassExtensionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classExtensionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExtensionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassExtensionNameContext classExtensionName() {
		ClassExtensionNameContext _localctx = new ClassExtensionNameContext(Context, State);
		EnterRule(_localctx, 114, RULE_classExtensionName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1030;
			identifier();
			State = 1035;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 1031;
				Match(Dot);
				State = 1032;
				identifier();
				}
				}
				State = 1037;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext[] classElement() {
			return GetRuleContexts<ClassElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext classElement(int i) {
			return GetRuleContext<ClassElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ClassTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTailContext classTail() {
		ClassTailContext _localctx = new ClassTailContext(Context, State);
		EnterRule(_localctx, 116, RULE_classTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1038;
			Match(OpenBrace);
			State = 1045;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2305843008207053311L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & 7L) != 0)) {
				{
				State = 1043;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NullLiteral:
				case Unset:
				case True:
				case False:
				case DecimalLiteral:
				case HexIntegerLiteral:
				case OctalIntegerLiteral:
				case OctalIntegerLiteral2:
				case BinaryIntegerLiteral:
				case Break:
				case Do:
				case Instanceof:
				case Switch:
				case Case:
				case Default:
				case Else:
				case Catch:
				case Finally:
				case Return:
				case Continue:
				case For:
				case While:
				case Loop:
				case Until:
				case This:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case Yield:
				case Is:
				case Contains:
				case VerbalAnd:
				case VerbalNot:
				case VerbalOr:
				case Goto:
				case Get:
				case Set:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Base:
				case Export:
				case Import:
				case From:
				case As:
				case Async:
				case Await:
				case Static:
				case Global:
				case Local:
				case Identifier:
				case StringLiteral:
					{
					State = 1039;
					classElement();
					State = 1040;
					Match(EOL);
					}
					break;
				case EOL:
					{
					State = 1042;
					Match(EOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1048;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementContext : ParserRuleContext {
		public ClassElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElement; } }
	 
		public ClassElementContext() { }
		public virtual void CopyFrom(ClassElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public NestedClassDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassFieldDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext[] fieldDefinition() {
			return GetRuleContexts<FieldDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition(int i) {
			return GetRuleContext<FieldDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public ClassFieldDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassMethodDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		public ClassMethodDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassPropertyDeclarationContext : ClassElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDefinitionContext propertyDefinition() {
			return GetRuleContext<PropertyDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		public ClassPropertyDeclarationContext(ClassElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementContext classElement() {
		ClassElementContext _localctx = new ClassElementContext(Context, State);
		EnterRule(_localctx, 118, RULE_classElement);
		int _la;
		try {
			State = 1070;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				_localctx = new ClassMethodDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1051;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Static) {
					{
					State = 1050;
					Match(Static);
					}
				}

				State = 1053;
				methodDefinition();
				}
				break;
			case 2:
				_localctx = new ClassPropertyDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Static) {
					{
					State = 1054;
					Match(Static);
					}
				}

				State = 1057;
				propertyDefinition();
				}
				break;
			case 3:
				_localctx = new ClassFieldDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1059;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
				case 1:
					{
					State = 1058;
					Match(Static);
					}
					break;
				}
				State = 1061;
				fieldDefinition();
				State = 1066;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1062;
					Match(Comma);
					State = 1063;
					fieldDefinition();
					}
					}
					State = 1068;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 4:
				_localctx = new NestedClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1069;
				classDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
		EnterRule(_localctx, 120, RULE_methodDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1072;
			functionHead();
			State = 1073;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassPropertyNameContext classPropertyName() {
			return GetRuleContext<ClassPropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StartFunctionStatement() { return GetToken(MainParser.StartFunctionStatement, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyGetterDefinitionContext[] propertyGetterDefinition() {
			return GetRuleContexts<PropertyGetterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyGetterDefinitionContext propertyGetterDefinition(int i) {
			return GetRuleContext<PropertyGetterDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySetterDefinitionContext[] propertySetterDefinition() {
			return GetRuleContexts<PropertySetterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySetterDefinitionContext propertySetterDefinition(int i) {
			return GetRuleContext<PropertySetterDefinitionContext>(i);
		}
		public PropertyDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefinitionContext propertyDefinition() {
		PropertyDefinitionContext _localctx = new PropertyDefinitionContext(Context, State);
		EnterRule(_localctx, 122, RULE_propertyDefinition);
		int _la;
		try {
			State = 1103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1075;
				classPropertyName();
				State = 1076;
				Match(Arrow);
				State = 1077;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1079;
				classPropertyName();
				State = 1081;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==StartFunctionStatement) {
					{
					State = 1080;
					Match(StartFunctionStatement);
					}
				}

				State = 1086;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1083;
					s();
					}
					}
					State = 1088;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1089;
				Match(OpenBrace);
				State = 1097;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 1097;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Get:
						{
						State = 1090;
						propertyGetterDefinition();
						State = 1091;
						Match(EOL);
						}
						break;
					case Set:
						{
						State = 1093;
						propertySetterDefinition();
						State = 1094;
						Match(EOL);
						}
						break;
					case EOL:
						{
						State = 1096;
						Match(EOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 1099;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & 16777219L) != 0) );
				State = 1101;
				Match(CloseBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassPropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		public ClassPropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classPropertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassPropertyNameContext classPropertyName() {
		ClassPropertyNameContext _localctx = new ClassPropertyNameContext(Context, State);
		EnterRule(_localctx, 124, RULE_classPropertyName);
		int _la;
		try {
			State = 1119;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1105;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1106;
				identifier();
				State = 1107;
				Match(OpenBracket);
				State = 1109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply || _la==BitAnd || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 563035181694977L) != 0)) {
					{
					State = 1108;
					formalParameterList();
					}
				}

				State = 1114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1111;
					s();
					}
					}
					State = 1116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1117;
				Match(CloseBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(MainParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertyGetterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetterDefinitionContext propertyGetterDefinition() {
		PropertyGetterDefinitionContext _localctx = new PropertyGetterDefinitionContext(Context, State);
		EnterRule(_localctx, 126, RULE_propertyGetterDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121;
			Match(Get);
			State = 1122;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(MainParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertySetterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetterDefinitionContext propertySetterDefinition() {
		PropertySetterDefinitionContext _localctx = new PropertySetterDefinitionContext(Context, State);
		EnterRule(_localctx, 128, RULE_propertySetterDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1124;
			Match(Set);
			State = 1125;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 130, RULE_fieldDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1127;
			propertyName();
			State = 1128;
			Match(Assign);
			State = 1129;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterArgContext lastFormalParameterArg() {
			return GetRuleContext<LastFormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext[] formalParameterArg() {
			return GetRuleContexts<FormalParameterArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg(int i) {
			return GetRuleContext<FormalParameterArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 132, RULE_formalParameterList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1136;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1131;
					formalParameterArg();
					State = 1132;
					Match(Comma);
					}
					} 
				}
				State = 1138;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			}
			State = 1139;
			lastFormalParameterArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterArgContext formalParameterArg() {
		FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
		EnterRule(_localctx, 134, RULE_formalParameterArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BitAnd) {
				{
				State = 1141;
				Match(BitAnd);
				}
			}

			State = 1144;
			identifier();
			State = 1148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				{
				State = 1145;
				Match(Assign);
				State = 1146;
				expression(0);
				}
				break;
			case QuestionMark:
				{
				State = 1147;
				Match(QuestionMark);
				}
				break;
			case CloseBracket:
			case CloseParen:
			case Comma:
			case EOL:
			case WS:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg() {
			return GetRuleContext<FormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LastFormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterArgContext lastFormalParameterArg() {
		LastFormalParameterArgContext _localctx = new LastFormalParameterArgContext(Context, State);
		EnterRule(_localctx, 136, RULE_lastFormalParameterArg);
		int _la;
		try {
			State = 1155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1150;
				formalParameterArg();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 563035181694977L) != 0)) {
					{
					State = 1151;
					identifier();
					}
				}

				State = 1154;
				Match(Multiply);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementListContext arrayElementList() {
			return GetRuleContext<ArrayElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 138, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1157;
			Match(OpenBracket);
			State = 1161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1158;
				_la = TokenStream.LA(1);
				if ( !(_la==EOL || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 562952084165890L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2305843008207060991L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 1164;
				arrayElementList();
				State = 1168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1165;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1173;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		public ArrayElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementListContext arrayElementList() {
		ArrayElementListContext _localctx = new ArrayElementListContext(Context, State);
		EnterRule(_localctx, 140, RULE_arrayElementList);
		int _la;
		try {
			State = 1193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Comma:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1175;
					Match(Comma);
					State = 1177;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 562952084133122L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2305843008207060991L) != 0) || _la==Identifier || _la==StringLiteral) {
						{
						State = 1176;
						arrayElement();
						}
					}

					}
					}
					State = 1181;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				}
				break;
			case DerefStart:
			case OpenBracket:
			case OpenParen:
			case OpenBrace:
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case BitNot:
			case Not:
			case Multiply:
			case BitAnd:
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1183;
				arrayElement();
				State = 1190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1184;
					Match(Comma);
					State = 1186;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 562952084133122L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2305843008207060991L) != 0) || _la==Identifier || _la==StringLiteral) {
						{
						State = 1185;
						arrayElement();
						}
					}

					}
					}
					State = 1192;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(Context, State);
		EnterRule(_localctx, 142, RULE_arrayElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1195;
			expression(0);
			State = 1197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply) {
				{
				State = 1196;
				Match(Multiply);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MapElementListContext mapElementList() {
			return GetRuleContext<MapElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public MapLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapLiteralContext mapLiteral() {
		MapLiteralContext _localctx = new MapLiteralContext(Context, State);
		EnterRule(_localctx, 144, RULE_mapLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1199;
			Match(OpenBracket);
			State = 1203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1200;
				_la = TokenStream.LA(1);
				if ( !(_la==EOL || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1206;
			mapElementList();
			State = 1210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1207;
				_la = TokenStream.LA(1);
				if ( !(_la==EOL || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1213;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapElementContext[] mapElement() {
			return GetRuleContexts<MapElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapElementContext mapElement(int i) {
			return GetRuleContext<MapElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public MapElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapElementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapElementListContext mapElementList() {
		MapElementListContext _localctx = new MapElementListContext(Context, State);
		EnterRule(_localctx, 146, RULE_mapElementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1215;
				Match(Comma);
				}
				}
				State = 1220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1221;
			mapElement();
			State = 1228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1222;
				Match(Comma);
				State = 1224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 562952084133122L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2305843008207060991L) != 0) || _la==Identifier || _la==StringLiteral) {
					{
					State = 1223;
					mapElement();
					}
				}

				}
				}
				State = 1230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapElementContext : ParserRuleContext {
		public ExpressionContext key;
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MapElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapElementContext mapElement() {
		MapElementContext _localctx = new MapElementContext(Context, State);
		EnterRule(_localctx, 148, RULE_mapElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1231;
			_localctx.key = expression(0);
			State = 1232;
			Match(Colon);
			State = 1233;
			_localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberIdentifierContext memberIdentifier() {
			return GetRuleContext<MemberIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 150, RULE_propertyAssignment);
		int _la;
		try {
			_localctx = new PropertyExpressionAssignmentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 1235;
			memberIdentifier();
			State = 1239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1236;
				_la = TokenStream.LA(1);
				if ( !(_la==EOL || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1242;
			Match(Colon);
			State = 1246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1243;
				_la = TokenStream.LA(1);
				if ( !(_la==EOL || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1249;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 152, RULE_propertyName);
		try {
			State = 1255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1251;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1252;
				reservedWord();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1253;
				Match(StringLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1254;
				numericLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DereferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefStart() { return GetToken(MainParser.DerefStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DerefEnd() { return GetToken(MainParser.DerefEnd, 0); }
		public DereferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dereference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDereference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DereferenceContext dereference() {
		DereferenceContext _localctx = new DereferenceContext(Context, State);
		EnterRule(_localctx, 154, RULE_dereference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1257;
			Match(DerefStart);
			State = 1258;
			expression(0);
			State = 1259;
			Match(DerefEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 156, RULE_arguments);
		try {
			int _alt;
			State = 1279;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DerefStart:
			case OpenBracket:
			case OpenParen:
			case OpenBrace:
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case BitNot:
			case Not:
			case Multiply:
			case BitAnd:
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1261;
				argument();
				State = 1268;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1262;
						Match(Comma);
						State = 1264;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
						case 1:
							{
							State = 1263;
							argument();
							}
							break;
						}
						}
						} 
					}
					State = 1270;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
				}
				}
				break;
			case Comma:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1275;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1271;
						Match(Comma);
						State = 1273;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
						case 1:
							{
							State = 1272;
							argument();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1277;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 158, RULE_argument);
		int _la;
		try {
			State = 1285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1281;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1282;
				primaryExpression(0);
				State = 1283;
				_la = TokenStream.LA(1);
				if ( !(_la==QuestionMark || _la==Multiply) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 160, RULE_expressionSequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1287;
			expression(0);
			State = 1292;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1288;
					Match(Comma);
					State = 1289;
					expression(0);
					}
					} 
				}
				State = 1294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberIndexArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(MainParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(MainParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementListContext arrayElementList() {
			return GetRuleContext<ArrayElementListContext>(0);
		}
		public MemberIndexArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberIndexArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberIndexArgumentsContext memberIndexArguments() {
		MemberIndexArgumentsContext _localctx = new MemberIndexArgumentsContext(Context, State);
		EnterRule(_localctx, 162, RULE_memberIndexArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1295;
			Match(OpenBracket);
			State = 1299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1296;
				s();
				}
				}
				State = 1301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 562952084165890L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2305843008207060991L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 1302;
				arrayElementList();
				}
			}

			State = 1305;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		public ExpressionContext ternCond;
		public ExpressionContext ternTrue;
		public ExpressionContext ternFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MainParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpressionHeadContext functionExpressionHead() {
			return GetRuleContext<FunctionExpressionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public FunctionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FatArrowExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FatArrowExpressionHeadContext fatArrowExpressionHead() {
			return GetRuleContext<FatArrowExpressionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FatArrowExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFatArrowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MainParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionDummyContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public ExpressionDummyContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionDummy(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(MainParser.NullCoalesce, 0); }
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 164;
		EnterRecursionRule(_localctx, 164, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
			case 1:
				{
				_localctx = new FatArrowExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1308;
				fatArrowExpressionHead();
				State = 1309;
				Match(Arrow);
				State = 1310;
				expression(3);
				}
				break;
			case 2:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1312;
				functionExpressionHead();
				State = 1316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1313;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1318;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1319;
				block();
				}
				break;
			case 3:
				{
				_localctx = new ExpressionDummyContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1321;
				operatorExpression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1371;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1369;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
					case 1:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1324;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1327;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case And:
							{
							State = 1325;
							((LogicalAndExpressionContext)_localctx).op = Match(And);
							}
							break;
						case VerbalAnd:
							{
							State = 1326;
							((LogicalAndExpressionContext)_localctx).op = Match(VerbalAnd);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1329;
						((LogicalAndExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 2:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1330;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1333;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case Or:
							{
							State = 1331;
							((LogicalOrExpressionContext)_localctx).op = Match(Or);
							}
							break;
						case VerbalOr:
							{
							State = 1332;
							((LogicalOrExpressionContext)_localctx).op = Match(VerbalOr);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1335;
						((LogicalOrExpressionContext)_localctx).right = expression(7);
						}
						break;
					case 3:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CoalesceExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1336;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1337;
						((CoalesceExpressionContext)_localctx).op = Match(NullCoalesce);
						State = 1338;
						((CoalesceExpressionContext)_localctx).right = expression(5);
						}
						break;
					case 4:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TernaryExpressionContext)_localctx).ternCond = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1339;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1343;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1340;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1345;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1346;
						Match(QuestionMark);
						State = 1350;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1347;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1352;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1353;
						((TernaryExpressionContext)_localctx).ternTrue = expression(0);
						State = 1357;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1354;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1359;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1360;
						Match(Colon);
						State = 1364;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1361;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1366;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1367;
						((TernaryExpressionContext)_localctx).ternFalse = expression(5);
						}
						break;
					}
					} 
				}
				State = 1373;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalOrExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MainParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		public LogicalOrExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleExpressionDummyContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public SingleExpressionDummyContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleExpressionDummy(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext ternCond;
		public SingleExpressionContext ternTrue;
		public SingleExpressionContext ternFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MainParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public TernaryExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MainParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		public LogicalAndExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionDuplicateContext : SingleExpressionContext {
		public SingleExpressionContext left;
		public IToken op;
		public SingleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(MainParser.NullCoalesce, 0); }
		public CoalesceExpressionDuplicateContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpressionDuplicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 166;
		EnterRecursionRule(_localctx, 166, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SingleExpressionDummyContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 1375;
			operatorExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1418;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,199,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1416;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
					case 1:
						{
						_localctx = new LogicalAndExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1377;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1378;
						((LogicalAndExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==And || _la==VerbalAnd) ) {
							((LogicalAndExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1379;
						((LogicalAndExpressionDuplicateContext)_localctx).right = singleExpression(6);
						}
						break;
					case 2:
						{
						_localctx = new LogicalOrExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1380;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1381;
						((LogicalOrExpressionDuplicateContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Or || _la==VerbalOr) ) {
							((LogicalOrExpressionDuplicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1382;
						((LogicalOrExpressionDuplicateContext)_localctx).right = singleExpression(5);
						}
						break;
					case 3:
						{
						_localctx = new CoalesceExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((CoalesceExpressionDuplicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1383;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1384;
						((CoalesceExpressionDuplicateContext)_localctx).op = Match(NullCoalesce);
						State = 1385;
						((CoalesceExpressionDuplicateContext)_localctx).right = singleExpression(4);
						}
						break;
					case 4:
						{
						_localctx = new TernaryExpressionDuplicateContext(new SingleExpressionContext(_parentctx, _parentState));
						((TernaryExpressionDuplicateContext)_localctx).ternCond = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1386;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1390;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1387;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1392;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1393;
						Match(QuestionMark);
						State = 1397;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1394;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1399;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1400;
						((TernaryExpressionDuplicateContext)_localctx).ternTrue = singleExpression(0);
						State = 1404;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1401;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1406;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1407;
						Match(Colon);
						State = 1411;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1408;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1413;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1414;
						((TernaryExpressionDuplicateContext)_localctx).ternFalse = singleExpression(3);
						}
						break;
					}
					} 
				}
				State = 1420;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,199,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperatorExpressionContext : ParserRuleContext {
		public OperatorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorExpression; } }
	 
		public OperatorExpressionContext() { }
		public virtual void CopyFrom(OperatorExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AdditiveExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		public AdditiveExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(MainParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(MainParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(MainParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(MainParser.GreaterThanEquals, 0); }
		public RelationalExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public PostIncrementExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(MainParser.Power, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		public PowerExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContainExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(MainParser.Contains, 0); }
		public ContainExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(MainParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public PreIncrementExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitNotExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(MainParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public BitNotExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : OperatorExpressionContext {
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(MainParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		public NotExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegExMatchExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegExMatch() { return GetToken(MainParser.RegExMatch, 0); }
		public RegExMatchExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegExMatchExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecreaseExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public PreDecreaseExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MainParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : OperatorExpressionContext {
		public PrimaryExpressionContext left;
		public AssignmentOperatorContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public BitAndExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecreaseExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(MainParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public PostDecreaseExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(MainParser.BitOr, 0); }
		public BitOrExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MainParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression() {
			return GetRuleContext<OperatorExpressionContext>(0);
		}
		public UnaryPlusExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenateExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConcatDot() { return GetToken(MainParser.ConcatDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		public ConcatenateExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorExpressionDummyContext : OperatorExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public OperatorExpressionDummyContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorExpressionDummy(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(MainParser.BitXOr, 0); }
		public BitXOrExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(MainParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(MainParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(MainParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityNotEquals() { return GetToken(MainParser.IdentityNotEquals, 0); }
		public EqualityExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(MainParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivide() { return GetToken(MainParser.IntegerDivide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public MultiplicativeExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitShiftExpressionContext : OperatorExpressionContext {
		public OperatorExpressionContext left;
		public IToken op;
		public OperatorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext[] operatorExpression() {
			return GetRuleContexts<OperatorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorExpressionContext operatorExpression(int i) {
			return GetRuleContext<OperatorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(MainParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(MainParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogical() { return GetToken(MainParser.RightShiftLogical, 0); }
		public BitShiftExpressionContext(OperatorExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorExpressionContext operatorExpression() {
		return operatorExpression(0);
	}

	private OperatorExpressionContext operatorExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		OperatorExpressionContext _localctx = new OperatorExpressionContext(Context, _parentState);
		OperatorExpressionContext _prevctx = _localctx;
		int _startState = 168;
		EnterRecursionRule(_localctx, 168, RULE_operatorExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				{
				_localctx = new OperatorExpressionDummyContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1422;
				primaryExpression(0);
				}
				break;
			case 2:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1423;
				Match(PlusPlus);
				State = 1424;
				((PreIncrementExpressionContext)_localctx).right = operatorExpression(19);
				}
				break;
			case 3:
				{
				_localctx = new PreDecreaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1425;
				Match(MinusMinus);
				State = 1426;
				((PreDecreaseExpressionContext)_localctx).right = operatorExpression(18);
				}
				break;
			case 4:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1427;
				Match(Minus);
				State = 1428;
				((UnaryMinusExpressionContext)_localctx).right = operatorExpression(16);
				}
				break;
			case 5:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1431;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Not:
					{
					State = 1429;
					((NotExpressionContext)_localctx).op = Match(Not);
					}
					break;
				case VerbalNot:
					{
					State = 1430;
					((NotExpressionContext)_localctx).op = Match(VerbalNot);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1433;
				((NotExpressionContext)_localctx).right = operatorExpression(15);
				}
				break;
			case 6:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1434;
				Match(Plus);
				State = 1435;
				((UnaryPlusExpressionContext)_localctx).right = operatorExpression(14);
				}
				break;
			case 7:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1436;
				Match(BitNot);
				State = 1437;
				((BitNotExpressionContext)_localctx).right = operatorExpression(13);
				}
				break;
			case 8:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1438;
				((AssignmentExpressionContext)_localctx).left = primaryExpression(0);
				State = 1439;
				((AssignmentExpressionContext)_localctx).op = assignmentOperator();
				State = 1440;
				((AssignmentExpressionContext)_localctx).right = expression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1517;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,209,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1515;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
					case 1:
						{
						_localctx = new PowerExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((PowerExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1444;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1445;
						Match(Power);
						State = 1446;
						((PowerExpressionContext)_localctx).right = operatorExpression(17);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((MultiplicativeExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1447;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						{
						State = 1451;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1448;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1453;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1454;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7516192768L) != 0)) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1458;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1455;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1460;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1461;
						((MultiplicativeExpressionContext)_localctx).right = operatorExpression(13);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((AdditiveExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1462;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1463;
						((AdditiveExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1464;
						((AdditiveExpressionContext)_localctx).right = operatorExpression(12);
						}
						break;
					case 4:
						{
						_localctx = new BitShiftExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((BitShiftExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1465;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1466;
						((BitShiftExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0)) ) {
							((BitShiftExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1467;
						((BitShiftExpressionContext)_localctx).right = operatorExpression(11);
						}
						break;
					case 5:
						{
						_localctx = new BitAndExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((BitAndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1468;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						{
						State = 1472;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1469;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1474;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1475;
						((BitAndExpressionContext)_localctx).op = Match(BitAnd);
						State = 1479;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==EOL || _la==WS) {
							{
							{
							State = 1476;
							_la = TokenStream.LA(1);
							if ( !(_la==EOL || _la==WS) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 1481;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 1482;
						((BitAndExpressionContext)_localctx).right = operatorExpression(10);
						}
						break;
					case 6:
						{
						_localctx = new BitXOrExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((BitXOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1483;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1484;
						((BitXOrExpressionContext)_localctx).op = Match(BitXOr);
						State = 1485;
						((BitXOrExpressionContext)_localctx).right = operatorExpression(9);
						}
						break;
					case 7:
						{
						_localctx = new BitOrExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((BitOrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1486;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1487;
						((BitOrExpressionContext)_localctx).op = Match(BitOr);
						State = 1488;
						((BitOrExpressionContext)_localctx).right = operatorExpression(8);
						}
						break;
					case 8:
						{
						_localctx = new ConcatenateExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((ConcatenateExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1489;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1496;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ConcatDot:
							{
							State = 1490;
							Match(ConcatDot);
							}
							break;
						case WS:
							{
							State = 1492;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							do {
								{
								{
								State = 1491;
								Match(WS);
								}
								}
								State = 1494;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							} while ( _la==WS );
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1498;
						((ConcatenateExpressionContext)_localctx).right = operatorExpression(7);
						}
						break;
					case 9:
						{
						_localctx = new RegExMatchExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((RegExMatchExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1499;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1500;
						((RegExMatchExpressionContext)_localctx).op = Match(RegExMatch);
						State = 1501;
						((RegExMatchExpressionContext)_localctx).right = operatorExpression(6);
						}
						break;
					case 10:
						{
						_localctx = new RelationalExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((RelationalExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1502;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1503;
						((RelationalExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16492674416640L) != 0)) ) {
							((RelationalExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1504;
						((RelationalExpressionContext)_localctx).right = operatorExpression(5);
						}
						break;
					case 11:
						{
						_localctx = new EqualityExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1505;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1506;
						((EqualityExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 263882790666240L) != 0)) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1507;
						((EqualityExpressionContext)_localctx).right = operatorExpression(4);
						}
						break;
					case 12:
						{
						_localctx = new ContainExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((ContainExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1508;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1509;
						((ContainExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 52428801L) != 0)) ) {
							((ContainExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1510;
						((ContainExpressionContext)_localctx).right = operatorExpression(3);
						}
						break;
					case 13:
						{
						_localctx = new PostIncrementExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((PostIncrementExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1511;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1512;
						Match(PlusPlus);
						}
						break;
					case 14:
						{
						_localctx = new PostDecreaseExpressionContext(new OperatorExpressionContext(_parentctx, _parentState));
						((PostDecreaseExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_operatorExpression);
						State = 1513;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1514;
						Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 1519;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,209,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
	 
		public PrimaryExpressionContext() { }
		public virtual void CopyFrom(PrimaryExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MapLiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapLiteralContext mapLiteral() {
			return GetRuleContext<MapLiteralContext>(0);
		}
		public MapLiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarRefExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public VarRefExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarRefExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DynamicIdentifierExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DynamicIdentifierContext dynamicIdentifier() {
			return GetRuleContext<DynamicIdentifierContext>(0);
		}
		public DynamicIdentifierExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDotExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberIdentifierContext memberIdentifier() {
			return GetRuleContext<MemberIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MainParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		public MemberDotExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberIndexArgumentsContext memberIndexArguments() {
			return GetRuleContext<MemberIndexArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		public MemberIndexExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctionCallExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		return primaryExpression(0);
	}

	private PrimaryExpressionContext primaryExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, _parentState);
		PrimaryExpressionContext _prevctx = _localctx;
		int _startState = 170;
		EnterRecursionRule(_localctx, 170, RULE_primaryExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,210,Context) ) {
			case 1:
				{
				_localctx = new VarRefExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1521;
				Match(BitAnd);
				State = 1522;
				primaryExpression(8);
				}
				break;
			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1523;
				identifier();
				}
				break;
			case 3:
				{
				_localctx = new DynamicIdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1524;
				dynamicIdentifier();
				}
				break;
			case 4:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1525;
				literal();
				}
				break;
			case 5:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1526;
				arrayLiteral();
				}
				break;
			case 6:
				{
				_localctx = new MapLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1527;
				mapLiteral();
				}
				break;
			case 7:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1528;
				objectLiteral();
				}
				break;
			case 8:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1529;
				Match(OpenParen);
				State = 1530;
				expressionSequence();
				State = 1531;
				Match(CloseParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1551;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,214,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1549;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
					case 1:
						{
						_localctx = new MemberDotExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 1535;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1536;
						_la = TokenStream.LA(1);
						if ( !(_la==QuestionMarkDot || _la==Dot) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1537;
						memberIdentifier();
						}
						break;
					case 2:
						{
						_localctx = new FunctionCallExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 1538;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1539;
						Match(OpenParen);
						State = 1541;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 562952084165890L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2305843008207060991L) != 0) || _la==Identifier || _la==StringLiteral) {
							{
							State = 1540;
							arguments();
							}
						}

						State = 1543;
						Match(CloseParen);
						}
						break;
					case 3:
						{
						_localctx = new MemberIndexExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 1544;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1546;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==QuestionMarkDot) {
							{
							State = 1545;
							Match(QuestionMarkDot);
							}
						}

						State = 1548;
						memberIndexArguments();
						}
						break;
					}
					} 
				}
				State = 1553;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,214,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MemberDotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MainParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(MainParser.QuestionMarkDot, 0); }
		public MemberDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDotContext memberDot() {
		MemberDotContext _localctx = new MemberDotContext(Context, State);
		EnterRule(_localctx, 172, RULE_memberDot);
		int _la;
		try {
			State = 1580;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1554;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1557;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EOL || _la==WS );
				State = 1559;
				Match(Dot);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1560;
				Match(Dot);
				State = 1564;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1561;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1566;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1567;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1572;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1573;
				Match(QuestionMarkDot);
				State = 1577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1574;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1579;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DynamicIdentifierContext dynamicIdentifier() {
			return GetRuleContext<DynamicIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public MemberIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberIdentifierContext memberIdentifier() {
		MemberIdentifierContext _localctx = new MemberIdentifierContext(Context, State);
		EnterRule(_localctx, 174, RULE_memberIdentifier);
		try {
			State = 1586;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1582;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1583;
				dynamicIdentifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1584;
				reservedWord();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1585;
				literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext[] propertyName() {
			return GetRuleContexts<PropertyNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName(int i) {
			return GetRuleContext<PropertyNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext[] dereference() {
			return GetRuleContexts<DereferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DereferenceContext dereference(int i) {
			return GetRuleContext<DereferenceContext>(i);
		}
		public DynamicIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicIdentifierContext dynamicIdentifier() {
		DynamicIdentifierContext _localctx = new DynamicIdentifierContext(Context, State);
		EnterRule(_localctx, 176, RULE_dynamicIdentifier);
		try {
			int _alt;
			State = 1605;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case Unset:
			case True:
			case False:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Switch:
			case Case:
			case Default:
			case Else:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case While:
			case Loop:
			case Until:
			case This:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Yield:
			case Is:
			case Contains:
			case VerbalAnd:
			case VerbalNot:
			case VerbalOr:
			case Goto:
			case Get:
			case Set:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case Export:
			case Import:
			case From:
			case As:
			case Async:
			case Await:
			case Static:
			case Global:
			case Local:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1588;
				propertyName();
				State = 1589;
				dereference();
				State = 1594;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,222,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 1592;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NullLiteral:
						case Unset:
						case True:
						case False:
						case DecimalLiteral:
						case HexIntegerLiteral:
						case OctalIntegerLiteral:
						case OctalIntegerLiteral2:
						case BinaryIntegerLiteral:
						case Break:
						case Do:
						case Instanceof:
						case Switch:
						case Case:
						case Default:
						case Else:
						case Catch:
						case Finally:
						case Return:
						case Continue:
						case For:
						case While:
						case Loop:
						case Until:
						case This:
						case If:
						case Throw:
						case Delete:
						case In:
						case Try:
						case Yield:
						case Is:
						case Contains:
						case VerbalAnd:
						case VerbalNot:
						case VerbalOr:
						case Goto:
						case Get:
						case Set:
						case Class:
						case Enum:
						case Extends:
						case Super:
						case Base:
						case Export:
						case Import:
						case From:
						case As:
						case Async:
						case Await:
						case Static:
						case Global:
						case Local:
						case Identifier:
						case StringLiteral:
							{
							State = 1590;
							propertyName();
							}
							break;
						case DerefStart:
							{
							State = 1591;
							dereference();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 1596;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,222,Context);
				}
				}
				break;
			case DerefStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1597;
				dereference();
				State = 1602;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,224,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 1600;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NullLiteral:
						case Unset:
						case True:
						case False:
						case DecimalLiteral:
						case HexIntegerLiteral:
						case OctalIntegerLiteral:
						case OctalIntegerLiteral2:
						case BinaryIntegerLiteral:
						case Break:
						case Do:
						case Instanceof:
						case Switch:
						case Case:
						case Default:
						case Else:
						case Catch:
						case Finally:
						case Return:
						case Continue:
						case For:
						case While:
						case Loop:
						case Until:
						case This:
						case If:
						case Throw:
						case Delete:
						case In:
						case Try:
						case Yield:
						case Is:
						case Contains:
						case VerbalAnd:
						case VerbalNot:
						case VerbalOr:
						case Goto:
						case Get:
						case Set:
						case Class:
						case Enum:
						case Extends:
						case Super:
						case Base:
						case Export:
						case Import:
						case From:
						case As:
						case Async:
						case Await:
						case Static:
						case Global:
						case Local:
						case Identifier:
						case StringLiteral:
							{
							State = 1598;
							propertyName();
							}
							break;
						case DerefStart:
							{
							State = 1599;
							dereference();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 1604;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,224,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 178, RULE_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1607;
			Match(Assign);
			State = 1608;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public AssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableContext assignable() {
		AssignableContext _localctx = new AssignableContext(Context, State);
		EnterRule(_localctx, 180, RULE_assignable);
		try {
			State = 1613;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Default:
			case This:
			case Get:
			case Set:
			case Enum:
			case Extends:
			case Super:
			case Base:
			case From:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1610;
				identifier();
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1611;
				arrayLiteral();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1612;
				objectLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MainParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MainParser.Comma, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 182, RULE_objectLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1615;
			Match(OpenBrace);
			State = 1619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL || _la==WS) {
				{
				{
				State = 1616;
				s();
				}
				}
				State = 1621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DerefStart || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2305843008207060991L) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 1622;
				propertyAssignment();
				State = 1627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1623;
					Match(Comma);
					State = 1624;
					propertyAssignment();
					}
					}
					State = 1629;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1630;
					s();
					}
					}
					State = 1635;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1638;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeadContext functionHead() {
		FunctionHeadContext _localctx = new FunctionHeadContext(Context, State);
		EnterRule(_localctx, 184, RULE_functionHead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Async) {
				{
				State = 1640;
				Match(Async);
				}
			}

			State = 1643;
			identifier();
			State = 1644;
			Match(OpenParen);
			State = 1646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply || _la==BitAnd || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 563035181694977L) != 0)) {
				{
				State = 1645;
				formalParameterList();
				}
			}

			State = 1648;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(MainParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(MainParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionExpressionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionExpressionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpressionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionHeadContext functionExpressionHead() {
		FunctionExpressionHeadContext _localctx = new FunctionExpressionHeadContext(Context, State);
		EnterRule(_localctx, 186, RULE_functionExpressionHead);
		int _la;
		try {
			State = 1659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,235,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1650;
				functionHead();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1652;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Async) {
					{
					State = 1651;
					Match(Async);
					}
				}

				State = 1654;
				Match(OpenParen);
				State = 1656;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply || _la==BitAnd || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 563035181694977L) != 0)) {
					{
					State = 1655;
					formalParameterList();
					}
				}

				State = 1658;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FatArrowExpressionHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MainParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MainParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(MainParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpressionHeadContext functionExpressionHead() {
			return GetRuleContext<FunctionExpressionHeadContext>(0);
		}
		public FatArrowExpressionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fatArrowExpressionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFatArrowExpressionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FatArrowExpressionHeadContext fatArrowExpressionHead() {
		FatArrowExpressionHeadContext _localctx = new FatArrowExpressionHeadContext(Context, State);
		EnterRule(_localctx, 188, RULE_fatArrowExpressionHead);
		int _la;
		try {
			State = 1679;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 563310059601921L) != 0)) {
					{
					State = 1662;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Async) {
						{
						State = 1661;
						Match(Async);
						}
					}

					State = 1664;
					identifier();
					}
				}

				State = 1667;
				Match(Multiply);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Async) {
					{
					State = 1668;
					Match(Async);
					}
				}

				State = 1672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BitAnd) {
					{
					State = 1671;
					Match(BitAnd);
					}
				}

				State = 1674;
				identifier();
				State = 1676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QuestionMark) {
					{
					State = 1675;
					Match(QuestionMark);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1678;
				functionExpressionHead();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MainParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(MainParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(MainParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SContext[] s() {
			return GetRuleContexts<SContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SContext s(int i) {
			return GetRuleContext<SContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MainParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MainParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(MainParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(MainParser.EOL, i);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 190, RULE_functionBody);
		int _la;
		try {
			State = 1700;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Arrow:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1681;
				Match(Arrow);
				State = 1682;
				expression(0);
				}
				break;
			case OpenBrace:
			case EOL:
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1686;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1683;
					_la = TokenStream.LA(1);
					if ( !(_la==EOL || _la==WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1688;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1689;
				Match(OpenBrace);
				State = 1693;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EOL || _la==WS) {
					{
					{
					State = 1690;
					s();
					}
					}
					State = 1695;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 562952084133122L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2305843009213693951L) != 0) || _la==Identifier || _la==StringLiteral) {
					{
					State = 1696;
					statementList();
					}
				}

				State = 1699;
				Match(CloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MainParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(MainParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(MainParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(MainParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(MainParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(MainParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivideAssign() { return GetToken(MainParser.IntegerDivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConcatenateAssign() { return GetToken(MainParser.ConcatenateAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(MainParser.BitOrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(MainParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(MainParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(MainParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(MainParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogicalAssign() { return GetToken(MainParser.RightShiftLogicalAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PowerAssign() { return GetToken(MainParser.PowerAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullishCoalescingAssign() { return GetToken(MainParser.NullishCoalescingAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 192, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1702;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 16)) & ~0x3f) == 0 && ((1L << (_la - 16)) & 9006924376834049L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BigintLiteralContext bigintLiteral() {
			return GetRuleContext<BigintLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(MainParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MainParser.StringLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 194, RULE_literal);
		int _la;
		try {
			State = 1708;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1704;
				boolean();
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1705;
				numericLiteral();
				}
				break;
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1706;
				bigintLiteral();
				}
				break;
			case NullLiteral:
			case Unset:
			case StringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1707;
				_la = TokenStream.LA(1);
				if ( !(_la==NullLiteral || _la==Unset || _la==StringLiteral) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(MainParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(MainParser.False, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 196, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1710;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(MainParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(MainParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral() { return GetToken(MainParser.OctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral2() { return GetToken(MainParser.OctalIntegerLiteral2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryIntegerLiteral() { return GetToken(MainParser.BinaryIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 198, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1712;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BigintLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigDecimalIntegerLiteral() { return GetToken(MainParser.BigDecimalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigHexIntegerLiteral() { return GetToken(MainParser.BigHexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigOctalIntegerLiteral() { return GetToken(MainParser.BigOctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigBinaryIntegerLiteral() { return GetToken(MainParser.BigBinaryIntegerLiteral, 0); }
		public BigintLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bigintLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBigintLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BigintLiteralContext bigintLiteral() {
		BigintLiteralContext _localctx = new BigintLiteralContext(Context, State);
		EnterRule(_localctx, 200, RULE_bigintLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1714;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(MainParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 202, RULE_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1716;
			Match(Get);
			State = 1717;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(MainParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 204, RULE_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1719;
			Match(Set);
			State = 1720;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 206, RULE_identifierName);
		try {
			State = 1724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1722;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1723;
				reservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MainParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(MainParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(MainParser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(MainParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(MainParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(MainParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Base() { return GetToken(MainParser.Base, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(MainParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(MainParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(MainParser.Set, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 208, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1726;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 563035181694977L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(MainParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 210, RULE_reservedWord);
		try {
			State = 1732;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1728;
				keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1729;
				Match(NullLiteral);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1730;
				Match(Unset);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1731;
				boolean();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(MainParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(MainParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(MainParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MainParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MainParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MainParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MainParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MainParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(MainParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MainParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(MainParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MainParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(MainParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(MainParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MainParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(MainParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(MainParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(MainParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(MainParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(MainParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(MainParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(MainParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalAnd() { return GetToken(MainParser.VerbalAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(MainParser.Contains, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(MainParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(MainParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalNot() { return GetToken(MainParser.VerbalNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbalOr() { return GetToken(MainParser.VerbalOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(MainParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unset() { return GetToken(MainParser.Unset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(MainParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(MainParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(MainParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(MainParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(MainParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(MainParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(MainParser.Await, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 212, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1734;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 1142313413771128833L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(MainParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public SContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SContext s() {
		SContext _localctx = new SContext(Context, State);
		EnterRule(_localctx, 214, RULE_s);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1736;
			_la = TokenStream.LA(1);
			if ( !(_la==EOL || _la==WS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MainParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MainParser.EOL, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMainParserVisitor<TResult> typedVisitor = visitor as IMainParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 216, RULE_eos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1738;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==EOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 35: return elseProduction_sempred((ElseProductionContext)_localctx, predIndex);
		case 82: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 83: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 84: return operatorExpression_sempred((OperatorExpressionContext)_localctx, predIndex);
		case 85: return primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool elseProduction_sempred(ElseProductionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return !this.second(Else);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		}
		return true;
	}
	private bool operatorExpression_sempred(OperatorExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 17);
		case 10: return Precpred(Context, 12);
		case 11: return Precpred(Context, 11);
		case 12: return Precpred(Context, 10);
		case 13: return Precpred(Context, 9);
		case 14: return Precpred(Context, 8);
		case 15: return Precpred(Context, 7);
		case 16: return Precpred(Context, 6);
		case 17: return Precpred(Context, 5);
		case 18: return Precpred(Context, 4);
		case 19: return Precpred(Context, 3);
		case 20: return Precpred(Context, 2);
		case 21: return Precpred(Context, 21);
		case 22: return Precpred(Context, 20);
		}
		return true;
	}
	private bool primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return Precpred(Context, 11);
		case 24: return Precpred(Context, 10);
		case 25: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,179,1741,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,1,0,1,0,1,0,1,0,3,0,223,
		8,0,1,1,4,1,226,8,1,11,1,12,1,227,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,250,8,2,1,3,1,3,3,3,254,
		8,3,1,3,1,3,1,3,3,3,259,8,3,1,3,1,3,1,3,3,3,264,8,3,1,3,1,3,1,3,3,3,269,
		8,3,3,3,271,8,3,1,4,1,4,1,5,1,5,5,5,277,8,5,10,5,12,5,280,9,5,1,5,1,5,
		1,5,3,5,285,8,5,1,6,1,6,1,6,5,6,290,8,6,10,6,12,6,293,9,6,1,6,5,6,296,
		8,6,10,6,12,6,299,9,6,1,6,1,6,3,6,303,8,6,1,7,1,7,1,7,1,7,1,7,5,7,310,
		8,7,10,7,12,7,313,9,7,3,7,315,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,3,7,331,8,7,1,8,1,8,5,8,335,8,8,10,8,12,8,338,9,8,
		1,8,3,8,341,8,8,1,8,1,8,1,9,1,9,1,9,4,9,348,8,9,11,9,12,9,349,1,10,1,10,
		5,10,354,8,10,10,10,12,10,357,9,10,1,10,3,10,360,8,10,1,11,1,11,5,11,364,
		8,11,10,11,12,11,367,9,11,1,11,1,11,1,12,1,12,5,12,373,8,12,10,12,12,12,
		376,9,12,1,12,1,12,1,13,1,13,5,13,382,8,13,10,13,12,13,385,9,13,1,13,1,
		13,1,14,3,14,390,8,14,1,14,1,14,3,14,394,8,14,1,14,1,14,1,14,3,14,399,
		8,14,1,15,1,15,1,15,1,15,5,15,405,8,15,10,15,12,15,408,9,15,1,15,1,15,
		3,15,412,8,15,3,15,414,8,15,1,15,1,15,1,16,1,16,1,16,3,16,421,8,16,1,17,
		1,17,3,17,425,8,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,3,20,434,8,20,1,
		20,1,20,3,20,438,8,20,1,21,1,21,1,21,1,22,1,22,1,22,3,22,446,8,22,1,23,
		1,23,3,23,450,8,23,1,23,1,23,3,23,454,8,23,1,23,1,23,1,23,3,23,459,8,23,
		1,24,1,24,1,24,1,24,1,24,3,24,466,8,24,3,24,468,8,24,1,25,1,25,1,25,1,
		25,5,25,474,8,25,10,25,12,25,477,9,25,1,25,1,25,3,25,481,8,25,3,25,483,
		8,25,1,25,1,25,1,26,1,26,1,26,3,26,490,8,26,1,27,1,27,3,27,494,8,27,1,
		28,1,28,1,28,5,28,499,8,28,10,28,12,28,502,9,28,1,29,1,29,1,29,1,29,3,
		29,508,8,29,1,30,1,30,1,30,3,30,513,8,30,1,31,1,31,1,32,1,32,1,32,5,32,
		520,8,32,10,32,12,32,523,9,32,1,32,1,32,1,32,1,33,4,33,529,8,33,11,33,
		12,33,530,1,33,1,33,3,33,535,8,33,1,34,1,34,1,34,3,34,540,8,34,1,34,1,
		34,1,35,1,35,1,35,3,35,547,8,35,1,35,1,35,3,35,551,8,35,1,36,1,36,1,36,
		5,36,556,8,36,10,36,12,36,559,9,36,3,36,561,8,36,1,36,1,36,3,36,565,8,
		36,1,36,1,36,1,36,1,36,1,36,5,36,572,8,36,10,36,12,36,575,9,36,1,36,1,
		36,1,36,5,36,580,8,36,10,36,12,36,583,9,36,3,36,585,8,36,1,36,1,36,3,36,
		589,8,36,1,36,1,36,1,36,1,36,1,36,5,36,596,8,36,10,36,12,36,599,9,36,1,
		36,1,36,1,36,5,36,604,8,36,10,36,12,36,607,9,36,3,36,609,8,36,1,36,1,36,
		3,36,613,8,36,1,36,1,36,1,36,1,36,1,36,5,36,620,8,36,10,36,12,36,623,9,
		36,1,36,1,36,1,36,5,36,628,8,36,10,36,12,36,631,9,36,3,36,633,8,36,1,36,
		1,36,3,36,637,8,36,1,36,1,36,1,36,1,36,1,36,5,36,644,8,36,10,36,12,36,
		647,9,36,1,36,1,36,1,36,5,36,652,8,36,10,36,12,36,655,9,36,3,36,657,8,
		36,5,36,659,8,36,10,36,12,36,662,9,36,1,36,1,36,3,36,666,8,36,1,36,1,36,
		1,36,1,36,1,36,5,36,673,8,36,10,36,12,36,676,9,36,1,36,1,36,3,36,680,8,
		36,1,36,1,36,1,36,1,36,5,36,686,8,36,10,36,12,36,689,9,36,1,36,1,36,5,
		36,693,8,36,10,36,12,36,696,9,36,1,36,1,36,3,36,700,8,36,1,36,1,36,3,36,
		704,8,36,1,37,3,37,707,8,37,1,37,1,37,3,37,711,8,37,5,37,713,8,37,10,37,
		12,37,716,9,37,1,37,5,37,719,8,37,10,37,12,37,722,9,37,1,37,1,37,5,37,
		726,8,37,10,37,12,37,729,9,37,1,37,1,37,1,37,3,37,734,8,37,1,37,1,37,3,
		37,738,8,37,5,37,740,8,37,10,37,12,37,743,9,37,1,37,5,37,746,8,37,10,37,
		12,37,749,9,37,1,37,1,37,5,37,753,8,37,10,37,12,37,756,9,37,1,37,1,37,
		1,37,3,37,761,8,37,1,38,1,38,5,38,765,8,38,10,38,12,38,768,9,38,1,38,1,
		38,1,38,1,38,1,38,3,38,775,8,38,1,39,1,39,5,39,779,8,39,10,39,12,39,782,
		9,39,1,39,1,39,1,39,1,39,1,39,3,39,789,8,39,1,40,1,40,5,40,793,8,40,10,
		40,12,40,796,9,40,1,40,3,40,799,8,40,1,41,1,41,5,41,803,8,41,10,41,12,
		41,806,9,41,1,41,3,41,809,8,41,1,42,1,42,3,42,813,8,42,1,42,1,42,3,42,
		817,8,42,1,42,5,42,820,8,42,10,42,12,42,823,9,42,1,42,1,42,1,43,1,43,5,
		43,829,8,43,10,43,12,43,832,9,43,1,43,3,43,835,8,43,1,43,1,43,3,43,839,
		8,43,3,43,841,8,43,1,43,1,43,1,44,4,44,846,8,44,11,44,12,44,847,1,45,1,
		45,5,45,852,8,45,10,45,12,45,855,9,45,1,45,1,45,5,45,859,8,45,10,45,12,
		45,862,9,45,1,45,1,45,5,45,866,8,45,10,45,12,45,869,9,45,1,45,1,45,3,45,
		873,8,45,1,46,1,46,5,46,877,8,46,10,46,12,46,880,9,46,1,46,1,46,5,46,884,
		8,46,10,46,12,46,887,9,46,1,46,1,46,3,46,891,8,46,1,47,1,47,1,47,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,3,48,903,8,48,1,49,1,49,3,49,907,8,49,1,
		50,1,50,3,50,911,8,50,1,50,1,50,5,50,915,8,50,10,50,12,50,918,9,50,1,50,
		1,50,3,50,922,8,50,1,51,1,51,1,51,5,51,927,8,51,10,51,12,51,930,9,51,1,
		51,1,51,5,51,934,8,51,10,51,12,51,937,9,51,3,51,939,8,51,1,51,1,51,1,52,
		1,52,5,52,945,8,52,10,52,12,52,948,9,52,1,52,3,52,951,8,52,1,52,5,52,954,
		8,52,10,52,12,52,957,9,52,1,52,3,52,960,8,52,1,52,1,52,1,52,5,52,965,8,
		52,10,52,12,52,968,9,52,1,52,3,52,971,8,52,1,52,5,52,974,8,52,10,52,12,
		52,977,9,52,1,52,3,52,980,8,52,1,52,1,52,3,52,984,8,52,1,53,1,53,1,53,
		5,53,989,8,53,10,53,12,53,992,9,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,
		1,56,1,56,5,56,1003,8,56,10,56,12,56,1006,9,56,1,56,1,56,4,56,1010,8,56,
		11,56,12,56,1011,1,56,1,56,4,56,1016,8,56,11,56,12,56,1017,1,56,3,56,1021,
		8,56,1,56,5,56,1024,8,56,10,56,12,56,1027,9,56,1,56,1,56,1,57,1,57,1,57,
		5,57,1034,8,57,10,57,12,57,1037,9,57,1,58,1,58,1,58,1,58,1,58,5,58,1044,
		8,58,10,58,12,58,1047,9,58,1,58,1,58,1,59,3,59,1052,8,59,1,59,1,59,3,59,
		1056,8,59,1,59,1,59,3,59,1060,8,59,1,59,1,59,1,59,5,59,1065,8,59,10,59,
		12,59,1068,9,59,1,59,3,59,1071,8,59,1,60,1,60,1,60,1,61,1,61,1,61,1,61,
		1,61,1,61,3,61,1082,8,61,1,61,5,61,1085,8,61,10,61,12,61,1088,9,61,1,61,
		1,61,1,61,1,61,1,61,1,61,1,61,1,61,4,61,1098,8,61,11,61,12,61,1099,1,61,
		1,61,3,61,1104,8,61,1,62,1,62,1,62,1,62,3,62,1110,8,62,1,62,5,62,1113,
		8,62,10,62,12,62,1116,9,62,1,62,1,62,3,62,1120,8,62,1,63,1,63,1,63,1,64,
		1,64,1,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,5,66,1135,8,66,10,66,12,66,
		1138,9,66,1,66,1,66,1,67,3,67,1143,8,67,1,67,1,67,1,67,1,67,3,67,1149,
		8,67,1,68,1,68,3,68,1153,8,68,1,68,3,68,1156,8,68,1,69,1,69,5,69,1160,
		8,69,10,69,12,69,1163,9,69,1,69,1,69,5,69,1167,8,69,10,69,12,69,1170,9,
		69,3,69,1172,8,69,1,69,1,69,1,70,1,70,3,70,1178,8,70,4,70,1180,8,70,11,
		70,12,70,1181,1,70,1,70,1,70,3,70,1187,8,70,5,70,1189,8,70,10,70,12,70,
		1192,9,70,3,70,1194,8,70,1,71,1,71,3,71,1198,8,71,1,72,1,72,5,72,1202,
		8,72,10,72,12,72,1205,9,72,1,72,1,72,5,72,1209,8,72,10,72,12,72,1212,9,
		72,1,72,1,72,1,73,5,73,1217,8,73,10,73,12,73,1220,9,73,1,73,1,73,1,73,
		3,73,1225,8,73,5,73,1227,8,73,10,73,12,73,1230,9,73,1,74,1,74,1,74,1,74,
		1,75,1,75,5,75,1238,8,75,10,75,12,75,1241,9,75,1,75,1,75,5,75,1245,8,75,
		10,75,12,75,1248,9,75,1,75,1,75,1,76,1,76,1,76,1,76,3,76,1256,8,76,1,77,
		1,77,1,77,1,77,1,78,1,78,1,78,3,78,1265,8,78,5,78,1267,8,78,10,78,12,78,
		1270,9,78,1,78,1,78,3,78,1274,8,78,4,78,1276,8,78,11,78,12,78,1277,3,78,
		1280,8,78,1,79,1,79,1,79,1,79,3,79,1286,8,79,1,80,1,80,1,80,5,80,1291,
		8,80,10,80,12,80,1294,9,80,1,81,1,81,5,81,1298,8,81,10,81,12,81,1301,9,
		81,1,81,3,81,1304,8,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,
		82,1315,8,82,10,82,12,82,1318,9,82,1,82,1,82,1,82,3,82,1323,8,82,1,82,
		1,82,1,82,3,82,1328,8,82,1,82,1,82,1,82,1,82,3,82,1334,8,82,1,82,1,82,
		1,82,1,82,1,82,1,82,5,82,1342,8,82,10,82,12,82,1345,9,82,1,82,1,82,5,82,
		1349,8,82,10,82,12,82,1352,9,82,1,82,1,82,5,82,1356,8,82,10,82,12,82,1359,
		9,82,1,82,1,82,5,82,1363,8,82,10,82,12,82,1366,9,82,1,82,1,82,5,82,1370,
		8,82,10,82,12,82,1373,9,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
		1,83,1,83,1,83,1,83,1,83,5,83,1389,8,83,10,83,12,83,1392,9,83,1,83,1,83,
		5,83,1396,8,83,10,83,12,83,1399,9,83,1,83,1,83,5,83,1403,8,83,10,83,12,
		83,1406,9,83,1,83,1,83,5,83,1410,8,83,10,83,12,83,1413,9,83,1,83,1,83,
		5,83,1417,8,83,10,83,12,83,1420,9,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
		1,84,1,84,1,84,3,84,1432,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
		1,84,3,84,1443,8,84,1,84,1,84,1,84,1,84,1,84,5,84,1450,8,84,10,84,12,84,
		1453,9,84,1,84,1,84,5,84,1457,8,84,10,84,12,84,1460,9,84,1,84,1,84,1,84,
		1,84,1,84,1,84,1,84,1,84,1,84,5,84,1471,8,84,10,84,12,84,1474,9,84,1,84,
		1,84,5,84,1478,8,84,10,84,12,84,1481,9,84,1,84,1,84,1,84,1,84,1,84,1,84,
		1,84,1,84,1,84,1,84,4,84,1493,8,84,11,84,12,84,1494,3,84,1497,8,84,1,84,
		1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
		1,84,1,84,5,84,1516,8,84,10,84,12,84,1519,9,84,1,85,1,85,1,85,1,85,1,85,
		1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1534,8,85,1,85,1,85,1,85,
		1,85,1,85,1,85,3,85,1542,8,85,1,85,1,85,1,85,3,85,1547,8,85,1,85,5,85,
		1550,8,85,10,85,12,85,1553,9,85,1,86,4,86,1556,8,86,11,86,12,86,1557,1,
		86,1,86,1,86,5,86,1563,8,86,10,86,12,86,1566,9,86,1,86,5,86,1569,8,86,
		10,86,12,86,1572,9,86,1,86,1,86,5,86,1576,8,86,10,86,12,86,1579,9,86,3,
		86,1581,8,86,1,87,1,87,1,87,1,87,3,87,1587,8,87,1,88,1,88,1,88,1,88,5,
		88,1593,8,88,10,88,12,88,1596,9,88,1,88,1,88,1,88,5,88,1601,8,88,10,88,
		12,88,1604,9,88,3,88,1606,8,88,1,89,1,89,1,89,1,90,1,90,1,90,3,90,1614,
		8,90,1,91,1,91,5,91,1618,8,91,10,91,12,91,1621,9,91,1,91,1,91,1,91,5,91,
		1626,8,91,10,91,12,91,1629,9,91,1,91,5,91,1632,8,91,10,91,12,91,1635,9,
		91,3,91,1637,8,91,1,91,1,91,1,92,3,92,1642,8,92,1,92,1,92,1,92,3,92,1647,
		8,92,1,92,1,92,1,93,1,93,3,93,1653,8,93,1,93,1,93,3,93,1657,8,93,1,93,
		3,93,1660,8,93,1,94,3,94,1663,8,94,1,94,3,94,1666,8,94,1,94,1,94,3,94,
		1670,8,94,1,94,3,94,1673,8,94,1,94,1,94,3,94,1677,8,94,1,94,3,94,1680,
		8,94,1,95,1,95,1,95,5,95,1685,8,95,10,95,12,95,1688,9,95,1,95,1,95,5,95,
		1692,8,95,10,95,12,95,1695,9,95,1,95,3,95,1698,8,95,1,95,3,95,1701,8,95,
		1,96,1,96,1,97,1,97,1,97,1,97,3,97,1709,8,97,1,98,1,98,1,99,1,99,1,100,
		1,100,1,101,1,101,1,101,1,102,1,102,1,102,1,103,1,103,3,103,1725,8,103,
		1,104,1,104,1,105,1,105,1,105,1,105,3,105,1733,8,105,1,106,1,106,1,107,
		1,107,1,108,1,108,1,108,0,4,164,166,168,170,109,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
		66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
		110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
		146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
		182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
		0,21,1,0,128,130,3,0,108,108,127,127,137,137,1,0,139,140,2,0,17,17,30,
		30,2,0,52,52,111,111,2,0,53,53,113,113,1,0,30,32,1,0,26,27,1,0,37,39,1,
		0,40,43,1,0,44,47,3,0,85,85,106,106,109,110,2,0,18,18,22,22,2,0,16,16,
		54,68,2,0,70,71,138,138,1,0,72,73,1,0,74,78,1,0,79,82,6,0,88,88,102,102,
		115,116,118,121,124,124,137,137,9,0,71,71,83,87,89,95,100,101,103,114,
		117,117,120,120,122,123,125,130,1,1,139,139,1959,0,222,1,0,0,0,2,225,1,
		0,0,0,4,249,1,0,0,0,6,270,1,0,0,0,8,272,1,0,0,0,10,274,1,0,0,0,12,286,
		1,0,0,0,14,330,1,0,0,0,16,332,1,0,0,0,18,347,1,0,0,0,20,351,1,0,0,0,22,
		361,1,0,0,0,24,370,1,0,0,0,26,379,1,0,0,0,28,398,1,0,0,0,30,400,1,0,0,
		0,32,417,1,0,0,0,34,424,1,0,0,0,36,426,1,0,0,0,38,428,1,0,0,0,40,433,1,
		0,0,0,42,439,1,0,0,0,44,442,1,0,0,0,46,458,1,0,0,0,48,467,1,0,0,0,50,469,
		1,0,0,0,52,486,1,0,0,0,54,493,1,0,0,0,56,495,1,0,0,0,58,503,1,0,0,0,60,
		509,1,0,0,0,62,514,1,0,0,0,64,516,1,0,0,0,66,534,1,0,0,0,68,536,1,0,0,
		0,70,550,1,0,0,0,72,703,1,0,0,0,74,760,1,0,0,0,76,762,1,0,0,0,78,776,1,
		0,0,0,80,790,1,0,0,0,82,800,1,0,0,0,84,810,1,0,0,0,86,826,1,0,0,0,88,845,
		1,0,0,0,90,849,1,0,0,0,92,874,1,0,0,0,94,892,1,0,0,0,96,902,1,0,0,0,98,
		904,1,0,0,0,100,908,1,0,0,0,102,923,1,0,0,0,104,983,1,0,0,0,106,985,1,
		0,0,0,108,993,1,0,0,0,110,997,1,0,0,0,112,1000,1,0,0,0,114,1030,1,0,0,
		0,116,1038,1,0,0,0,118,1070,1,0,0,0,120,1072,1,0,0,0,122,1103,1,0,0,0,
		124,1119,1,0,0,0,126,1121,1,0,0,0,128,1124,1,0,0,0,130,1127,1,0,0,0,132,
		1136,1,0,0,0,134,1142,1,0,0,0,136,1155,1,0,0,0,138,1157,1,0,0,0,140,1193,
		1,0,0,0,142,1195,1,0,0,0,144,1199,1,0,0,0,146,1218,1,0,0,0,148,1231,1,
		0,0,0,150,1235,1,0,0,0,152,1255,1,0,0,0,154,1257,1,0,0,0,156,1279,1,0,
		0,0,158,1285,1,0,0,0,160,1287,1,0,0,0,162,1295,1,0,0,0,164,1322,1,0,0,
		0,166,1374,1,0,0,0,168,1442,1,0,0,0,170,1533,1,0,0,0,172,1580,1,0,0,0,
		174,1586,1,0,0,0,176,1605,1,0,0,0,178,1607,1,0,0,0,180,1613,1,0,0,0,182,
		1615,1,0,0,0,184,1641,1,0,0,0,186,1659,1,0,0,0,188,1679,1,0,0,0,190,1700,
		1,0,0,0,192,1702,1,0,0,0,194,1708,1,0,0,0,196,1710,1,0,0,0,198,1712,1,
		0,0,0,200,1714,1,0,0,0,202,1716,1,0,0,0,204,1719,1,0,0,0,206,1724,1,0,
		0,0,208,1726,1,0,0,0,210,1732,1,0,0,0,212,1734,1,0,0,0,214,1736,1,0,0,
		0,216,1738,1,0,0,0,218,219,3,2,1,0,219,220,5,0,0,1,220,223,1,0,0,0,221,
		223,5,0,0,1,222,218,1,0,0,0,222,221,1,0,0,0,223,1,1,0,0,0,224,226,3,4,
		2,0,225,224,1,0,0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,
		3,1,0,0,0,229,230,3,112,56,0,230,231,3,216,108,0,231,250,1,0,0,0,232,233,
		3,6,3,0,233,234,3,216,108,0,234,250,1,0,0,0,235,236,3,8,4,0,236,237,3,
		216,108,0,237,250,1,0,0,0,238,239,3,10,5,0,239,240,3,216,108,0,240,250,
		1,0,0,0,241,242,3,12,6,0,242,243,3,216,108,0,243,250,1,0,0,0,244,245,3,
		14,7,0,245,246,3,216,108,0,246,250,1,0,0,0,247,250,5,140,0,0,248,250,5,
		139,0,0,249,229,1,0,0,0,249,232,1,0,0,0,249,235,1,0,0,0,249,238,1,0,0,
		0,249,241,1,0,0,0,249,244,1,0,0,0,249,247,1,0,0,0,249,248,1,0,0,0,250,
		5,1,0,0,0,251,253,5,131,0,0,252,254,3,166,83,0,253,252,1,0,0,0,253,254,
		1,0,0,0,254,271,1,0,0,0,255,271,5,136,0,0,256,258,5,132,0,0,257,259,3,
		198,99,0,258,257,1,0,0,0,258,259,1,0,0,0,259,271,1,0,0,0,260,263,5,134,
		0,0,261,264,3,198,99,0,262,264,3,196,98,0,263,261,1,0,0,0,263,262,1,0,
		0,0,263,264,1,0,0,0,264,271,1,0,0,0,265,268,5,133,0,0,266,269,3,198,99,
		0,267,269,3,196,98,0,268,266,1,0,0,0,268,267,1,0,0,0,268,269,1,0,0,0,269,
		271,1,0,0,0,270,251,1,0,0,0,270,255,1,0,0,0,270,256,1,0,0,0,270,260,1,
		0,0,0,270,265,1,0,0,0,271,7,1,0,0,0,272,273,5,6,0,0,273,9,1,0,0,0,274,
		278,5,5,0,0,275,277,5,5,0,0,276,275,1,0,0,0,277,280,1,0,0,0,278,276,1,
		0,0,0,278,279,1,0,0,0,279,284,1,0,0,0,280,278,1,0,0,0,281,285,5,143,0,
		0,282,285,3,110,55,0,283,285,3,14,7,0,284,281,1,0,0,0,284,282,1,0,0,0,
		284,283,1,0,0,0,285,11,1,0,0,0,286,291,5,7,0,0,287,288,5,139,0,0,288,290,
		5,7,0,0,289,287,1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,
		0,292,297,1,0,0,0,293,291,1,0,0,0,294,296,3,214,107,0,295,294,1,0,0,0,
		296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,302,1,0,0,0,299,297,
		1,0,0,0,300,303,3,110,55,0,301,303,3,14,7,0,302,300,1,0,0,0,302,301,1,
		0,0,0,303,13,1,0,0,0,304,331,3,60,30,0,305,331,3,20,10,0,306,331,3,64,
		32,0,307,311,3,94,47,0,308,310,3,214,107,0,309,308,1,0,0,0,310,313,1,0,
		0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,314,
		307,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,331,3,72,36,0,317,331,
		3,62,31,0,318,331,3,76,38,0,319,331,3,78,39,0,320,331,3,80,40,0,321,331,
		3,82,41,0,322,331,3,94,47,0,323,331,3,96,48,0,324,331,3,84,42,0,325,331,
		3,98,49,0,326,331,3,100,50,0,327,331,3,22,11,0,328,331,3,24,12,0,329,331,
		3,16,8,0,330,304,1,0,0,0,330,305,1,0,0,0,330,306,1,0,0,0,330,314,1,0,0,
		0,330,317,1,0,0,0,330,318,1,0,0,0,330,319,1,0,0,0,330,320,1,0,0,0,330,
		321,1,0,0,0,330,322,1,0,0,0,330,323,1,0,0,0,330,324,1,0,0,0,330,325,1,
		0,0,0,330,326,1,0,0,0,330,327,1,0,0,0,330,328,1,0,0,0,330,329,1,0,0,0,
		331,15,1,0,0,0,332,336,5,12,0,0,333,335,3,214,107,0,334,333,1,0,0,0,335,
		338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,340,1,0,0,0,338,336,1,
		0,0,0,339,341,3,18,9,0,340,339,1,0,0,0,340,341,1,0,0,0,341,342,1,0,0,0,
		342,343,5,13,0,0,343,17,1,0,0,0,344,345,3,14,7,0,345,346,5,139,0,0,346,
		348,1,0,0,0,347,344,1,0,0,0,348,349,1,0,0,0,349,347,1,0,0,0,349,350,1,
		0,0,0,350,19,1,0,0,0,351,359,7,0,0,0,352,354,5,140,0,0,353,352,1,0,0,0,
		354,357,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,358,1,0,0,0,357,355,
		1,0,0,0,358,360,3,56,28,0,359,355,1,0,0,0,359,360,1,0,0,0,360,21,1,0,0,
		0,361,365,5,127,0,0,362,364,5,140,0,0,363,362,1,0,0,0,364,367,1,0,0,0,
		365,363,1,0,0,0,365,366,1,0,0,0,366,368,1,0,0,0,367,365,1,0,0,0,368,369,
		3,166,83,0,369,23,1,0,0,0,370,374,5,105,0,0,371,373,5,140,0,0,372,371,
		1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,377,1,0,0,
		0,376,374,1,0,0,0,377,378,3,166,83,0,378,25,1,0,0,0,379,383,5,123,0,0,
		380,382,5,140,0,0,381,380,1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,383,
		384,1,0,0,0,384,386,1,0,0,0,385,383,1,0,0,0,386,387,3,28,14,0,387,27,1,
		0,0,0,388,390,3,38,19,0,389,388,1,0,0,0,389,390,1,0,0,0,390,393,1,0,0,
		0,391,394,3,40,20,0,392,394,3,30,15,0,393,391,1,0,0,0,393,392,1,0,0,0,
		394,395,1,0,0,0,395,396,3,42,21,0,396,399,1,0,0,0,397,399,5,138,0,0,398,
		389,1,0,0,0,398,397,1,0,0,0,399,29,1,0,0,0,400,406,5,12,0,0,401,402,3,
		32,16,0,402,403,5,15,0,0,403,405,1,0,0,0,404,401,1,0,0,0,405,408,1,0,0,
		0,406,404,1,0,0,0,406,407,1,0,0,0,407,413,1,0,0,0,408,406,1,0,0,0,409,
		411,3,32,16,0,410,412,5,15,0,0,411,410,1,0,0,0,411,412,1,0,0,0,412,414,
		1,0,0,0,413,409,1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,416,5,13,0,
		0,416,31,1,0,0,0,417,420,3,34,17,0,418,419,5,125,0,0,419,421,3,36,18,0,
		420,418,1,0,0,0,420,421,1,0,0,0,421,33,1,0,0,0,422,425,3,206,103,0,423,
		425,5,138,0,0,424,422,1,0,0,0,424,423,1,0,0,0,425,35,1,0,0,0,426,427,7,
		1,0,0,427,37,1,0,0,0,428,429,3,44,22,0,429,430,5,15,0,0,430,39,1,0,0,0,
		431,434,5,30,0,0,432,434,3,206,103,0,433,431,1,0,0,0,433,432,1,0,0,0,434,
		437,1,0,0,0,435,436,5,125,0,0,436,438,3,206,103,0,437,435,1,0,0,0,437,
		438,1,0,0,0,438,41,1,0,0,0,439,440,5,124,0,0,440,441,5,138,0,0,441,43,
		1,0,0,0,442,445,3,206,103,0,443,444,5,125,0,0,444,446,3,206,103,0,445,
		443,1,0,0,0,445,446,1,0,0,0,446,45,1,0,0,0,447,449,5,122,0,0,448,450,5,
		88,0,0,449,448,1,0,0,0,449,450,1,0,0,0,450,453,1,0,0,0,451,454,3,48,24,
		0,452,454,3,54,27,0,453,451,1,0,0,0,453,452,1,0,0,0,454,459,1,0,0,0,455,
		456,5,122,0,0,456,457,5,88,0,0,457,459,3,166,83,0,458,447,1,0,0,0,458,
		455,1,0,0,0,459,47,1,0,0,0,460,461,3,40,20,0,461,462,3,42,21,0,462,468,
		1,0,0,0,463,465,3,50,25,0,464,466,3,42,21,0,465,464,1,0,0,0,465,466,1,
		0,0,0,466,468,1,0,0,0,467,460,1,0,0,0,467,463,1,0,0,0,468,49,1,0,0,0,469,
		475,5,12,0,0,470,471,3,52,26,0,471,472,5,15,0,0,472,474,1,0,0,0,473,470,
		1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,476,482,1,0,0,
		0,477,475,1,0,0,0,478,480,3,52,26,0,479,481,5,15,0,0,480,479,1,0,0,0,480,
		481,1,0,0,0,481,483,1,0,0,0,482,478,1,0,0,0,482,483,1,0,0,0,483,484,1,
		0,0,0,484,485,5,13,0,0,485,51,1,0,0,0,486,489,3,34,17,0,487,488,5,125,
		0,0,488,490,3,34,17,0,489,487,1,0,0,0,489,490,1,0,0,0,490,53,1,0,0,0,491,
		494,3,112,56,0,492,494,3,110,55,0,493,491,1,0,0,0,493,492,1,0,0,0,494,
		55,1,0,0,0,495,500,3,58,29,0,496,497,5,15,0,0,497,499,3,58,29,0,498,496,
		1,0,0,0,499,502,1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,57,1,0,0,0,
		502,500,1,0,0,0,503,507,3,180,90,0,504,505,3,192,96,0,505,506,3,164,82,
		0,506,508,1,0,0,0,507,504,1,0,0,0,507,508,1,0,0,0,508,59,1,0,0,0,509,510,
		3,170,85,0,510,512,5,3,0,0,511,513,3,156,78,0,512,511,1,0,0,0,512,513,
		1,0,0,0,513,61,1,0,0,0,514,515,3,160,80,0,515,63,1,0,0,0,516,517,5,103,
		0,0,517,521,3,166,83,0,518,520,5,140,0,0,519,518,1,0,0,0,520,523,1,0,0,
		0,521,519,1,0,0,0,521,522,1,0,0,0,522,524,1,0,0,0,523,521,1,0,0,0,524,
		525,3,66,33,0,525,526,3,70,35,0,526,65,1,0,0,0,527,529,5,139,0,0,528,527,
		1,0,0,0,529,530,1,0,0,0,530,528,1,0,0,0,530,531,1,0,0,0,531,532,1,0,0,
		0,532,535,3,14,7,0,533,535,3,16,8,0,534,528,1,0,0,0,534,533,1,0,0,0,535,
		67,1,0,0,0,536,537,5,139,0,0,537,539,5,101,0,0,538,540,5,139,0,0,539,538,
		1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,542,3,166,83,0,542,69,1,0,
		0,0,543,544,5,139,0,0,544,546,5,89,0,0,545,547,5,139,0,0,546,545,1,0,0,
		0,546,547,1,0,0,0,547,548,1,0,0,0,548,551,3,14,7,0,549,551,4,35,0,0,550,
		543,1,0,0,0,550,549,1,0,0,0,551,71,1,0,0,0,552,560,5,100,0,0,553,557,3,
		166,83,0,554,556,5,140,0,0,555,554,1,0,0,0,556,559,1,0,0,0,557,555,1,0,
		0,0,557,558,1,0,0,0,558,561,1,0,0,0,559,557,1,0,0,0,560,553,1,0,0,0,560,
		561,1,0,0,0,561,562,1,0,0,0,562,564,3,66,33,0,563,565,3,68,34,0,564,563,
		1,0,0,0,564,565,1,0,0,0,565,566,1,0,0,0,566,567,3,70,35,0,567,704,1,0,
		0,0,568,569,5,99,0,0,569,573,3,166,83,0,570,572,5,140,0,0,571,570,1,0,
		0,0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,584,1,0,0,0,575,
		573,1,0,0,0,576,577,5,15,0,0,577,581,3,166,83,0,578,580,5,140,0,0,579,
		578,1,0,0,0,580,583,1,0,0,0,581,579,1,0,0,0,581,582,1,0,0,0,582,585,1,
		0,0,0,583,581,1,0,0,0,584,576,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,
		586,588,3,66,33,0,587,589,3,68,34,0,588,587,1,0,0,0,588,589,1,0,0,0,589,
		590,1,0,0,0,590,591,3,70,35,0,591,704,1,0,0,0,592,593,5,98,0,0,593,597,
		3,166,83,0,594,596,5,140,0,0,595,594,1,0,0,0,596,599,1,0,0,0,597,595,1,
		0,0,0,597,598,1,0,0,0,598,608,1,0,0,0,599,597,1,0,0,0,600,601,5,15,0,0,
		601,605,3,166,83,0,602,604,5,140,0,0,603,602,1,0,0,0,604,607,1,0,0,0,605,
		603,1,0,0,0,605,606,1,0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,608,600,1,
		0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,612,3,66,33,0,611,613,3,68,34,
		0,612,611,1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,615,3,70,35,0,615,
		704,1,0,0,0,616,617,5,97,0,0,617,621,3,166,83,0,618,620,5,140,0,0,619,
		618,1,0,0,0,620,623,1,0,0,0,621,619,1,0,0,0,621,622,1,0,0,0,622,632,1,
		0,0,0,623,621,1,0,0,0,624,625,5,15,0,0,625,629,3,166,83,0,626,628,5,140,
		0,0,627,626,1,0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,630,1,0,0,0,630,
		633,1,0,0,0,631,629,1,0,0,0,632,624,1,0,0,0,632,633,1,0,0,0,633,634,1,
		0,0,0,634,636,3,66,33,0,635,637,3,68,34,0,636,635,1,0,0,0,636,637,1,0,
		0,0,637,638,1,0,0,0,638,639,3,70,35,0,639,704,1,0,0,0,640,641,5,96,0,0,
		641,645,3,166,83,0,642,644,5,140,0,0,643,642,1,0,0,0,644,647,1,0,0,0,645,
		643,1,0,0,0,645,646,1,0,0,0,646,660,1,0,0,0,647,645,1,0,0,0,648,656,5,
		15,0,0,649,653,3,166,83,0,650,652,5,140,0,0,651,650,1,0,0,0,652,655,1,
		0,0,0,653,651,1,0,0,0,653,654,1,0,0,0,654,657,1,0,0,0,655,653,1,0,0,0,
		656,649,1,0,0,0,656,657,1,0,0,0,657,659,1,0,0,0,658,648,1,0,0,0,659,662,
		1,0,0,0,660,658,1,0,0,0,660,661,1,0,0,0,661,663,1,0,0,0,662,660,1,0,0,
		0,663,665,3,66,33,0,664,666,3,68,34,0,665,664,1,0,0,0,665,666,1,0,0,0,
		666,667,1,0,0,0,667,668,3,70,35,0,668,704,1,0,0,0,669,670,5,95,0,0,670,
		674,3,166,83,0,671,673,5,140,0,0,672,671,1,0,0,0,673,676,1,0,0,0,674,672,
		1,0,0,0,674,675,1,0,0,0,675,677,1,0,0,0,676,674,1,0,0,0,677,679,3,66,33,
		0,678,680,3,68,34,0,679,678,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,
		682,3,70,35,0,682,704,1,0,0,0,683,687,5,94,0,0,684,686,5,140,0,0,685,684,
		1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,0,687,688,1,0,0,0,688,690,1,0,0,
		0,689,687,1,0,0,0,690,694,3,74,37,0,691,693,5,140,0,0,692,691,1,0,0,0,
		693,696,1,0,0,0,694,692,1,0,0,0,694,695,1,0,0,0,695,697,1,0,0,0,696,694,
		1,0,0,0,697,699,3,66,33,0,698,700,3,68,34,0,699,698,1,0,0,0,699,700,1,
		0,0,0,700,701,1,0,0,0,701,702,3,70,35,0,702,704,1,0,0,0,703,552,1,0,0,
		0,703,568,1,0,0,0,703,592,1,0,0,0,703,616,1,0,0,0,703,640,1,0,0,0,703,
		669,1,0,0,0,703,683,1,0,0,0,704,73,1,0,0,0,705,707,3,180,90,0,706,705,
		1,0,0,0,706,707,1,0,0,0,707,714,1,0,0,0,708,710,5,15,0,0,709,711,3,180,
		90,0,710,709,1,0,0,0,710,711,1,0,0,0,711,713,1,0,0,0,712,708,1,0,0,0,713,
		716,1,0,0,0,714,712,1,0,0,0,714,715,1,0,0,0,715,720,1,0,0,0,716,714,1,
		0,0,0,717,719,5,140,0,0,718,717,1,0,0,0,719,722,1,0,0,0,720,718,1,0,0,
		0,720,721,1,0,0,0,721,723,1,0,0,0,722,720,1,0,0,0,723,727,5,106,0,0,724,
		726,5,140,0,0,725,724,1,0,0,0,726,729,1,0,0,0,727,725,1,0,0,0,727,728,
		1,0,0,0,728,730,1,0,0,0,729,727,1,0,0,0,730,761,3,166,83,0,731,733,5,10,
		0,0,732,734,3,180,90,0,733,732,1,0,0,0,733,734,1,0,0,0,734,741,1,0,0,0,
		735,737,5,15,0,0,736,738,3,180,90,0,737,736,1,0,0,0,737,738,1,0,0,0,738,
		740,1,0,0,0,739,735,1,0,0,0,740,743,1,0,0,0,741,739,1,0,0,0,741,742,1,
		0,0,0,742,747,1,0,0,0,743,741,1,0,0,0,744,746,5,140,0,0,745,744,1,0,0,
		0,746,749,1,0,0,0,747,745,1,0,0,0,747,748,1,0,0,0,748,750,1,0,0,0,749,
		747,1,0,0,0,750,754,5,106,0,0,751,753,5,140,0,0,752,751,1,0,0,0,753,756,
		1,0,0,0,754,752,1,0,0,0,754,755,1,0,0,0,755,757,1,0,0,0,756,754,1,0,0,
		0,757,758,3,166,83,0,758,759,5,11,0,0,759,761,1,0,0,0,760,706,1,0,0,0,
		760,731,1,0,0,0,761,75,1,0,0,0,762,766,5,93,0,0,763,765,5,140,0,0,764,
		763,1,0,0,0,765,768,1,0,0,0,766,764,1,0,0,0,766,767,1,0,0,0,767,774,1,
		0,0,0,768,766,1,0,0,0,769,775,3,152,76,0,770,771,5,10,0,0,771,772,3,152,
		76,0,772,773,5,11,0,0,773,775,1,0,0,0,774,769,1,0,0,0,774,770,1,0,0,0,
		774,775,1,0,0,0,775,77,1,0,0,0,776,780,5,83,0,0,777,779,5,140,0,0,778,
		777,1,0,0,0,779,782,1,0,0,0,780,778,1,0,0,0,780,781,1,0,0,0,781,788,1,
		0,0,0,782,780,1,0,0,0,783,784,5,10,0,0,784,785,3,152,76,0,785,786,5,11,
		0,0,786,789,1,0,0,0,787,789,3,152,76,0,788,783,1,0,0,0,788,787,1,0,0,0,
		788,789,1,0,0,0,789,79,1,0,0,0,790,794,5,92,0,0,791,793,5,140,0,0,792,
		791,1,0,0,0,793,796,1,0,0,0,794,792,1,0,0,0,794,795,1,0,0,0,795,798,1,
		0,0,0,796,794,1,0,0,0,797,799,3,164,82,0,798,797,1,0,0,0,798,799,1,0,0,
		0,799,81,1,0,0,0,800,804,5,108,0,0,801,803,5,140,0,0,802,801,1,0,0,0,803,
		806,1,0,0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,808,1,0,0,0,806,804,1,
		0,0,0,807,809,3,164,82,0,808,807,1,0,0,0,808,809,1,0,0,0,809,83,1,0,0,
		0,810,812,5,86,0,0,811,813,3,166,83,0,812,811,1,0,0,0,812,813,1,0,0,0,
		813,816,1,0,0,0,814,815,5,15,0,0,815,817,3,194,97,0,816,814,1,0,0,0,816,
		817,1,0,0,0,817,821,1,0,0,0,818,820,3,214,107,0,819,818,1,0,0,0,820,823,
		1,0,0,0,821,819,1,0,0,0,821,822,1,0,0,0,822,824,1,0,0,0,823,821,1,0,0,
		0,824,825,3,86,43,0,825,85,1,0,0,0,826,830,5,12,0,0,827,829,3,214,107,
		0,828,827,1,0,0,0,829,832,1,0,0,0,830,828,1,0,0,0,830,831,1,0,0,0,831,
		834,1,0,0,0,832,830,1,0,0,0,833,835,3,88,44,0,834,833,1,0,0,0,834,835,
		1,0,0,0,835,840,1,0,0,0,836,838,3,92,46,0,837,839,3,88,44,0,838,837,1,
		0,0,0,838,839,1,0,0,0,839,841,1,0,0,0,840,836,1,0,0,0,840,841,1,0,0,0,
		841,842,1,0,0,0,842,843,5,13,0,0,843,87,1,0,0,0,844,846,3,90,45,0,845,
		844,1,0,0,0,846,847,1,0,0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,89,1,0,
		0,0,849,853,5,87,0,0,850,852,5,140,0,0,851,850,1,0,0,0,852,855,1,0,0,0,
		853,851,1,0,0,0,853,854,1,0,0,0,854,856,1,0,0,0,855,853,1,0,0,0,856,860,
		3,160,80,0,857,859,5,140,0,0,858,857,1,0,0,0,859,862,1,0,0,0,860,858,1,
		0,0,0,860,861,1,0,0,0,861,863,1,0,0,0,862,860,1,0,0,0,863,872,5,19,0,0,
		864,866,3,214,107,0,865,864,1,0,0,0,866,869,1,0,0,0,867,865,1,0,0,0,867,
		868,1,0,0,0,868,870,1,0,0,0,869,867,1,0,0,0,870,873,3,18,9,0,871,873,5,
		139,0,0,872,867,1,0,0,0,872,871,1,0,0,0,873,91,1,0,0,0,874,878,5,88,0,
		0,875,877,5,140,0,0,876,875,1,0,0,0,877,880,1,0,0,0,878,876,1,0,0,0,878,
		879,1,0,0,0,879,881,1,0,0,0,880,878,1,0,0,0,881,890,5,19,0,0,882,884,3,
		214,107,0,883,882,1,0,0,0,884,887,1,0,0,0,885,883,1,0,0,0,885,886,1,0,
		0,0,886,888,1,0,0,0,887,885,1,0,0,0,888,891,3,18,9,0,889,891,5,139,0,0,
		890,885,1,0,0,0,890,889,1,0,0,0,891,93,1,0,0,0,892,893,5,137,0,0,893,894,
		5,19,0,0,894,95,1,0,0,0,895,896,5,114,0,0,896,903,3,152,76,0,897,898,5,
		114,0,0,898,899,5,10,0,0,899,900,3,152,76,0,900,901,5,11,0,0,901,903,1,
		0,0,0,902,895,1,0,0,0,902,897,1,0,0,0,903,97,1,0,0,0,904,906,5,104,0,0,
		905,907,3,166,83,0,906,905,1,0,0,0,906,907,1,0,0,0,907,99,1,0,0,0,908,
		910,5,107,0,0,909,911,5,139,0,0,910,909,1,0,0,0,910,911,1,0,0,0,911,912,
		1,0,0,0,912,916,3,14,7,0,913,915,3,102,51,0,914,913,1,0,0,0,915,918,1,
		0,0,0,916,914,1,0,0,0,916,917,1,0,0,0,917,919,1,0,0,0,918,916,1,0,0,0,
		919,921,3,70,35,0,920,922,3,108,54,0,921,920,1,0,0,0,921,922,1,0,0,0,922,
		101,1,0,0,0,923,924,5,139,0,0,924,928,5,90,0,0,925,927,5,140,0,0,926,925,
		1,0,0,0,927,930,1,0,0,0,928,926,1,0,0,0,928,929,1,0,0,0,929,938,1,0,0,
		0,930,928,1,0,0,0,931,935,3,104,52,0,932,934,5,140,0,0,933,932,1,0,0,0,
		934,937,1,0,0,0,935,933,1,0,0,0,935,936,1,0,0,0,936,939,1,0,0,0,937,935,
		1,0,0,0,938,931,1,0,0,0,938,939,1,0,0,0,939,940,1,0,0,0,940,941,3,66,33,
		0,941,103,1,0,0,0,942,950,3,106,53,0,943,945,5,140,0,0,944,943,1,0,0,0,
		945,948,1,0,0,0,946,944,1,0,0,0,946,947,1,0,0,0,947,949,1,0,0,0,948,946,
		1,0,0,0,949,951,5,125,0,0,950,946,1,0,0,0,950,951,1,0,0,0,951,959,1,0,
		0,0,952,954,5,140,0,0,953,952,1,0,0,0,954,957,1,0,0,0,955,953,1,0,0,0,
		955,956,1,0,0,0,956,958,1,0,0,0,957,955,1,0,0,0,958,960,3,208,104,0,959,
		955,1,0,0,0,959,960,1,0,0,0,960,984,1,0,0,0,961,962,5,10,0,0,962,970,3,
		106,53,0,963,965,5,140,0,0,964,963,1,0,0,0,965,968,1,0,0,0,966,964,1,0,
		0,0,966,967,1,0,0,0,967,969,1,0,0,0,968,966,1,0,0,0,969,971,5,125,0,0,
		970,966,1,0,0,0,970,971,1,0,0,0,971,979,1,0,0,0,972,974,5,140,0,0,973,
		972,1,0,0,0,974,977,1,0,0,0,975,973,1,0,0,0,975,976,1,0,0,0,976,978,1,
		0,0,0,977,975,1,0,0,0,978,980,3,208,104,0,979,975,1,0,0,0,979,980,1,0,
		0,0,980,981,1,0,0,0,981,982,5,11,0,0,982,984,1,0,0,0,983,942,1,0,0,0,983,
		961,1,0,0,0,984,105,1,0,0,0,985,990,3,208,104,0,986,987,5,15,0,0,987,989,
		3,208,104,0,988,986,1,0,0,0,989,992,1,0,0,0,990,988,1,0,0,0,990,991,1,
		0,0,0,991,107,1,0,0,0,992,990,1,0,0,0,993,994,5,139,0,0,994,995,5,91,0,
		0,995,996,3,66,33,0,996,109,1,0,0,0,997,998,3,184,92,0,998,999,3,190,95,
		0,999,111,1,0,0,0,1000,1004,5,117,0,0,1001,1003,5,140,0,0,1002,1001,1,
		0,0,0,1003,1006,1,0,0,0,1004,1002,1,0,0,0,1004,1005,1,0,0,0,1005,1007,
		1,0,0,0,1006,1004,1,0,0,0,1007,1020,3,208,104,0,1008,1010,5,140,0,0,1009,
		1008,1,0,0,0,1010,1011,1,0,0,0,1011,1009,1,0,0,0,1011,1012,1,0,0,0,1012,
		1013,1,0,0,0,1013,1015,5,119,0,0,1014,1016,5,140,0,0,1015,1014,1,0,0,0,
		1016,1017,1,0,0,0,1017,1015,1,0,0,0,1017,1018,1,0,0,0,1018,1019,1,0,0,
		0,1019,1021,3,114,57,0,1020,1009,1,0,0,0,1020,1021,1,0,0,0,1021,1025,1,
		0,0,0,1022,1024,3,214,107,0,1023,1022,1,0,0,0,1024,1027,1,0,0,0,1025,1023,
		1,0,0,0,1025,1026,1,0,0,0,1026,1028,1,0,0,0,1027,1025,1,0,0,0,1028,1029,
		3,116,58,0,1029,113,1,0,0,0,1030,1035,3,208,104,0,1031,1032,5,22,0,0,1032,
		1034,3,208,104,0,1033,1031,1,0,0,0,1034,1037,1,0,0,0,1035,1033,1,0,0,0,
		1035,1036,1,0,0,0,1036,115,1,0,0,0,1037,1035,1,0,0,0,1038,1045,5,12,0,
		0,1039,1040,3,118,59,0,1040,1041,5,139,0,0,1041,1044,1,0,0,0,1042,1044,
		5,139,0,0,1043,1039,1,0,0,0,1043,1042,1,0,0,0,1044,1047,1,0,0,0,1045,1043,
		1,0,0,0,1045,1046,1,0,0,0,1046,1048,1,0,0,0,1047,1045,1,0,0,0,1048,1049,
		5,13,0,0,1049,117,1,0,0,0,1050,1052,5,128,0,0,1051,1050,1,0,0,0,1051,1052,
		1,0,0,0,1052,1053,1,0,0,0,1053,1071,3,120,60,0,1054,1056,5,128,0,0,1055,
		1054,1,0,0,0,1055,1056,1,0,0,0,1056,1057,1,0,0,0,1057,1071,3,122,61,0,
		1058,1060,5,128,0,0,1059,1058,1,0,0,0,1059,1060,1,0,0,0,1060,1061,1,0,
		0,0,1061,1066,3,130,65,0,1062,1063,5,15,0,0,1063,1065,3,130,65,0,1064,
		1062,1,0,0,0,1065,1068,1,0,0,0,1066,1064,1,0,0,0,1066,1067,1,0,0,0,1067,
		1071,1,0,0,0,1068,1066,1,0,0,0,1069,1071,3,112,56,0,1070,1051,1,0,0,0,
		1070,1055,1,0,0,0,1070,1059,1,0,0,0,1070,1069,1,0,0,0,1071,119,1,0,0,0,
		1072,1073,3,184,92,0,1073,1074,3,190,95,0,1074,121,1,0,0,0,1075,1076,3,
		124,62,0,1076,1077,5,69,0,0,1077,1078,3,164,82,0,1078,1104,1,0,0,0,1079,
		1081,3,124,62,0,1080,1082,5,3,0,0,1081,1080,1,0,0,0,1081,1082,1,0,0,0,
		1082,1086,1,0,0,0,1083,1085,3,214,107,0,1084,1083,1,0,0,0,1085,1088,1,
		0,0,0,1086,1084,1,0,0,0,1086,1087,1,0,0,0,1087,1089,1,0,0,0,1088,1086,
		1,0,0,0,1089,1097,5,12,0,0,1090,1091,3,126,63,0,1091,1092,5,139,0,0,1092,
		1098,1,0,0,0,1093,1094,3,128,64,0,1094,1095,5,139,0,0,1095,1098,1,0,0,
		0,1096,1098,5,139,0,0,1097,1090,1,0,0,0,1097,1093,1,0,0,0,1097,1096,1,
		0,0,0,1098,1099,1,0,0,0,1099,1097,1,0,0,0,1099,1100,1,0,0,0,1100,1101,
		1,0,0,0,1101,1102,5,13,0,0,1102,1104,1,0,0,0,1103,1075,1,0,0,0,1103,1079,
		1,0,0,0,1104,123,1,0,0,0,1105,1120,3,208,104,0,1106,1107,3,208,104,0,1107,
		1109,5,8,0,0,1108,1110,3,132,66,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,
		1110,1114,1,0,0,0,1111,1113,3,214,107,0,1112,1111,1,0,0,0,1113,1116,1,
		0,0,0,1114,1112,1,0,0,0,1114,1115,1,0,0,0,1115,1117,1,0,0,0,1116,1114,
		1,0,0,0,1117,1118,5,9,0,0,1118,1120,1,0,0,0,1119,1105,1,0,0,0,1119,1106,
		1,0,0,0,1120,125,1,0,0,0,1121,1122,5,115,0,0,1122,1123,3,190,95,0,1123,
		127,1,0,0,0,1124,1125,5,116,0,0,1125,1126,3,190,95,0,1126,129,1,0,0,0,
		1127,1128,3,152,76,0,1128,1129,5,16,0,0,1129,1130,3,164,82,0,1130,131,
		1,0,0,0,1131,1132,3,134,67,0,1132,1133,5,15,0,0,1133,1135,1,0,0,0,1134,
		1131,1,0,0,0,1135,1138,1,0,0,0,1136,1134,1,0,0,0,1136,1137,1,0,0,0,1137,
		1139,1,0,0,0,1138,1136,1,0,0,0,1139,1140,3,136,68,0,1140,133,1,0,0,0,1141,
		1143,5,49,0,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,1144,1,0,0,0,1144,
		1148,3,208,104,0,1145,1146,5,16,0,0,1146,1149,3,164,82,0,1147,1149,5,17,
		0,0,1148,1145,1,0,0,0,1148,1147,1,0,0,0,1148,1149,1,0,0,0,1149,135,1,0,
		0,0,1150,1156,3,134,67,0,1151,1153,3,208,104,0,1152,1151,1,0,0,0,1152,
		1153,1,0,0,0,1153,1154,1,0,0,0,1154,1156,5,30,0,0,1155,1150,1,0,0,0,1155,
		1152,1,0,0,0,1156,137,1,0,0,0,1157,1161,5,8,0,0,1158,1160,7,2,0,0,1159,
		1158,1,0,0,0,1160,1163,1,0,0,0,1161,1159,1,0,0,0,1161,1162,1,0,0,0,1162,
		1171,1,0,0,0,1163,1161,1,0,0,0,1164,1168,3,140,70,0,1165,1167,7,2,0,0,
		1166,1165,1,0,0,0,1167,1170,1,0,0,0,1168,1166,1,0,0,0,1168,1169,1,0,0,
		0,1169,1172,1,0,0,0,1170,1168,1,0,0,0,1171,1164,1,0,0,0,1171,1172,1,0,
		0,0,1172,1173,1,0,0,0,1173,1174,5,9,0,0,1174,139,1,0,0,0,1175,1177,5,15,
		0,0,1176,1178,3,142,71,0,1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,1180,
		1,0,0,0,1179,1175,1,0,0,0,1180,1181,1,0,0,0,1181,1179,1,0,0,0,1181,1182,
		1,0,0,0,1182,1194,1,0,0,0,1183,1190,3,142,71,0,1184,1186,5,15,0,0,1185,
		1187,3,142,71,0,1186,1185,1,0,0,0,1186,1187,1,0,0,0,1187,1189,1,0,0,0,
		1188,1184,1,0,0,0,1189,1192,1,0,0,0,1190,1188,1,0,0,0,1190,1191,1,0,0,
		0,1191,1194,1,0,0,0,1192,1190,1,0,0,0,1193,1179,1,0,0,0,1193,1183,1,0,
		0,0,1194,141,1,0,0,0,1195,1197,3,164,82,0,1196,1198,5,30,0,0,1197,1196,
		1,0,0,0,1197,1198,1,0,0,0,1198,143,1,0,0,0,1199,1203,5,8,0,0,1200,1202,
		7,2,0,0,1201,1200,1,0,0,0,1202,1205,1,0,0,0,1203,1201,1,0,0,0,1203,1204,
		1,0,0,0,1204,1206,1,0,0,0,1205,1203,1,0,0,0,1206,1210,3,146,73,0,1207,
		1209,7,2,0,0,1208,1207,1,0,0,0,1209,1212,1,0,0,0,1210,1208,1,0,0,0,1210,
		1211,1,0,0,0,1211,1213,1,0,0,0,1212,1210,1,0,0,0,1213,1214,5,9,0,0,1214,
		145,1,0,0,0,1215,1217,5,15,0,0,1216,1215,1,0,0,0,1217,1220,1,0,0,0,1218,
		1216,1,0,0,0,1218,1219,1,0,0,0,1219,1221,1,0,0,0,1220,1218,1,0,0,0,1221,
		1228,3,148,74,0,1222,1224,5,15,0,0,1223,1225,3,148,74,0,1224,1223,1,0,
		0,0,1224,1225,1,0,0,0,1225,1227,1,0,0,0,1226,1222,1,0,0,0,1227,1230,1,
		0,0,0,1228,1226,1,0,0,0,1228,1229,1,0,0,0,1229,147,1,0,0,0,1230,1228,1,
		0,0,0,1231,1232,3,164,82,0,1232,1233,5,19,0,0,1233,1234,3,164,82,0,1234,
		149,1,0,0,0,1235,1239,3,174,87,0,1236,1238,7,2,0,0,1237,1236,1,0,0,0,1238,
		1241,1,0,0,0,1239,1237,1,0,0,0,1239,1240,1,0,0,0,1240,1242,1,0,0,0,1241,
		1239,1,0,0,0,1242,1246,5,19,0,0,1243,1245,7,2,0,0,1244,1243,1,0,0,0,1245,
		1248,1,0,0,0,1246,1244,1,0,0,0,1246,1247,1,0,0,0,1247,1249,1,0,0,0,1248,
		1246,1,0,0,0,1249,1250,3,164,82,0,1250,151,1,0,0,0,1251,1256,3,208,104,
		0,1252,1256,3,210,105,0,1253,1256,5,138,0,0,1254,1256,3,198,99,0,1255,
		1251,1,0,0,0,1255,1252,1,0,0,0,1255,1253,1,0,0,0,1255,1254,1,0,0,0,1256,
		153,1,0,0,0,1257,1258,5,1,0,0,1258,1259,3,164,82,0,1259,1260,5,2,0,0,1260,
		155,1,0,0,0,1261,1268,3,158,79,0,1262,1264,5,15,0,0,1263,1265,3,158,79,
		0,1264,1263,1,0,0,0,1264,1265,1,0,0,0,1265,1267,1,0,0,0,1266,1262,1,0,
		0,0,1267,1270,1,0,0,0,1268,1266,1,0,0,0,1268,1269,1,0,0,0,1269,1280,1,
		0,0,0,1270,1268,1,0,0,0,1271,1273,5,15,0,0,1272,1274,3,158,79,0,1273,1272,
		1,0,0,0,1273,1274,1,0,0,0,1274,1276,1,0,0,0,1275,1271,1,0,0,0,1276,1277,
		1,0,0,0,1277,1275,1,0,0,0,1277,1278,1,0,0,0,1278,1280,1,0,0,0,1279,1261,
		1,0,0,0,1279,1275,1,0,0,0,1280,157,1,0,0,0,1281,1286,3,164,82,0,1282,1283,
		3,170,85,0,1283,1284,7,3,0,0,1284,1286,1,0,0,0,1285,1281,1,0,0,0,1285,
		1282,1,0,0,0,1286,159,1,0,0,0,1287,1292,3,164,82,0,1288,1289,5,15,0,0,
		1289,1291,3,164,82,0,1290,1288,1,0,0,0,1291,1294,1,0,0,0,1292,1290,1,0,
		0,0,1292,1293,1,0,0,0,1293,161,1,0,0,0,1294,1292,1,0,0,0,1295,1299,5,8,
		0,0,1296,1298,3,214,107,0,1297,1296,1,0,0,0,1298,1301,1,0,0,0,1299,1297,
		1,0,0,0,1299,1300,1,0,0,0,1300,1303,1,0,0,0,1301,1299,1,0,0,0,1302,1304,
		3,140,70,0,1303,1302,1,0,0,0,1303,1304,1,0,0,0,1304,1305,1,0,0,0,1305,
		1306,5,9,0,0,1306,163,1,0,0,0,1307,1308,6,82,-1,0,1308,1309,3,188,94,0,
		1309,1310,5,69,0,0,1310,1311,3,164,82,3,1311,1323,1,0,0,0,1312,1316,3,
		186,93,0,1313,1315,7,2,0,0,1314,1313,1,0,0,0,1315,1318,1,0,0,0,1316,1314,
		1,0,0,0,1316,1317,1,0,0,0,1317,1319,1,0,0,0,1318,1316,1,0,0,0,1319,1320,
		3,16,8,0,1320,1323,1,0,0,0,1321,1323,3,168,84,0,1322,1307,1,0,0,0,1322,
		1312,1,0,0,0,1322,1321,1,0,0,0,1323,1371,1,0,0,0,1324,1327,10,7,0,0,1325,
		1328,5,52,0,0,1326,1328,5,111,0,0,1327,1325,1,0,0,0,1327,1326,1,0,0,0,
		1328,1329,1,0,0,0,1329,1370,3,164,82,8,1330,1333,10,6,0,0,1331,1334,5,
		53,0,0,1332,1334,5,113,0,0,1333,1331,1,0,0,0,1333,1332,1,0,0,0,1334,1335,
		1,0,0,0,1335,1370,3,164,82,7,1336,1337,10,5,0,0,1337,1338,5,35,0,0,1338,
		1370,3,164,82,5,1339,1343,10,4,0,0,1340,1342,7,2,0,0,1341,1340,1,0,0,0,
		1342,1345,1,0,0,0,1343,1341,1,0,0,0,1343,1344,1,0,0,0,1344,1346,1,0,0,
		0,1345,1343,1,0,0,0,1346,1350,5,17,0,0,1347,1349,7,2,0,0,1348,1347,1,0,
		0,0,1349,1352,1,0,0,0,1350,1348,1,0,0,0,1350,1351,1,0,0,0,1351,1353,1,
		0,0,0,1352,1350,1,0,0,0,1353,1357,3,164,82,0,1354,1356,7,2,0,0,1355,1354,
		1,0,0,0,1356,1359,1,0,0,0,1357,1355,1,0,0,0,1357,1358,1,0,0,0,1358,1360,
		1,0,0,0,1359,1357,1,0,0,0,1360,1364,5,19,0,0,1361,1363,7,2,0,0,1362,1361,
		1,0,0,0,1363,1366,1,0,0,0,1364,1362,1,0,0,0,1364,1365,1,0,0,0,1365,1367,
		1,0,0,0,1366,1364,1,0,0,0,1367,1368,3,164,82,5,1368,1370,1,0,0,0,1369,
		1324,1,0,0,0,1369,1330,1,0,0,0,1369,1336,1,0,0,0,1369,1339,1,0,0,0,1370,
		1373,1,0,0,0,1371,1369,1,0,0,0,1371,1372,1,0,0,0,1372,165,1,0,0,0,1373,
		1371,1,0,0,0,1374,1375,6,83,-1,0,1375,1376,3,168,84,0,1376,1418,1,0,0,
		0,1377,1378,10,5,0,0,1378,1379,7,4,0,0,1379,1417,3,166,83,6,1380,1381,
		10,4,0,0,1381,1382,7,5,0,0,1382,1417,3,166,83,5,1383,1384,10,3,0,0,1384,
		1385,5,35,0,0,1385,1417,3,166,83,4,1386,1390,10,2,0,0,1387,1389,7,2,0,
		0,1388,1387,1,0,0,0,1389,1392,1,0,0,0,1390,1388,1,0,0,0,1390,1391,1,0,
		0,0,1391,1393,1,0,0,0,1392,1390,1,0,0,0,1393,1397,5,17,0,0,1394,1396,7,
		2,0,0,1395,1394,1,0,0,0,1396,1399,1,0,0,0,1397,1395,1,0,0,0,1397,1398,
		1,0,0,0,1398,1400,1,0,0,0,1399,1397,1,0,0,0,1400,1404,3,166,83,0,1401,
		1403,7,2,0,0,1402,1401,1,0,0,0,1403,1406,1,0,0,0,1404,1402,1,0,0,0,1404,
		1405,1,0,0,0,1405,1407,1,0,0,0,1406,1404,1,0,0,0,1407,1411,5,19,0,0,1408,
		1410,7,2,0,0,1409,1408,1,0,0,0,1410,1413,1,0,0,0,1411,1409,1,0,0,0,1411,
		1412,1,0,0,0,1412,1414,1,0,0,0,1413,1411,1,0,0,0,1414,1415,3,166,83,3,
		1415,1417,1,0,0,0,1416,1377,1,0,0,0,1416,1380,1,0,0,0,1416,1383,1,0,0,
		0,1416,1386,1,0,0,0,1417,1420,1,0,0,0,1418,1416,1,0,0,0,1418,1419,1,0,
		0,0,1419,167,1,0,0,0,1420,1418,1,0,0,0,1421,1422,6,84,-1,0,1422,1443,3,
		170,85,0,1423,1424,5,24,0,0,1424,1443,3,168,84,19,1425,1426,5,25,0,0,1426,
		1443,3,168,84,18,1427,1428,5,27,0,0,1428,1443,3,168,84,16,1429,1432,5,
		29,0,0,1430,1432,5,112,0,0,1431,1429,1,0,0,0,1431,1430,1,0,0,0,1432,1433,
		1,0,0,0,1433,1443,3,168,84,15,1434,1435,5,26,0,0,1435,1443,3,168,84,14,
		1436,1437,5,28,0,0,1437,1443,3,168,84,13,1438,1439,3,170,85,0,1439,1440,
		3,192,96,0,1440,1441,3,164,82,0,1441,1443,1,0,0,0,1442,1421,1,0,0,0,1442,
		1423,1,0,0,0,1442,1425,1,0,0,0,1442,1427,1,0,0,0,1442,1431,1,0,0,0,1442,
		1434,1,0,0,0,1442,1436,1,0,0,0,1442,1438,1,0,0,0,1443,1517,1,0,0,0,1444,
		1445,10,17,0,0,1445,1446,5,34,0,0,1446,1516,3,168,84,17,1447,1451,10,12,
		0,0,1448,1450,7,2,0,0,1449,1448,1,0,0,0,1450,1453,1,0,0,0,1451,1449,1,
		0,0,0,1451,1452,1,0,0,0,1452,1454,1,0,0,0,1453,1451,1,0,0,0,1454,1458,
		7,6,0,0,1455,1457,7,2,0,0,1456,1455,1,0,0,0,1457,1460,1,0,0,0,1458,1456,
		1,0,0,0,1458,1459,1,0,0,0,1459,1461,1,0,0,0,1460,1458,1,0,0,0,1461,1516,
		3,168,84,13,1462,1463,10,11,0,0,1463,1464,7,7,0,0,1464,1516,3,168,84,12,
		1465,1466,10,10,0,0,1466,1467,7,8,0,0,1467,1516,3,168,84,11,1468,1472,
		10,9,0,0,1469,1471,7,2,0,0,1470,1469,1,0,0,0,1471,1474,1,0,0,0,1472,1470,
		1,0,0,0,1472,1473,1,0,0,0,1473,1475,1,0,0,0,1474,1472,1,0,0,0,1475,1479,
		5,49,0,0,1476,1478,7,2,0,0,1477,1476,1,0,0,0,1478,1481,1,0,0,0,1479,1477,
		1,0,0,0,1479,1480,1,0,0,0,1480,1482,1,0,0,0,1481,1479,1,0,0,0,1482,1516,
		3,168,84,10,1483,1484,10,8,0,0,1484,1485,5,50,0,0,1485,1516,3,168,84,9,
		1486,1487,10,7,0,0,1487,1488,5,51,0,0,1488,1516,3,168,84,8,1489,1496,10,
		6,0,0,1490,1497,5,23,0,0,1491,1493,5,140,0,0,1492,1491,1,0,0,0,1493,1494,
		1,0,0,0,1494,1492,1,0,0,0,1494,1495,1,0,0,0,1495,1497,1,0,0,0,1496,1490,
		1,0,0,0,1496,1492,1,0,0,0,1497,1498,1,0,0,0,1498,1516,3,168,84,7,1499,
		1500,10,5,0,0,1500,1501,5,48,0,0,1501,1516,3,168,84,6,1502,1503,10,4,0,
		0,1503,1504,7,9,0,0,1504,1516,3,168,84,5,1505,1506,10,3,0,0,1506,1507,
		7,10,0,0,1507,1516,3,168,84,4,1508,1509,10,2,0,0,1509,1510,7,11,0,0,1510,
		1516,3,168,84,3,1511,1512,10,21,0,0,1512,1516,5,24,0,0,1513,1514,10,20,
		0,0,1514,1516,5,25,0,0,1515,1444,1,0,0,0,1515,1447,1,0,0,0,1515,1462,1,
		0,0,0,1515,1465,1,0,0,0,1515,1468,1,0,0,0,1515,1483,1,0,0,0,1515,1486,
		1,0,0,0,1515,1489,1,0,0,0,1515,1499,1,0,0,0,1515,1502,1,0,0,0,1515,1505,
		1,0,0,0,1515,1508,1,0,0,0,1515,1511,1,0,0,0,1515,1513,1,0,0,0,1516,1519,
		1,0,0,0,1517,1515,1,0,0,0,1517,1518,1,0,0,0,1518,169,1,0,0,0,1519,1517,
		1,0,0,0,1520,1521,6,85,-1,0,1521,1522,5,49,0,0,1522,1534,3,170,85,8,1523,
		1534,3,208,104,0,1524,1534,3,176,88,0,1525,1534,3,194,97,0,1526,1534,3,
		138,69,0,1527,1534,3,144,72,0,1528,1534,3,182,91,0,1529,1530,5,10,0,0,
		1530,1531,3,160,80,0,1531,1532,5,11,0,0,1532,1534,1,0,0,0,1533,1520,1,
		0,0,0,1533,1523,1,0,0,0,1533,1524,1,0,0,0,1533,1525,1,0,0,0,1533,1526,
		1,0,0,0,1533,1527,1,0,0,0,1533,1528,1,0,0,0,1533,1529,1,0,0,0,1534,1551,
		1,0,0,0,1535,1536,10,11,0,0,1536,1537,7,12,0,0,1537,1550,3,174,87,0,1538,
		1539,10,10,0,0,1539,1541,5,10,0,0,1540,1542,3,156,78,0,1541,1540,1,0,0,
		0,1541,1542,1,0,0,0,1542,1543,1,0,0,0,1543,1550,5,11,0,0,1544,1546,10,
		9,0,0,1545,1547,5,18,0,0,1546,1545,1,0,0,0,1546,1547,1,0,0,0,1547,1548,
		1,0,0,0,1548,1550,3,162,81,0,1549,1535,1,0,0,0,1549,1538,1,0,0,0,1549,
		1544,1,0,0,0,1550,1553,1,0,0,0,1551,1549,1,0,0,0,1551,1552,1,0,0,0,1552,
		171,1,0,0,0,1553,1551,1,0,0,0,1554,1556,7,2,0,0,1555,1554,1,0,0,0,1556,
		1557,1,0,0,0,1557,1555,1,0,0,0,1557,1558,1,0,0,0,1558,1559,1,0,0,0,1559,
		1581,5,22,0,0,1560,1564,5,22,0,0,1561,1563,7,2,0,0,1562,1561,1,0,0,0,1563,
		1566,1,0,0,0,1564,1562,1,0,0,0,1564,1565,1,0,0,0,1565,1581,1,0,0,0,1566,
		1564,1,0,0,0,1567,1569,7,2,0,0,1568,1567,1,0,0,0,1569,1572,1,0,0,0,1570,
		1568,1,0,0,0,1570,1571,1,0,0,0,1571,1573,1,0,0,0,1572,1570,1,0,0,0,1573,
		1577,5,18,0,0,1574,1576,7,2,0,0,1575,1574,1,0,0,0,1576,1579,1,0,0,0,1577,
		1575,1,0,0,0,1577,1578,1,0,0,0,1578,1581,1,0,0,0,1579,1577,1,0,0,0,1580,
		1555,1,0,0,0,1580,1560,1,0,0,0,1580,1570,1,0,0,0,1581,173,1,0,0,0,1582,
		1587,3,208,104,0,1583,1587,3,176,88,0,1584,1587,3,210,105,0,1585,1587,
		3,194,97,0,1586,1582,1,0,0,0,1586,1583,1,0,0,0,1586,1584,1,0,0,0,1586,
		1585,1,0,0,0,1587,175,1,0,0,0,1588,1589,3,152,76,0,1589,1594,3,154,77,
		0,1590,1593,3,152,76,0,1591,1593,3,154,77,0,1592,1590,1,0,0,0,1592,1591,
		1,0,0,0,1593,1596,1,0,0,0,1594,1592,1,0,0,0,1594,1595,1,0,0,0,1595,1606,
		1,0,0,0,1596,1594,1,0,0,0,1597,1602,3,154,77,0,1598,1601,3,152,76,0,1599,
		1601,3,154,77,0,1600,1598,1,0,0,0,1600,1599,1,0,0,0,1601,1604,1,0,0,0,
		1602,1600,1,0,0,0,1602,1603,1,0,0,0,1603,1606,1,0,0,0,1604,1602,1,0,0,
		0,1605,1588,1,0,0,0,1605,1597,1,0,0,0,1606,177,1,0,0,0,1607,1608,5,16,
		0,0,1608,1609,3,164,82,0,1609,179,1,0,0,0,1610,1614,3,208,104,0,1611,1614,
		3,138,69,0,1612,1614,3,182,91,0,1613,1610,1,0,0,0,1613,1611,1,0,0,0,1613,
		1612,1,0,0,0,1614,181,1,0,0,0,1615,1619,5,12,0,0,1616,1618,3,214,107,0,
		1617,1616,1,0,0,0,1618,1621,1,0,0,0,1619,1617,1,0,0,0,1619,1620,1,0,0,
		0,1620,1636,1,0,0,0,1621,1619,1,0,0,0,1622,1627,3,150,75,0,1623,1624,5,
		15,0,0,1624,1626,3,150,75,0,1625,1623,1,0,0,0,1626,1629,1,0,0,0,1627,1625,
		1,0,0,0,1627,1628,1,0,0,0,1628,1633,1,0,0,0,1629,1627,1,0,0,0,1630,1632,
		3,214,107,0,1631,1630,1,0,0,0,1632,1635,1,0,0,0,1633,1631,1,0,0,0,1633,
		1634,1,0,0,0,1634,1637,1,0,0,0,1635,1633,1,0,0,0,1636,1622,1,0,0,0,1636,
		1637,1,0,0,0,1637,1638,1,0,0,0,1638,1639,5,13,0,0,1639,183,1,0,0,0,1640,
		1642,5,126,0,0,1641,1640,1,0,0,0,1641,1642,1,0,0,0,1642,1643,1,0,0,0,1643,
		1644,3,208,104,0,1644,1646,5,10,0,0,1645,1647,3,132,66,0,1646,1645,1,0,
		0,0,1646,1647,1,0,0,0,1647,1648,1,0,0,0,1648,1649,5,11,0,0,1649,185,1,
		0,0,0,1650,1660,3,184,92,0,1651,1653,5,126,0,0,1652,1651,1,0,0,0,1652,
		1653,1,0,0,0,1653,1654,1,0,0,0,1654,1656,5,10,0,0,1655,1657,3,132,66,0,
		1656,1655,1,0,0,0,1656,1657,1,0,0,0,1657,1658,1,0,0,0,1658,1660,5,11,0,
		0,1659,1650,1,0,0,0,1659,1652,1,0,0,0,1660,187,1,0,0,0,1661,1663,5,126,
		0,0,1662,1661,1,0,0,0,1662,1663,1,0,0,0,1663,1664,1,0,0,0,1664,1666,3,
		208,104,0,1665,1662,1,0,0,0,1665,1666,1,0,0,0,1666,1667,1,0,0,0,1667,1680,
		5,30,0,0,1668,1670,5,126,0,0,1669,1668,1,0,0,0,1669,1670,1,0,0,0,1670,
		1672,1,0,0,0,1671,1673,5,49,0,0,1672,1671,1,0,0,0,1672,1673,1,0,0,0,1673,
		1674,1,0,0,0,1674,1676,3,208,104,0,1675,1677,5,17,0,0,1676,1675,1,0,0,
		0,1676,1677,1,0,0,0,1677,1680,1,0,0,0,1678,1680,3,186,93,0,1679,1665,1,
		0,0,0,1679,1669,1,0,0,0,1679,1678,1,0,0,0,1680,189,1,0,0,0,1681,1682,5,
		69,0,0,1682,1701,3,164,82,0,1683,1685,7,2,0,0,1684,1683,1,0,0,0,1685,1688,
		1,0,0,0,1686,1684,1,0,0,0,1686,1687,1,0,0,0,1687,1689,1,0,0,0,1688,1686,
		1,0,0,0,1689,1693,5,12,0,0,1690,1692,3,214,107,0,1691,1690,1,0,0,0,1692,
		1695,1,0,0,0,1693,1691,1,0,0,0,1693,1694,1,0,0,0,1694,1697,1,0,0,0,1695,
		1693,1,0,0,0,1696,1698,3,18,9,0,1697,1696,1,0,0,0,1697,1698,1,0,0,0,1698,
		1699,1,0,0,0,1699,1701,5,13,0,0,1700,1681,1,0,0,0,1700,1686,1,0,0,0,1701,
		191,1,0,0,0,1702,1703,7,13,0,0,1703,193,1,0,0,0,1704,1709,3,196,98,0,1705,
		1709,3,198,99,0,1706,1709,3,200,100,0,1707,1709,7,14,0,0,1708,1704,1,0,
		0,0,1708,1705,1,0,0,0,1708,1706,1,0,0,0,1708,1707,1,0,0,0,1709,195,1,0,
		0,0,1710,1711,7,15,0,0,1711,197,1,0,0,0,1712,1713,7,16,0,0,1713,199,1,
		0,0,0,1714,1715,7,17,0,0,1715,201,1,0,0,0,1716,1717,5,115,0,0,1717,1718,
		3,152,76,0,1718,203,1,0,0,0,1719,1720,5,116,0,0,1720,1721,3,152,76,0,1721,
		205,1,0,0,0,1722,1725,3,208,104,0,1723,1725,3,210,105,0,1724,1722,1,0,
		0,0,1724,1723,1,0,0,0,1725,207,1,0,0,0,1726,1727,7,18,0,0,1727,209,1,0,
		0,0,1728,1733,3,212,106,0,1729,1733,5,70,0,0,1730,1733,5,71,0,0,1731,1733,
		3,196,98,0,1732,1728,1,0,0,0,1732,1729,1,0,0,0,1732,1730,1,0,0,0,1732,
		1731,1,0,0,0,1733,211,1,0,0,0,1734,1735,7,19,0,0,1735,213,1,0,0,0,1736,
		1737,7,2,0,0,1737,215,1,0,0,0,1738,1739,7,20,0,0,1739,217,1,0,0,0,249,
		222,227,249,253,258,263,268,270,278,284,291,297,302,311,314,330,336,340,
		349,355,359,365,374,383,389,393,398,406,411,413,420,424,433,437,445,449,
		453,458,465,467,475,480,482,489,493,500,507,512,521,530,534,539,546,550,
		557,560,564,573,581,584,588,597,605,608,612,621,629,632,636,645,653,656,
		660,665,674,679,687,694,699,703,706,710,714,720,727,733,737,741,747,754,
		760,766,774,780,788,794,798,804,808,812,816,821,830,834,838,840,847,853,
		860,867,872,878,885,890,902,906,910,916,921,928,935,938,946,950,955,959,
		966,970,975,979,983,990,1004,1011,1017,1020,1025,1035,1043,1045,1051,1055,
		1059,1066,1070,1081,1086,1097,1099,1103,1109,1114,1119,1136,1142,1148,
		1152,1155,1161,1168,1171,1177,1181,1186,1190,1193,1197,1203,1210,1218,
		1224,1228,1239,1246,1255,1264,1268,1273,1277,1279,1285,1292,1299,1303,
		1316,1322,1327,1333,1343,1350,1357,1364,1369,1371,1390,1397,1404,1411,
		1416,1418,1431,1442,1451,1458,1472,1479,1494,1496,1515,1517,1533,1541,
		1546,1549,1551,1557,1564,1570,1577,1580,1586,1592,1594,1600,1602,1605,
		1613,1619,1627,1633,1636,1641,1646,1652,1656,1659,1662,1665,1669,1672,
		1676,1679,1686,1693,1697,1700,1708,1724,1732
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
