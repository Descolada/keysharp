using static Keysharp.Core.Accessors;
using static Keysharp.Core.COM.Com;
using static Keysharp.Core.Collections;
using static Keysharp.Core.Common.Keyboard.HotkeyDefinition;
using static Keysharp.Core.Common.Keyboard.HotstringDefinition;
using static Keysharp.Core.Common.Keyboard.HotstringManager;
using static Keysharp.Core.ControlX;
using static Keysharp.Core.Debug;
using static Keysharp.Core.Dialogs;
using static Keysharp.Core.Dir;
using static Keysharp.Core.Dll;
using static Keysharp.Core.Drive;
using static Keysharp.Core.EditX;
using static Keysharp.Core.Env;
using static Keysharp.Core.Errors;
using static Keysharp.Core.External;
using static Keysharp.Core.Files;
using static Keysharp.Core.Flow;
using static Keysharp.Core.Functions;
using static Keysharp.Core.GuiHelper;
using static Keysharp.Core.ImageLists;
using static Keysharp.Core.Images;
using static Keysharp.Core.Ini;
using static Keysharp.Core.Input;
using static Keysharp.Core.Keyboard;
using static Keysharp.Core.KeysharpEnhancements;
using static Keysharp.Core.Loops;
using static Keysharp.Core.Maths;
using static Keysharp.Core.Menu;
using static Keysharp.Core.Misc;
using static Keysharp.Core.Monitor;
using static Keysharp.Core.Mouse;
using static Keysharp.Core.Network;
using static Keysharp.Core.Processes;
using static Keysharp.Core.RegEx;
using static Keysharp.Core.Registrys;
using static Keysharp.Core.Screen;
using static Keysharp.Core.Sound;
using static Keysharp.Core.Strings;
using static Keysharp.Core.ToolTips;
using static Keysharp.Core.Types;
using static Keysharp.Core.WindowX;
using static Keysharp.Core.Windows.WindowsAPI;
using static Keysharp.Scripting.Script.Operator;
using static Keysharp.Scripting.Script;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: Keysharp.Scripting.AssemblyBuildVersionAttribute("0.0.0.10")]

namespace Keysharp.CompiledMain
{
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Data;
	using System.IO;
	using System.Reflection;
	using System.Runtime.InteropServices;
	using System.Text;
	using System.Threading.Tasks;
	using System.Windows.Forms;
	using Keysharp.Core;
	using Keysharp.Core.Common;
	using Keysharp.Core.Common.File;
	using Keysharp.Core.Common.Invoke;
	using Keysharp.Core.Common.ObjectBase;
	using Keysharp.Core.Common.Strings;
	using Keysharp.Core.Common.Threading;
	using Keysharp.Scripting;
	using Array = Keysharp.Core.Array;
	using Buffer = Keysharp.Core.Buffer;


	public class program
	{

		[System.STAThreadAttribute()]
		public static int Main(string[] args)
		{
			try
			{
				string name = "*";
				_ks_s = new Keysharp.Scripting.Script();

				if (Keysharp.Scripting.Script.HandleSingleInstance(name, eScriptInstance.Prompt))
				{
					return Environment.ExitCode = 0;
				}

				_ks_hm = _ks_s.HotstringManager;
				_ks_s.SetName(name);
				Keysharp.Core.Env.HandleCommandLineParams(args);
				_ks_s.CreateTrayMenu();
				_ks_s.RunMainWindow(name, _ks_UserMainCode, false);
				_ks_s.WaitThreads();
				return Environment.ExitCode;
			}
			catch (Keysharp.Core.Error kserr)
			{
				if (!kserr.Processed)
				{
					_ = ErrorOccurred(kserr, kserr.ExcType);
				}

				if (!kserr.Handled)
				{
					var (_ks_pushed, _ks_btv) = _ks_s.Threads.BeginThread();
					MsgBox("Uncaught Keysharp exception:\r\n" + kserr, $"{Accessors.A_ScriptName}: Unhandled exception", "iconx");
					_ks_s.Threads.EndThread(_ks_pushed);
				}

				Keysharp.Core.Flow.ExitApp(1);
				return Environment.ExitCode;
			}
			catch (Keysharp.Core.Flow.UserRequestedExitException exitex)
			{
				return Environment.ExitCode;
			}
			catch (System.Exception mainex)
			{
				var ex = mainex.InnerException ?? mainex;

				if (ex is Keysharp.Core.Error kserr)
				{
					if (!kserr.Processed)
						_ = ErrorOccurred(kserr, kserr.ExcType);

					if (!kserr.Handled)
					{
						var (_ks_pushed, _ks_btv) = _ks_s.Threads.BeginThread();
						MsgBox("Uncaught Keysharp exception:\r\n" + kserr, $"{Accessors.A_ScriptName}: Unhandled exception", "iconx");
						_ks_s.Threads.EndThread(_ks_pushed);
					}
				}
				else
				{
					var (_ks_pushed, _ks_btv) = _ks_s.Threads.BeginThread();
					MsgBox("Uncaught exception:\r\n" + "Message: " + ex.Message + "\r\nStack: " + ex.StackTrace, $"{Accessors.A_ScriptName}: Unhandled exception", "iconx");
					_ks_s.Threads.EndThread(_ks_pushed);
				}

				;

				Keysharp.Core.Flow.ExitApp(1);

				return Environment.ExitCode;
			}
		}

		private static Keysharp.Scripting.Script _ks_s;

		private static Keysharp.Core.Common.Keyboard.HotstringManager _ks_hm;

		public static object x;

		public static object _ks_UserMainCode()
		{
			x = 123L;
			Keysharp.Core.Common.Keyboard.HotkeyDefinition.ManifestAllHotkeysHotstringsHooks();
			Keysharp.Core.Flow.ExitApp(0);
			return "";
		}
	}
}
