using static Keysharp.Core.Accessors;
using static Keysharp.Core.COM.Com;
//using static Keysharp.Core.Common.Window.WindowItemBase;
using static Keysharp.Core.Common.Keyboard.HotkeyDefinition;
using static Keysharp.Core.Common.Keyboard.HotstringDefinition;
using static Keysharp.Core.Dialogs;
using static Keysharp.Core.Dir;
using static Keysharp.Core.Drive;
using static Keysharp.Core.Dll;
using static Keysharp.Core.Env;
using static Keysharp.Core.Files;
using static Keysharp.Core.Flow;
using static Keysharp.Core.Function;
using static Keysharp.Core.GuiHelper;
using static Keysharp.Core.Images;
using static Keysharp.Core.ImageLists;
using static Keysharp.Core.Ini;
using static Keysharp.Core.Input;
using static Keysharp.Core.Keyboard;
using static Keysharp.Core.KeysharpObject;
using static Keysharp.Core.Loops;
using static Keysharp.Core.Maths;
using static Keysharp.Core.Menu;
using static Keysharp.Core.Misc;
using static Keysharp.Core.Monitor;
using static Keysharp.Core.Mouse;
using static Keysharp.Core.Network;
using static Keysharp.Core.Options;
using static Keysharp.Core.Processes;
using static Keysharp.Core.Registrys;
using static Keysharp.Core.Screen;
using static Keysharp.Core.Security;
using static Keysharp.Core.SimpleJson;
using static Keysharp.Core.Sound;
using static Keysharp.Core.Strings;
using static Keysharp.Core.ToolTips;
using static Keysharp.Core.Window;
using static Keysharp.Core.Windows.WindowsAPI;
using static Keysharp.Scripting.Script;
using static Keysharp.Scripting.Script.Operator;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: Keysharp.Scripting.AssemblyBuildVersionAttribute("0.0.0.4")]

namespace Keysharp.CompiledMain
{
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Data;
	using System.IO;
	using System.Reflection;
	using System.Runtime.InteropServices;
	using System.Text;
	using System.Threading.Tasks;
	using System.Windows.Forms;
	using Keysharp.Core;
	using Keysharp.Scripting;
	using Array = Keysharp.Core.Array;
	using Buffer = Keysharp.Core.Buffer;


	public class program
	{

		[System.STAThreadAttribute()]
		public static int Main(string[] args)
		{
			try
			{
				string name = "*";
				Keysharp.Scripting.Script.Variables.InitGlobalVars();
				Keysharp.Scripting.Script.SetName(name);
				Keysharp.Scripting.Script.HandleSingleInstance(name, eScriptInstance.Force);
				HandleCommandLineParams(args);
				Keysharp.Scripting.Script.CreateTrayMenu();
				Keysharp.Scripting.Script.RunMainWindow(name, UserMainCode);
				Keysharp.Core.Flow.ExitApp(0);
				return 0;
			}
			catch (Keysharp.Core.Error kserr)
			{
				if (ErrorOccurred(kserr))
				{
					MsgBox("Uncaught Keysharp exception:\r\n" + kserr);
				}

				Keysharp.Core.Flow.ExitApp(1);
				return 1;
			}
			catch (System.Exception mainex)
			{
				var ex = mainex.InnerException ?? mainex;

				if (ex is Keysharp.Core.Error kserr)
				{
					if (ErrorOccurred(kserr))
					{
						MsgBox("Uncaught Keysharp exception:\r\n" + kserr);
					}
				}
				else
				{
					MsgBox("Uncaught exception:\r\n" + "Message: " + ex.Message + "\r\nStack: " + ex.StackTrace);
				}

				;

				Keysharp.Core.Flow.ExitApp(1);

				return 1;
			}
		}

		public static object label_a4cc1ccb_2_spi_getmousespeed = 112L;

		public static object label_a4cc1ccb_2_spi_setmousespeed = 113L;

		public static object label_a4cc1ccb_2_origmousespeed = 0L;

		public static object systemcursor_visible = true;

		public static object systemcursor_c = Keysharp.Core.Misc.Map();

		public static object systemcursor_sys_cursors = new Keysharp.Core.Array(new object[]
		{
			32512L,
			32513L,
			32514L,
			32515L,
			32516L,
			32642L,
			32643L,
			32644L,
			32645L,
			32646L,
			32648L,
			32649L,
			32650L
		});

		public static object systemcursor_32513;

		public static object systemcursor_32514;

		public static object systemcursor_32515;

		public static object systemcursor_32516;

		public static object systemcursor_32642;

		public static object systemcursor_32643;

		public static object systemcursor_32644;

		public static object systemcursor_32645;

		public static object systemcursor_32646;

		public static object systemcursor_32648;

		public static object systemcursor_32649;

		public static object systemcursor_32650;

		public static object bgbtn;

		public static object bgbtn2;

		public static object btnsend;

		public static object btnsendevent;

		public static object btnsendinput;

		public static object btnsendplay;

		public static object btnsendtext;

		public static object buttondummy;

		public static object buttonfive;

		public static object buttonfour;

		public static object buttonone;

		public static object buttontwo;

		public static object cb_addbtn;

		public static object cb_button;

		public static object cb_deletebtn;

		public static object checkboxone;

		public static object checkboxtext;

		public static object comdllremovefromtaskbarbtn;

		public static object coordtext;

		public static object cptext;

		public static object cz_edit1;

		public static object cz_lbbtn1;

		public static object cz_lbbtn10;

		public static object cz_lbbtn11;

		public static object cz_lbbtn12;

		public static object cz_lbbtn13;

		public static object cz_lbbtn14;

		public static object cz_lbbtn15;

		public static object cz_lbbtn16;

		public static object cz_lbbtn17;

		public static object cz_lbbtn18;

		public static object cz_lbbtn2;

		public static object cz_lbbtn3;

		public static object cz_lbbtn4;

		public static object cz_lbbtn5;

		public static object cz_lbbtn6;

		public static object cz_lbbtn7;

		public static object cz_lbbtn8;

		public static object cz_lbbtn9;

		public static object cz_listbox;

		public static object cz_separatortext1;

		public static object cz_text1;

		public static object cz_text2;

		public static object cz_text2a;

		public static object cz_text3;

		public static object dlldllfillrectbtn;

		public static object dlldllgetwindowrectbtn;

		public static object dlldllremovefromtaskbarbtn;

		public static object dllmsgboxbtn;

		public static object dllperformancecounterbtn;

		public static object dllwsprintfbtn;

		public static object e1;

		public static object e2;

		public static object e3;

		public static object e3btn;

		public static object e4;

		public static object editbtn1;

		public static object editbtn2;

		public static object edithwndbtn;

		public static object fakesep;

		public static object filemenu;

		public static object findedit;

		public static object funcbtnfive;

		public static object funcbtnfour;

		public static object funcbtnone;

		public static object funcbtnseven;

		public static object funcbtnsix;

		public static object funcbtnthree;

		public static object funcbtntwo;

		public static object g2btn1;

		public static object g2btn2;

		public static object g2btn3;

		public static object g2btn4;

		public static object g2label1;

		public static object g2label2;

		public static object g2label3;

		public static object g2label4;

		public static object gb1;

		public static object gb1_cz;

		public static object gb1_tabone;

		public static object gb1_tabthree;

		public static object gb1_tabtwo;

		public static object gb2;

		public static object gb2_cz;

		public static object gb2_cz_btn1;

		public static object gb2_cz_btn2;

		public static object gb2_cz_btn3;

		public static object gb2_cz_btn4;

		public static object gb2_cz_cb;

		public static object gb2_cz_text1;

		public static object gb2_cz_text2;

		public static object gb2_tabone;

		public static object gb2_tabthree;

		public static object gb2_tabtwo;

		public static object gb2btn1;

		public static object gb2btn2;

		public static object gb2edit;

		public static object gb3;

		public static object gb3edit;

		public static object gb3hwnd;

		public static object gb4;

		public static object gb4btn1;

		public static object gb4btn2;

		public static object gui2;

		public static object gui2ctrlindexbutton;

		public static object gui2edit;

		public static object gui2findctrlsbutton;

		public static object gui2getcontrolsbutton;

		public static object gui2stylebutton;

		public static object gui3;

		public static object guibgcolor;

		public static object headerbtn;

		public static object headerbtn2;

		public static object hidecursordlllabel;

		public static object hotkeysectiontoptext;

		public static object hwndmyedit;

		public static object hwndmytext;

		public static object hwndsecondedit;

		public static object hwndtext;

		public static object imgsrchmenu;

		public static object infotext3;

		public static object inibtn1;

		public static object iniedit;

		public static object inilabel;

		public static object initext;

		public static object iniwritebtn;

		public static object iniwriteedit;

		public static object inputbtn;

		public static object lptext;

		public static object lv;

		public static object lv_label;

		public static object lv2;

		public static object lv2_btn1;

		public static object lv2_btn2;

		public static object lv2_btn3;

		public static object lv2_btn4;

		public static object lv2_btn5;

		public static object lv2_btn6;

		public static object lv2_btn7;

		public static object mc_btn;

		public static object menu_label;

		public static object mousemovebutton;

		public static object mousepostext;

		public static object movebutton;

		public static object movebuttonback;

		public static object mybtn;

		public static object mycb;

		public static object mycolorlabel;

		public static object mycolortext;

		public static object mydatetime;

		public static object myddl;

		public static object myedit2;

		public static object myedit3;

		public static object mygui;

		public static object myhkinfotext;

		public static object myhktext;

		public static object myhotkey;

		public static object mylbbtn1;

		public static object mylbbtn2;

		public static object mylink;

		public static object mylinktext;

		public static object mylistbox;

		public static object mymenu;

		public static object mymenubar;

		public static object mymonthcal;

		public static object mymultilb;

		public static object mypicturebtn;

		public static object myprogress;

		public static object myre;

		public static object myre2;

		public static object mysb;

		public static object myscbtn;

		public static object mysclabel;

		public static object mysecondpic;

		public static object mysendedit;

		public static object myslider;

		public static object myslider2;

		public static object mysliderpos;

		public static object mytext;

		public static object p1;

		public static object p1c1;

		public static object p2;

		public static object p2c1;

		public static object p2c2;

		public static object p2c2c1;

		public static object pbtn1;

		public static object pbtn2;

		public static object postbtn1;

		public static object postinfo;

		public static object radioone;

		public static object radiotext;

		public static object radiothree;

		public static object radiotwo;

		public static object richeditbtn1;

		public static object richeditbtn2;

		public static object secondedit;

		public static object secondedittext;

		public static object secondguibutton;

		public static object secondrichedit;

		public static object secondrichedittext;

		public static object sectiontoptext;

		public static object sendbtn1;

		public static object sendbtn2;

		public static object showbtn;

		public static object showbtn2;

		public static object slugline;

		public static object srchpic;

		public static object srchpictext;

		public static object submenu1;

		public static object t2g2t1;

		public static object t2g2t2;

		public static object t2g2t3;

		public static object t2g2t4;

		public static object tab;

		public static object test_header;

		public static object thirdguibutton;

		public static object thirdtext1;

		public static object thirdtext2;

		public static object thirdtext3;

		public static object thirdtext4;

		public static object thirdtext5;

		public static object thirdtext6;

		public static object thirdtext7;

		public static object thirdtext8;

		public static object titleinfo;

		public static object treeviewtext;

		public static object tv;

		public static object winpos;

		public static object writelabel;

		public static object CloseApp()
		{
			return "";
		}

		public static object ReadINI()
		{
			object inifiletext = null;
			object val = null;
			val = Keysharp.Core.Ini.IniRead(".\\kstests.ini", "section2", "PRIMATE2");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(initext, "SetFont", 1), "s10 cBlue");
			inifiletext = Keysharp.Core.Files.FileRead(".\\kstests.ini");
			Keysharp.Core.Window.ControlSetText(val, initext);
			Keysharp.Core.Window.ControlSetText(inifiletext, iniedit);
			return "";
		}

		public static object WriteINI()
		{
			object inifiletext2 = null;
			Keysharp.Core.Ini.IniWrite("BonoboBozo has been captured", ".\\kstests.ini", "SECTION42", "PRIMATEZ_ON_LOOSE");
			inifiletext2 = Keysharp.Core.Files.FileRead(".\\kstests.ini");
			Keysharp.Core.Window.ControlSetText(inifiletext2, iniwriteedit);
			Keysharp.Core.Flow.Sleep(2000L);
			Keysharp.Core.Ini.IniWrite("BONOBOBOZO has escaped", ".\\kstests.ini", "SECTION42", "PRIMATEZ_ON_LOOSE");
			inifiletext2 = Keysharp.Core.Files.FileRead(".\\kstests.ini");
			Keysharp.Core.Window.ControlSetText(inifiletext2, iniwriteedit);
			return "";
		}

		public static object ShowE3Hwnd()
		{
			Keysharp.Core.Window.ControlSetStyle("^0x8", e3);
			Keysharp.Core.Window.ControlFocus(Keysharp.Scripting.Script.GetPropertyValue(e3, "Hwnd"));
			return "";
		}

		public static object ChangeMoveBtnColor()
		{
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(movebutton, "SetFont", 1), "cRed");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(movebuttonback, "SetFont", 1), "cBlack");
			return "";
		}

		public static object ChangeMoveBtnBackColor()
		{
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(movebutton, "SetFont", 1), "cBlack");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(movebuttonback, "SetFont", 1), "cRed");
			return "";
		}

		public static object ChangeTitle()
		{
			object title = null;
			title = "KEYSHARP\'S BRAND SPANKING NEW TITLE";
			Keysharp.Core.Window.SendMessage(12L, 0L, title);
			return "";
		}

		public static object RestoreTitle()
		{
			object title = null;
			title = "KEYSHARP TESTS";
			Keysharp.Core.Window.SendMessage(12L, 0L, title);
			return "";
		}

		public static object AboutNotepad()
		{
			Keysharp.Core.Window.SetTitleMatchMode(2L);
			Keysharp.Core.Processes.Run("Notepad.exe");
			Keysharp.Core.Flow.Sleep(1000L);
			Keysharp.Core.Window.PostMessage(273L, 65L, 0L, null, "Untitled - Notepad");
			Keysharp.Core.Flow.Sleep(2000L);
			Keysharp.Core.Window.WinKill("ahk_exe Notepad.exe");
			return "";
		}

		public static object DeleteWhite()
		{
			object whiteindex = null;

			try
			{
				whiteindex = Keysharp.Core.Window.ControlFindItem("White", mylistbox);
			}
			catch (Keysharp.Core.Error e)
			{
				Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "An error was thrown!\nSpecifically: ", Keysharp.Scripting.Script.GetPropertyValue(e, "Message")), "ERROR!");
				return "";
			}

			Keysharp.Core.Window.ControlDeleteItem(whiteindex, mylistbox);
			return "";
		}

		public static object AddWhite()
		{
			Keysharp.Core.Window.ControlAddItem("White", mylistbox);
			return "";
		}

		public static object AddYellow()
		{
			Keysharp.Core.Window.ControlAddItem("Yellow", mycb);
			return "";
		}

		public static object DeleteYellow()
		{
			object yellowindex = null;

			try
			{
				yellowindex = Keysharp.Core.Window.ControlFindItem("Yellow", mycb);
			}
			catch (Keysharp.Core.Error e)
			{
				Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "An error was thrown!\nSpecifically: ", Keysharp.Scripting.Script.GetPropertyValue(e, "Message")), "ERROR!");
				return "";
			}

			Keysharp.Core.Window.ControlDeleteItem(yellowindex, mycb);
			return "";
		}

		public static object SliderPos()
		{
			Keysharp.Core.Window.ControlSetText(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "Slider value is ", Keysharp.Scripting.Script.GetPropertyValue(myslider, "Value")), Keysharp.Scripting.Script.GetPropertyValue(mysliderpos, "Hwnd"));
			return "";
		}

		public static object STest()
		{
			object padding = null;
			object s = null;

			for (System.Collections.IEnumerator e3 = Keysharp.Core.Loops.Loop(Keysharp.Scripting.Script.GetPropertyValue(myslider2, "Value")).GetEnumerator(); IsTrueAndRunning(e3.MoveNext());
				)
			{
				padding = A_Index;
				s = Keysharp.Core.Strings.Format(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "| {1,-", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, padding, "} |\r\n| {2,"), padding), "} |\r\n")), "Left  ", "Right");
				Keysharp.Core.Window.ControlSetText(s, hwndmytext);
				Keysharp.Core.Flow.Sleep(5L);
				e4:
				;
			}

			e5:
			Keysharp.Core.Loops.Pop();

			for (System.Collections.IEnumerator e6 = Keysharp.Core.Loops.Loop(Keysharp.Scripting.Script.GetPropertyValue(myslider2, "Value")).GetEnumerator(); IsTrueAndRunning(e6.MoveNext());
				)
			{
				padding = Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Subtract, Keysharp.Scripting.Script.GetPropertyValue(myslider2, "Value"), A_Index);
				s = Keysharp.Core.Strings.Format(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "| {1,-", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, padding, "} |\r\n| {2,"), padding), "} |\r\n")), "Left  ", "Right");
				Keysharp.Core.Window.ControlSetText(s, hwndmytext);
				Keysharp.Core.Flow.Sleep(5L);
				e7:
				;
			}

			e8:
			Keysharp.Core.Loops.Pop();
			return "";
		}

		public static object UpdateHK()
		{
			Keysharp.Core.Window.ControlSetText(Keysharp.Scripting.Script.GetPropertyValue(myhotkey, "Value"), myhktext);
			return "";
		}

		public static object PastePic()
		{
			Keysharp.Core.Window.ControlFocus(myre);
			Keysharp.Core.Keyboard.Send("^v");
			return "";
		}

		public static object CopyPicFromFile()
		{
			object selectedfile = null;
			selectedfile = Keysharp.Core.Dialogs.FileSelect("3", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "C:\\Users\\", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, A_UserName, "\\Pictures\\Keysharp")));
			Keysharp.Core.Images.CopyImageToClipboard(selectedfile);
			Keysharp.Core.Flow.Sleep(100L);
			Keysharp.Core.Window.ControlFocus(myre2);
			Keysharp.Core.Keyboard.Send("^v");
			return "";
		}

		public static object SendToApp()
		{
			Keysharp.Core.Processes.Run("Notepad.exe");
			Keysharp.Core.Window.WinWaitActive("ahk_exe Notepad.exe");
			Keysharp.Core.Keyboard.SendInput("Sincerely,{enter}John Smith");
			Keysharp.Core.Keyboard.Send("\n");
			Keysharp.Core.Keyboard.Send("Another line.\n");
			Keysharp.Core.Keyboard.Send("{Raw}`100%\n");
			Keysharp.Core.Keyboard.Send("{Blind}{Text}You should see \'{Blind}{Text}\' after the ellipses ... {Blind}{Text}\n" +
										"");
			Keysharp.Core.Keyboard.Send("{Blind}You should see nothing after the ellipses ... \'{Blind}\'");
			Keysharp.Core.Keyboard.Send("\n");
			Keysharp.Core.Keyboard.Send("{Text}You should see the Blind mode syntax after the ellipses ... \'{Blind}\'");
			Keysharp.Core.Flow.Sleep(500L);
			Keysharp.Core.Dialogs.MsgBox("End of Notepad test", "Test finished", "T2");
			Keysharp.Core.Keyboard.Send("{Alt}Fx");
			Keysharp.Core.Flow.Sleep(100L);
			Keysharp.Core.Keyboard.Send("{Tab}{Enter}");
			return "";
		}

		public static object SendToGui()
		{
			Keysharp.Core.Window.WinActivate(mygui);
			Keysharp.Core.Window.ControlFocus(gb2edit);
			Keysharp.Core.Keyboard.SendInput("Sincerely,{enter}John Smith");
			Keysharp.Core.Keyboard.Send("\n");
			Keysharp.Core.Keyboard.Send("Another line.\n");
			Keysharp.Core.Keyboard.Send("{Raw}`100%\n");
			Keysharp.Core.Keyboard.Send("{Blind}{Text}You should see \'{Blind}{Text}\' after the ellipses ... {Blind}{Text}\n" +
										"");
			Keysharp.Core.Keyboard.Send("{Blind}You should see nothing after the ellipses ... {Blind}");
			Keysharp.Core.Keyboard.Send("\n");
			Keysharp.Core.Keyboard.Send("{Text}You should see the Blind mode syntax after the ellipses ... \'{Blind}\'");
			return "";
		}

		public static object MenuHandler(object item, params object[] args)
		{
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "You selected ", item), "ITEM SELECTED");
			return "";
		}

		public static object label_F1967E9B_0(object thishotkey)
		{
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mymenu, "Show", 0));
			return "";
		}

		public static object label_D7FDEF8_1(object thishotkey)
		{
			GetPix();
			return "";
		}

		public static object SecondGUI()
		{
			object editpos = null;
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui2, "Show", 0));
			editpos = Keysharp.Core.Window.ControlGetPos(Keysharp.Scripting.Script.GetPropertyValue(gui2edit, "Hwnd"));
			return "";
		}

		public static object GetTheControls()
		{
			object mybtn1 = null;
			object mywords = null;
			object themsg = null;
			object thepos = null;
			mywords = Keysharp.Scripting.Script.GetPropertyValue(gui2edit, "Hwnd");
			mybtn1 = Keysharp.Core.Window.ControlGetClassNN(Keysharp.Scripting.Script.GetPropertyValue(gui2stylebutton, "Hwnd"));
			themsg = Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "The Style Button\'s ClassNN is ", mybtn1), "\n");
			themsg = Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, themsg, "\nSecond button\'s Hwnd is "), Keysharp.Scripting.Script.GetPropertyValue(gui2getcontrolsbutton, "Hwnd")), "\n");
			themsg = Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, themsg, "\nThe Main GUI\'s hwnd is "), Keysharp.Scripting.Script.GetPropertyValue(mygui, "Hwnd"));
			Keysharp.Core.Dialogs.MsgBox(themsg, "Testing different methods of finding controls");
			Keysharp.Core.Flow.Sleep(2000L);
			thepos = Keysharp.Core.Window.ControlGetPos(Keysharp.Scripting.Script.GetPropertyValue(gui2findctrlsbutton, "Hwnd"));
			return "";
		}

		public static object FindSecondGuiEdit()
		{
			object mywords = null;
			object stylebtn = null;
			object theothermsg = null;
			mywords = Keysharp.Scripting.Script.GetPropertyValue(gui2edit, "Hwnd");
			stylebtn = Keysharp.Core.Window.ControlGetClassNN(Keysharp.Scripting.Script.GetPropertyValue(gui2stylebutton, "Hwnd"));
			theothermsg = Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "The Style Button\'s ClassNN is ", stylebtn);
			theothermsg = Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, theothermsg, "\nChild GUI Edit\'s hwnd is "), mywords);
			Keysharp.Core.Dialogs.MsgBox(theothermsg, "More testing of different methods to find controls");
			return "";
		}

		public static object EnumCtrls()
		{
			object guictrlobj = null;
			object themsg = null;
			object thenn = null;
			{
				;
				var e12 = mygui;
				var e14 = MakeEnumerator(e12);
				Keysharp.Core.Loops.Push();

				for (
					; IsTrueAndRunning(e14.MoveNext());
				)
				{
					Keysharp.Core.Loops.Inc();
					/*preventtrim*/
					(_, guictrlobj) = e14.Current;
					thenn = Keysharp.Core.Window.ControlGetClassNN(guictrlobj, mygui);
					themsg = Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, themsg, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "Control #", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, A_Index, " is "), thenn), "\n")));
					e15:
					;
				}

				e16:
				Keysharp.Core.Loops.Pop();
			};
			Keysharp.Scripting.Script.SetPropertyValue(gui2edit, "Value", themsg);
			return "";
		}

		public static object StyleTest()
		{
			Keysharp.Core.ToolTips.ToolTip("Setting style to -0xC00000\n(Will revert in two seconds to\n+0xC00000)");
			Keysharp.Core.Window.WinSetStyle("-0xC00000", "A");
			Keysharp.Core.Flow.Sleep(2000L);
			Keysharp.Core.Window.WinSetStyle("+0xC00000", "A");
			return "";
		}

		public static object FindByItem()
		{
			object editobj = null;
			editobj = gui2edit;
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.GetPropertyValue(editobj, "Text"));
			return "";
		}

		public static object FindByText()
		{
			object theitem = null;
			theitem = Keysharp.Scripting.Script.Index(gui3, "Find by Name");
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "I found a button. Text:\n", Keysharp.Scripting.Script.GetPropertyValue(theitem, "Text")), "Find by Text");
			return "";
		}

		public static object FindByHwnd()
		{
			object theitem = null;
			theitem = Keysharp.Scripting.Script.Index(gui3, Keysharp.Scripting.Script.GetPropertyValue(buttontwo, "Hwnd"));
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "I found a button by its HWND. Text:\n", Keysharp.Scripting.Script.GetPropertyValue(theitem, "Text")), "Find by HWND");
			return "";
		}

		public static object FindByNetClassNN()
		{
			object theitem = null;
			theitem = Keysharp.Scripting.Script.Index(gui3, "KeysharpButton5");
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "I found a button by its .NET classname. Text:\n", Keysharp.Scripting.Script.GetPropertyValue(theitem, "Text")), "Find by NetClassNN");
			return "";
		}

		public static object FindByName()
		{
			object theitem = null;
			theitem = Keysharp.Scripting.Script.Index(gui3, Keysharp.Scripting.Script.GetPropertyValue(buttondummy, "Name"));
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "I found a renamed button by Name.\nIt was renamed to:\n", theitem), "Find by Name");
			return "";
		}

		public static object ThirdGUI()
		{
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui3, "Show", 0));
			return "";
		}

		public static object MoveTheMouse()
		{
			object mx = null;
			object my = null;
			mx = null;
			my = null;
			Keysharp.Core.Mouse.CoordMode("Mouse", "Screen");
			Keysharp.Core.Mouse.MouseGetPos(ref mx, ref my);
			Keysharp.Core.Keyboard.SendMode("Event");
			Keysharp.Core.Mouse.MouseMove(100L, 500L, 90L);
			Keysharp.Core.ToolTips.ToolTip("I\'m at X:100, Y:500");
			Keysharp.Core.Flow.Sleep(2000L);
			Keysharp.Core.Mouse.MouseMove(1500L, 500L, 50L);
			Keysharp.Core.ToolTips.ToolTip("I\'m here!");
			Keysharp.Core.Flow.Sleep(2000L);
			Keysharp.Core.ToolTips.ToolTip();
			Keysharp.Core.Mouse.MouseMove(mx, my, 90L);
			Keysharp.Core.ToolTips.ToolTip("I\'m back!");
			Keysharp.Core.Flow.Sleep(2000L);
			Keysharp.Core.ToolTips.ToolTip();
			return "";
		}

		public static object AddFuchsia()
		{
			Keysharp.Core.Window.ControlAddItem("Fuchsia", cz_listbox);
			return "";
		}

		public static object AddWhite2()
		{
			Keysharp.Core.Window.ControlAddItem("White", gb2_cz_cb);
			return "";
		}

		public static object DeleteFuchsia()
		{
			object fuchsiaindex = null;

			try
			{
				fuchsiaindex = Keysharp.Core.Window.ControlFindItem("Fuchsia", cz_listbox);
			}
			catch (Keysharp.Core.Error e)
			{
				Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "An error was thrown!\nSpecifically: ", Keysharp.Scripting.Script.GetPropertyValue(e, "Message")), "ERROR!");
				return "";
			}

			Keysharp.Core.Window.ControlDeleteItem(fuchsiaindex, cz_listbox);
			return "";
		}

		public static object DeleteWhite2()
		{
			object whiteindex = null;

			try
			{
				whiteindex = Keysharp.Core.Window.ControlFindItem("White", gb2_cz_cb);
			}
			catch (Keysharp.Core.Error e)
			{
				Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "An error was thrown!\nSpecifically: ", Keysharp.Scripting.Script.GetPropertyValue(e, "Message")), "ERROR!");
				return "";
			}

			Keysharp.Core.Window.ControlDeleteItem(whiteindex, gb2_cz_cb);
			return "";
		}

		public static object FuchsiaDeleteTrayTip()
		{
			Keysharp.Core.ToolTips.TrayTip("Also tests ControlFindItem");
			return "";
		}

		public static object ChooseIndex()
		{
			Keysharp.Core.Window.ControlChooseIndex(7L, cz_listbox);
			return "";
		}

		public static object ChooseString()
		{
			Keysharp.Core.Window.ControlChooseString("красный", cz_listbox);
			return "";
		}

		public static object ChooseString_CB()
		{
			Keysharp.Core.Window.ControlChooseString("Purple", gb2_cz_cb);
			return "";
		}

		public static object GetChoice()
		{
			object choice = null;

			try
			{
				choice = Keysharp.Core.Window.ControlGetChoice(cz_listbox, mygui);
				Keysharp.Core.Dialogs.MsgBox(choice, "Choice");
			}
			catch (Keysharp.Core.Error e)
			{
				Keysharp.Core.Dialogs.MsgBox("You must select an item first.", "ERROR!");
				return "";
			}

			return "";
		}

		public static object GetClassNN()
		{
			object classnn = null;
			classnn = Keysharp.Core.Window.ControlGetClassNN(cz_listbox, mygui);
			Keysharp.Core.Dialogs.MsgBox(classnn, "ClassNN");
			return "";
		}

		public static object GetEnabled()
		{
			object result = null;
			object result2 = null;
			result = Keysharp.Core.Window.ControlGetEnabled(cz_lbbtn8, mygui);
			Keysharp.Core.Dialogs.MsgBox(result, "\'Disabled\' Button State (1: enabled 0: disabled)");
			result2 = Keysharp.Core.Window.ControlGetEnabled(cz_lbbtn6, mygui);
			Keysharp.Core.Dialogs.MsgBox(result2, "ClassNN Button State (1: enabled 0: disabled)");
			return "";
		}

		public static object GetHwnd()
		{
			object result = null;
			result = Keysharp.Core.Window.ControlGetHwnd(cz_listbox, mygui);
			Keysharp.Core.Dialogs.MsgBox(result, "Hwnd of ListBox");
			return "";
		}

		public static object GetText()
		{
			object result = null;
			result = Keysharp.Core.Window.ControlGetText(cz_lbbtn8, mygui);
			Keysharp.Core.Dialogs.MsgBox(result, "Text of Target Button");
			return "";
		}

		public static object HideButton()
		{
			Keysharp.Core.Window.ControlHide(cz_lbbtn8, mygui);
			return "";
		}

		public static object ShowButton()
		{
			Keysharp.Core.Window.ControlShow(cz_lbbtn8, mygui);
			return "";
		}

		public static object IsItHidden()
		{
			object result = null;
			result = Keysharp.Core.Window.ControlGetVisible(cz_lbbtn8, mygui);

			if (Keysharp.Scripting.Script.IfTest(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.ValueInequality, result, 0L)))
			{
				result = "Visible";
			}
			else
			{
				result = "Hidden";
			}

			Keysharp.Core.Dialogs.MsgBox(result, "Visible or Not?");
			return "";
		}

		public static object GetCol()
		{
			object currentcol = null;
			currentcol = Keysharp.Core.Window.EditGetCurrentCol(cz_edit1, mygui);
			Keysharp.Core.Dialogs.MsgBox(currentcol, "Current Colum No.");
			currentcol = "";
			return "";
		}

		public static object GetLine()
		{
			object currentline = null;
			currentline = Keysharp.Core.Window.EditGetCurrentLine(cz_edit1, mygui);
			Keysharp.Core.Dialogs.MsgBox(currentline, "Current Line No.");
			currentline = "";
			return "";
		}

		public static object GetLineText()
		{
			object currentline = null;
			object currentlinetext = null;
			currentline = Keysharp.Core.Window.EditGetCurrentLine(cz_edit1, mygui);
			currentlinetext = Keysharp.Core.Window.EditGetLine(currentline, cz_edit1, mygui);
			Keysharp.Core.Dialogs.MsgBox(currentlinetext, "Current Line Text");
			currentlinetext = "";
			return "";
		}

		public static object GetSelectedText()
		{
			object selectedtext = null;
			selectedtext = Keysharp.Core.Window.EditGetSelectedText(cz_edit1, mygui);
			Keysharp.Core.Dialogs.MsgBox(selectedtext, "Selected text in Edit");
			selectedtext = "";
			return "";
		}

		public static object EditPaster()
		{
			object editpasted = null;
			editpasted = "How now brown cow";
			Keysharp.Core.Window.EditPaste(editpasted, cz_edit1, mygui);
			return "";
		}

		public static object LV_Selected()
		{
			object list = null;
			list = Keysharp.Core.Window.ListViewGetContent("Selected", lv2, mygui);
			Keysharp.Core.Dialogs.MsgBox(list, "LV Selected");
			list = "";
			return "";
		}

		public static object LV_Focused()
		{
			object list = null;
			list = Keysharp.Core.Window.ListViewGetContent("Focused", lv2, mygui);
			Keysharp.Core.Dialogs.MsgBox(list, "LV Focused");
			list = "";
			return "";
		}

		public static object LV_Col1()
		{
			object list = null;
			list = Keysharp.Core.Window.ListViewGetContent("Col1", lv2, mygui);
			Keysharp.Core.Dialogs.MsgBox(list, "LV Column 1");
			list = "";
			return "";
		}

		public static object LV_Count()
		{
			object list = null;
			list = Keysharp.Core.Window.ListViewGetContent("Count", lv2, mygui);
			Keysharp.Core.Dialogs.MsgBox(list, "LV Row Count");
			list = "";
			return "";
		}

		public static object LV_CountSelected()
		{
			object list = null;
			list = Keysharp.Core.Window.ListViewGetContent("Count Selected", lv2, mygui);
			Keysharp.Core.Dialogs.MsgBox(list, "LV Count Selected");
			list = "";
			return "";
		}

		public static object LV_CountFocused()
		{
			object list = null;
			list = Keysharp.Core.Window.ListViewGetContent("Count Focused", lv2, mygui);
			Keysharp.Core.Dialogs.MsgBox(list, "LV Count Focused");
			list = "";
			return "";
		}

		public static object LV_CountCol()
		{
			object list = null;
			list = Keysharp.Core.Window.ListViewGetContent("Count Col", lv2, mygui);
			Keysharp.Core.Dialogs.MsgBox(list, "LV Column Count");
			list = "";
			return "";
		}

		public static object Click_CB()
		{
			Keysharp.Core.Keyboard.Send("#r");
			Keysharp.Core.Window.WinWaitActive("ahk_class #32770");
			Keysharp.Core.Window.ControlShowDropDown("ComboBox1");
			Keysharp.Core.Flow.Sleep(2000L);
			Keysharp.Core.Window.ControlHideDropDown("ComboBox1");
			Keysharp.Core.Flow.Sleep(1000L);
			Keysharp.Core.Keyboard.Send("{Esc}");
			return "";
		}

		public static object GetPix()
		{
			object colorstring = null;
			object mx = null;
			object my = null;
			mx = null;
			my = null;
			Keysharp.Core.Mouse.MouseGetPos(ref mx, ref my);
			Keysharp.Scripting.Script.SetPropertyValue(mycolortext, "Text", Keysharp.Core.Screen.PixelGetColor(mx, my));
			colorstring = Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "Bold s12 c", Keysharp.Scripting.Script.GetPropertyValue(mycolortext, "Text"));
			colorstring = Keysharp.Core.Strings.StrReplace(colorstring, "0x", "");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mycolortext, "SetFont", 1), colorstring);
			return "";
		}

		public static object LoadSC()
		{
			object myloadedpic = null;
			object mythirdpic = null;

			if (Keysharp.Scripting.Script.IfTest(Keysharp.Scripting.Script.OperateUnary(Keysharp.Scripting.Script.Operator.LogicalNot, Keysharp.Core.Files.FileExist(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, A_Desktop, "\\MyScreenClip.png")))))
			{
				Keysharp.Core.Screen.GetScreenClip(100L, 100L, 200L, 200L, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, A_Desktop, "\\MyScreenClip.png"));
				Keysharp.Core.Flow.Sleep(100L);
			}

			mythirdpic = Keysharp.Core.Images.LoadPicture(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, A_Desktop, "\\MyScreenClip.png"));
			myloadedpic = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Picture", "x450 y700 w170 h170", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "HBITMAP:", mythirdpic));
			Keysharp.Core.Flow.Sleep(2000L);
			Keysharp.Core.Dll.DllCall("DestroyWindow", "Ptr", Keysharp.Scripting.Script.GetPropertyValue(myloadedpic, "Hwnd"));
			Keysharp.Core.Files.FileDelete(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, A_Desktop, "\\MyScreenClip.png"));
			mythirdpic = "";
			myloadedpic = "";
			mythirdpic = "";
			return "";
		}

		public static object BtnSendFunc()
		{
			object thesendmsg = null;
			thesendmsg = "From the AHK docs:\n\n\"Sends simulated keystrokes and mouse clicks to the active wi" +
						 "ndow.\"\n\t\t\nWhen you dismiss this button,\nKeysharp will send \'Sincerely, John Smit" +
						 "h\'\n(no quotes) to the Edit, then add a newline.";
			Keysharp.Core.Dialogs.MsgBox(thesendmsg, "Send");
			Keysharp.Core.Window.WinActivate(mygui);
			Keysharp.Core.Window.ControlFocus(mysendedit);
			Keysharp.Core.Keyboard.Send("{Ctrl}{End}{Enter}");
			Keysharp.Core.Keyboard.Send("Sincerely, John Smith\n");
			return "";
		}

		public static object BtnSendTextFunc()
		{
			object thesendtext = null;
			object thesendtextmsg = null;
			thesendtextmsg = "From the AHK docs:\n\nSendText: Similar to Send, except that all characters\nin Keys" +
							 " are interpreted and sent literally. \nSee Text mode for details.\n\nThe Text mode " +
							 "can be either enabled with {Text}, SendText or ControlSendText,\nwhich is similar" +
							 " to the Raw mode, except that no attempt is made to translate\ncharacters (other " +
							 "than `r, `n, `t and `b) to keycodes;\ninstead, the fallback method is used for al" +
							 "l of the remaining characters. \n\nFor SendEvent, SendInput and ControlSend, this " +
							 "improves reliability\nbecause the characters are much less dependent on correct m" +
							 "odifier state.\n\nThis mode can be combined with the Blind mode to avoid releasing" +
							 " any modifier keys:\n\t\t\n\t\tSend \"{Blind}{Text}your text\". \n\t\t\nHowever, some applic" +
							 "ations require that the modifier keys be released.\n\n`n, `r and `r`n are all tran" +
							 "slated to a single Enter, unlike the default behavior and Raw mode,\nwhich transl" +
							 "ate `r`n to two Enter. `t is translated to Tab and `b to Backspace,\nbut all othe" +
							 "r characters are sent without translation.\n\nLike the Blind mode, the Text mode i" +
							 "gnores SetStoreCapsLockMode (that is, the state of CapsLock is not changed)\nand " +
							 "does not wait for Win to be released. This is because the Text mode\ntypically do" +
							 "es not depend on the state of CapsLock and cannot trigger the system Win+L hotke" +
							 "y.\nHowever, this only applies when Keys begins with {Text} or {Blind}{Text}.\n\t\t\n" +
							 "\t\tWhen you dismiss this button,\n\t\tKeysharp will open Notepad, wait a bit and\n\t\tt" +
							 "hen send some text. You should see this:\n\nI want to send some {Blind}{Text} with" +
							 " SendText followed by a newline.\n\nand then a newline.\n\nThen, you should see:\n\nYo" +
							 "u should see the Blind mode syntax after the ellipses ... \'{Blind}\'";
			Keysharp.Core.Dialogs.MsgBox(thesendtextmsg, "SendText");
			thesendtext = "I want to send some {Blind}{Text} with SendText followed by a newline.\r\n";
			Keysharp.Core.Processes.Run("Notepad.exe");
			Keysharp.Core.Window.WinWaitActive("ahk_exe Notepad.exe");
			Keysharp.Core.Keyboard.SendText(thesendtext);
			Keysharp.Core.Flow.Sleep(500L);
			Keysharp.Core.Keyboard.Send("{Text}You should see the Blind mode syntax after the ellipses ... \'{Blind}\'");
			Keysharp.Core.Flow.Sleep(2000L);
			Keysharp.Core.Keyboard.Send("{Alt}fx{Tab}{Enter}");
			return "";
		}

		public static object BtnSendInputFunc()
		{
			object thesendinputmsg = null;
			thesendinputmsg = "From the AHK docs:\n\nSendInput is generally the preferred method to send keystroke" +
							  "s and mouse clicks because of its superior speed and reliability. \nUnder most co" +
							  "nditions, SendInput is nearly instantaneous, even when sending long strings. Sin" +
							  "ce SendInput is so fast, \nit is also more reliable because there is less opportu" +
							  "nity for some other window to pop up unexpectedly and intercept the keystrokes. " +
							  "\nReliability is further improved by the fact that anything the user types during" +
							  " a SendInput is postponed until afterward.\n\nUnlike the other sending modes, the " +
							  "operating system limits SendInput to about 5000 characters\n(this may vary depend" +
							  "ing on the operating system\'s version and performance settings). \nCharacters and" +
							  " events beyond this limit are not sent.\n\n\tNote: SendInput ignores SetKeyDelay be" +
							  "cause the operating system does not support a delay in this mode. \n\tHowever, whe" +
							  "n SendInput reverts to SendEvent under the conditions described below, it uses S" +
							  "etKeyDelay -1, 0\n\t(unless SendEvent\'s KeyDelay is -1,-1, in which case -1,-1 is " +
							  "used). \n\tWhen SendInput reverts to SendPlay, it uses SendPlay\'s KeyDelay.\n\nIf a " +
							  "script other than the one executing SendInput has a low-level keyboard hook inst" +
							  "alled, SendInput automatically reverts\nto SendEvent (or SendPlay if SendMode \"In" +
							  "putThenPlay\" is in effect). \nThis is done because the presence of an external ho" +
							  "ok disables all of SendInput\'s advantages,\nmaking it inferior to both SendPlay a" +
							  "nd SendEvent. However, since SendInput is unable to detect\na low-level hook in p" +
							  "rograms other than AutoHotkey v1.0.43+,\nit will not revert in these cases, makin" +
							  "g it less reliable than SendPlay/Event.\n\nWhen SendInput sends mouse clicks by me" +
							  "ans such as {Click}, and CoordMode \"Mouse\", \"Window\"\nor CoordMode \"Mouse\", \"Clie" +
							  "nt\" is in effect, every click will be relative to the window\nthat was active at " +
							  "the start of the send. Therefore, if SendInput intentionally activates another w" +
							  "indow\n(by means such as alt-tab), the coordinates of subsequent clicks within th" +
							  "e same function\nwill be wrong if they were intended to be relative to the new wi" +
							  "ndow rather than the old one.\n\t\t\n\t\tWhen you dismiss this button,\n\t\tKeysharp will" +
							  " send some text to the Edit. You should see this:\n\nNow how did this get up here?" +
							  "??\nThe buttons below this Edit will use various Send() variants.\n\nReally, Cheeta" +
							  ", you shouldn\'t have\nLord Greystoke\n\n\nTesting newlines with braces syntax\n";
			Keysharp.Core.Dialogs.MsgBox(thesendinputmsg, "SendInput");
			Keysharp.Core.Window.WinActivate(mygui);
			Keysharp.Core.Window.ControlFocus(mysendedit);
			Keysharp.Core.Keyboard.SendInput("{End}{Enter}");
			Keysharp.Core.Keyboard.SendInput("Really, Cheeta, you shouldn\'t have!{End}{Enter}Lord Greystoke\n");
			Keysharp.Core.Flow.Sleep(1000L);
			Keysharp.Core.Window.ControlFocus(mysendedit);
			Keysharp.Core.Keyboard.SendInput("^{Home}");
			Keysharp.Core.Keyboard.SendInput("Now how did this get up here???\n");
			Keysharp.Core.Keyboard.SendInput("^{End}{Enter}");
			Keysharp.Core.Keyboard.SendInput("^{End}{Enter}");
			Keysharp.Core.Keyboard.SendInput("Testing newlines with braces syntax");
			return "";
		}

		public static object BtnSendPlayFunc()
		{
			object thesendplaymsg = null;
			thesendplaymsg = "Warning: SendPlay may have no effect at all if UAC is enabled, even if the script" +
							 " is running as an administrator. For more information, refer to the FAQ.\n\nSendPl" +
							 "ay\'s biggest advantage is its ability to \"play back\" keystrokes and mouse clicks" +
							 " in a broader variety of games than the other modes. For example, a particular g" +
							 "ame may accept hotstrings only when they have the SendPlay option.\n\nOf the three" +
							 " sending modes, SendPlay is the most unusual because it does not simulate keystr" +
							 "okes and mouse clicks per se. Instead, it creates a series of events (messages) " +
							 "that flow directly to the active window (similar to ControlSend, but at a lower " +
							 "level). Consequently, SendPlay does not trigger hotkeys or hotstrings.\n\nLike Sen" +
							 "dInput, SendPlay\'s keystrokes do not get interspersed with keystrokes typed by t" +
							 "he user. Thus, if the user happens to type something during a SendPlay, those ke" +
							 "ystrokes are postponed until afterward.\n\nAlthough SendPlay is considerably slowe" +
							 "r than SendInput, it is usually faster than the traditional SendEvent mode (even" +
							 " when KeyDelay is -1).\n\nBoth Win (LWin and RWin) are automatically blocked durin" +
							 "g a SendPlay if the keyboard hook is installed. This prevents the Start Menu fro" +
							 "m appearing if the user accidentally presses Win during the send. By contrast, k" +
							 "eys other than LWin and RWin do not need to be blocked because the operating sys" +
							 "tem automatically postpones them until after the SendPlay (via buffering).\n\nSend" +
							 "Play does not use the standard settings of SetKeyDelay and SetMouseDelay. Instea" +
							 "d, it defaults to no delay at all, which can be changed as shown in the followin" +
							 "g examples:\n\nSetKeyDelay 0, 10, \"Play\"  ; Note that both 0 and -1 are the same i" +
							 "n SendPlay mode.\nSetMouseDelay 10, \"Play\"\n\nSendPlay is unable to turn on or off " +
							 "CapsLock, NumLock, or ScrollLock. Similarly, it is unable to change a key\'s stat" +
							 "e as seen by GetKeyState unless the keystrokes are sent to one of the script\'s o" +
							 "wn windows. Even then, any changes to the left/right modifier keys (e.g. RContro" +
							 "l) can be detected only via their neutral counterparts (e.g. Control). Also, Sen" +
							 "dPlay has other limitations described on the SendMode page.\n\nUnlike SendInput an" +
							 "d SendEvent, the user may interrupt a SendPlay by pressing Ctrl+Alt+Del or Ctrl+" +
							 "Esc. When this happens, the remaining keystrokes are not sent but the script con" +
							 "tinues executing as though the SendPlay had completed normally.\n\nAlthough SendPl" +
							 "ay can send LWin and RWin events, they are sent directly to the active window ra" +
							 "ther than performing their native operating system function. To work around this" +
							 ", use SendEvent. For example, SendEvent \"#r\" would show the Start Menu\'s Run dia" +
							 "log.";
			Keysharp.Core.Dialogs.MsgBox(thesendplaymsg, "SendPlay");
			Keysharp.Core.Keyboard.SendPlay("#r");
			Keysharp.Core.Dialogs.MsgBox("Just sent \'#r\' with SendPlay, which should not work.\nNow I\'ll use SendEvent(), wh" +
										 "ich should.\nI\'ll wait five seconds, then send Alt-F4 to kill the run dialog.", "SendPlay Testing", "T5");
			Keysharp.Core.Keyboard.SendEvent("#r");
			Keysharp.Core.Flow.Sleep(5000L);
			Keysharp.Core.Keyboard.SendEvent("!{F4}");
			return "";
		}

		public static object BtnSendEventFunc()
		{
			object thesendeventmsg = null;
			thesendeventmsg = @"From the AHK docs:

""SendEvent: SendEvent sends keystrokes using the Windows keybd_event function.
search MSDN for details)
The rate at which keystrokes are sent is determined by SetKeyDelay. 
SendMode can be used to make Send synonymous with SendEvent or SendPlay.""
		
When you dismiss this button,
Keysharp will send Win-R.
The 'Run' dialog will open.";
			Keysharp.Core.Dialogs.MsgBox(thesendeventmsg, "SendEvent button");
			Keysharp.Core.Keyboard.SendEvent("#r");
			return "";
		}

		public static object RealFn(object a, object b, [Optional()][DefaultParameterValue("c")] object c)
		{
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, a, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, ", ", b)), "A bound function test");
			return "";
		}

		public static object DoTricks()
		{
			object fn = null;
			object realfn = null;
			realfn = Keysharp.Core.Misc.FuncObj("RealFn");
			fn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(realfn, "Bind", 1), 1L);
			/*preventtrim*/
			((IFuncObj)fn).Call(2L);
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(fn, "Call", 1), 3L);
			fn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(realfn, "Bind", 2), null, 1L);
			/*preventtrim*/
			((IFuncObj)fn).Call(2L);
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(fn, "Call", 1), 3L);
			return "";
		}

		public static object StupidTrickTwo()
		{
			Keysharp.Core.Keyboard.Hotkey("RCtrl & RShift", "AltTab");
			return "";
		}

		public static object StupidTrickThree()
		{
			try
			{
				Keysharp.Core.Keyboard.Hotkey("RCtrl & RShift", "Off");
				Keysharp.Core.Dialogs.MsgBox("Hotkey RCtrl & RShift -> AltTab is Off", "Hotkey Off", "T2");
			}
			catch (Keysharp.Core.Error ex5)
			{
				Keysharp.Core.Dialogs.MsgBox("Set the Hotkey first!");
			}

			return "";
		}

		public static object FuncObjTest()
		{
			object fn2 = null;
			object realfn2 = null;
			realfn2 = Keysharp.Core.Misc.FuncObj("RealFn2");
			fn2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(realfn2, "Bind", 1), "AltTab");
			/*preventtrim*/
			((IFuncObj)fn2).Call();
			return "";
		}

		public static object RealFn2(object themessage)
		{
			Keysharp.Core.Keyboard.Hotkey("RCtrl & RShift", themessage);
			Keysharp.Core.Dialogs.MsgBox(themessage);
			return "";
		}

		public static object ToggleHotkey()
		{
			try
			{
				Keysharp.Core.Keyboard.Hotkey("RCtrl & RShift", "Toggle");
			}
			catch (Keysharp.Core.Error ex6)
			{
				Keysharp.Core.Dialogs.MsgBox("Set the AltTab hotkeyfirst!", "ERROR", "T2");
			}

			return "";
		}

		public static object GrabFromIni()
		{
			object hotkeyval = null;
			hotkeyval = Keysharp.Core.Ini.IniRead("hotkeyini_1.ini", "HotkeyToRead", "Key");
			Keysharp.Core.Keyboard.Hotkey(hotkeyval, "AltTab");
			return "";
		}

		public static object ToggleFromIni()
		{
			try
			{
				Keysharp.Core.Keyboard.Hotkey("RCtrl & LShift", "Toggle");
			}
			catch (Keysharp.Core.Error ex7)
			{
				Keysharp.Core.Dialogs.MsgBox("Set the .INI hotkeyfirst!", "ERROR", "T2");
			}

			return "";
		}

		public static object LV_DoubleClick(object lv, object rownumber)
		{
			object columntext = null;
			object rowtext = null;
			rowtext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(lv, "GetText", 2), rownumber, 1L);
			columntext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(lv, "GetText", 2), rownumber, 2L);
			Keysharp.Core.ToolTips.ToolTip(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "You double-clicked row number ", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, rownumber, ". File \'"), rowtext), "\' has size "), columntext), "kb.")));
			return "";
		}

		public static object ChangeFont()
		{
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(test_header, "SetFont", 2), "cBlue s14", "Comic Sans MS");
			return "";
		}

		public static object ChangeFontBack()
		{
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(test_header, "SetFont", 2), "cBlack s8", "Arial");
			Keysharp.Core.Dialogs.MsgBox("Done", "Restoring Font");
			return "";
		}

		public static object ChangeBG()
		{
			object guibgcolor = null;
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.GetPropertyValue(mygui, "BackColor"), "Background color:");
			Keysharp.Scripting.Script.SetPropertyValue(mygui, "BackColor", guibgcolor);
			return "";
		}

		public static object RestoreBG()
		{
			Keysharp.Scripting.Script.SetPropertyValue(mygui, "BackColor", 15790320L);
			return "";
		}

		public static object InputTest()
		{
			object outputvar = null;
			object outputvar2 = null;
			outputvar = Keysharp.Scripting.Script.GetPropertyValue(Keysharp.Core.Dialogs.InputBox("What is your first name?", "Question 1"), "Value");

			if (Keysharp.Scripting.Script.IfTest(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.ValueEquality, outputvar, "Bill")))
			{
				Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "That\'s an awesome name, ", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, outputvar, ".")), "What a great name ...");
			}

			outputvar2 = Keysharp.Scripting.Script.GetPropertyValue(Keysharp.Core.Dialogs.InputBox("Do you like AutoHotkey?", "Question 2"), "Value");

			if (Keysharp.Scripting.Script.IfTest(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.ValueEquality, outputvar2, "yes")))
			{
				Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "Thank you for answering ", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, outputvar2, ", "), outputvar), "! We will become great friends.")), "You are in good company");
			}
			else
			{
				Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, outputvar, ", That makes me sad."), "Sorry to hear it");
			}

			return "";
		}

		public static object RadioThreeClicked()
		{
			Keysharp.Core.Dialogs.MsgBox("You clicked the last radio button.", "Radio 3 Clicked");
			return "";
		}

		public static object CheckBoxOneClicked()
		{
			object ischecked = null;
			ischecked = Keysharp.Core.Window.ControlGetChecked(checkboxone, "KEYSHARP TESTS");
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "1 is checked - 0 is unchecked\nTests \'ControlGetChecked\' also\n\nValue is: ", ischecked), "Checkbox Test");
			Keysharp.Core.ToolTips.TrayTip("TrayTipTest", "I will see myself out, thanks!", "Icon!");
			Keysharp.Core.Flow.Sleep(1000L);
			HideTrayTip();
			return "";
		}

		public static object MyTreeView_Edit(object tv, object item)
		{
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tv, "Modify", 2), Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tv, "GetParent", 1), item), "Sort");
			return "";
		}

		public static object HideTrayTip()
		{
			Keysharp.Core.ToolTips.TrayTip();

			if (Keysharp.Scripting.Script.IfTest(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.ValueEquality, Keysharp.Core.Strings.SubStr(A_OSVersion, 1L, 3L), "10.")))
			{
				A_IconHidden = true;
				Keysharp.Core.Flow.Sleep(200L);
				A_IconHidden = false;
			}

			return "";
		}

		public static object SendTextToEdit()
		{
			object editvar = null;
			editvar = @"A line of text.
By default, the hard carriage return (Enter) between the previous line and this one will be stored.
	This line is indented with a tab; by default, that tab will also be stored.
""Quote marks"" are now automatically escaped when appropriate - not yet implemented.";
			Keysharp.Core.Window.ControlSetText(editvar, secondedit);
			return "";
		}

		public static object ClearEdit()
		{
			Keysharp.Core.Window.ControlSetText(null, secondedit);
			return "";
		}

		public static object SendTextToRichEdit()
		{
			object richeditvar = null;
			richeditvar = "A line of text.\nBy default, the hard carriage return (Enter) between the previous" +
						  " line and this one will be stored.\n\tThis line is indented with a tab; by default" +
						  ", that tab will also be stored.\n\"Quote marks\" are now automatically escaped when" +
						  " appropriate.";
			Keysharp.Core.Window.ControlSetText(richeditvar, secondrichedit);
			return "";
		}

		public static object ClearRichEdit()
		{
			Keysharp.Core.Window.ControlSetText(null, secondrichedit);
			return "";
		}

		public static object LoadPic()
		{
			object myfirstpic = null;
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "Second");
			myfirstpic = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Picture", "x400 y650 w100 h-1", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, A_ScriptDir, "\\monkey.ico"));
			Keysharp.Core.Flow.Sleep(2000L);
			Keysharp.Core.Dll.DllCall("DestroyWindow", "Ptr", Keysharp.Scripting.Script.GetPropertyValue(myfirstpic, "Hwnd"));
			myfirstpic = "";
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 0));
			return "";
		}

		public static object ListBoxClicked()
		{
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.GetPropertyValue(mylistbox, "Text"), "ListBox");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mysb, "SetIcon", 2), A_KeysharpCorePath, "Keysharp.ico");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mysb, "SetText", 1), Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.GetPropertyValue(mylistbox, "Text"), " selected in ListBox"));
			return "";
		}

		public static object MultiLBClicked()
		{
			object field = null;
			object index = null;
			{
				;
				var e17 = Keysharp.Scripting.Script.GetPropertyValue(mymultilb, "Text");
				var e19 = MakeEnumerator(e17);
				Keysharp.Core.Loops.Push();

				for (
					; IsTrueAndRunning(e19.MoveNext());
				)
				{
					Keysharp.Core.Loops.Inc();
					/*preventtrim*/
					(index, field) = e19.Current;
					Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "Selection number ", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, index, " is "), field)), "Multi ListBox");
					e20:
					;
				}

				e21:
				Keysharp.Core.Loops.Pop();
			};
			return "";
		}

		public static object DDLClicked()
		{
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.GetPropertyValue(myddl, "Text"), "Drop Down List");
			return "";
		}

		public static object CB_ButtonClicked()
		{
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.GetPropertyValue(mycb, "Text"), "CB Selection");
			return "";
		}

		public static object Pbtn1Clicked()
		{
			Keysharp.Scripting.Script.SetPropertyValue(myprogress, "Value", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Subtract, Keysharp.Scripting.Script.GetPropertyValue(myprogress, "Value"), 10L));
			return "";
		}

		public static object Pbtn2Clicked()
		{
			Keysharp.Scripting.Script.SetPropertyValue(myprogress, "Value", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Add, Keysharp.Scripting.Script.GetPropertyValue(myprogress, "Value"), 10L));
			return "";
		}

		public static object MC_Colors()
		{
			Keysharp.Core.Dialogs.MsgBox("Not implemented.", "Future feature");
			return "";
		}

		public static object ShowEditHwnd()
		{
			Keysharp.Core.Dialogs.MsgBox(hwndsecondedit, "Test \'GuiCtrl.Hwnd\'");
			return "";
		}

		public static object UpdateOSD()
		{
			object mx = null;
			object my = null;
			mx = null;
			my = null;
			Keysharp.Core.Mouse.MouseGetPos(ref mx, ref my);
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(coordtext, "SetFont", 1), "bold s20");
			Keysharp.Scripting.Script.SetPropertyValue(coordtext, "Text", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "X: ", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, mx, " Y: "), my)));
			return "";
		}

		public static object SendToGB3()
		{
			object gb3text = null;
			object obj = null;
			object result = null;
			gb3text = @"This uses 'ControlSetText' from a button in GroupBox 4 to populate this edit.
The first message box shows the HWND of this Edit.
The second message box shows '1' (True) if GuiCtrlFromHwnd created an
object from the Hwnd.
Finally, ControlSetText operates on the Object created from the Hwnd.";
			Keysharp.Core.Dialogs.MsgBox(gb3hwnd, "Hwnd of Groupbox 3 Edit");
			obj = Keysharp.Core.GuiHelper.GuiCtrlFromHwnd(gb3hwnd);
			result = Keysharp.Core.Misc.IsObject(obj);
			Keysharp.Core.Dialogs.MsgBox(result, "If \'1\', is Object");
			Keysharp.Core.Window.ControlSetText(gb3text, obj);
			return "";
		}

		public static object ClearGB3()
		{
			Keysharp.Core.Window.ControlSetText(null, gb3edit);
			return "";
		}

		public static object StartEditToolTip()
		{
			object tooltiptext = null;
			tooltiptext = @"This uses 'ControlSetText' from a button in GroupBox 4 to populate this edit.
The first message box shows the HWND of this Edit.
The second message box shows '1' (True) if GuiCtrlFromHwnd created an
object from the Hwnd.
Finally, ControlSetText operates on the Object created from the Hwnd.";
			Keysharp.Core.ToolTips.ToolTip(tooltiptext);
			return "";
		}

		public static object StopToolTip()
		{
			Keysharp.Core.ToolTips.ToolTip();
			return "";
		}

		public static object Set_Style()
		{
			Keysharp.Core.Window.WinSetStyle("-0xC00000", "A");
			return "";
		}

		public static object Reset_Style()
		{
			Keysharp.Core.Window.WinSetStyle("+0xC00000", "A");
			return "";
		}

		public static object Set_Edit_Style()
		{
			Keysharp.Core.Window.ControlSetStyle("+0x8", hwndmyedit);
			Keysharp.Core.Window.ControlFocus(hwndmyedit);
			return "";
		}

		public static object Reset_Edit_Style()
		{
			object str = null;
			str = Keysharp.Core.Window.ControlGetStyle(hwndmyedit);
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Core.Strings.Format("0x{1:x}", str), "Style of Edit1 Before Reset");
			Keysharp.Core.Window.ControlSetStyle("-0x8", hwndmyedit);
			Keysharp.Core.Window.ControlFocus(hwndmyedit);
			str = Keysharp.Core.Window.ControlGetStyle(hwndmyedit);
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Core.Strings.Format("0x{1:x}", str), "Style of Edit1 After Reset");
			return "";
		}

		public static object MoveGui()
		{
			object gb2_tabtwo = null;
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "Second");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 1), gb2_tabtwo);
			winpos = Keysharp.Core.Window.WinGetPos(mygui);
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Move", 4), 100L, 100L, 200L, 200L);
			return "";
		}

		public static object MoveGuiBack()
		{
			object gb2_tabtwo = null;
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "Second");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 1), gb2_tabtwo);
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Move", 4), Keysharp.Scripting.Script.Index(winpos, "X"), Keysharp.Scripting.Script.Index(winpos, "Y"), Keysharp.Scripting.Script.Index(winpos, "Width"), Keysharp.Scripting.Script.Index(winpos, "Height"));
			return "";
		}

		public static object ImgSrch()
		{
			object resultx = null;
			object resulty = null;
			Keysharp.Core.Mouse.CoordMode("Pixel", null);

			try
			{
				resultx = null;
				resulty = null;
				Keysharp.Core.Screen.ImageSearch(ref resultx, ref resulty, 0L, 0L, A_ScreenWidth, A_ScreenHeight, "killbill.png");

				if (Keysharp.Scripting.Script.IfTest(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.ValueInequality, resultx, "")))
				{
					Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "Found at x: ", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, resultx, " y: "), resulty)), "Image Search");
				}
				else
				{
					Keysharp.Core.Dialogs.MsgBox("Image not found!", "FAILURE");
				}
			}
			catch (Keysharp.Core.Error e)
			{
				Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "An error was thrown!\nSpecifically: ", Keysharp.Scripting.Script.GetPropertyValue(e, "Message")));
			}

			return "";
		}

		public static object label_A4CC1CCB_2(object thishotkey)
		{
			if (Keysharp.Scripting.Script.IfTest(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.IdentityEquality, thishotkey, "F1")))
			{
				goto ks_caselabel0;
			}
			else
			{
				if (Keysharp.Scripting.Script.IfTest("F1 up"))
				{
					goto ks_caselabel1;
				}
				else
				{
					goto ks_finallabel0;
				}
			}

			ks_caselabel0:
			Keysharp.Scripting.Script.InvokeWithRefs(Keysharp.Scripting.Script.GetMethodOrProperty(null, "DllCall", 9), "SystemParametersInfo", "UInt", label_a4cc1ccb_2_spi_getmousespeed, "UInt", 0L, "Ptr*", Mrh(6, label_a4cc1ccb_2_origmousespeed, v => label_a4cc1ccb_2_origmousespeed = v), "UInt", 0L);
			Keysharp.Core.Dll.DllCall("SystemParametersInfo", "UInt", label_a4cc1ccb_2_spi_setmousespeed, "UInt", 0L, "Ptr", 3L, "UInt", 0L);
			Keysharp.Core.Keyboard.KeyWait("F1");
			goto ks_finallabel0;
			ks_caselabel1:
			Keysharp.Core.Dll.DllCall("SystemParametersInfo", "UInt", label_a4cc1ccb_2_spi_setmousespeed, "UInt", 0L, "Ptr", label_a4cc1ccb_2_origmousespeed, "UInt", 0L);
			goto ks_finallabel0;
			ks_finallabel0:
			;
			return "";
		}

		public static object DllMsgBox()
		{
			object whichbutton = null;
			whichbutton = Keysharp.Core.Dll.DllCall("MessageBox", "Int", 0L, "Str", "Press Yes or No", "Str", "Title of box", "Int", 4L);
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "You pressed button #", whichbutton));
			return "";
		}

		public static object DllIsWindowVisible()
		{
			Keysharp.Core.Window.DetectHiddenWindows(true);

			if (Keysharp.Scripting.Script.IfTest(Keysharp.Scripting.Script.OperateUnary(Keysharp.Scripting.Script.Operator.LogicalNotEx, Keysharp.Core.Dll.DllCall("IsWindowVisible", "Ptr", Keysharp.Core.Window.WinExist("Untitled - Notepad")))))
			{
				Keysharp.Core.Dialogs.MsgBox("Notepad is not visible.");
			}
			else
			{
				Keysharp.Core.Dialogs.MsgBox("Notepad is visible.");
			}

			Keysharp.Core.Window.DetectHiddenWindows(false);
			return "";
		}

		public static object DllWsprintf()
		{
			object str = null;
			object strfmt = null;
			object zeropaddednumber = null;
			zeropaddednumber = Keysharp.Core.Misc.Buffer(20L);
			Keysharp.Core.Dll.DllCall("wsprintf", "Ptr", zeropaddednumber, "Str", "%010d", "Int", 432L, "Cdecl");
			strfmt = Keysharp.Core.Strings.Format("{1:0000000000}", 432L);
			str = Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "Value from wsprintf(): ", Keysharp.Core.Strings.StrGet(zeropaddednumber)), "\n"), "Value from Format(): "), strfmt), "\n"), "Reference value: 0000000432");
			Keysharp.Core.Dialogs.MsgBox(str);
			return "";
		}

		public static object DllPerformanceCounter()
		{
			object counterafter = null;
			object counterbefore = null;
			object elapsed = null;
			object freq = null;
			freq = 0L;
			counterbefore = 0L;
			counterafter = 0L;
			Keysharp.Core.Dll.DllCall("QueryPerformanceFrequency", "Int64*", freq);
			Keysharp.Scripting.Script.InvokeWithRefs(Keysharp.Scripting.Script.GetMethodOrProperty(null, "DllCall", 3), "QueryPerformanceCounter", "Int64*", Mrh(2, counterbefore, v => counterbefore = v));
			Keysharp.Core.Flow.Sleep(1000L);
			Keysharp.Scripting.Script.InvokeWithRefs(Keysharp.Scripting.Script.GetMethodOrProperty(null, "DllCall", 3), "QueryPerformanceCounter", "Int64*", Mrh(2, counterafter, v => counterafter = v));
			elapsed = Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Multiply, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Divide, Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Subtract, counterafter, counterbefore), freq), 1000L);
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "This value should be near 1000ms: ", elapsed));
			return "";
		}

		public static object DllGetWindowRect()
		{
			object b = null;
			object l = null;
			object r = null;
			object rect = null;
			object t = null;
			object win = null;
			Keysharp.Core.Processes.Run("Notepad");
			Keysharp.Core.Window.WinWait("Untitled - Notepad");
			rect = Keysharp.Core.Misc.Buffer(16L);
			win = Keysharp.Core.Window.WinExist();
			Keysharp.Core.Dll.DllCall("GetWindowRect", "Ptr", win, "Ptr", rect);
			l = Keysharp.Core.Dll.NumGet(rect, 0L, "Int");
			t = Keysharp.Core.Dll.NumGet(rect, 4L, "Int");
			r = Keysharp.Core.Dll.NumGet(rect, 8L, "Int");
			b = Keysharp.Core.Dll.NumGet(rect, 12L, "Int");
			Keysharp.Core.Dialogs.MsgBox(Keysharp.Core.Strings.Format("Left: {1} Top: {2} Right: {3} Bottom: {4}", l, t, r, b));
			Keysharp.Core.Window.WinClose(win);
			return "";
		}

		public static object vtable(object ptr, object n)
		{
			return Keysharp.Core.Dll.NumGet(Keysharp.Core.Dll.NumGet(ptr, "ptr"), Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Multiply, n, A_PtrSize), "ptr");
		}

		public static object DllFillRect()
		{
			object hbrush = null;
			object hdc = null;
			object rect = null;
			rect = Keysharp.Core.Misc.Buffer(16L);
			Keysharp.Core.Dll.NumPut("Int", 0L, "Int", 0L, "Int", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.FloorDivide, A_ScreenWidth, 2L), "Int", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.FloorDivide, A_ScreenHeight, 2L), rect);
			hdc = Keysharp.Core.Dll.DllCall("GetDC", "Ptr", 0L, "Ptr");
			hbrush = Keysharp.Core.Dll.DllCall("CreateSolidBrush", "UInt", 255L, "Ptr");
			Keysharp.Core.Dll.DllCall("FillRect", "Ptr", hdc, "Ptr", rect, "Ptr", hbrush);
			Keysharp.Core.Dll.DllCall("ReleaseDC", "Ptr", 0L, "Ptr", hdc);
			Keysharp.Core.Dll.DllCall("DeleteObject", "Ptr", hbrush);
			return "";
		}

		public static object DllDeleteFromTaskbar()
		{
			object activehwnd = null;
			object clsid_taskbarlist = null;
			object iid_itaskbarlist = null;
			object tbl = null;
			iid_itaskbarlist = "{56FDF342-FD6D-11d0-958A-006097C9A090}";
			clsid_taskbarlist = "{56FDF344-FD6D-11d0-958A-006097C9A090}";
			tbl = Keysharp.Core.COM.Com.ComObject(clsid_taskbarlist, iid_itaskbarlist);
			activehwnd = Keysharp.Core.Window.WinExist("A");
			Keysharp.Core.Dll.DllCall(vtable(Keysharp.Scripting.Script.GetPropertyValue(tbl, "ptr"), 3L), "ptr", tbl);
			Keysharp.Core.Dll.DllCall(vtable(Keysharp.Scripting.Script.GetPropertyValue(tbl, "ptr"), 5L), "ptr", tbl, "ptr", activehwnd);
			Keysharp.Core.Flow.Sleep(3000L);
			Keysharp.Core.Dll.DllCall(vtable(Keysharp.Scripting.Script.GetPropertyValue(tbl, "ptr"), 4L), "ptr", tbl, "ptr", activehwnd);
			Keysharp.Core.COM.Com.ObjRelease(Keysharp.Scripting.Script.GetPropertyValue(tbl, "ptr"));
			return "";
		}

		public static object ComDeleteFromTaskbar()
		{
			object activehwnd = null;
			object clsid_taskbarlist = null;
			object iid_itaskbarlist = null;
			object tbl = null;
			iid_itaskbarlist = "{56FDF342-FD6D-11d0-958A-006097C9A090}";
			clsid_taskbarlist = "{56FDF344-FD6D-11d0-958A-006097C9A090}";
			tbl = Keysharp.Core.COM.Com.ComObject(clsid_taskbarlist, iid_itaskbarlist);
			activehwnd = Keysharp.Core.Window.WinExist("A");
			Keysharp.Core.COM.Com.ComCall(3L, tbl);
			Keysharp.Core.COM.Com.ComCall(5L, tbl, "ptr", activehwnd);
			Keysharp.Core.Flow.Sleep(3000L);
			Keysharp.Core.COM.Com.ComCall(4L, tbl, "ptr", activehwnd);
			tbl = "";
			return "";
		}

		public static object anonfunc_3(params object[] args)
		{
			return SystemCursor("Show");
		}

		public static object label_35F90B42_4(object thishotkey)
		{
			SystemCursor("Toggle");
			return "";
		}

		public static object SystemCursor(object cmd)
		{
			object h_blank = null;
			object h_cursor = null;
			object h_default = null;
			object handles = null;
			object i = null;
			object id = null;

			if (Keysharp.Scripting.Script.IfTest((Keysharp.Scripting.Script.IfTest(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.ValueEquality, cmd, "Reload")) || Keysharp.Scripting.Script.IfTest(Keysharp.Scripting.Script.OperateUnary(Keysharp.Scripting.Script.Operator.LogicalNot, Keysharp.Scripting.Script.GetPropertyValue(systemcursor_c, "Count"))))))
			{
				{
					;
					var e22 = systemcursor_sys_cursors;
					var e24 = MakeEnumerator(e22);
					Keysharp.Core.Loops.Push();

					for (
						; IsTrueAndRunning(e24.MoveNext());
					)
					{
						Keysharp.Core.Loops.Inc();
						/*preventtrim*/
						(i, id) = e24.Current;
						h_cursor = Keysharp.Core.Dll.DllCall("LoadCursor", "Ptr", 0L, "Ptr", id);
						h_default = Keysharp.Core.Dll.DllCall("CopyImage", "Ptr", h_cursor, "UInt", 2L, "Int", 0L, "Int", 0L, "UInt", 0L);
						h_blank = Keysharp.Core.Dll.DllCall("CreateCursor", "Ptr", 0L, "Int", 0L, "Int", 0L, "Int", 32L, "Int", 32L, "Ptr", Keysharp.Core.Misc.Buffer(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Multiply, 32L, 4L), 255L), "Ptr", Keysharp.Core.Misc.Buffer(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Multiply, 32L, 4L), 0L));
						Keysharp.Scripting.Script.SetObject(Keysharp.Core.Misc.Dictionary(new object[]
						{
							"def",
							"blank"
						}, new object[]
						{
							h_default,
							h_blank
						}), systemcursor_c, id);
						e25:
						;
					}

					e26:
					Keysharp.Core.Loops.Pop();
				};
			}

			if (Keysharp.Scripting.Script.IfTest(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.IdentityEquality, cmd, "Show")))
			{
				goto ks_caselabel2;
			}
			else
			{
				if (Keysharp.Scripting.Script.IfTest(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.IdentityEquality, cmd, "Hide")))
				{
					goto ks_caselabel3;
				}
				else
				{
					if (Keysharp.Scripting.Script.IfTest(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.IdentityEquality, cmd, "Toggle")))
					{
						goto ks_caselabel4;
					}
					else
					{
						goto ks_finallabel1;
					}
				}
			}

			ks_caselabel2:
			systemcursor_visible = true;
			goto ks_finallabel1;
			ks_caselabel3:
			systemcursor_visible = false;
			goto ks_finallabel1;
			ks_caselabel4:
			systemcursor_visible = Keysharp.Scripting.Script.OperateUnary(Keysharp.Scripting.Script.Operator.LogicalNot, systemcursor_visible);
			goto ks_finallabel1;
			ks_finallabel1:
			;
			{
				;
				var e27 = systemcursor_c;
				var e29 = MakeEnumerator(e27);
				Keysharp.Core.Loops.Push();

				for (
					; IsTrueAndRunning(e29.MoveNext());
				)
				{
					Keysharp.Core.Loops.Inc();
					/*preventtrim*/
					(id, handles) = e29.Current;
					h_cursor = Keysharp.Core.Dll.DllCall("CopyImage", "Ptr", (_ = Keysharp.Scripting.Script.IfTest(systemcursor_visible) ? Keysharp.Scripting.Script.GetPropertyValue(handles, "def") : Keysharp.Scripting.Script.GetPropertyValue(handles, "blank")), "UInt", 2L, "Int", 0L, "Int", 0L, "UInt", 0L);
					Keysharp.Core.Dll.DllCall("SetSystemCursor", "Ptr", h_cursor, "UInt", id);
					e30:
					;
				}

				e31:
				Keysharp.Core.Loops.Pop();
			};
			return "";
		}

		public static object UserMainCode()
		{
			Keysharp.Core.Common.Threading.Threads.BeginThread();

			if (Keysharp.Scripting.Script.IfTest(Keysharp.Core.Files.FileExist(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, A_Desktop, "\\MyScreenClip.png"))))
			{
				Keysharp.Core.Files.FileDelete(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, A_Desktop, "\\MyScreenClip.png"));
			}

			guibgcolor = "BackgroundFF9A9A";
			gui2 = "";
			winpos = "";
			filemenu = Keysharp.Core.Misc.Menu();
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(filemenu, "Add", 2), "System", "MenuHandler");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(filemenu, "Add", 2), "Script Icon", "MenuHandler");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(filemenu, "Add", 2), "Suspend Icon", "MenuHandler");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(filemenu, "Add", 2), "Pause Icon", "MenuHandler");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(filemenu, "SetIcon", 3), "System", "Shell32.dll", 174L);
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(filemenu, "SetIcon", 3), "Script Icon", A_KeysharpCorePath, "Keysharp.ico");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(filemenu, "SetIcon", 3), "Suspend Icon", A_KeysharpCorePath, "Keysharp_s.ico");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(filemenu, "SetIcon", 3), "Pause Icon", A_KeysharpCorePath, "Keysharp_p.ico");
			imgsrchmenu = Keysharp.Core.Misc.Menu();
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(imgsrchmenu, "Add", 2), "Image Search Test", "ImgSrch");
			mymenubar = Keysharp.Core.Misc.MenuBar();
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mymenubar, "Add", 2), "&Menu Icon Test", filemenu);
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mymenubar, "Add", 2), "Image Search", imgsrchmenu);
			mygui = Keysharp.Core.Misc.Gui(null, "KEYSHARP TESTS");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "OnEvent", 2), "Close", "CloseApp");
			Keysharp.Scripting.Script.SetPropertyValue(mygui, "MenuBar", mymenubar);
			tab = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Tab3", null, new Keysharp.Core.Array(new object[]
			{
				"First",
				"Second",
				"Third",
				"GroupBoxes",
				"ControlZoo",
				"Send & Hotkey",
				"Dll & COM"
			}));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "First");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "SetFont", 2), "cBlack s8", "Arial");
			test_header = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "s20 w1200", "Keysharp GUI Tests");
			headerbtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "s8 x10 y+10", "Make header font larger Comic Sans MS");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(headerbtn, "OnEvent", 2), "Click", "ChangeFont");
			headerbtn2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "s8 x+10 yp", "Restore header font");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(headerbtn2, "OnEvent", 2), "Click", "ChangeFontBack");
			bgbtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "s8 x+10 yp", "Change GUI Backgroud");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(bgbtn, "OnEvent", 2), "Click", "ChangeBG");
			bgbtn2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "s8 x+10 yp", "Restore GUI Backgroud");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(bgbtn2, "OnEvent", 2), "Click", "RestoreBG");
			gb1_tabone = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "GroupBox", "x10 y+10 w325 h800", "Tab One - Group One");
			lv_label = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "w400 x10 y+10", "Create listview with tooltip - double-click row");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(lv_label, "SetFont", 1), "cBlue s10");
			lv = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "ListView", "r15 w300 x10 y+5 BackgroundTeal", new Keysharp.Core.Array(new object[]
			{
				"Name",
				"Size (KB)"
			}));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(lv, "OnEvent", 2), "DoubleClick", "LV_DoubleClick");

			for (System.Collections.IEnumerator e0 = Keysharp.Core.Loops.LoopFile(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, A_MyDocuments, "\\*.*")).GetEnumerator(); IsTrueAndRunning(e0.MoveNext());
				)
			{
				Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(lv, "Add", 3), null, A_LoopFileName, A_LoopFileSizeKB);
				e1:
				;
			}

			e2:
			Keysharp.Core.Loops.Pop();
			inputbtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "s8 x10 y+10", "Input Test");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(inputbtn, "OnEvent", 2), "Click", "InputTest");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(lv, "ModifyCol", 2), 2L, "Integer");
			radiotext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "w200 x10", "Radio group tests");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(radiotext, "SetFont", 1), "cBlue s10");
			radioone = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Radio", "vMyRadioGroup", "Change header font (alternate).");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(radioone, "OnEvent", 2), "Click", "ChangeFont");
			radiotwo = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Radio", "vMyRadioGroup", "Restore header font (alternate)");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(radiotwo, "OnEvent", 2), "Click", "ChangeFontBack");
			radiothree = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Radio", "vMyRadioGroup", "Please click me.");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(radiothree, "OnEvent", 2), "Click", "RadioThreeClicked");
			checkboxtext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "w200", "Checkbox test");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(checkboxtext, "SetFont", 1), "cBlue s10");
			checkboxone = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "CheckBox", "w200 x10 yp+20", "If this text is long, it will wrap automatically");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(checkboxone, "OnEvent", 2), "Click", "CheckBoxOneClicked");
			menu_label = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "w400 x10 y+10", "Press Win-Z to see popup menu");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(menu_label, "SetFont", 1), "cBlue s14");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 0));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "First");
			gb2_tabone = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "GroupBox", "x350 yp w325 h800", "Tab One - Group Two");
			g2label1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "w200 cBlue S10", "Click buttons to set and reset style");
			g2label2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10", "Keep an eye on the title bar!");
			g2btn1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "Set");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(g2btn1, "SetFont", 1), "s10 cBlue");
			g2btn2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x100 yp", "Reset");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(g2btn2, "SetFont", 1), "s10 cBlue");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(g2btn1, "OnEvent", 2), "Click", "Set_Style");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(g2btn2, "OnEvent", 2), "Click", "Reset_Style");
			g2label3 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 w200 cBlue S10", "Click buttons to alter Edit style");
			g2label4 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10", "Uppercase - restrict or reset");
			myedit2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 2), "Edit", "x10 w300 h100");
			hwndmyedit = Keysharp.Scripting.Script.GetPropertyValue(myedit2, "Hwnd");
			g2btn3 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "Uppercase");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(g2btn3, "SetFont", 1), "s8 cBlue");
			g2btn4 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x100 yp", "Unrestrict");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(g2btn4, "SetFont", 1), "s8 cBlue");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(g2btn3, "OnEvent", 2), "Click", "Set_Edit_Style");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(g2btn4, "OnEvent", 2), "Click", "Reset_Edit_Style");
			inilabel = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "xp y+5 cRed", "Click to read kstests.ini\nKey = PRIMATE2\nValue = BONOBO");
			inibtn1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x220 yp", "Read INI");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(inibtn1, "OnEvent", 2), "Click", "ReadINI");
			initext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "w100 x150 yp", "");
			iniedit = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 2), "Edit", "x10 y+10 w300 h180");
			iniwritebtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "Write INI");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(iniwritebtn, "OnEvent", 2), "Click", "WriteINI");
			writelabel = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x100 yp cGreen", "Write and Re-Write\nChange case\nThen change back");
			iniwriteedit = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 2), "Edit", "x10 y+10 w300 h180");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "Second");
			gb1_tabtwo = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "GroupBox", "x10 y10 w325 h800", "Tab Two - Group One");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 1), gb1_tabtwo);
			secondedit = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 2), "Edit", "w300 h200");
			secondedittext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "cBlue s10 w200", "ControlSetText Test");
			hwndsecondedit = Keysharp.Scripting.Script.GetPropertyValue(secondedit, "Hwnd");
			editbtn1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "s8 xp y+10", "Text -> Edit");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(editbtn1, "OnEvent", 2), "Click", "SendTextToEdit");
			editbtn2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "s8 x80 yp", "Clear Edit");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(editbtn2, "OnEvent", 2), "Click", "ClearEdit");
			edithwndbtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "s8 x160 yp", "Show Edit Hwnd");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(edithwndbtn, "OnEvent", 2), "Click", "ShowEditHwnd");
			secondrichedit = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "RichEdit", "x10 w250 h150", "Try pasting rich text and/or images here!");
			secondrichedittext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "cBlue s10 w200", "ControlSetText Test (RichEdit)");
			richeditbtn1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "s8 x10 y+10", "Send Text to RichEdit");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(richeditbtn1, "OnEvent", 2), "Click", "SendTextToRichEdit");
			richeditbtn2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "s8 x150 yp", "Clear RichEdit");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(richeditbtn2, "OnEvent", 2), "Click", "ClearRichEdit");
			treeviewtext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 cBlue s10 w200", "TreeView Test");
			tv = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 2), "TreeView", "xp w200 y+5 -ReadOnly");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tv, "OnEvent", 2), "ItemEdit", "MyTreeView_Edit");
			p1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tv, "Add", 1), "First parent");
			p1c1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tv, "Add", 2), "Parent 1\'s first child", p1);
			p2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tv, "Add", 1), "Second parent");
			p2c1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tv, "Add", 2), "Parent 2\'s first child", p2);
			p2c2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tv, "Add", 2), "Parent 2\'s second child", p2);
			p2c2c1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tv, "Add", 2), "Child 2\'s first child", p2c2);
			mousepostext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+10 cBlue s10 w200", "Uses SetTimer to show mouse position");
			coordtext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+10 cLime", "");
			Keysharp.Core.Flow.SetTimer("UpdateOSD", 200L);
			UpdateOSD();
			srchpic = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Picture", "x10 y+10 h-1", Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, A_ScriptDir, "\\killbill.png"));
			srchpictext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+15 w200", "^ Use top menu to find me!");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(srchpictext, "SetFont", 1), "s10 cBlue");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 0));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "Second");
			gb2_tabtwo = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "GroupBox", "x350 y10 w325 h550", "Tab Two - Group Two");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 1), gb2_tabtwo);
			t2g2t1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "xp y+10 w200 cBlue", "Password entry");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(t2g2t1, "SetFont", 1), "s10");
			e1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 2), "Edit", "w200 xp y+10 +0x20");
			t2g2t2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "xp y+10 w250 cBlue s10", "Alternate password entry (*)");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(t2g2t2, "SetFont", 1), "s10");
			e2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 2), "Edit", "w200 xp y+10 Password*");
			t2g2t3 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "xp y+10 w250 cBlue", "Uppercase - ControlSetStyle");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(t2g2t3, "SetFont", 1), "s10");
			e3 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Edit", "w200 xp y+10 h50", "Edit 3");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 1), gb2_tabtwo);
			Keysharp.Core.Window.ControlSetStyle("+0x8", e3);
			t2g2t4 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "xp y+10 w250 cBlue", "Uppercase - +0x8");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(t2g2t4, "SetFont", 1), "s10");
			e4 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Edit", "w200 xp y+10 h50 +0x8", "Edit 4");
			e3btn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "xp y+10", "Toggle ControlSetStyle Edit");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(e3btn, "OnEvent", 2), "Click", "ShowE3Hwnd");
			movebutton = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", null, "Move GUI");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(movebutton, "OnEvent", 2), "Focus", "ChangeMoveBtnColor");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(movebutton, "OnEvent", 2), "Click", "MoveGui");
			movebuttonback = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x120 yp", "Move GUI Back");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(movebuttonback, "OnEvent", 2), "Focus", "ChangeMoveBtnBackColor");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(movebuttonback, "OnEvent", 2), "Click", "MoveGuiBack");
			titleinfo = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+10", "Buttons below will alter GUI title with SendMessage");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(titleinfo, "SetFont", 1), "cBlue s8");
			sendbtn1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "Change Title");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(sendbtn1, "OnEvent", 2), "Click", "ChangeTitle");
			sendbtn2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x120 yp", "Restore Title");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(sendbtn2, "OnEvent", 2), "Click", "RestoreTitle");
			postinfo = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+10", "Run Notepad - Use PostMessage to show \'About\'");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(postinfo, "SetFont", 1), "cBlue s8");
			postbtn1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "Show Notepad \'About\'");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(postbtn1, "OnEvent", 2), "Click", "AboutNotepad");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 0));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "Second");
			mypicturebtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "cBlue s10 x400 y600", "Display a Picture");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mypicturebtn, "OnEvent", 2), "Click", "LoadPic");
			slugline = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "cBlue s10 w200 xp y800", "Picture will display above");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "Third");
			gb1_tabthree = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "GroupBox", "x10 y10 w325 h875", "Tab Three - Group One");
			thirdtext1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "cBlue s10", "ListBox Test");
			mylistbox = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "ListBox", "r5 w110", new Keysharp.Core.Array(new object[]
			{
				"Red",
				"Green",
				"Blue",
				"Black",
				"White"
			}));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mylistbox, "OnEvent", 2), "Change", "ListBoxClicked");
			mylbbtn1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x+10 yp", "Delete White");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mylbbtn1, "OnEvent", 2), "Click", "DeleteWhite");
			mylbbtn2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x+10 yp", "Add White");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mylbbtn2, "OnEvent", 2), "Click", "AddWhite");
			thirdtext2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+10 cBlue s10", "ListBox Test (Multi-Select)");
			mymultilb = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "ListBox", "+Multi r5 w110 x10 y+10", new Keysharp.Core.Array(new object[]
			{
				"Reactionary Red",
				"Garish Green",
				"Beastly Blue",
				"Banal Black",
				"Washed-out White"
			}));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mymultilb, "OnEvent", 2), "Change", "MultiLBClicked");
			thirdtext3 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+10 cBlue s10", "Drop-down List");
			myddl = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "DropDownList", "x10 y+10", new Keysharp.Core.Array(new object[]
			{
				"Orange",
				"Purple",
				"Fuchsia",
				"Lime",
				"Aqua"
			}));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(myddl, "OnEvent", 2), "Change", "DDLClicked");
			thirdtext4 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 cBlue s10", "ComboBox");
			mycb = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "ComboBox", "x10 y+10 r10", new Keysharp.Core.Array(new object[]
			{
				"Orange",
				"Purple",
				"Fuchsia",
				"Lime",
				"Aqua"
			}));
			cb_button = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "h25 w80 x10 y+10", "CB Selection");
			cb_addbtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "h25 w80 x90 yp", "Add Yellow");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cb_button, "OnEvent", 2), "Click", "CB_ButtonClicked");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cb_addbtn, "OnEvent", 2), "Click", "AddYellow");
			cb_deletebtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "h25 w80 x170 yp ", "Del Yellow");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cb_deletebtn, "OnEvent", 2), "Click", "DeleteYellow");
			thirdtext5 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 cBlue s10", "Moving slider shows position below");
			myslider = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Slider", "x10 y+10 +AltSubmit TickInterval10 Page10", 100L);
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(myslider, "OnEvent", 2), "Change", "SliderPos");
			mysliderpos = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+5", "");
			thirdtext6 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 cBlue s10", "Progress bar - click buttons to move");
			myprogress = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Progress", "x10 y+10", 50L);
			pbtn1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "s8 x10 y+5", "Lower");
			pbtn2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "s8 x100 yp", "Higher");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(pbtn1, "OnEvent", 2), "Click", "Pbtn1Clicked");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(pbtn2, "OnEvent", 2), "Click", "Pbtn2Clicked");
			mysb = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "StatusBar", null, "                       ");
			thirdtext7 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+5 cBlue s10", "DateTime Test");
			mydatetime = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "DateTime", "s8 x10 y+5 w200", "LongDate");
			thirdtext8 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+5 cBlue s10", "MonthCal Test");
			mymonthcal = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 1), "MonthCal");
			mc_btn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "s8 x10 y+5", "Change Cal Colors (not implemented)");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mc_btn, "OnEvent", 2), "Click", "MC_Colors");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 0));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "Third");
			gb2_tabthree = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "GroupBox", "x350 y10 w325 h875", "Tab Three - Group Two");
			infotext3 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+10 w200", "Sliding text. Move Slider.");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(infotext3, "SetFont", 1), "cBlue s8");
			mytext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 2), "Text", "x10 y+10 w340 h30");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mytext, "SetFont", 1), "cTeal Consolas Bold");
			hwndmytext = Keysharp.Scripting.Script.GetPropertyValue(mytext, "Hwnd");
			myslider2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Slider", "Range0-80 +AltSubmit TickInterval10 Page10 ToolTip", 10L);
			Keysharp.Scripting.Script.SetPropertyValue(myslider2, "Value", 10L);
			mybtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "w100 s8 cBlue", "Sliding Test");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mybtn, "OnEvent", 2), "Click", "STest");
			fakesep = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+10", "__________________________________________________");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(fakesep, "SetFont", 1), "cTeal Bold");
			mylinktext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+5", "Link test");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mylinktext, "SetFont", 1), "cBlue s8");
			mylink = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Link", "x10 y+5", "Click this <a href=\"https://www.autohotkey.com\"> link to AHK page</a>");
			myhkinfotext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+5 w200", "Define Hotkey test\nFocus Edit and click hotkey(s)");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(myhkinfotext, "SetFont", 1), "cBlue s8");
			myhotkey = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 2), "Hotkey", "x10 y+5");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(myhotkey, "OnEvent", 2), "Change", "UpdateHK");
			myhktext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+5 w200", Keysharp.Scripting.Script.GetPropertyValue(myhotkey, "Value"));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x+5 y+5", "_____________________________");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "GroupBoxes");
			gb1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "GroupBox", "x10 y10 w330 h400", "Group One");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 1), gb1);
			cptext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", null, "gb1 - Image copying tests");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cptext, "SetFont", 1), "s8 cBlue");
			myre = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 2), "RichEdit", "x10 y+10 w300 h100");
			mysecondpic = Keysharp.Core.Images.LoadPicture(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, A_ScriptDir, "\\Robin.png"));
			Keysharp.Core.Images.CopyImageToClipboard(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, "HBITMAP:", mysecondpic));
			showbtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "Paste Pic");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(showbtn, "OnEvent", 2), "Click", "PastePic");
			lptext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+10", "Now copy a pic from a file.");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(lptext, "SetFont", 1), "s8 cBlue");
			myre2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 2), "RichEdit", "x10 y+10 w300 h100");
			showbtn2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "Paste from file");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(showbtn2, "OnEvent", 2), "Click", "CopyPicFromFile");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 0));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "GroupBoxes");
			gb2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "GroupBox", "x10 y+10 w330 h400", "Group Two");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 1), gb2);
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "cBlue s8 w200", "Testing various Send() types");
			gb2edit = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 2), "Edit", "x10 y+5 w300 h250");
			gb2btn1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10", "Notepad");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gb2btn1, "OnEvent", 2), "Click", "SendToApp");
			gb2btn2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x95 yp", "This Edit");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gb2btn2, "OnEvent", 2), "Click", "SendToGui");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 0));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "GroupBoxes");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "AddText", 2), "s14 cBlue", "This should be below.");
			gb3 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "GroupBox", "x+10 y10 w330 h400", "Group Three");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 1), gb3);
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "xp w400", "Testing gb3");
			gb3edit = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 2), "Edit", "w300 h300");
			gb3hwnd = Keysharp.Scripting.Script.GetPropertyValue(gb3edit, "Hwnd");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gb3edit, "OnEvent", 2), "Focus", "StartEditTooltip");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gb3edit, "OnEvent", 2), "LoseFocus", "StopToolTip");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 0));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "GroupBoxes");
			gb4 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "GroupBox", "xp y420 w330 h400", "Group Four");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 1), gb4);
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "xp", "Testing gb4");
			gb4btn1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "s14 cLime", "Send to GB3");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gb4btn1, "OnEvent", 2), "Click", "SendToGB3");
			gb4btn2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "s14 cLime x+5 yp", "Clear GB3");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gb4btn2, "OnEvent", 2), "Click", "ClearGB3");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 0));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Opt", 1), "+Autosize");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Show", 0));
			mymenu = Keysharp.Core.Misc.Menu();
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mymenu, "Add", 2), "Item 1", "MenuHandler");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mymenu, "Add", 2), "Item 2", "MenuHandler");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mymenu, "Add", 0));
			submenu1 = Keysharp.Core.Misc.Menu();
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(submenu1, "Add", 2), "Item A", "MenuHandler");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(submenu1, "Add", 2), "Item B", "MenuHandler");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mymenu, "Add", 2), "My Submenu", submenu1);
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mymenu, "Add", 0));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mymenu, "Add", 2), "Item 3", "MenuHandler");
			Keysharp.Core.Common.Keyboard.HotkeyDefinition.AddHotkey(new FuncObj("label_F1967E9B_0", null), 0u, "#z");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 0));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "ControlZoo");
			gb1_cz = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "GroupBox", "x10 y10 w325 h875", "ControlZoo - Group One");
			cz_text1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", null, "Control Functions testing");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_text1, "SetFont", 1), "s10 CBlue");
			cz_text2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+10 w300", "For the controls on this tab, we\'ll add, delete, click, focus and perform other c" +
					   "ontrol functions.");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_text2, "SetFont", 1), "CTeal");
			cz_text2a = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+5", "ListBox control testing");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_text2a, "SetFont", 1), "s8 CBlue");
			cz_listbox = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "ListBox", "x10 h300 w160", new Keysharp.Core.Array(new object[]
			{
				"Red",
				"Green",
				"Blue",
				"Black",
				"White",
				"Maroon",
				"Purple",
				"Color de gos com fuig",
				"Weiß",
				"Amarillo",
				"красный",
				"朱红"
			}));
			cz_text3 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+5", "Edit control testing");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_text3, "SetFont", 1), "s8 CBlue");
			cz_edit1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 2), "Edit", "x10 y+5 w160 h100");
			cz_lbbtn1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x180 w120 h25 y95", "Add Fuchsia");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn1, "OnEvent", 2), "Click", "AddFuchsia");
			cz_lbbtn2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x180 w120 h25 y120", "Delete Fuchsia");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn2, "OnEvent", 2), "Click", "DeleteFuchsia");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn2, "OnEvent", 2), "Focus", "FuchsiaDeleteTrayTip");
			cz_lbbtn3 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x180 w120 h25 y145", "Purple (Index)");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn3, "OnEvent", 2), "Click", "ChooseIndex");
			cz_lbbtn4 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x180 w120 h25 y170", "красный (String)");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn4, "OnEvent", 2), "Click", "ChooseString");
			cz_lbbtn5 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x180 w120 h25 y195", "ControlGetChoice");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn5, "OnEvent", 2), "Click", "GetChoice");
			cz_lbbtn6 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x180 w120 h25 y220", "ControlGetClassNN");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn6, "OnEvent", 2), "Click", "GetClassNN");
			cz_lbbtn7 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "w120 x180 h25 y245", "ControlGetEnabled");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn7, "OnEvent", 2), "Click", "GetEnabled");
			cz_lbbtn8 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "w120 x180 h25 y270", "Disabled!");
			Keysharp.Scripting.Script.SetPropertyValue(cz_lbbtn8, "Enabled", false);
			cz_lbbtn9 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "w120 x180 h25 y295", "ControlGetHwnd");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn9, "OnEvent", 2), "Click", "GetHwnd");
			cz_lbbtn10 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "w120 x180 h25 y320", "ControlGetText");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn10, "OnEvent", 2), "Click", "GetText");
			cz_lbbtn11 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "w120 x180 h25 y345", "ControlHide");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn11, "OnEvent", 2), "Click", "HideButton");
			cz_lbbtn12 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "w120 x180 h25 y370", "ControlShow");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn12, "OnEvent", 2), "Click", "ShowButton");
			cz_lbbtn13 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "w120 x180 h25 y395", "Visible?");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn13, "OnEvent", 2), "Click", "IsItHidden");
			cz_lbbtn14 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "w120 x180 h25 y420", "Edit Column #");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn14, "OnEvent", 2), "Click", "GetCol");
			cz_lbbtn15 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "w120 x180 h25 y445", "Edit Line #");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn15, "OnEvent", 2), "Click", "GetLine");
			cz_lbbtn16 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "w120 x180 h25 y470", "Edit Line Text");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn16, "OnEvent", 2), "Click", "GetLineText");
			cz_lbbtn17 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "w120 x180 h25 y495", "Selected text");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn17, "OnEvent", 2), "Click", "GetSelectedText");
			cz_lbbtn18 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "w120 x180 h25 y520", "Edit Paste");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_lbbtn18, "OnEvent", 2), "Click", "EditPaster");
			cz_separatortext1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y540 w320", "ListView Content Tests");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(cz_separatortext1, "SetFont", 1), "s8 CBlue");
			lv2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "ListView", "r5 w300 x10 y+5", new Keysharp.Core.Array(new object[]
			{
				"Name",
				"Size (KB)"
			}));

			for (System.Collections.IEnumerator e9 = Keysharp.Core.Loops.LoopFile(Keysharp.Scripting.Script.Operate(Keysharp.Scripting.Script.Operator.Concat, A_MyDocuments, "\\*.*")).GetEnumerator(); IsTrueAndRunning(e9.MoveNext());
				)
			{
				Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(lv2, "Add", 3), null, A_LoopFileName, A_LoopFileSizeKB);
				e10:
				;
			}

			e11:
			Keysharp.Core.Loops.Pop();
			lv2_btn1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+5 w72 h25", "Selected");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(lv2_btn1, "OnEvent", 2), "Click", "LV_Selected");
			lv2_btn2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x85 yp w72 h25", "Focused");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(lv2_btn2, "OnEvent", 2), "Click", "LV_Focused");
			lv2_btn3 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x160 yp wp hp", "Column 1");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(lv2_btn3, "OnEvent", 2), "Click", "LV_Col1");
			lv2_btn4 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x240 yp wp hp", "Count");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(lv2_btn4, "OnEvent", 2), "Click", "LV_Count");
			lv2_btn5 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 yp+25 w100 h25", "Count Selected");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(lv2_btn5, "OnEvent", 2), "Click", "LV_CountSelected");
			lv2_btn6 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x113 yp w100 h25", "Row Focused");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(lv2_btn6, "OnEvent", 2), "Click", "LV_CountFocused");
			lv2_btn7 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x216 yp w100 h25", "Count Columns");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(lv2_btn7, "OnEvent", 2), "Click", "LV_CountCol");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 0));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "ControlZoo");
			gb2_cz = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "GroupBox", "x+10 y10 w325 h875", "ControlZoo - Group Two");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 1), gb2_cz);
			gb2_cz_text1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y20 w325", "ComboBox Control Tests");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gb2_cz_text1, "SetFont", 1), "s8 cBlue");
			gb2_cz_cb = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "ComboBox", "x10 y+10 r5 Limit", new Keysharp.Core.Array(new object[]
			{
				"Orange",
				"Purple",
				"Fuchsia",
				"Lime",
				"Aqua"
			}));
			gb2_cz_btn1 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+5 w80 h25", "Add White");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gb2_cz_btn1, "OnEvent", 2), "Click", "AddWhite2");
			gb2_cz_btn2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x90 yp w80 h25", "Delete White");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gb2_cz_btn2, "OnEvent", 2), "Click", "DeleteWhite2");
			gb2_cz_btn3 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x170 yp w80 h25", "-> Purple");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gb2_cz_btn3, "OnEvent", 2), "Click", "ChooseString_CB");
			gb2_cz_btn4 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+5 w200 h25", "Click Win+R, show dropdown");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gb2_cz_btn4, "OnEvent", 2), "Click", "Click_CB");
			gb2_cz_text2 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+10 w325", "Move mouse to color. Press Ctrl+Alt+9.");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gb2_cz_text2, "SetFont", 1), "s8 cBlue");
			mycolorlabel = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+10 w200", "Color below, may be hard to see.");
			mycolortext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "w200 x10 y+10", "");
			secondguibutton = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+35", "Control Tests Redux");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(secondguibutton, "OnEvent", 2), "Click", "SecondGUI");
			findedit = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "Get Edit Hwnd");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(findedit, "OnEvent", 2), "Click", "FindSecondGuiEdit");
			thirdguibutton = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "\'Find By\' Tests");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(thirdguibutton, "OnEvent", 2), "Click", "ThirdGUI");
			mousemovebutton = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "Mouse-moving tests");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mousemovebutton, "OnEvent", 2), "Click", "MoveTheMouse");
			Keysharp.Core.Common.Keyboard.HotkeyDefinition.AddHotkey(new FuncObj("label_D7FDEF8_1", null), 0u, "^!9");
			gui2 = Keysharp.Core.Misc.Gui(null, "Testing Child GUI");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui2, "Opt", 1), "+Owner");
			gui2stylebutton = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui2, "Add", 3), "Button", null, "Style Button");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui2stylebutton, "OnEvent", 2), "Click", "StyleTest");
			gui2getcontrolsbutton = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui2, "Add", 3), "Button", "x100 yp", "Get Ctrls");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui2getcontrolsbutton, "OnEvent", 2), "Click", "GetTheControls");
			gui2findctrlsbutton = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui2, "Add", 3), "Button", "x180 yp", "Enum Ctrls");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui2findctrlsbutton, "OnEvent", 2), "Click", "EnumCtrls");
			gui2ctrlindexbutton = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui2, "Add", 3), "Button", "x260 yp", "Find by _Item");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui2ctrlindexbutton, "OnEvent", 2), "Click", "FindByItem");
			gui2edit = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui2, "Add", 2), "Edit", "x10 y+20 h400 w500 +Multiline");
			gui3 = Keysharp.Core.Misc.Gui(null, "KEYSHARP TESTS");
			Keysharp.Scripting.Script.SetPropertyValue(gui3, "Name", "Howard");
			buttonone = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui3, "Add", 3), "Button", "w200", "Find by Text");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(buttonone, "OnEvent", 2), "Click", "FindByText");
			buttontwo = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui3, "Add", 3), "Button", "w200", "Find by Hwnd");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(buttontwo, "OnEvent", 2), "Click", "FindByHwnd");
			buttonfour = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui3, "Add", 3), "Button", "w200", "Find by NetClassNN");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(buttonfour, "OnEvent", 2), "Click", "FindByNetClassNN");
			buttonfive = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui3, "Add", 3), "Button", "w200", "Find by Name");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(buttonfive, "OnEvent", 2), "Click", "FindByName");
			buttondummy = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui3, "Add", 3), "Button", "w200", "Test Dummy");
			Keysharp.Scripting.Script.SetPropertyValue(buttondummy, "Name", "I am a dummy button");
			myedit3 = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(gui3, "Add", 2), "Edit", "x10 h200 w200");
			hwndtext = Keysharp.Scripting.Script.GetPropertyValue(buttondummy, "Hwnd");
			Keysharp.Scripting.Script.SetPropertyValue(myedit3, "Value", hwndtext);
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 0));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "Send & Hotkey");
			sectiontoptext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y10 w600", "This section is for testing the various Send() variants and the Hotkey method.");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(sectiontoptext, "SetFont", 1), "cBlue s12");
			mysendedit = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Edit", "x10 y+10 w700 h250", "The buttons below this Edit will use various Send() variants.\n");
			btnsend = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10 w80", "Send()");
			btnsendtext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "xp+85 yp w80", "SendText()");
			btnsendinput = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "xp+170 yp w80", "SendInput()");
			btnsendplay = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "xp+255 yp w80", "SendPlay()");
			btnsendevent = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "xp+340 yp w80", "SendEvent()");
			mysclabel = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+10 w300", "Get screenclip at 100, 100, 200, 200\nSave to \'MyScreenClip.png\' on Desktop& displ" +
						"ay for 2 seconds.");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mysclabel, "SetFont", 1), "s8 cBlue");
			myscbtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "w200 h25 x10 y+10", "Press to get screenclip"), "OnEvent", 2), "Click", "LoadSC");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(btnsend, "OnEvent", 2), "Click", "BtnSendFunc");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(btnsendtext, "OnEvent", 2), "Click", "BtnSendTextFunc");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(btnsendinput, "OnEvent", 2), "Click", "BtnSendInputFunc");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(btnsendplay, "OnEvent", 2), "Click", "BtnSendPlayFunc");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(btnsendevent, "OnEvent", 2), "Click", "BtnSendEventFunc");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x0 y+20 w700", "_________________________________________________________________________________" +
											 "____________________________");
			hotkeysectiontoptext = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "x10 y+5 w600", "HOTKEY TESTS\nHold F1 to slow mouse, release to restore.");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(hotkeysectiontoptext, "SetFont", 1), "cBlue s14");
			funcbtnone = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+5", "FuncObj");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(funcbtnone, "OnEvent", 2), "Click", "DoTricks");
			funcbtntwo = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x90 yp", "RCtrl and RShift -> AltTab");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(funcbtntwo, "OnEvent", 2), "Click", "StupidTrickTwo");
			funcbtnthree = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x250 yp", "Hotkey Off");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(funcbtnthree, "OnEvent", 2), "Click", "StupidTrickThree");
			funcbtnfour = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x340 yp", "Hotkey with FuncObj");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(funcbtnfour, "OnEvent", 2), "Click", "FuncObjTest");
			funcbtnfive = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+30 w150", "Toggle AltTab Hotkey On or Off");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(funcbtnfive, "OnEvent", 2), "Click", "ToggleHotkey");
			funcbtnsix = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x170 yp w150", "From .INI\nRCtrl+LShift = AltTab");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(funcbtnsix, "OnEvent", 2), "Click", "GrabFromIni");
			funcbtnseven = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x340 yp w150", "Toggle Hotkey from .INI");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(funcbtnseven, "OnEvent", 2), "Click", "ToggleFromIni");
			Keysharp.Core.Common.Keyboard.HotkeyDefinition.AddHotkey(new FuncObj("label_A4CC1CCB_2", null), 0u, "F1");
			Keysharp.Core.Common.Keyboard.HotkeyDefinition.AddHotkey(new FuncObj("label_A4CC1CCB_2", null), 0u, "F1 up");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "UseGroup", 0));
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(tab, "UseTab", 1), "Dll & COM");
			hidecursordlllabel = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Text", "w400 x10 y+10 cBlue S10", "Press Win+C to hide the cursor, and press again to restore it.");
			dllmsgboxbtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "Dll MsgBox()");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(dllmsgboxbtn, "OnEvent", 2), "Click", "DllMsgBox");
			dllmsgboxbtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "Dll IsWindowVisible() (run notepad then click this)");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(dllmsgboxbtn, "OnEvent", 2), "Click", "DllIsWindowVisible");
			dllwsprintfbtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "Dll wsprintf()");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(dllwsprintfbtn, "OnEvent", 2), "Click", "DllWsprintf");
			dllperformancecounterbtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "Dll QueryPerformanceCounter()");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(dllperformancecounterbtn, "OnEvent", 2), "Click", "DllPerformanceCounter");
			dlldllgetwindowrectbtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "Dll GetWindowRect()");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(dlldllgetwindowrectbtn, "OnEvent", 2), "Click", "DllGetWindowRect");
			dlldllfillrectbtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "Dll FillRect()");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(dlldllfillrectbtn, "OnEvent", 2), "Click", "DllFillRect");
			dlldllremovefromtaskbarbtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "Dll DeleteFromTaskbar() (clear for 3 seconds, then re-add)");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(dlldllremovefromtaskbarbtn, "OnEvent", 2), "Click", "DllDeleteFromTaskbar");
			comdllremovefromtaskbarbtn = Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(mygui, "Add", 3), "Button", "x10 y+10", "COM DeleteFromTaskbar() (clear for 3 seconds, then re-add)");
			Keysharp.Scripting.Script.Invoke(Keysharp.Scripting.Script.GetMethodOrProperty(comdllremovefromtaskbarbtn, "OnEvent", 2), "Click", "ComDeleteFromTaskbar");
			Keysharp.Core.Flow.OnExit(Keysharp.Core.Misc.FuncObj("anonfunc_3", null, 1L));
			Keysharp.Core.Common.Keyboard.HotkeyDefinition.AddHotkey(new FuncObj("label_35F90B42_4", null), 0u, "#c");
			Keysharp.Core.Common.Threading.Threads.EndThread();
			return "";
		}
	}
}
