//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/minip/source/repos/Keysharp_clone/Keysharp.Core/Scripting/Parser/Antlr/PreprocessorParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PreprocessorParser : PreprocessorParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DerefStart=1, DerefEnd=2, SingleLineBlockComment=3, HotstringTrigger=4, 
		RemapKey=5, HotkeyTrigger=6, OpenBracket=7, CloseBracket=8, OpenParen=9, 
		CloseParen=10, OpenBrace=11, CloseBrace=12, Comma=13, Assign=14, QuestionMark=15, 
		QuestionMarkDot=16, Colon=17, DoubleColon=18, Ellipsis=19, Dot=20, ConcatDot=21, 
		PlusPlus=22, MinusMinus=23, Plus=24, Minus=25, BitNot=26, Not=27, Multiply=28, 
		Divide=29, IntegerDivide=30, Modulus=31, Power=32, NullCoalesce=33, Hashtag=34, 
		RightShiftArithmetic=35, LeftShiftArithmetic=36, RightShiftLogical=37, 
		LessThan=38, MoreThan=39, LessThanEquals=40, GreaterThanEquals=41, Equals_=42, 
		NotEquals=43, IdentityEquals=44, IdentityNotEquals=45, RegExMatch=46, 
		BitAnd=47, BitXOr=48, BitOr=49, And=50, Or=51, MultiplyAssign=52, DivideAssign=53, 
		ModulusAssign=54, PlusAssign=55, MinusAssign=56, LeftShiftArithmeticAssign=57, 
		RightShiftArithmeticAssign=58, RightShiftLogicalAssign=59, IntegerDivideAssign=60, 
		ConcatenateAssign=61, BitAndAssign=62, BitXorAssign=63, BitOrAssign=64, 
		PowerAssign=65, NullishCoalescingAssign=66, Arrow=67, NullLiteral=68, 
		Unset=69, True=70, False=71, DecimalLiteral=72, HexIntegerLiteral=73, 
		OctalIntegerLiteral=74, OctalIntegerLiteral2=75, BinaryIntegerLiteral=76, 
		BigHexIntegerLiteral=77, BigOctalIntegerLiteral=78, BigBinaryIntegerLiteral=79, 
		BigDecimalIntegerLiteral=80, Break=81, Do=82, Instanceof=83, Switch=84, 
		Case=85, Default=86, Else=87, Catch=88, Finally=89, Return=90, Continue=91, 
		For=92, While=93, LoopParse=94, LoopReg=95, LoopRead=96, LoopFiles=97, 
		Loop=98, Until=99, This=100, If=101, Throw=102, Delete=103, In=104, Try=105, 
		Yield=106, Is=107, Contains=108, VerbalAnd=109, VerbalNot=110, VerbalOr=111, 
		Goto=112, Get=113, Set=114, Class=115, Enum=116, Extends=117, Super=118, 
		Base=119, Export=120, Import=121, From=122, As=123, Async=124, Await=125, 
		Static=126, Global=127, Local=128, HotIf=129, InputLevel=130, SuspendExempt=131, 
		UseHook=132, HotstringOptions=133, Identifier=134, StringLiteral=135, 
		EOL=136, WS=137, UnexpectedCharacter=138, HotstringWhitespaces=139, HotstringMultiLineExpansion=140, 
		HotstringSingleLineExpansion=141, HotstringUnexpectedCharacter=142, DirectiveWhitespaces=143, 
		DirectiveContent=144, DirectiveUnexpectedCharacter=145, PreprocessorDirectiveWS=146, 
		Digits=147, Define=148, Undef=149, ElIf=150, EndIf=151, Line=152, Error=153, 
		Warning=154, Region=155, EndRegion=156, Pragma=157, Nullable=158, Include=159, 
		IncludeAgain=160, DllLoad=161, Requires=162, SingleInstance=163, Persistent=164, 
		Warn=165, NoDynamicVars=166, ErrorStdOut=167, ClipboardTimeout=168, HotIfTimeout=169, 
		MaxThreads=170, MaxThreadsBuffer=171, MaxThreadsPerHotkey=172, Assembly=173, 
		DirectiveHidden=174, ConditionalSymbol=175, DirectiveSingleLineComment=176, 
		DirectiveNewline=177, Text=178;
	public const int
		RULE_preprocessor_directive = 0, RULE_directive_new_line_or_sharp = 1, 
		RULE_preprocessor_expression = 2;
	public static readonly string[] ruleNames = {
		"preprocessor_directive", "directive_new_line_or_sharp", "preprocessor_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'['", "']'", "'('", "')'", 
		"'{'", "'}'", "','", "':='", "'?'", "'?.'", "':'", "'::'", "'...'", "'.'", 
		null, "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", "'//'", 
		"'%'", "'**'", "'??'", null, "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", 
		"'>='", "'='", "'!='", "'=='", "'!=='", "'~='", "'&'", "'^'", "'|'", "'&&'", 
		"'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", 
		"'//='", "'.='", "'&='", "'^='", "'|='", "'**='", "'??='", "'=>'", "'null'", 
		"'unset'", "'true'", "'false'", null, null, null, null, null, null, null, 
		null, null, "'break'", "'do'", "'instanceof'", "'switch'", "'case'", "'default'", 
		"'else'", "'catch'", "'finally'", "'return'", "'continue'", "'for'", "'while'", 
		null, null, null, null, null, "'until'", "'this'", "'if'", "'throw'", 
		"'delete'", "'in'", "'try'", "'yield'", "'is'", "'contains'", "'and'", 
		"'not'", "'or'", "'goto'", "'get'", "'set'", "'class'", "'enum'", "'extends'", 
		"'super'", "'base'", "'export'", "'import'", "'from'", "'as'", "'async'", 
		"'await'", "'static'", "'global'", "'local'", "'#hotif'", "'#inputlevel'", 
		"'#suspendexempt'", "'#usehook'", null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "'define'", "'undef'", 
		"'elif'", "'endif'", "'line'", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'nodynamicvars'", "'errorstdout'", 
		null, null, null, null, null, null, "'hidden'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DerefStart", "DerefEnd", "SingleLineBlockComment", "HotstringTrigger", 
		"RemapKey", "HotkeyTrigger", "OpenBracket", "CloseBracket", "OpenParen", 
		"CloseParen", "OpenBrace", "CloseBrace", "Comma", "Assign", "QuestionMark", 
		"QuestionMarkDot", "Colon", "DoubleColon", "Ellipsis", "Dot", "ConcatDot", 
		"PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", 
		"Divide", "IntegerDivide", "Modulus", "Power", "NullCoalesce", "Hashtag", 
		"RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", "LessThan", 
		"MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_", "NotEquals", 
		"IdentityEquals", "IdentityNotEquals", "RegExMatch", "BitAnd", "BitXOr", 
		"BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
		"PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
		"RightShiftLogicalAssign", "IntegerDivideAssign", "ConcatenateAssign", 
		"BitAndAssign", "BitXorAssign", "BitOrAssign", "PowerAssign", "NullishCoalescingAssign", 
		"Arrow", "NullLiteral", "Unset", "True", "False", "DecimalLiteral", "HexIntegerLiteral", 
		"OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
		"BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", 
		"BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Switch", "Case", 
		"Default", "Else", "Catch", "Finally", "Return", "Continue", "For", "While", 
		"LoopParse", "LoopReg", "LoopRead", "LoopFiles", "Loop", "Until", "This", 
		"If", "Throw", "Delete", "In", "Try", "Yield", "Is", "Contains", "VerbalAnd", 
		"VerbalNot", "VerbalOr", "Goto", "Get", "Set", "Class", "Enum", "Extends", 
		"Super", "Base", "Export", "Import", "From", "As", "Async", "Await", "Static", 
		"Global", "Local", "HotIf", "InputLevel", "SuspendExempt", "UseHook", 
		"HotstringOptions", "Identifier", "StringLiteral", "EOL", "WS", "UnexpectedCharacter", 
		"HotstringWhitespaces", "HotstringMultiLineExpansion", "HotstringSingleLineExpansion", 
		"HotstringUnexpectedCharacter", "DirectiveWhitespaces", "DirectiveContent", 
		"DirectiveUnexpectedCharacter", "PreprocessorDirectiveWS", "Digits", "Define", 
		"Undef", "ElIf", "EndIf", "Line", "Error", "Warning", "Region", "EndRegion", 
		"Pragma", "Nullable", "Include", "IncludeAgain", "DllLoad", "Requires", 
		"SingleInstance", "Persistent", "Warn", "NoDynamicVars", "ErrorStdOut", 
		"ClipboardTimeout", "HotIfTimeout", "MaxThreads", "MaxThreadsBuffer", 
		"MaxThreadsPerHotkey", "Assembly", "DirectiveHidden", "ConditionalSymbol", 
		"DirectiveSingleLineComment", "DirectiveNewline", "Text"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PreprocessorParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PreprocessorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PreprocessorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PreprocessorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Preprocessor_directiveContext : ParserRuleContext {
		public Boolean value;
		public Preprocessor_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_directive; } }
	 
		public Preprocessor_directiveContext() { }
		public virtual void CopyFrom(Preprocessor_directiveContext context) {
			base.CopyFrom(context);
			this.value = context.value;
		}
	}
	public partial class PreprocessorNullableContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Nullable() { return GetToken(PreprocessorParser.Nullable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Text() { return GetToken(PreprocessorParser.Text, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		public PreprocessorNullableContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorNullable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorWarnContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Warn() { return GetToken(PreprocessorParser.Warn, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Text() { return GetToken(PreprocessorParser.Text, 0); }
		public PreprocessorWarnContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorWarn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorDeclarationContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Define() { return GetToken(PreprocessorParser.Define, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConditionalSymbol() { return GetToken(PreprocessorParser.ConditionalSymbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Undef() { return GetToken(PreprocessorParser.Undef, 0); }
		public PreprocessorDeclarationContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorPragmaContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pragma() { return GetToken(PreprocessorParser.Pragma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Text() { return GetToken(PreprocessorParser.Text, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		public PreprocessorPragmaContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorPragma(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorNoDynamicVarsContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NoDynamicVars() { return GetToken(PreprocessorParser.NoDynamicVars, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		public PreprocessorNoDynamicVarsContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorNoDynamicVars(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorLineContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Line() { return GetToken(PreprocessorParser.Line, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Digits() { return GetToken(PreprocessorParser.Digits, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(PreprocessorParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveHidden() { return GetToken(PreprocessorParser.DirectiveHidden, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(PreprocessorParser.StringLiteral, 0); }
		public PreprocessorLineContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorTextualDirectiveContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Text() { return GetToken(PreprocessorParser.Text, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Include() { return GetToken(PreprocessorParser.Include, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IncludeAgain() { return GetToken(PreprocessorParser.IncludeAgain, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DllLoad() { return GetToken(PreprocessorParser.DllLoad, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Requires() { return GetToken(PreprocessorParser.Requires, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SingleInstance() { return GetToken(PreprocessorParser.SingleInstance, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assembly() { return GetToken(PreprocessorParser.Assembly, 0); }
		public PreprocessorTextualDirectiveContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorTextualDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorPersistentContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Persistent() { return GetToken(PreprocessorParser.Persistent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(PreprocessorParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(PreprocessorParser.False, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Digits() { return GetToken(PreprocessorParser.Digits, 0); }
		public PreprocessorPersistentContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorPersistent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorDiagnosticContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Error() { return GetToken(PreprocessorParser.Error, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Text() { return GetToken(PreprocessorParser.Text, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Warning() { return GetToken(PreprocessorParser.Warning, 0); }
		public PreprocessorDiagnosticContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDiagnostic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorErrorStdOutContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ErrorStdOut() { return GetToken(PreprocessorParser.ErrorStdOut, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		public PreprocessorErrorStdOutContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorErrorStdOut(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorRegionContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Region() { return GetToken(PreprocessorParser.Region, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Text() { return GetToken(PreprocessorParser.Text, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndRegion() { return GetToken(PreprocessorParser.EndRegion, 0); }
		public PreprocessorRegionContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorRegion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorConditionalContext : Preprocessor_directiveContext {
		public Preprocessor_expressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(PreprocessorParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression() {
			return GetRuleContext<Preprocessor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ElIf() { return GetToken(PreprocessorParser.ElIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(PreprocessorParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndIf() { return GetToken(PreprocessorParser.EndIf, 0); }
		public PreprocessorConditionalContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorConditional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorNumericDirectiveContext : Preprocessor_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Digits() { return GetToken(PreprocessorParser.Digits, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
			return GetRuleContext<Directive_new_line_or_sharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HotIfTimeout() { return GetToken(PreprocessorParser.HotIfTimeout, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MaxThreads() { return GetToken(PreprocessorParser.MaxThreads, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MaxThreadsBuffer() { return GetToken(PreprocessorParser.MaxThreadsBuffer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MaxThreadsPerHotkey() { return GetToken(PreprocessorParser.MaxThreadsPerHotkey, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ClipboardTimeout() { return GetToken(PreprocessorParser.ClipboardTimeout, 0); }
		public PreprocessorNumericDirectiveContext(Preprocessor_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorNumericDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_directiveContext preprocessor_directive() {
		Preprocessor_directiveContext _localctx = new Preprocessor_directiveContext(Context, State);
		EnterRule(_localctx, 0, RULE_preprocessor_directive);
		int _la;
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Define:
				_localctx = new PreprocessorDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6;
				Match(Define);
				State = 7;
				Match(ConditionalSymbol);
				State = 8;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveDefine(); 
				}
				break;
			case Undef:
				_localctx = new PreprocessorDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 11;
				Match(Undef);
				State = 12;
				Match(ConditionalSymbol);
				State = 13;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveUndef(); 
				}
				break;
			case If:
				_localctx = new PreprocessorConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 16;
				Match(If);
				State = 17;
				((PreprocessorConditionalContext)_localctx).expr = preprocessor_expression(0);
				State = 18;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveIf(); 
				}
				break;
			case ElIf:
				_localctx = new PreprocessorConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 21;
				Match(ElIf);
				State = 22;
				((PreprocessorConditionalContext)_localctx).expr = preprocessor_expression(0);
				State = 23;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveElif(); 
				}
				break;
			case Else:
				_localctx = new PreprocessorConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 26;
				Match(Else);
				State = 27;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveElse(); 
				}
				break;
			case EndIf:
				_localctx = new PreprocessorConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 30;
				Match(EndIf);
				State = 31;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveEndif(); 
				}
				break;
			case Line:
				_localctx = new PreprocessorLineContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 34;
				Match(Line);
				State = 41;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Digits:
					{
					State = 35;
					Match(Digits);
					State = 37;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==StringLiteral) {
						{
						State = 36;
						Match(StringLiteral);
						}
					}

					}
					break;
				case Default:
					{
					State = 39;
					Match(Default);
					}
					break;
				case DirectiveHidden:
					{
					State = 40;
					Match(DirectiveHidden);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 43;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveLine(); 
				}
				break;
			case Error:
				_localctx = new PreprocessorDiagnosticContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 46;
				Match(Error);
				State = 47;
				Match(Text);
				State = 48;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveError(); 
				}
				break;
			case Warning:
				_localctx = new PreprocessorDiagnosticContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 51;
				Match(Warning);
				State = 52;
				Match(Text);
				State = 53;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveWarning(); 
				}
				break;
			case Region:
				_localctx = new PreprocessorRegionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 56;
				Match(Region);
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Text) {
					{
					State = 57;
					Match(Text);
					}
				}

				State = 60;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveRegion(); 
				}
				break;
			case EndRegion:
				_localctx = new PreprocessorRegionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 63;
				Match(EndRegion);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Text) {
					{
					State = 64;
					Match(Text);
					}
				}

				State = 67;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveEndregion(); 
				}
				break;
			case Pragma:
				_localctx = new PreprocessorPragmaContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 70;
				Match(Pragma);
				State = 71;
				Match(Text);
				State = 72;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectivePragma(); 
				}
				break;
			case Nullable:
				_localctx = new PreprocessorNullableContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 75;
				Match(Nullable);
				State = 76;
				Match(Text);
				State = 77;
				directive_new_line_or_sharp();
				 this.OnPreprocessorDirectiveNullable(); 
				}
				break;
			case Include:
			case IncludeAgain:
			case DllLoad:
			case Requires:
			case SingleInstance:
			case Assembly:
				_localctx = new PreprocessorTextualDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 80;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 16415L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 81;
				Match(Text);
				State = 82;
				directive_new_line_or_sharp();
				}
				break;
			case Persistent:
				_localctx = new PreprocessorPersistentContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 83;
				Match(Persistent);
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==True || _la==False || _la==Digits) {
					{
					State = 84;
					_la = TokenStream.LA(1);
					if ( !(_la==True || _la==False || _la==Digits) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 87;
				directive_new_line_or_sharp();
				}
				break;
			case Warn:
				_localctx = new PreprocessorWarnContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 88;
				Match(Warn);
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Text) {
					{
					State = 89;
					Match(Text);
					}
				}

				State = 92;
				directive_new_line_or_sharp();
				}
				break;
			case NoDynamicVars:
				_localctx = new PreprocessorNoDynamicVarsContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 93;
				Match(NoDynamicVars);
				State = 94;
				directive_new_line_or_sharp();
				}
				break;
			case ErrorStdOut:
				_localctx = new PreprocessorErrorStdOutContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 95;
				Match(ErrorStdOut);
				State = 96;
				directive_new_line_or_sharp();
				}
				break;
			case ClipboardTimeout:
			case HotIfTimeout:
			case MaxThreads:
			case MaxThreadsBuffer:
			case MaxThreadsPerHotkey:
				_localctx = new PreprocessorNumericDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 97;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & 31L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 98;
				Match(Digits);
				State = 99;
				directive_new_line_or_sharp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Directive_new_line_or_sharpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveNewline() { return GetToken(PreprocessorParser.DirectiveNewline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PreprocessorParser.Eof, 0); }
		public Directive_new_line_or_sharpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive_new_line_or_sharp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective_new_line_or_sharp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Directive_new_line_or_sharpContext directive_new_line_or_sharp() {
		Directive_new_line_or_sharpContext _localctx = new Directive_new_line_or_sharpContext(Context, State);
		EnterRule(_localctx, 2, RULE_directive_new_line_or_sharp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==DirectiveNewline) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Preprocessor_expressionContext : ParserRuleContext {
		public String value;
		public Preprocessor_expressionContext expr1;
		public Preprocessor_expressionContext expr;
		public Preprocessor_expressionContext expr2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(PreprocessorParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(PreprocessorParser.False, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Digits() { return GetToken(PreprocessorParser.Digits, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConditionalSymbol() { return GetToken(PreprocessorParser.ConditionalSymbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(PreprocessorParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(PreprocessorParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext[] preprocessor_expression() {
			return GetRuleContexts<Preprocessor_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression(int i) {
			return GetRuleContext<Preprocessor_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(PreprocessorParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(PreprocessorParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(PreprocessorParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(PreprocessorParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(PreprocessorParser.Or, 0); }
		public Preprocessor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorParserVisitor<TResult> typedVisitor = visitor as IPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_expressionContext preprocessor_expression() {
		return preprocessor_expression(0);
	}

	private Preprocessor_expressionContext preprocessor_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Preprocessor_expressionContext _localctx = new Preprocessor_expressionContext(Context, _parentState);
		Preprocessor_expressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_preprocessor_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
				{
				State = 105;
				Match(True);
				 this.OnPreprocessorExpressionTrue(); 
				}
				break;
			case False:
				{
				State = 107;
				Match(False);
				 this.OnPreprocessorExpressionFalse(); 
				}
				break;
			case Digits:
				{
				State = 109;
				Match(Digits);
				 this.OnPreprocessorExpressionDigits(); 
				}
				break;
			case ConditionalSymbol:
				{
				State = 111;
				Match(ConditionalSymbol);
				 this.OnPreprocessorExpressionConditionalSymbol(); 
				}
				break;
			case OpenParen:
				{
				State = 113;
				Match(OpenParen);
				State = 114;
				_localctx.expr = preprocessor_expression(0);
				State = 115;
				Match(CloseParen);
				 this.OnPreprocessorExpressionConditionalOpenParens(); 
				}
				break;
			case Not:
				{
				State = 118;
				Match(Not);
				State = 119;
				_localctx.expr = preprocessor_expression(5);
				 this.OnPreprocessorExpressionConditionalNot(); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 146;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 144;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new Preprocessor_expressionContext(_parentctx, _parentState);
						_localctx.expr1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessor_expression);
						State = 124;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 125;
						Match(IdentityEquals);
						State = 126;
						_localctx.expr2 = preprocessor_expression(5);
						 this.OnPreprocessorExpressionConditionalEq(); 
						}
						break;
					case 2:
						{
						_localctx = new Preprocessor_expressionContext(_parentctx, _parentState);
						_localctx.expr1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessor_expression);
						State = 129;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 130;
						Match(NotEquals);
						State = 131;
						_localctx.expr2 = preprocessor_expression(4);
						 this.OnPreprocessorExpressionConditionalNe(); 
						}
						break;
					case 3:
						{
						_localctx = new Preprocessor_expressionContext(_parentctx, _parentState);
						_localctx.expr1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessor_expression);
						State = 134;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 135;
						Match(And);
						State = 136;
						_localctx.expr2 = preprocessor_expression(3);
						 this.OnPreprocessorExpressionConditionalAnd(); 
						}
						break;
					case 4:
						{
						_localctx = new Preprocessor_expressionContext(_parentctx, _parentState);
						_localctx.expr1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessor_expression);
						State = 139;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 140;
						Match(Or);
						State = 141;
						_localctx.expr2 = preprocessor_expression(2);
						 this.OnPreprocessorExpressionConditionalOr(); 
						}
						break;
					}
					} 
				}
				State = 148;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return preprocessor_expression_sempred((Preprocessor_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool preprocessor_expression_sempred(Preprocessor_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,178,150,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,3,0,38,8,0,1,0,1,0,3,0,42,8,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,59,8,0,1,0,1,0,1,0,1,0,1,0,
		3,0,66,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,3,0,86,8,0,1,0,1,0,1,0,3,0,91,8,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,3,0,101,8,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,123,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,145,8,2,10,2,12,
		2,148,9,2,1,2,0,1,4,3,0,2,4,0,4,2,0,159,163,173,173,2,0,70,71,147,147,
		1,0,168,172,1,1,177,177,180,0,100,1,0,0,0,2,102,1,0,0,0,4,122,1,0,0,0,
		6,7,5,148,0,0,7,8,5,175,0,0,8,9,3,2,1,0,9,10,6,0,-1,0,10,101,1,0,0,0,11,
		12,5,149,0,0,12,13,5,175,0,0,13,14,3,2,1,0,14,15,6,0,-1,0,15,101,1,0,0,
		0,16,17,5,101,0,0,17,18,3,4,2,0,18,19,3,2,1,0,19,20,6,0,-1,0,20,101,1,
		0,0,0,21,22,5,150,0,0,22,23,3,4,2,0,23,24,3,2,1,0,24,25,6,0,-1,0,25,101,
		1,0,0,0,26,27,5,87,0,0,27,28,3,2,1,0,28,29,6,0,-1,0,29,101,1,0,0,0,30,
		31,5,151,0,0,31,32,3,2,1,0,32,33,6,0,-1,0,33,101,1,0,0,0,34,41,5,152,0,
		0,35,37,5,147,0,0,36,38,5,135,0,0,37,36,1,0,0,0,37,38,1,0,0,0,38,42,1,
		0,0,0,39,42,5,86,0,0,40,42,5,174,0,0,41,35,1,0,0,0,41,39,1,0,0,0,41,40,
		1,0,0,0,42,43,1,0,0,0,43,44,3,2,1,0,44,45,6,0,-1,0,45,101,1,0,0,0,46,47,
		5,153,0,0,47,48,5,178,0,0,48,49,3,2,1,0,49,50,6,0,-1,0,50,101,1,0,0,0,
		51,52,5,154,0,0,52,53,5,178,0,0,53,54,3,2,1,0,54,55,6,0,-1,0,55,101,1,
		0,0,0,56,58,5,155,0,0,57,59,5,178,0,0,58,57,1,0,0,0,58,59,1,0,0,0,59,60,
		1,0,0,0,60,61,3,2,1,0,61,62,6,0,-1,0,62,101,1,0,0,0,63,65,5,156,0,0,64,
		66,5,178,0,0,65,64,1,0,0,0,65,66,1,0,0,0,66,67,1,0,0,0,67,68,3,2,1,0,68,
		69,6,0,-1,0,69,101,1,0,0,0,70,71,5,157,0,0,71,72,5,178,0,0,72,73,3,2,1,
		0,73,74,6,0,-1,0,74,101,1,0,0,0,75,76,5,158,0,0,76,77,5,178,0,0,77,78,
		3,2,1,0,78,79,6,0,-1,0,79,101,1,0,0,0,80,81,7,0,0,0,81,82,5,178,0,0,82,
		101,3,2,1,0,83,85,5,164,0,0,84,86,7,1,0,0,85,84,1,0,0,0,85,86,1,0,0,0,
		86,87,1,0,0,0,87,101,3,2,1,0,88,90,5,165,0,0,89,91,5,178,0,0,90,89,1,0,
		0,0,90,91,1,0,0,0,91,92,1,0,0,0,92,101,3,2,1,0,93,94,5,166,0,0,94,101,
		3,2,1,0,95,96,5,167,0,0,96,101,3,2,1,0,97,98,7,2,0,0,98,99,5,147,0,0,99,
		101,3,2,1,0,100,6,1,0,0,0,100,11,1,0,0,0,100,16,1,0,0,0,100,21,1,0,0,0,
		100,26,1,0,0,0,100,30,1,0,0,0,100,34,1,0,0,0,100,46,1,0,0,0,100,51,1,0,
		0,0,100,56,1,0,0,0,100,63,1,0,0,0,100,70,1,0,0,0,100,75,1,0,0,0,100,80,
		1,0,0,0,100,83,1,0,0,0,100,88,1,0,0,0,100,93,1,0,0,0,100,95,1,0,0,0,100,
		97,1,0,0,0,101,1,1,0,0,0,102,103,7,3,0,0,103,3,1,0,0,0,104,105,6,2,-1,
		0,105,106,5,70,0,0,106,123,6,2,-1,0,107,108,5,71,0,0,108,123,6,2,-1,0,
		109,110,5,147,0,0,110,123,6,2,-1,0,111,112,5,175,0,0,112,123,6,2,-1,0,
		113,114,5,9,0,0,114,115,3,4,2,0,115,116,5,10,0,0,116,117,6,2,-1,0,117,
		123,1,0,0,0,118,119,5,27,0,0,119,120,3,4,2,5,120,121,6,2,-1,0,121,123,
		1,0,0,0,122,104,1,0,0,0,122,107,1,0,0,0,122,109,1,0,0,0,122,111,1,0,0,
		0,122,113,1,0,0,0,122,118,1,0,0,0,123,146,1,0,0,0,124,125,10,4,0,0,125,
		126,5,44,0,0,126,127,3,4,2,5,127,128,6,2,-1,0,128,145,1,0,0,0,129,130,
		10,3,0,0,130,131,5,43,0,0,131,132,3,4,2,4,132,133,6,2,-1,0,133,145,1,0,
		0,0,134,135,10,2,0,0,135,136,5,50,0,0,136,137,3,4,2,3,137,138,6,2,-1,0,
		138,145,1,0,0,0,139,140,10,1,0,0,140,141,5,51,0,0,141,142,3,4,2,2,142,
		143,6,2,-1,0,143,145,1,0,0,0,144,124,1,0,0,0,144,129,1,0,0,0,144,134,1,
		0,0,0,144,139,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,
		147,5,1,0,0,0,148,146,1,0,0,0,10,37,41,58,65,85,90,100,122,144,146
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
