The original had some very severe flaws. It followed an early style of C# programming that would unnecessarily allocate many objects when they could instead just be reused.

Code changes:
	-Constructed a DOM from parsing the ahk script, then compiled that DOM and some custom IL code into an executable. Now, we convert the DOM into C# code, and then compile that. This is less error prone, and also gets rid of certain bugs.

Code obsolescence/deprecation:
	-No boilerplate registry code, C# handles it.
	-No need for the pcre regular expression library, C# handles it.
	-No conversions between char, CHAR_T, TCHAR, WCHAR, wchar_t, CStringA, CStringW, LPCSTR, LPCWSTR. C# uses unicode and all conversion routines are built in.
	-No need for custom copy-on-write string, KuString.
	-Stream/text file readers and writers in TextIO.h/cpp are no longer needed. C# handles internally.
	-SimpleHeap and the low level memory management code is no longer needed because C# is a garbage collected language. In extreme cases, ArrayPool can be used.
	-Vastly simplified code generation from IronAHK. Keysharp does ahk -> dom -> c# code -> compiler -> run. No custom IL is generated, and only slight manual traversing of the DOM is performed.
	-Rather than make every publicly available static function for scripting be a part of a massive class named Core, split them into many public static classes with public static methods.
	-No custom rand code for mt19937, C# already has this.
	-No need for qmath.h, C# already has its own math functions that are likely faster.
	-The files needed to run a standalone compiled executable (named test) are:
		-text.exe
		-test.dll
		-test.runtimeconfig.json
		-Keysharp.Core.dll
		
TODO/ENSURE THESE WORK:
	
	Go through change log in help file and see how much needs to be implemented in Keysharp.
	Include a command line switch to list all available pre-defined public functions which can be called from within a script.
	Ensure this works: https://lifehacker.com/use-autohotkey-to-scroll-the-command-prompt-backwards-b-5626708
	Perhaps look into including a long integer/extended precision library.
	What to do about references to specific locations named AutoHotkey, such as the library paths? Should we:
		-Keep that with no change.
		-No longer support it.
		-Support that, but also "Keysharp" in its place?
	Custom iterator objects won't be implemented.
	a way to test if you've implemented all functions: https://lexikos.github.io/v2/docs/commands/index.htm
	ensure you've properly captured all of these changes between 1.1 to 2.0: https://lexikos.github.io/v2/docs/v2-changes.htm
	See how much some of the existing plugins work with Keysharp: https://lexikos.github.io/v2/docs/commands/Edit.htm
	I'm not sure if we talked about this before but I just had a conversation in 
	meta about AltTab hotkeys and I just wanted to say: if you ever get around to them â€“ just leave them out. They serve next to no purpose, are very hackily implemented in AHK, they need a ton of edge-cases and weirdness, and they are just overall a mess. So yeah, just a heads-up I guess.
	If you want to read up on why I said this: https://discord.com/channels/115993023636176902/546213647526133760/888810883675983902

	tanks says:  also please msg me when you post code i very do mch want to feature it and offer direct hosting for downloads. we all accept that initial versions arent ready for primetime. but the more exposure the better.

	Here is an example of something not working because we haven't implemented threads properly.
	#MaxThreadsPerHotkey 3
	#z::  ; Win+Z hotkey (change this hotkey to suit your preferences).
	{
		static KeepWinZRunning := false
		if KeepWinZRunning  ; This means an underlying thread is already running the loop below.
		{
			KeepWinZRunning := false  ; Signal that thread's loop to stop.
			return  ; End this thread so that the one underneath will resume and see the change made by the line above.
		}
		; Otherwise:
		KeepWinZRunning := true
		Loop
		{
			; The next four lines are the action you want to repeat (update them to suit your preferences):
			ToolTip("Press Win-Z again to stop this from flashing.")
			Sleep(1000)
			ToolTip()
			Sleep(1000)
			; But leave the rest below unchanged.
			if(not KeepWinZRunning)  ; The user signaled the loop to stop by pressing Win-Z again.
				break  ; Break out of this loop.
		}
		KeepWinZRunning := false  ; Reset in preparation for the next press of this hotkey.
	}
	#MaxThreadsPerHotkey 1


	Give attribution to:
		Need to include this https://opensource.org/licenses/cddl1.php for the logical string comparison code: https://www.codeproject.com/Articles/22175/Sorting-Strings-for-Humans-with-IComparer
		Ini utility, attribution: https://www.codeproject.com/articles/20053/a-complete-win-ini-file-utility-class
		pinvoke.net (and make a donation)
		Tuple splatter extension methods, attribution: https://github.com/iotalambda/TupleSplatter/tree/master/TupleSplatter
		Rich text box with line numbers in Keyview: https://www.codeproject.com/Articles/38858/Line-Numbers-for-RichText-Control-in-C
		Semver: https://github.com/maxhauser/semver
		PictureBox derivation: https://www.codeproject.com/articles/717312/pixelbox-a-picturebox-with-configurable-interpolat
		Using SendMessage() with string: https://gist.github.com/BoyCook/5075907
		The program icon is a derivative of work by Bamicon: https://thenounproject.com/bamicon/ https://thenounproject.com/icon/mechanical-keyboard-switch-2987081/ Creative Commons 
		Microsoft PowerShell code used for COM: https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/COM/
		NAudio: https://github.com/naudio/NAudio
		
	Make sure all of these new V2 features work: https://lexikos.github.io/v2/docs/v2-changes.htm
	You could possibly make Any and KeysharpObject be interfaces, that way objects which already have a System base class, like Exception, could also be considered KeysharpObject. However, this probably wont' work because you do need a data member for the ownprops.
	
	There are four areas/types of versions being dealt with.
		1) The version of keysharp that is compiling the script.
		2) The embedded version of the script as specified by the #ASSEMBLY* directives.
		3) The version of keysharp that is running the script. Is the same as #1 when compiling.
		4) The version of keysharp the script was compiled with, to be checked when it's running.

	The command line you were using for Keysharp.OutputTest is: /force /restart /ErrorStdOut /Debug /include "IncFile.ahk"
	
	msgbox Hello World
	GoTo, Label2
	label1:
	msgbox Label1
	GoTo, LabExit
	Label2:
	msgbox Label2
	GoTo, Label1
	LabExit:
	msgbox Exitting now
	ExitApp
	
	You need to ensure hotkeys can pre-empt each other like this:
	Short example, not particularly useful but may be handy in testing:

		a::
		b::
		ToolTip, % A_ThisHotkey " is being held down."
		KeyWait, % A_ThisHotkey
		ToolTip

		if you hold down a and b it will show two tooltips
		and releasing each one individually will remove that tooltip

		v2 syntax would be this, in case it's more useful:

		a::
		b::
		toolTip(A_ThisHotkey " is being pressed")
		keyWait(A_ThisHotkey)
		toolTip()
		return

	Another example, which actually has a use is modifying the buttons in a MsgBox:
		(v2)

		fancyMsgBox(text, button1 := "", button2 := "", button3 := "") {
		  SetTimer applyButtonNames, -1
		  MsgBox text, "Fancy MsgBox", 0x3

		  applyButtonNames() {
			winWait "Fancy MsgBox"
			if button1
			  controlSetText button1, "Button1"
			if button2
			  controlSetText button2, "Button2"
			if button3
			  controlSetText button3, "Button3"
		  }
		}


			catch (KeysharpException kex)
			{
				MsgBox("Keysharp exception thrown:\r\n" +
					   "Message: " + kex.error.Message + "\r\n" +
					   "What: " + kex.error.What + "\r\n" +
					   "Extra: " + kex.error.Extra + "\r\n" +
					   "File: " + kex.error.File + "\r\n" +
					   "Line: " + kex.error.Line + "\r\n" +
					   "Stack: " + kex.error.Stack);
				Exit(1);
				return 1;
			}
			
			
	a function to make a console:
	#Persistent
Print(obj, quote:=False, end:="`n")
{
    static _ := DllCall("AllocConsole"), cout := FileOpen("CONOUT$", "w")
    , escapes := [["``", "``" "``"], ["""", """"""], ["`b", "``b"]
    , ["`f", "``f"], ["`r", "``r"], ["`n", "``n"], ["`t", "``t"]]
    if IsObject(obj) {
        for k in obj
            is_array := k == A_Index
        until !is_array
        cout.Write(is_array ? "[" : "{")
        for k, v in obj {
            cout.Write(A_Index > 1 ? ", " : "")
            is_array ? _ : Print(k, 1, "") cout.Write(": ")
            Print(v, 1, "")
        } return cout.Write(( is_array ? "]" : "}") end), end ? cout.__Handle : _
    } if (!quote || ObjGetCapacity([obj], 1) == "")
        return cout.Write(obj . end), end ? cout.__Handle : _
    for k, v in escapes
        obj := StrReplace(obj, v[1], v[2])
    while RegExMatch(obj, "O)[^\x20-\x7e]", m)
        obj := StrReplace(obj, m[0], Format(""" Chr({:04d}) """, Ord(m[0])))
    return cout.Write("""" obj """" . end), end ? cout.__Handle : _
}

			
			
	also, keep in mind, i'm going to have to spend significant time working on the design such that it builds on every OS, and doesn't blow up when someone tries to call a function that does not apply to the OS they're on
for example, let's say you try calling a registry-related function on linux. what should happen? should the script fail to compile? should it compile, but just have those functions do nothing? should it compile, run, and then have those functions throw an exception to end the program? many choices will have to be made, and i'm nowhere near that yet.
i'll also need substantial help testing. despite writing unit tests for each piece of functionality, i'm sure i will miss many of the corner cases. so i'll need a team of testers in close coordination and rapid communication to start testing their old scripts on multiple OSes and give me feedback on what isn't working. it will be a big effort.

INFO/FURTHER RESEARCH/OTHER PROJECTS:
	A version/fork of AHK called AHK_H which uses some threading, but not entirely: https://github.com/thqby/AutoHotkey_H
	This is just a thought for a future feature, perhaps pending extensive COM support. I've used code like this below to create Word instances in node-red using edge-js. IMHO support for at least MS Office apps would be a huge plus:
		Activator.CreateInstance(Type.GetTypeFromProgID("Word.Application")
	Be sure to keep in touch and coordinate with Tab Nation at https://www.youtube.com/c/TABNationAutoHotkey/videos and tadamm88@gmail.com
	Good writeup on scan codes and fake shift: https://www.win.tue.nl/~aeb/linux/kbd/scancodes-1.html
	Might be usable: https://github.com/Paris/AutoHotkey-Scripts/blob/master/Functions.ahk and https://github.com/Paris/AutoHotkey-Scripts
	See here for more community: https://www.reddit.com/r/AutoHotkey
	Make sure DPI scaling works: https://stackoverflow.com/questions/22735174/how-to-write-winforms-code-that-auto-scales-to-system-font-and-dpi-settings
	Look at https://espanso.org/ a cross platform text expander written in rust.
	https://github.com/mooz/xkeysnail
	https://github.com/rbreaves/kinto 
	http://daviddeley.com/autohotkey/xprxmp/autohotkey_expression_examples.htm
	https://github.com/Run1e/autohotkey-oofs
	https://stackoverflow.com/questions/27977924/in-windows-10-how-can-we-determine-which-virtual-desktop-a-window-belongs-to/32527200#32527200
	shutdown command on linux: https://stackoverflow.com/questions/11803283/shutdown-linux-using-c-sharp-and-mono/11803470#11803470
	 http://msdn.microsoft.com/en-us/library/aa376874%28v=vs.85%29.aspx
	 https://codegolf.stackexchange.com/questions/107874/shut-down-the-computer
	https://www.autohotkey.com/boards/viewtopic.php?f=37&t=29689
	https://www.alfredapp.com/
	https://forum.keyboardmaestro.com/
	https://autohotkey.com/board/topic/50354-ironahk-alpha-cross-platform-net-rewrite-of-autohotkey/
	https://web.archive.org/web/20111026064713/http://www.ironahk.net/
	https://www.autohotkey.com/boards/viewtopic.php?f=17&t=30931
	https://www.autohotkey.com/boards/viewtopic.php?f=14&t=83012&p=363324#p363324
	Test regex with https://regex101.com/
	Script showcase: https://lexikos.github.io/v2/docs/scripts/
	Alternative ImageSearch: https://www.autohotkey.com/boards/viewtopic.php?p=86799#p86799
	GUI designer for AHK: https://www.autohotkey.com/board/topic/738-smartgui-creator/
	Text expander libraries that might show better ways to do hotstring parsing:
		https://github.com/natebean/SimpleTextExpander/tree/master/SimpleTextExpander
		https://beeftext.org/
		https://github.com/giosali/hypoinput
	More efficient hotstring matching from Mr. Doge in Discord: https://github.com/FuPeiJiang/Keysharp_hotstring.ah2
	Possible COM wrapper: https://www.codeproject.com/Articles/10888/SafeCOMWrapper-Managed-Disposable-Strongly-Typed-s
	When the time comes for adding web functionality: https://docs.microsoft.com/en-us/microsoft-edge/webview2/get-started/winforms
	DataGridView:
		https://github.com/topics/datagridview?l=c%23
		https://github.com/BekoSan/ProductivityFunctions
	A project that tried to use IronAHK to do automation in node.js: https://github.com/1j01/node-ahk
	RobotJS: an automation project in JS: https://github.com/octalmage/robotjs
	Messages in cosole apps: https://docs.microsoft.com/en-us/archive/msdn-magazine/2007/june/net-matters-handling-messages-in-console-apps
	There is something called TVX, check it out sometime at www.autohotkey.com/forum/topic19021.html
	Middle click scroll script for Notepad++: https://www.autohotkey.com/boards/viewtopic.php?p=34722&sid=9b2b27116d94f0552a149430d9ab623f#p34722
	Another automation library: https://github.com/qgindi/LibreAutomate
	An assembler in AHK: https://github.com/CloakerSmoker/Relax-Language/blob/master/src/
	Code demonstrating dynamic properties (already implemented): https://p.ahkscript.org/?p=0bce480c
	A lexer for AHK: https://github.com/tinku99/ahklexers
	AutoIt interpreter in C#: https://github.com/Unknown6656/AutoIt-Interpreter
	Scintilla editor for .NET: https://github.com/desjarlais/Scintilla.NET
	CLR support in AHK:
		https://github.com/Lexikos/CLR.ahk
		https://www.autohotkey.com/boards/viewtopic.php?f=83&t=113543&p=505906&hilit=clr_loadlibrary#p505906
		
		
	I am not sure what you mean by print. Do you mean something to write to the console? So in C++, it's printf() or cout, and in C# it's Console.WriteLine(). Something like that? I didn't know that AHK didn't have that. Are you sure? If it doesn't, then yes, we can add it in Keysharp. 
		
		In AHK, you can write to stdout using FileAppend by specifying * for the file name. 

			Thanks for reply. But, FileAppend just wirte to stdio not the console. DllCall("AllocConsole") is needed for wirting console. And AllocConsole will always display message in a new console
			
	Another code expander:
		https://github.com/giosali/reginald.
	Possibly investigate this later to see if it can be better than what we're doing with Windows API calls: https://mwinapi.sourceforge.net/
		-If not better, then at least see if it provides good examples.
	Possible COM library for MS Office. See how hard doing it from scratch is vs. this vs. copying some of its code:
		https://netoffice.io/
	For the linux work, SOTE on the forums said: phil294 (@phil294) whenever ready, who has an AHK Classic to Linux project on GitHub, and stated he would like to help in regards to Linux.
	https://www.codeproject.com/script/Content/ViewAssociatedFile.aspx?rzp=/KB/system/CSLLKeyboard//csllkeyboard_demo.zip&zep=BabyKeyboardBash/Keyboard.cs&obid=14485&obtid=2&ovid=1
	A general mouse and keyboard simulator: https://www.codeproject.com/Articles/28064/Global-Mouse-and-Keyboard-Library
	Another COM	solution which Burque has gotten to mostly work:
	https://www.codeproject.com/Articles/523417/Reflection-with-IDispatch-based-COM-objects
	How Powershell implements it: https://github.com/PowerShell/PowerShell/tree/master/src/System.Management.Automation/engine/COM
		https://github.com/PowerShell/PowerShell/tree/master/src/System.Management.Automation/engine/ComInterop
		https://www.codeproject.com/Articles/10838/How-To-Get-Properties-and-Methods-in-Late-Binding
		https://www.codeproject.com/Articles/990/Understanding-Classic-COM-Interoperability-With-NE
			Testing COM:
				https://github.com/G33kDude/Chrome.ahk/blob/master/Chrome.ahk
				https://github.com/Xeo786/Rufaydium-Webdriver/blob/main/Rufaydium.ahk
		Differences:
			Using a custom enumerator returned from `_NewEnum()` called on the results of WMI `ExecQuery()` is not supported.
				Just iterate over the results returned by `ExecQuery()`.
				
	An apparently cross platform desktop automation library: https://github.com/lucassklp/Desktop.Robot
	An event hook example library: https://github.com/Hema2-official/accprez/tree/main/Accprez
	Maybe do reference variables just for static function calls:
		-Might be possible: https://stackoverflow.com/questions/8779731/how-to-pass-a-parameter-as-a-reference-with-methodinfo-invoke
	A program called Voice Macro for automation.
	
Linux ideas/research:
	In order to send events to another control, such as a button click, the protocol ias at-spi, which is also used for screen readers. You'd need to port this to C#:
		https://github.com/phil294/AHK_X11/blob/master/src/run/display/at-spi.cr
			See if you can use this to listen to keystrokes globally.
		https://github.com/phil294/AHK_X11/blob/evdev-wayland/src/run/display/evdev.cr
		Can possibly reuse some of his code.
	Wayland:
		Can't move mouse to absolute coordinates, only relative.
		Can't do pixel search.
		You'll need to run as admin/root or input.
		AHK X11 build that works somewhat with Wayland:
			https://github.com/phil294/AHK_X11/releases/tag/0.5.99-next
			https://github.com/phil294/AHK_X11/tree/evdev-wayland#wayland-evdev
			https://github.com/phil294/AHK_X11/blob/master/src/build/parser.cr#L50
		https://python-evdev.readthedocs.io/en/latest/tutorial.html
		Start with evdev and ignore X.
		To swallow events the way AHK does, you need to listen to the devices and either swallow events or allow them to pass through. If you pass through, you need to reinsert it into the device.
	Old automation libraries that worked on X, but no longer do on Wayland:
		Autokey and x duo tool.
	Linux has a system wide hotkey reigstry which can usually be found in some settings gui.
	
	
	
Closed development links to revisit:
	https://docs.microsoft.com/en-us/dotnet/framework/tools/signtool-exe?redirectedfrom=MSDN
	https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.csharp.csharpcompilationoptions?view=roslyn-dotnet
	https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.keyboard.modifiers?view=netcore-3.1
	https://docs.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props
	https://stackoverflow.com/questions/604410/global-keyboard-capture-in-c-sharp-application
	https://stackoverflow.com/questions/44205260/net-core-copy-to-clipboard
	https://stackoverflow.com/questions/6929275/how-to-convert-a-virtual-key-code-to-a-character-according-to-the-current-keyboa
	https://www.codeguru.com/vb/gen/article.php/c19573/Microsoft-NET-CodeDom-Technology.htm
	https://begeeben.wordpress.com/2012/07/30/source-code-generation-example-using-codedom/
	https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/how-to-create-a-class-using-codedom
	https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/using-the-codedom
	https://www.codeproject.com/articles/18676/dynamic-code-generation-using-codedom
	https://www.codeproject.com/articles/490184/creating-a-codedom-modeling-the-semantics-of-code
	https://www.codeproject.com/tips/715891/compiling-csharp-code-at-runtime
	https://www.automatetheplanet.com/optimize-csharp-reflection-using-delegates/
	https://www.youtube.com/watch?v=EgwnFhptwxI
	https://www.autohotkey.com/boards/viewtopic.php?f=83&t=74028&p=521376

///////Code storage

//////////////////////////////

github post on creating standalone exe:
https://github.com/dotnet/roslyn/issues/57347

Gist of how to create a .NET executable with Roslyn that will run on its own. Create the DLL, then make the exe point to it: https://gist.github.com/svick/7c29e29a9db532af0c619e6f3e32e814
(might be possible to just use msbuild)

var compilation = CSharpCompilation.Create(null)
    .AddSyntaxTrees(SyntaxFactory.ParseSyntaxTree(@"System.Console.WriteLine(""Hello, World!"");"))
    .AddReferences(Directory.EnumerateFiles(@"C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\5.0.0\ref\net5.0", "*.dll")
        .Select(f => MetadataReference.CreateFromFile(f)));
    
var result = compilation.Emit(@"C:\code\tmp\HelloWorld\HelloWorld.dll");

foreach (var diagnostic in result.Diagnostics)
{
    Console.WriteLine(diagnostic);
}

HostWriter.CreateAppHost(
    appHostSourceFilePath: @"C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Host.win-x64\5.0.11\runtimes\win-x64\native\apphost.exe",
    appHostDestinationFilePath: @"C:\code\tmp\HelloWorld\HelloWorld.exe",
    appBinaryFilePath: @"C:\code\tmp\HelloWorld\HelloWorld.dll");
	
	
Here is how to get the app host path programatically:
using System.Xml;
using Microsoft.Build.Evaluation;
using Microsoft.Build.Locator;

// Note: code using MSBuild has to be in another method than the call to MSBuildLocator
MSBuildLocator.RegisterDefaults();

string GetAppHostPath()
{
  var xml = @"
<Project Sdk=""Microsoft.NET.Sdk"">
    <PropertyGroup>
      <OutputType>Exe</OutputType>
      <TargetFramework>net5.0</TargetFramework>
    </PropertyGroup>
</Project>";

  var project = Project.FromXmlReader(XmlReader.Create(new StringReader(xml)), options: new()).CreateProjectInstance();

  project.Build("ProcessFrameworkReferences", loggers: null);

  return project.GetItems("AppHostPack").Single().GetMetadata("Path").EvaluatedValue;
}

Console.WriteLine(GetAppHostPath());
